// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { AccessibilityDeclarationsCreateInstanceData, AccessibilityDeclarationsCreateInstanceErrors, AccessibilityDeclarationsCreateInstanceResponses, AccessibilityDeclarationsDeleteInstanceData, AccessibilityDeclarationsDeleteInstanceErrors, AccessibilityDeclarationsDeleteInstanceResponses, AccessibilityDeclarationsGetInstanceData, AccessibilityDeclarationsGetInstanceErrors, AccessibilityDeclarationsGetInstanceResponses, AccessibilityDeclarationsUpdateInstanceData, AccessibilityDeclarationsUpdateInstanceErrors, AccessibilityDeclarationsUpdateInstanceResponses, ActorsGetCollectionData, ActorsGetCollectionErrors, ActorsGetCollectionResponses, ActorsGetInstanceData, ActorsGetInstanceErrors, ActorsGetInstanceResponses, AgeRatingDeclarationsUpdateInstanceData, AgeRatingDeclarationsUpdateInstanceErrors, AgeRatingDeclarationsUpdateInstanceResponses, AlternativeDistributionDomainsCreateInstanceData, AlternativeDistributionDomainsCreateInstanceErrors, AlternativeDistributionDomainsCreateInstanceResponses, AlternativeDistributionDomainsDeleteInstanceData, AlternativeDistributionDomainsDeleteInstanceErrors, AlternativeDistributionDomainsDeleteInstanceResponses, AlternativeDistributionDomainsGetCollectionData, AlternativeDistributionDomainsGetCollectionErrors, AlternativeDistributionDomainsGetCollectionResponses, AlternativeDistributionDomainsGetInstanceData, AlternativeDistributionDomainsGetInstanceErrors, AlternativeDistributionDomainsGetInstanceResponses, AlternativeDistributionKeysCreateInstanceData, AlternativeDistributionKeysCreateInstanceErrors, AlternativeDistributionKeysCreateInstanceResponses, AlternativeDistributionKeysDeleteInstanceData, AlternativeDistributionKeysDeleteInstanceErrors, AlternativeDistributionKeysDeleteInstanceResponses, AlternativeDistributionKeysGetCollectionData, AlternativeDistributionKeysGetCollectionErrors, AlternativeDistributionKeysGetCollectionResponses, AlternativeDistributionKeysGetInstanceData, AlternativeDistributionKeysGetInstanceErrors, AlternativeDistributionKeysGetInstanceResponses, AlternativeDistributionPackageDeltasGetInstanceData, AlternativeDistributionPackageDeltasGetInstanceErrors, AlternativeDistributionPackageDeltasGetInstanceResponses, AlternativeDistributionPackagesCreateInstanceData, AlternativeDistributionPackagesCreateInstanceErrors, AlternativeDistributionPackagesCreateInstanceResponses, AlternativeDistributionPackagesGetInstanceData, AlternativeDistributionPackagesGetInstanceErrors, AlternativeDistributionPackagesGetInstanceResponses, AlternativeDistributionPackagesVersionsGetToManyRelatedData, AlternativeDistributionPackagesVersionsGetToManyRelatedErrors, AlternativeDistributionPackagesVersionsGetToManyRelatedResponses, AlternativeDistributionPackagesVersionsGetToManyRelationshipData, AlternativeDistributionPackagesVersionsGetToManyRelationshipErrors, AlternativeDistributionPackagesVersionsGetToManyRelationshipResponses, AlternativeDistributionPackageVariantsGetInstanceData, AlternativeDistributionPackageVariantsGetInstanceErrors, AlternativeDistributionPackageVariantsGetInstanceResponses, AlternativeDistributionPackageVersionsDeltasGetToManyRelatedData, AlternativeDistributionPackageVersionsDeltasGetToManyRelatedErrors, AlternativeDistributionPackageVersionsDeltasGetToManyRelatedResponses, AlternativeDistributionPackageVersionsDeltasGetToManyRelationshipData, AlternativeDistributionPackageVersionsDeltasGetToManyRelationshipErrors, AlternativeDistributionPackageVersionsDeltasGetToManyRelationshipResponses, AlternativeDistributionPackageVersionsGetInstanceData, AlternativeDistributionPackageVersionsGetInstanceErrors, AlternativeDistributionPackageVersionsGetInstanceResponses, AlternativeDistributionPackageVersionsVariantsGetToManyRelatedData, AlternativeDistributionPackageVersionsVariantsGetToManyRelatedErrors, AlternativeDistributionPackageVersionsVariantsGetToManyRelatedResponses, AlternativeDistributionPackageVersionsVariantsGetToManyRelationshipData, AlternativeDistributionPackageVersionsVariantsGetToManyRelationshipErrors, AlternativeDistributionPackageVersionsVariantsGetToManyRelationshipResponses, AnalyticsReportInstancesGetInstanceData, AnalyticsReportInstancesGetInstanceErrors, AnalyticsReportInstancesGetInstanceResponses, AnalyticsReportInstancesSegmentsGetToManyRelatedData, AnalyticsReportInstancesSegmentsGetToManyRelatedErrors, AnalyticsReportInstancesSegmentsGetToManyRelatedResponses, AnalyticsReportInstancesSegmentsGetToManyRelationshipData, AnalyticsReportInstancesSegmentsGetToManyRelationshipErrors, AnalyticsReportInstancesSegmentsGetToManyRelationshipResponses, AnalyticsReportRequestsCreateInstanceData, AnalyticsReportRequestsCreateInstanceErrors, AnalyticsReportRequestsCreateInstanceResponses, AnalyticsReportRequestsDeleteInstanceData, AnalyticsReportRequestsDeleteInstanceErrors, AnalyticsReportRequestsDeleteInstanceResponses, AnalyticsReportRequestsGetInstanceData, AnalyticsReportRequestsGetInstanceErrors, AnalyticsReportRequestsGetInstanceResponses, AnalyticsReportRequestsReportsGetToManyRelatedData, AnalyticsReportRequestsReportsGetToManyRelatedErrors, AnalyticsReportRequestsReportsGetToManyRelatedResponses, AnalyticsReportRequestsReportsGetToManyRelationshipData, AnalyticsReportRequestsReportsGetToManyRelationshipErrors, AnalyticsReportRequestsReportsGetToManyRelationshipResponses, AnalyticsReportSegmentsGetInstanceData, AnalyticsReportSegmentsGetInstanceErrors, AnalyticsReportSegmentsGetInstanceResponses, AnalyticsReportsGetInstanceData, AnalyticsReportsGetInstanceErrors, AnalyticsReportsGetInstanceResponses, AnalyticsReportsInstancesGetToManyRelatedData, AnalyticsReportsInstancesGetToManyRelatedErrors, AnalyticsReportsInstancesGetToManyRelatedResponses, AnalyticsReportsInstancesGetToManyRelationshipData, AnalyticsReportsInstancesGetToManyRelationshipErrors, AnalyticsReportsInstancesGetToManyRelationshipResponses, AppAvailabilitiesV2CreateInstanceData, AppAvailabilitiesV2CreateInstanceErrors, AppAvailabilitiesV2CreateInstanceResponses, AppAvailabilitiesV2GetInstanceData, AppAvailabilitiesV2GetInstanceErrors, AppAvailabilitiesV2GetInstanceResponses, AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedData, AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedErrors, AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedResponses, AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelationshipData, AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelationshipErrors, AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelationshipResponses, AppCategoriesGetCollectionData, AppCategoriesGetCollectionErrors, AppCategoriesGetCollectionResponses, AppCategoriesGetInstanceData, AppCategoriesGetInstanceErrors, AppCategoriesGetInstanceResponses, AppCategoriesParentGetToOneRelatedData, AppCategoriesParentGetToOneRelatedErrors, AppCategoriesParentGetToOneRelatedResponses, AppCategoriesParentGetToOneRelationshipData, AppCategoriesParentGetToOneRelationshipErrors, AppCategoriesParentGetToOneRelationshipResponses, AppCategoriesSubcategoriesGetToManyRelatedData, AppCategoriesSubcategoriesGetToManyRelatedErrors, AppCategoriesSubcategoriesGetToManyRelatedResponses, AppCategoriesSubcategoriesGetToManyRelationshipData, AppCategoriesSubcategoriesGetToManyRelationshipErrors, AppCategoriesSubcategoriesGetToManyRelationshipResponses, AppClipAdvancedExperienceImagesCreateInstanceData, AppClipAdvancedExperienceImagesCreateInstanceErrors, AppClipAdvancedExperienceImagesCreateInstanceResponses, AppClipAdvancedExperienceImagesGetInstanceData, AppClipAdvancedExperienceImagesGetInstanceErrors, AppClipAdvancedExperienceImagesGetInstanceResponses, AppClipAdvancedExperienceImagesUpdateInstanceData, AppClipAdvancedExperienceImagesUpdateInstanceErrors, AppClipAdvancedExperienceImagesUpdateInstanceResponses, AppClipAdvancedExperiencesCreateInstanceData, AppClipAdvancedExperiencesCreateInstanceErrors, AppClipAdvancedExperiencesCreateInstanceResponses, AppClipAdvancedExperiencesGetInstanceData, AppClipAdvancedExperiencesGetInstanceErrors, AppClipAdvancedExperiencesGetInstanceResponses, AppClipAdvancedExperiencesUpdateInstanceData, AppClipAdvancedExperiencesUpdateInstanceErrors, AppClipAdvancedExperiencesUpdateInstanceResponses, AppClipAppStoreReviewDetailsCreateInstanceData, AppClipAppStoreReviewDetailsCreateInstanceErrors, AppClipAppStoreReviewDetailsCreateInstanceResponses, AppClipAppStoreReviewDetailsGetInstanceData, AppClipAppStoreReviewDetailsGetInstanceErrors, AppClipAppStoreReviewDetailsGetInstanceResponses, AppClipAppStoreReviewDetailsUpdateInstanceData, AppClipAppStoreReviewDetailsUpdateInstanceErrors, AppClipAppStoreReviewDetailsUpdateInstanceResponses, AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedData, AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedErrors, AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedResponses, AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelationshipData, AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelationshipErrors, AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelationshipResponses, AppClipDefaultExperienceLocalizationsCreateInstanceData, AppClipDefaultExperienceLocalizationsCreateInstanceErrors, AppClipDefaultExperienceLocalizationsCreateInstanceResponses, AppClipDefaultExperienceLocalizationsDeleteInstanceData, AppClipDefaultExperienceLocalizationsDeleteInstanceErrors, AppClipDefaultExperienceLocalizationsDeleteInstanceResponses, AppClipDefaultExperienceLocalizationsGetInstanceData, AppClipDefaultExperienceLocalizationsGetInstanceErrors, AppClipDefaultExperienceLocalizationsGetInstanceResponses, AppClipDefaultExperienceLocalizationsUpdateInstanceData, AppClipDefaultExperienceLocalizationsUpdateInstanceErrors, AppClipDefaultExperienceLocalizationsUpdateInstanceResponses, AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedData, AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedErrors, AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedResponses, AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelationshipData, AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelationshipErrors, AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelationshipResponses, AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedData, AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedErrors, AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedResponses, AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelationshipData, AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelationshipErrors, AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelationshipResponses, AppClipDefaultExperiencesCreateInstanceData, AppClipDefaultExperiencesCreateInstanceErrors, AppClipDefaultExperiencesCreateInstanceResponses, AppClipDefaultExperiencesDeleteInstanceData, AppClipDefaultExperiencesDeleteInstanceErrors, AppClipDefaultExperiencesDeleteInstanceResponses, AppClipDefaultExperiencesGetInstanceData, AppClipDefaultExperiencesGetInstanceErrors, AppClipDefaultExperiencesGetInstanceResponses, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedData, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedErrors, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedResponses, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipData, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipErrors, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipResponses, AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipData, AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipErrors, AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipResponses, AppClipDefaultExperiencesUpdateInstanceData, AppClipDefaultExperiencesUpdateInstanceErrors, AppClipDefaultExperiencesUpdateInstanceResponses, AppClipHeaderImagesCreateInstanceData, AppClipHeaderImagesCreateInstanceErrors, AppClipHeaderImagesCreateInstanceResponses, AppClipHeaderImagesDeleteInstanceData, AppClipHeaderImagesDeleteInstanceErrors, AppClipHeaderImagesDeleteInstanceResponses, AppClipHeaderImagesGetInstanceData, AppClipHeaderImagesGetInstanceErrors, AppClipHeaderImagesGetInstanceResponses, AppClipHeaderImagesUpdateInstanceData, AppClipHeaderImagesUpdateInstanceErrors, AppClipHeaderImagesUpdateInstanceResponses, AppClipsAppClipAdvancedExperiencesGetToManyRelatedData, AppClipsAppClipAdvancedExperiencesGetToManyRelatedErrors, AppClipsAppClipAdvancedExperiencesGetToManyRelatedResponses, AppClipsAppClipAdvancedExperiencesGetToManyRelationshipData, AppClipsAppClipAdvancedExperiencesGetToManyRelationshipErrors, AppClipsAppClipAdvancedExperiencesGetToManyRelationshipResponses, AppClipsAppClipDefaultExperiencesGetToManyRelatedData, AppClipsAppClipDefaultExperiencesGetToManyRelatedErrors, AppClipsAppClipDefaultExperiencesGetToManyRelatedResponses, AppClipsAppClipDefaultExperiencesGetToManyRelationshipData, AppClipsAppClipDefaultExperiencesGetToManyRelationshipErrors, AppClipsAppClipDefaultExperiencesGetToManyRelationshipResponses, AppClipsGetInstanceData, AppClipsGetInstanceErrors, AppClipsGetInstanceResponses, AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedData, AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedErrors, AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedResponses, AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelationshipData, AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelationshipErrors, AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelationshipResponses, AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedData, AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedErrors, AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedResponses, AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelationshipData, AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelationshipErrors, AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelationshipResponses, AppCustomProductPageLocalizationsCreateInstanceData, AppCustomProductPageLocalizationsCreateInstanceErrors, AppCustomProductPageLocalizationsCreateInstanceResponses, AppCustomProductPageLocalizationsDeleteInstanceData, AppCustomProductPageLocalizationsDeleteInstanceErrors, AppCustomProductPageLocalizationsDeleteInstanceResponses, AppCustomProductPageLocalizationsGetInstanceData, AppCustomProductPageLocalizationsGetInstanceErrors, AppCustomProductPageLocalizationsGetInstanceResponses, AppCustomProductPageLocalizationsSearchKeywordsCreateToManyRelationshipData, AppCustomProductPageLocalizationsSearchKeywordsCreateToManyRelationshipErrors, AppCustomProductPageLocalizationsSearchKeywordsCreateToManyRelationshipResponses, AppCustomProductPageLocalizationsSearchKeywordsDeleteToManyRelationshipData, AppCustomProductPageLocalizationsSearchKeywordsDeleteToManyRelationshipErrors, AppCustomProductPageLocalizationsSearchKeywordsDeleteToManyRelationshipResponses, AppCustomProductPageLocalizationsSearchKeywordsGetToManyRelatedData, AppCustomProductPageLocalizationsSearchKeywordsGetToManyRelatedErrors, AppCustomProductPageLocalizationsSearchKeywordsGetToManyRelatedResponses, AppCustomProductPageLocalizationsSearchKeywordsGetToManyRelationshipData, AppCustomProductPageLocalizationsSearchKeywordsGetToManyRelationshipErrors, AppCustomProductPageLocalizationsSearchKeywordsGetToManyRelationshipResponses, AppCustomProductPageLocalizationsUpdateInstanceData, AppCustomProductPageLocalizationsUpdateInstanceErrors, AppCustomProductPageLocalizationsUpdateInstanceResponses, AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedData, AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedErrors, AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedResponses, AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelationshipData, AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelationshipErrors, AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelationshipResponses, AppCustomProductPagesCreateInstanceData, AppCustomProductPagesCreateInstanceErrors, AppCustomProductPagesCreateInstanceResponses, AppCustomProductPagesDeleteInstanceData, AppCustomProductPagesDeleteInstanceErrors, AppCustomProductPagesDeleteInstanceResponses, AppCustomProductPagesGetInstanceData, AppCustomProductPagesGetInstanceErrors, AppCustomProductPagesGetInstanceResponses, AppCustomProductPagesUpdateInstanceData, AppCustomProductPagesUpdateInstanceErrors, AppCustomProductPagesUpdateInstanceResponses, AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedData, AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedErrors, AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedResponses, AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelationshipData, AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelationshipErrors, AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelationshipResponses, AppCustomProductPageVersionsCreateInstanceData, AppCustomProductPageVersionsCreateInstanceErrors, AppCustomProductPageVersionsCreateInstanceResponses, AppCustomProductPageVersionsGetInstanceData, AppCustomProductPageVersionsGetInstanceErrors, AppCustomProductPageVersionsGetInstanceResponses, AppCustomProductPageVersionsUpdateInstanceData, AppCustomProductPageVersionsUpdateInstanceErrors, AppCustomProductPageVersionsUpdateInstanceResponses, AppEncryptionDeclarationDocumentsCreateInstanceData, AppEncryptionDeclarationDocumentsCreateInstanceErrors, AppEncryptionDeclarationDocumentsCreateInstanceResponses, AppEncryptionDeclarationDocumentsGetInstanceData, AppEncryptionDeclarationDocumentsGetInstanceErrors, AppEncryptionDeclarationDocumentsGetInstanceResponses, AppEncryptionDeclarationDocumentsUpdateInstanceData, AppEncryptionDeclarationDocumentsUpdateInstanceErrors, AppEncryptionDeclarationDocumentsUpdateInstanceResponses, AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedData, AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedErrors, AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedResponses, AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelationshipData, AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelationshipErrors, AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelationshipResponses, AppEncryptionDeclarationsAppGetToOneRelatedData, AppEncryptionDeclarationsAppGetToOneRelatedErrors, AppEncryptionDeclarationsAppGetToOneRelatedResponses, AppEncryptionDeclarationsAppGetToOneRelationshipData, AppEncryptionDeclarationsAppGetToOneRelationshipErrors, AppEncryptionDeclarationsAppGetToOneRelationshipResponses, AppEncryptionDeclarationsBuildsCreateToManyRelationshipData, AppEncryptionDeclarationsBuildsCreateToManyRelationshipErrors, AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponses, AppEncryptionDeclarationsCreateInstanceData, AppEncryptionDeclarationsCreateInstanceErrors, AppEncryptionDeclarationsCreateInstanceResponses, AppEncryptionDeclarationsGetCollectionData, AppEncryptionDeclarationsGetCollectionErrors, AppEncryptionDeclarationsGetCollectionResponses, AppEncryptionDeclarationsGetInstanceData, AppEncryptionDeclarationsGetInstanceErrors, AppEncryptionDeclarationsGetInstanceResponses, AppEventLocalizationsAppEventScreenshotsGetToManyRelatedData, AppEventLocalizationsAppEventScreenshotsGetToManyRelatedErrors, AppEventLocalizationsAppEventScreenshotsGetToManyRelatedResponses, AppEventLocalizationsAppEventScreenshotsGetToManyRelationshipData, AppEventLocalizationsAppEventScreenshotsGetToManyRelationshipErrors, AppEventLocalizationsAppEventScreenshotsGetToManyRelationshipResponses, AppEventLocalizationsAppEventVideoClipsGetToManyRelatedData, AppEventLocalizationsAppEventVideoClipsGetToManyRelatedErrors, AppEventLocalizationsAppEventVideoClipsGetToManyRelatedResponses, AppEventLocalizationsAppEventVideoClipsGetToManyRelationshipData, AppEventLocalizationsAppEventVideoClipsGetToManyRelationshipErrors, AppEventLocalizationsAppEventVideoClipsGetToManyRelationshipResponses, AppEventLocalizationsCreateInstanceData, AppEventLocalizationsCreateInstanceErrors, AppEventLocalizationsCreateInstanceResponses, AppEventLocalizationsDeleteInstanceData, AppEventLocalizationsDeleteInstanceErrors, AppEventLocalizationsDeleteInstanceResponses, AppEventLocalizationsGetInstanceData, AppEventLocalizationsGetInstanceErrors, AppEventLocalizationsGetInstanceResponses, AppEventLocalizationsUpdateInstanceData, AppEventLocalizationsUpdateInstanceErrors, AppEventLocalizationsUpdateInstanceResponses, AppEventsCreateInstanceData, AppEventsCreateInstanceErrors, AppEventsCreateInstanceResponses, AppEventScreenshotsCreateInstanceData, AppEventScreenshotsCreateInstanceErrors, AppEventScreenshotsCreateInstanceResponses, AppEventScreenshotsDeleteInstanceData, AppEventScreenshotsDeleteInstanceErrors, AppEventScreenshotsDeleteInstanceResponses, AppEventScreenshotsGetInstanceData, AppEventScreenshotsGetInstanceErrors, AppEventScreenshotsGetInstanceResponses, AppEventScreenshotsUpdateInstanceData, AppEventScreenshotsUpdateInstanceErrors, AppEventScreenshotsUpdateInstanceResponses, AppEventsDeleteInstanceData, AppEventsDeleteInstanceErrors, AppEventsDeleteInstanceResponses, AppEventsGetInstanceData, AppEventsGetInstanceErrors, AppEventsGetInstanceResponses, AppEventsLocalizationsGetToManyRelatedData, AppEventsLocalizationsGetToManyRelatedErrors, AppEventsLocalizationsGetToManyRelatedResponses, AppEventsLocalizationsGetToManyRelationshipData, AppEventsLocalizationsGetToManyRelationshipErrors, AppEventsLocalizationsGetToManyRelationshipResponses, AppEventsUpdateInstanceData, AppEventsUpdateInstanceErrors, AppEventsUpdateInstanceResponses, AppEventVideoClipsCreateInstanceData, AppEventVideoClipsCreateInstanceErrors, AppEventVideoClipsCreateInstanceResponses, AppEventVideoClipsDeleteInstanceData, AppEventVideoClipsDeleteInstanceErrors, AppEventVideoClipsDeleteInstanceResponses, AppEventVideoClipsGetInstanceData, AppEventVideoClipsGetInstanceErrors, AppEventVideoClipsGetInstanceResponses, AppEventVideoClipsUpdateInstanceData, AppEventVideoClipsUpdateInstanceErrors, AppEventVideoClipsUpdateInstanceResponses, AppInfoLocalizationsCreateInstanceData, AppInfoLocalizationsCreateInstanceErrors, AppInfoLocalizationsCreateInstanceResponses, AppInfoLocalizationsDeleteInstanceData, AppInfoLocalizationsDeleteInstanceErrors, AppInfoLocalizationsDeleteInstanceResponses, AppInfoLocalizationsGetInstanceData, AppInfoLocalizationsGetInstanceErrors, AppInfoLocalizationsGetInstanceResponses, AppInfoLocalizationsUpdateInstanceData, AppInfoLocalizationsUpdateInstanceErrors, AppInfoLocalizationsUpdateInstanceResponses, AppInfosAgeRatingDeclarationGetToOneRelatedData, AppInfosAgeRatingDeclarationGetToOneRelatedErrors, AppInfosAgeRatingDeclarationGetToOneRelatedResponses, AppInfosAgeRatingDeclarationGetToOneRelationshipData, AppInfosAgeRatingDeclarationGetToOneRelationshipErrors, AppInfosAgeRatingDeclarationGetToOneRelationshipResponses, AppInfosAppInfoLocalizationsGetToManyRelatedData, AppInfosAppInfoLocalizationsGetToManyRelatedErrors, AppInfosAppInfoLocalizationsGetToManyRelatedResponses, AppInfosAppInfoLocalizationsGetToManyRelationshipData, AppInfosAppInfoLocalizationsGetToManyRelationshipErrors, AppInfosAppInfoLocalizationsGetToManyRelationshipResponses, AppInfosGetInstanceData, AppInfosGetInstanceErrors, AppInfosGetInstanceResponses, AppInfosPrimaryCategoryGetToOneRelatedData, AppInfosPrimaryCategoryGetToOneRelatedErrors, AppInfosPrimaryCategoryGetToOneRelatedResponses, AppInfosPrimaryCategoryGetToOneRelationshipData, AppInfosPrimaryCategoryGetToOneRelationshipErrors, AppInfosPrimaryCategoryGetToOneRelationshipResponses, AppInfosPrimarySubcategoryOneGetToOneRelatedData, AppInfosPrimarySubcategoryOneGetToOneRelatedErrors, AppInfosPrimarySubcategoryOneGetToOneRelatedResponses, AppInfosPrimarySubcategoryOneGetToOneRelationshipData, AppInfosPrimarySubcategoryOneGetToOneRelationshipErrors, AppInfosPrimarySubcategoryOneGetToOneRelationshipResponses, AppInfosPrimarySubcategoryTwoGetToOneRelatedData, AppInfosPrimarySubcategoryTwoGetToOneRelatedErrors, AppInfosPrimarySubcategoryTwoGetToOneRelatedResponses, AppInfosPrimarySubcategoryTwoGetToOneRelationshipData, AppInfosPrimarySubcategoryTwoGetToOneRelationshipErrors, AppInfosPrimarySubcategoryTwoGetToOneRelationshipResponses, AppInfosSecondaryCategoryGetToOneRelatedData, AppInfosSecondaryCategoryGetToOneRelatedErrors, AppInfosSecondaryCategoryGetToOneRelatedResponses, AppInfosSecondaryCategoryGetToOneRelationshipData, AppInfosSecondaryCategoryGetToOneRelationshipErrors, AppInfosSecondaryCategoryGetToOneRelationshipResponses, AppInfosSecondarySubcategoryOneGetToOneRelatedData, AppInfosSecondarySubcategoryOneGetToOneRelatedErrors, AppInfosSecondarySubcategoryOneGetToOneRelatedResponses, AppInfosSecondarySubcategoryOneGetToOneRelationshipData, AppInfosSecondarySubcategoryOneGetToOneRelationshipErrors, AppInfosSecondarySubcategoryOneGetToOneRelationshipResponses, AppInfosSecondarySubcategoryTwoGetToOneRelatedData, AppInfosSecondarySubcategoryTwoGetToOneRelatedErrors, AppInfosSecondarySubcategoryTwoGetToOneRelatedResponses, AppInfosSecondarySubcategoryTwoGetToOneRelationshipData, AppInfosSecondarySubcategoryTwoGetToOneRelationshipErrors, AppInfosSecondarySubcategoryTwoGetToOneRelationshipResponses, AppInfosTerritoryAgeRatingsGetToManyRelatedData, AppInfosTerritoryAgeRatingsGetToManyRelatedErrors, AppInfosTerritoryAgeRatingsGetToManyRelatedResponses, AppInfosTerritoryAgeRatingsGetToManyRelationshipData, AppInfosTerritoryAgeRatingsGetToManyRelationshipErrors, AppInfosTerritoryAgeRatingsGetToManyRelationshipResponses, AppInfosUpdateInstanceData, AppInfosUpdateInstanceErrors, AppInfosUpdateInstanceResponses, AppPreviewsCreateInstanceData, AppPreviewsCreateInstanceErrors, AppPreviewsCreateInstanceResponses, AppPreviewsDeleteInstanceData, AppPreviewsDeleteInstanceErrors, AppPreviewsDeleteInstanceResponses, AppPreviewSetsAppPreviewsGetToManyRelatedData, AppPreviewSetsAppPreviewsGetToManyRelatedErrors, AppPreviewSetsAppPreviewsGetToManyRelatedResponses, AppPreviewSetsAppPreviewsGetToManyRelationshipData, AppPreviewSetsAppPreviewsGetToManyRelationshipErrors, AppPreviewSetsAppPreviewsGetToManyRelationshipResponses, AppPreviewSetsAppPreviewsReplaceToManyRelationshipData, AppPreviewSetsAppPreviewsReplaceToManyRelationshipErrors, AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponses, AppPreviewSetsCreateInstanceData, AppPreviewSetsCreateInstanceErrors, AppPreviewSetsCreateInstanceResponses, AppPreviewSetsDeleteInstanceData, AppPreviewSetsDeleteInstanceErrors, AppPreviewSetsDeleteInstanceResponses, AppPreviewSetsGetInstanceData, AppPreviewSetsGetInstanceErrors, AppPreviewSetsGetInstanceResponses, AppPreviewsGetInstanceData, AppPreviewsGetInstanceErrors, AppPreviewsGetInstanceResponses, AppPreviewsUpdateInstanceData, AppPreviewsUpdateInstanceErrors, AppPreviewsUpdateInstanceResponses, AppPricePointsV3EqualizationsGetToManyRelatedData, AppPricePointsV3EqualizationsGetToManyRelatedErrors, AppPricePointsV3EqualizationsGetToManyRelatedResponses, AppPricePointsV3EqualizationsGetToManyRelationshipData, AppPricePointsV3EqualizationsGetToManyRelationshipErrors, AppPricePointsV3EqualizationsGetToManyRelationshipResponses, AppPricePointsV3GetInstanceData, AppPricePointsV3GetInstanceErrors, AppPricePointsV3GetInstanceResponses, AppPriceSchedulesAutomaticPricesGetToManyRelatedData, AppPriceSchedulesAutomaticPricesGetToManyRelatedErrors, AppPriceSchedulesAutomaticPricesGetToManyRelatedResponses, AppPriceSchedulesAutomaticPricesGetToManyRelationshipData, AppPriceSchedulesAutomaticPricesGetToManyRelationshipErrors, AppPriceSchedulesAutomaticPricesGetToManyRelationshipResponses, AppPriceSchedulesBaseTerritoryGetToOneRelatedData, AppPriceSchedulesBaseTerritoryGetToOneRelatedErrors, AppPriceSchedulesBaseTerritoryGetToOneRelatedResponses, AppPriceSchedulesBaseTerritoryGetToOneRelationshipData, AppPriceSchedulesBaseTerritoryGetToOneRelationshipErrors, AppPriceSchedulesBaseTerritoryGetToOneRelationshipResponses, AppPriceSchedulesCreateInstanceData, AppPriceSchedulesCreateInstanceErrors, AppPriceSchedulesCreateInstanceResponses, AppPriceSchedulesGetInstanceData, AppPriceSchedulesGetInstanceErrors, AppPriceSchedulesGetInstanceResponses, AppPriceSchedulesManualPricesGetToManyRelatedData, AppPriceSchedulesManualPricesGetToManyRelatedErrors, AppPriceSchedulesManualPricesGetToManyRelatedResponses, AppPriceSchedulesManualPricesGetToManyRelationshipData, AppPriceSchedulesManualPricesGetToManyRelationshipErrors, AppPriceSchedulesManualPricesGetToManyRelationshipResponses, AppsAccessibilityDeclarationsGetToManyRelatedData, AppsAccessibilityDeclarationsGetToManyRelatedErrors, AppsAccessibilityDeclarationsGetToManyRelatedResponses, AppsAccessibilityDeclarationsGetToManyRelationshipData, AppsAccessibilityDeclarationsGetToManyRelationshipErrors, AppsAccessibilityDeclarationsGetToManyRelationshipResponses, AppsAlternativeDistributionKeyGetToOneRelatedData, AppsAlternativeDistributionKeyGetToOneRelatedErrors, AppsAlternativeDistributionKeyGetToOneRelatedResponses, AppsAlternativeDistributionKeyGetToOneRelationshipData, AppsAlternativeDistributionKeyGetToOneRelationshipErrors, AppsAlternativeDistributionKeyGetToOneRelationshipResponses, AppsAnalyticsReportRequestsGetToManyRelatedData, AppsAnalyticsReportRequestsGetToManyRelatedErrors, AppsAnalyticsReportRequestsGetToManyRelatedResponses, AppsAnalyticsReportRequestsGetToManyRelationshipData, AppsAnalyticsReportRequestsGetToManyRelationshipErrors, AppsAnalyticsReportRequestsGetToManyRelationshipResponses, AppsAppAvailabilityV2GetToOneRelatedData, AppsAppAvailabilityV2GetToOneRelatedErrors, AppsAppAvailabilityV2GetToOneRelatedResponses, AppsAppAvailabilityV2GetToOneRelationshipData, AppsAppAvailabilityV2GetToOneRelationshipErrors, AppsAppAvailabilityV2GetToOneRelationshipResponses, AppsAppClipsGetToManyRelatedData, AppsAppClipsGetToManyRelatedErrors, AppsAppClipsGetToManyRelatedResponses, AppsAppClipsGetToManyRelationshipData, AppsAppClipsGetToManyRelationshipErrors, AppsAppClipsGetToManyRelationshipResponses, AppsAppCustomProductPagesGetToManyRelatedData, AppsAppCustomProductPagesGetToManyRelatedErrors, AppsAppCustomProductPagesGetToManyRelatedResponses, AppsAppCustomProductPagesGetToManyRelationshipData, AppsAppCustomProductPagesGetToManyRelationshipErrors, AppsAppCustomProductPagesGetToManyRelationshipResponses, AppsAppEncryptionDeclarationsGetToManyRelatedData, AppsAppEncryptionDeclarationsGetToManyRelatedErrors, AppsAppEncryptionDeclarationsGetToManyRelatedResponses, AppsAppEncryptionDeclarationsGetToManyRelationshipData, AppsAppEncryptionDeclarationsGetToManyRelationshipErrors, AppsAppEncryptionDeclarationsGetToManyRelationshipResponses, AppsAppEventsGetToManyRelatedData, AppsAppEventsGetToManyRelatedErrors, AppsAppEventsGetToManyRelatedResponses, AppsAppEventsGetToManyRelationshipData, AppsAppEventsGetToManyRelationshipErrors, AppsAppEventsGetToManyRelationshipResponses, AppsAppInfosGetToManyRelatedData, AppsAppInfosGetToManyRelatedErrors, AppsAppInfosGetToManyRelatedResponses, AppsAppInfosGetToManyRelationshipData, AppsAppInfosGetToManyRelationshipErrors, AppsAppInfosGetToManyRelationshipResponses, AppsAppPricePointsGetToManyRelatedData, AppsAppPricePointsGetToManyRelatedErrors, AppsAppPricePointsGetToManyRelatedResponses, AppsAppPricePointsGetToManyRelationshipData, AppsAppPricePointsGetToManyRelationshipErrors, AppsAppPricePointsGetToManyRelationshipResponses, AppsAppPriceScheduleGetToOneRelatedData, AppsAppPriceScheduleGetToOneRelatedErrors, AppsAppPriceScheduleGetToOneRelatedResponses, AppsAppPriceScheduleGetToOneRelationshipData, AppsAppPriceScheduleGetToOneRelationshipErrors, AppsAppPriceScheduleGetToOneRelationshipResponses, AppsAppStoreVersionExperimentsV2GetToManyRelatedData, AppsAppStoreVersionExperimentsV2GetToManyRelatedErrors, AppsAppStoreVersionExperimentsV2GetToManyRelatedResponses, AppsAppStoreVersionExperimentsV2GetToManyRelationshipData, AppsAppStoreVersionExperimentsV2GetToManyRelationshipErrors, AppsAppStoreVersionExperimentsV2GetToManyRelationshipResponses, AppsAppStoreVersionsGetToManyRelatedData, AppsAppStoreVersionsGetToManyRelatedErrors, AppsAppStoreVersionsGetToManyRelatedResponses, AppsAppStoreVersionsGetToManyRelationshipData, AppsAppStoreVersionsGetToManyRelationshipErrors, AppsAppStoreVersionsGetToManyRelationshipResponses, AppsAppTagsGetToManyRelatedData, AppsAppTagsGetToManyRelatedErrors, AppsAppTagsGetToManyRelatedResponses, AppsAppTagsGetToManyRelationshipData, AppsAppTagsGetToManyRelationshipErrors, AppsAppTagsGetToManyRelationshipResponses, AppsBackgroundAssetsGetToManyRelatedData, AppsBackgroundAssetsGetToManyRelatedErrors, AppsBackgroundAssetsGetToManyRelatedResponses, AppsBackgroundAssetsGetToManyRelationshipData, AppsBackgroundAssetsGetToManyRelationshipErrors, AppsBackgroundAssetsGetToManyRelationshipResponses, AppsBetaAppLocalizationsGetToManyRelatedData, AppsBetaAppLocalizationsGetToManyRelatedErrors, AppsBetaAppLocalizationsGetToManyRelatedResponses, AppsBetaAppLocalizationsGetToManyRelationshipData, AppsBetaAppLocalizationsGetToManyRelationshipErrors, AppsBetaAppLocalizationsGetToManyRelationshipResponses, AppsBetaAppReviewDetailGetToOneRelatedData, AppsBetaAppReviewDetailGetToOneRelatedErrors, AppsBetaAppReviewDetailGetToOneRelatedResponses, AppsBetaAppReviewDetailGetToOneRelationshipData, AppsBetaAppReviewDetailGetToOneRelationshipErrors, AppsBetaAppReviewDetailGetToOneRelationshipResponses, AppsBetaFeedbackCrashSubmissionsGetToManyRelatedData, AppsBetaFeedbackCrashSubmissionsGetToManyRelatedErrors, AppsBetaFeedbackCrashSubmissionsGetToManyRelatedResponses, AppsBetaFeedbackCrashSubmissionsGetToManyRelationshipData, AppsBetaFeedbackCrashSubmissionsGetToManyRelationshipErrors, AppsBetaFeedbackCrashSubmissionsGetToManyRelationshipResponses, AppsBetaFeedbackScreenshotSubmissionsGetToManyRelatedData, AppsBetaFeedbackScreenshotSubmissionsGetToManyRelatedErrors, AppsBetaFeedbackScreenshotSubmissionsGetToManyRelatedResponses, AppsBetaFeedbackScreenshotSubmissionsGetToManyRelationshipData, AppsBetaFeedbackScreenshotSubmissionsGetToManyRelationshipErrors, AppsBetaFeedbackScreenshotSubmissionsGetToManyRelationshipResponses, AppsBetaGroupsGetToManyRelatedData, AppsBetaGroupsGetToManyRelatedErrors, AppsBetaGroupsGetToManyRelatedResponses, AppsBetaGroupsGetToManyRelationshipData, AppsBetaGroupsGetToManyRelationshipErrors, AppsBetaGroupsGetToManyRelationshipResponses, AppsBetaLicenseAgreementGetToOneRelatedData, AppsBetaLicenseAgreementGetToOneRelatedErrors, AppsBetaLicenseAgreementGetToOneRelatedResponses, AppsBetaLicenseAgreementGetToOneRelationshipData, AppsBetaLicenseAgreementGetToOneRelationshipErrors, AppsBetaLicenseAgreementGetToOneRelationshipResponses, AppsBetaTestersDeleteToManyRelationshipData, AppsBetaTestersDeleteToManyRelationshipErrors, AppsBetaTestersDeleteToManyRelationshipResponses, AppsBetaTesterUsagesGetMetricsData, AppsBetaTesterUsagesGetMetricsErrors, AppsBetaTesterUsagesGetMetricsResponses, AppsBuildsGetToManyRelatedData, AppsBuildsGetToManyRelatedErrors, AppsBuildsGetToManyRelatedResponses, AppsBuildsGetToManyRelationshipData, AppsBuildsGetToManyRelationshipErrors, AppsBuildsGetToManyRelationshipResponses, AppsBuildUploadsGetToManyRelatedData, AppsBuildUploadsGetToManyRelatedErrors, AppsBuildUploadsGetToManyRelatedResponses, AppsBuildUploadsGetToManyRelationshipData, AppsBuildUploadsGetToManyRelationshipErrors, AppsBuildUploadsGetToManyRelationshipResponses, AppsCiProductGetToOneRelatedData, AppsCiProductGetToOneRelatedErrors, AppsCiProductGetToOneRelatedResponses, AppsCiProductGetToOneRelationshipData, AppsCiProductGetToOneRelationshipErrors, AppsCiProductGetToOneRelationshipResponses, AppScreenshotsCreateInstanceData, AppScreenshotsCreateInstanceErrors, AppScreenshotsCreateInstanceResponses, AppScreenshotsDeleteInstanceData, AppScreenshotsDeleteInstanceErrors, AppScreenshotsDeleteInstanceResponses, AppScreenshotSetsAppScreenshotsGetToManyRelatedData, AppScreenshotSetsAppScreenshotsGetToManyRelatedErrors, AppScreenshotSetsAppScreenshotsGetToManyRelatedResponses, AppScreenshotSetsAppScreenshotsGetToManyRelationshipData, AppScreenshotSetsAppScreenshotsGetToManyRelationshipErrors, AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponses, AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipData, AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipErrors, AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponses, AppScreenshotSetsCreateInstanceData, AppScreenshotSetsCreateInstanceErrors, AppScreenshotSetsCreateInstanceResponses, AppScreenshotSetsDeleteInstanceData, AppScreenshotSetsDeleteInstanceErrors, AppScreenshotSetsDeleteInstanceResponses, AppScreenshotSetsGetInstanceData, AppScreenshotSetsGetInstanceErrors, AppScreenshotSetsGetInstanceResponses, AppScreenshotsGetInstanceData, AppScreenshotsGetInstanceErrors, AppScreenshotsGetInstanceResponses, AppScreenshotsUpdateInstanceData, AppScreenshotsUpdateInstanceErrors, AppScreenshotsUpdateInstanceResponses, AppsCustomerReviewsGetToManyRelatedData, AppsCustomerReviewsGetToManyRelatedErrors, AppsCustomerReviewsGetToManyRelatedResponses, AppsCustomerReviewsGetToManyRelationshipData, AppsCustomerReviewsGetToManyRelationshipErrors, AppsCustomerReviewsGetToManyRelationshipResponses, AppsCustomerReviewSummarizationsGetToManyRelatedData, AppsCustomerReviewSummarizationsGetToManyRelatedErrors, AppsCustomerReviewSummarizationsGetToManyRelatedResponses, AppsEndUserLicenseAgreementGetToOneRelatedData, AppsEndUserLicenseAgreementGetToOneRelatedErrors, AppsEndUserLicenseAgreementGetToOneRelatedResponses, AppsEndUserLicenseAgreementGetToOneRelationshipData, AppsEndUserLicenseAgreementGetToOneRelationshipErrors, AppsEndUserLicenseAgreementGetToOneRelationshipResponses, AppsGameCenterDetailGetToOneRelatedData, AppsGameCenterDetailGetToOneRelatedErrors, AppsGameCenterDetailGetToOneRelatedResponses, AppsGameCenterDetailGetToOneRelationshipData, AppsGameCenterDetailGetToOneRelationshipErrors, AppsGameCenterDetailGetToOneRelationshipResponses, AppsGameCenterEnabledVersionsGetToManyRelatedData, AppsGameCenterEnabledVersionsGetToManyRelatedErrors, AppsGameCenterEnabledVersionsGetToManyRelatedResponses, AppsGameCenterEnabledVersionsGetToManyRelationshipData, AppsGameCenterEnabledVersionsGetToManyRelationshipErrors, AppsGameCenterEnabledVersionsGetToManyRelationshipResponses, AppsGetCollectionData, AppsGetCollectionErrors, AppsGetCollectionResponses, AppsGetInstanceData, AppsGetInstanceErrors, AppsGetInstanceResponses, AppsInAppPurchasesGetToManyRelatedData, AppsInAppPurchasesGetToManyRelatedErrors, AppsInAppPurchasesGetToManyRelatedResponses, AppsInAppPurchasesGetToManyRelationshipData, AppsInAppPurchasesGetToManyRelationshipErrors, AppsInAppPurchasesGetToManyRelationshipResponses, AppsInAppPurchasesV2GetToManyRelatedData, AppsInAppPurchasesV2GetToManyRelatedErrors, AppsInAppPurchasesV2GetToManyRelatedResponses, AppsInAppPurchasesV2GetToManyRelationshipData, AppsInAppPurchasesV2GetToManyRelationshipErrors, AppsInAppPurchasesV2GetToManyRelationshipResponses, AppsMarketplaceSearchDetailGetToOneRelatedData, AppsMarketplaceSearchDetailGetToOneRelatedErrors, AppsMarketplaceSearchDetailGetToOneRelatedResponses, AppsMarketplaceSearchDetailGetToOneRelationshipData, AppsMarketplaceSearchDetailGetToOneRelationshipErrors, AppsMarketplaceSearchDetailGetToOneRelationshipResponses, AppsPerfPowerMetricsGetToManyRelatedData, AppsPerfPowerMetricsGetToManyRelatedErrors, AppsPerfPowerMetricsGetToManyRelatedResponses, AppsPreReleaseVersionsGetToManyRelatedData, AppsPreReleaseVersionsGetToManyRelatedErrors, AppsPreReleaseVersionsGetToManyRelatedResponses, AppsPreReleaseVersionsGetToManyRelationshipData, AppsPreReleaseVersionsGetToManyRelationshipErrors, AppsPreReleaseVersionsGetToManyRelationshipResponses, AppsPromotedPurchasesGetToManyRelatedData, AppsPromotedPurchasesGetToManyRelatedErrors, AppsPromotedPurchasesGetToManyRelatedResponses, AppsPromotedPurchasesGetToManyRelationshipData, AppsPromotedPurchasesGetToManyRelationshipErrors, AppsPromotedPurchasesGetToManyRelationshipResponses, AppsPromotedPurchasesReplaceToManyRelationshipData, AppsPromotedPurchasesReplaceToManyRelationshipErrors, AppsPromotedPurchasesReplaceToManyRelationshipResponses, AppsReviewSubmissionsGetToManyRelatedData, AppsReviewSubmissionsGetToManyRelatedErrors, AppsReviewSubmissionsGetToManyRelatedResponses, AppsReviewSubmissionsGetToManyRelationshipData, AppsReviewSubmissionsGetToManyRelationshipErrors, AppsReviewSubmissionsGetToManyRelationshipResponses, AppsSearchKeywordsGetToManyRelatedData, AppsSearchKeywordsGetToManyRelatedErrors, AppsSearchKeywordsGetToManyRelatedResponses, AppsSearchKeywordsGetToManyRelationshipData, AppsSearchKeywordsGetToManyRelationshipErrors, AppsSearchKeywordsGetToManyRelationshipResponses, AppsSubscriptionGracePeriodGetToOneRelatedData, AppsSubscriptionGracePeriodGetToOneRelatedErrors, AppsSubscriptionGracePeriodGetToOneRelatedResponses, AppsSubscriptionGracePeriodGetToOneRelationshipData, AppsSubscriptionGracePeriodGetToOneRelationshipErrors, AppsSubscriptionGracePeriodGetToOneRelationshipResponses, AppsSubscriptionGroupsGetToManyRelatedData, AppsSubscriptionGroupsGetToManyRelatedErrors, AppsSubscriptionGroupsGetToManyRelatedResponses, AppsSubscriptionGroupsGetToManyRelationshipData, AppsSubscriptionGroupsGetToManyRelationshipErrors, AppsSubscriptionGroupsGetToManyRelationshipResponses, AppStoreReviewAttachmentsCreateInstanceData, AppStoreReviewAttachmentsCreateInstanceErrors, AppStoreReviewAttachmentsCreateInstanceResponses, AppStoreReviewAttachmentsDeleteInstanceData, AppStoreReviewAttachmentsDeleteInstanceErrors, AppStoreReviewAttachmentsDeleteInstanceResponses, AppStoreReviewAttachmentsGetInstanceData, AppStoreReviewAttachmentsGetInstanceErrors, AppStoreReviewAttachmentsGetInstanceResponses, AppStoreReviewAttachmentsUpdateInstanceData, AppStoreReviewAttachmentsUpdateInstanceErrors, AppStoreReviewAttachmentsUpdateInstanceResponses, AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedData, AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedErrors, AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponses, AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelationshipData, AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelationshipErrors, AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelationshipResponses, AppStoreReviewDetailsCreateInstanceData, AppStoreReviewDetailsCreateInstanceErrors, AppStoreReviewDetailsCreateInstanceResponses, AppStoreReviewDetailsGetInstanceData, AppStoreReviewDetailsGetInstanceErrors, AppStoreReviewDetailsGetInstanceResponses, AppStoreReviewDetailsUpdateInstanceData, AppStoreReviewDetailsUpdateInstanceErrors, AppStoreReviewDetailsUpdateInstanceResponses, AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedData, AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedErrors, AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedResponses, AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelationshipData, AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelationshipErrors, AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelationshipResponses, AppStoreVersionExperimentsCreateInstanceData, AppStoreVersionExperimentsCreateInstanceErrors, AppStoreVersionExperimentsCreateInstanceResponses, AppStoreVersionExperimentsDeleteInstanceData, AppStoreVersionExperimentsDeleteInstanceErrors, AppStoreVersionExperimentsDeleteInstanceResponses, AppStoreVersionExperimentsGetInstanceData, AppStoreVersionExperimentsGetInstanceErrors, AppStoreVersionExperimentsGetInstanceResponses, AppStoreVersionExperimentsUpdateInstanceData, AppStoreVersionExperimentsUpdateInstanceErrors, AppStoreVersionExperimentsUpdateInstanceResponses, AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedData, AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedErrors, AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedResponses, AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelationshipData, AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelationshipErrors, AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelationshipResponses, AppStoreVersionExperimentsV2CreateInstanceData, AppStoreVersionExperimentsV2CreateInstanceErrors, AppStoreVersionExperimentsV2CreateInstanceResponses, AppStoreVersionExperimentsV2DeleteInstanceData, AppStoreVersionExperimentsV2DeleteInstanceErrors, AppStoreVersionExperimentsV2DeleteInstanceResponses, AppStoreVersionExperimentsV2GetInstanceData, AppStoreVersionExperimentsV2GetInstanceErrors, AppStoreVersionExperimentsV2GetInstanceResponses, AppStoreVersionExperimentsV2UpdateInstanceData, AppStoreVersionExperimentsV2UpdateInstanceErrors, AppStoreVersionExperimentsV2UpdateInstanceResponses, AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedData, AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedErrors, AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedResponses, AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelationshipData, AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelationshipErrors, AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelationshipResponses, AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedData, AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedErrors, AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedResponses, AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelationshipData, AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelationshipErrors, AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelationshipResponses, AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceData, AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceErrors, AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceResponses, AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceData, AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceErrors, AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceResponses, AppStoreVersionExperimentTreatmentLocalizationsGetInstanceData, AppStoreVersionExperimentTreatmentLocalizationsGetInstanceErrors, AppStoreVersionExperimentTreatmentLocalizationsGetInstanceResponses, AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedData, AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedErrors, AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedResponses, AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelationshipData, AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelationshipErrors, AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelationshipResponses, AppStoreVersionExperimentTreatmentsCreateInstanceData, AppStoreVersionExperimentTreatmentsCreateInstanceErrors, AppStoreVersionExperimentTreatmentsCreateInstanceResponses, AppStoreVersionExperimentTreatmentsDeleteInstanceData, AppStoreVersionExperimentTreatmentsDeleteInstanceErrors, AppStoreVersionExperimentTreatmentsDeleteInstanceResponses, AppStoreVersionExperimentTreatmentsGetInstanceData, AppStoreVersionExperimentTreatmentsGetInstanceErrors, AppStoreVersionExperimentTreatmentsGetInstanceResponses, AppStoreVersionExperimentTreatmentsUpdateInstanceData, AppStoreVersionExperimentTreatmentsUpdateInstanceErrors, AppStoreVersionExperimentTreatmentsUpdateInstanceResponses, AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedData, AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedErrors, AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponses, AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelationshipData, AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelationshipErrors, AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelationshipResponses, AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedData, AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedErrors, AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponses, AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelationshipData, AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelationshipErrors, AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelationshipResponses, AppStoreVersionLocalizationsCreateInstanceData, AppStoreVersionLocalizationsCreateInstanceErrors, AppStoreVersionLocalizationsCreateInstanceResponses, AppStoreVersionLocalizationsDeleteInstanceData, AppStoreVersionLocalizationsDeleteInstanceErrors, AppStoreVersionLocalizationsDeleteInstanceResponses, AppStoreVersionLocalizationsGetInstanceData, AppStoreVersionLocalizationsGetInstanceErrors, AppStoreVersionLocalizationsGetInstanceResponses, AppStoreVersionLocalizationsSearchKeywordsCreateToManyRelationshipData, AppStoreVersionLocalizationsSearchKeywordsCreateToManyRelationshipErrors, AppStoreVersionLocalizationsSearchKeywordsCreateToManyRelationshipResponses, AppStoreVersionLocalizationsSearchKeywordsDeleteToManyRelationshipData, AppStoreVersionLocalizationsSearchKeywordsDeleteToManyRelationshipErrors, AppStoreVersionLocalizationsSearchKeywordsDeleteToManyRelationshipResponses, AppStoreVersionLocalizationsSearchKeywordsGetToManyRelatedData, AppStoreVersionLocalizationsSearchKeywordsGetToManyRelatedErrors, AppStoreVersionLocalizationsSearchKeywordsGetToManyRelatedResponses, AppStoreVersionLocalizationsSearchKeywordsGetToManyRelationshipData, AppStoreVersionLocalizationsSearchKeywordsGetToManyRelationshipErrors, AppStoreVersionLocalizationsSearchKeywordsGetToManyRelationshipResponses, AppStoreVersionLocalizationsUpdateInstanceData, AppStoreVersionLocalizationsUpdateInstanceErrors, AppStoreVersionLocalizationsUpdateInstanceResponses, AppStoreVersionPhasedReleasesCreateInstanceData, AppStoreVersionPhasedReleasesCreateInstanceErrors, AppStoreVersionPhasedReleasesCreateInstanceResponses, AppStoreVersionPhasedReleasesDeleteInstanceData, AppStoreVersionPhasedReleasesDeleteInstanceErrors, AppStoreVersionPhasedReleasesDeleteInstanceResponses, AppStoreVersionPhasedReleasesUpdateInstanceData, AppStoreVersionPhasedReleasesUpdateInstanceErrors, AppStoreVersionPhasedReleasesUpdateInstanceResponses, AppStoreVersionPromotionsCreateInstanceData, AppStoreVersionPromotionsCreateInstanceErrors, AppStoreVersionPromotionsCreateInstanceResponses, AppStoreVersionReleaseRequestsCreateInstanceData, AppStoreVersionReleaseRequestsCreateInstanceErrors, AppStoreVersionReleaseRequestsCreateInstanceResponses, AppStoreVersionsAgeRatingDeclarationGetToOneRelatedData, AppStoreVersionsAgeRatingDeclarationGetToOneRelatedErrors, AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponses, AppStoreVersionsAgeRatingDeclarationGetToOneRelationshipData, AppStoreVersionsAgeRatingDeclarationGetToOneRelationshipErrors, AppStoreVersionsAgeRatingDeclarationGetToOneRelationshipResponses, AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedData, AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedErrors, AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedResponses, AppStoreVersionsAlternativeDistributionPackageGetToOneRelationshipData, AppStoreVersionsAlternativeDistributionPackageGetToOneRelationshipErrors, AppStoreVersionsAlternativeDistributionPackageGetToOneRelationshipResponses, AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedData, AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedErrors, AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedResponses, AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipData, AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipErrors, AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipResponses, AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipData, AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipErrors, AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipResponses, AppStoreVersionsAppStoreReviewDetailGetToOneRelatedData, AppStoreVersionsAppStoreReviewDetailGetToOneRelatedErrors, AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponses, AppStoreVersionsAppStoreReviewDetailGetToOneRelationshipData, AppStoreVersionsAppStoreReviewDetailGetToOneRelationshipErrors, AppStoreVersionsAppStoreReviewDetailGetToOneRelationshipResponses, AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedData, AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedErrors, AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedResponses, AppStoreVersionsAppStoreVersionExperimentsGetToManyRelationshipData, AppStoreVersionsAppStoreVersionExperimentsGetToManyRelationshipErrors, AppStoreVersionsAppStoreVersionExperimentsGetToManyRelationshipResponses, AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedData, AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedErrors, AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedResponses, AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelationshipData, AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelationshipErrors, AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelationshipResponses, AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedData, AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedErrors, AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponses, AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelationshipData, AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelationshipErrors, AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelationshipResponses, AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedData, AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedErrors, AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponses, AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelationshipData, AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelationshipErrors, AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelationshipResponses, AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedData, AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedErrors, AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponses, AppStoreVersionsAppStoreVersionSubmissionGetToOneRelationshipData, AppStoreVersionsAppStoreVersionSubmissionGetToOneRelationshipErrors, AppStoreVersionsAppStoreVersionSubmissionGetToOneRelationshipResponses, AppStoreVersionsBuildGetToOneRelatedData, AppStoreVersionsBuildGetToOneRelatedErrors, AppStoreVersionsBuildGetToOneRelatedResponses, AppStoreVersionsBuildGetToOneRelationshipData, AppStoreVersionsBuildGetToOneRelationshipErrors, AppStoreVersionsBuildGetToOneRelationshipResponses, AppStoreVersionsBuildUpdateToOneRelationshipData, AppStoreVersionsBuildUpdateToOneRelationshipErrors, AppStoreVersionsBuildUpdateToOneRelationshipResponses, AppStoreVersionsCreateInstanceData, AppStoreVersionsCreateInstanceErrors, AppStoreVersionsCreateInstanceResponses, AppStoreVersionsCustomerReviewsGetToManyRelatedData, AppStoreVersionsCustomerReviewsGetToManyRelatedErrors, AppStoreVersionsCustomerReviewsGetToManyRelatedResponses, AppStoreVersionsCustomerReviewsGetToManyRelationshipData, AppStoreVersionsCustomerReviewsGetToManyRelationshipErrors, AppStoreVersionsCustomerReviewsGetToManyRelationshipResponses, AppStoreVersionsDeleteInstanceData, AppStoreVersionsDeleteInstanceErrors, AppStoreVersionsDeleteInstanceResponses, AppStoreVersionsGameCenterAppVersionGetToOneRelatedData, AppStoreVersionsGameCenterAppVersionGetToOneRelatedErrors, AppStoreVersionsGameCenterAppVersionGetToOneRelatedResponses, AppStoreVersionsGameCenterAppVersionGetToOneRelationshipData, AppStoreVersionsGameCenterAppVersionGetToOneRelationshipErrors, AppStoreVersionsGameCenterAppVersionGetToOneRelationshipResponses, AppStoreVersionsGetInstanceData, AppStoreVersionsGetInstanceErrors, AppStoreVersionsGetInstanceResponses, AppStoreVersionsRoutingAppCoverageGetToOneRelatedData, AppStoreVersionsRoutingAppCoverageGetToOneRelatedErrors, AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponses, AppStoreVersionsRoutingAppCoverageGetToOneRelationshipData, AppStoreVersionsRoutingAppCoverageGetToOneRelationshipErrors, AppStoreVersionsRoutingAppCoverageGetToOneRelationshipResponses, AppStoreVersionSubmissionsDeleteInstanceData, AppStoreVersionSubmissionsDeleteInstanceErrors, AppStoreVersionSubmissionsDeleteInstanceResponses, AppStoreVersionsUpdateInstanceData, AppStoreVersionsUpdateInstanceErrors, AppStoreVersionsUpdateInstanceResponses, AppsUpdateInstanceData, AppsUpdateInstanceErrors, AppsUpdateInstanceResponses, AppsWebhooksGetToManyRelatedData, AppsWebhooksGetToManyRelatedErrors, AppsWebhooksGetToManyRelatedResponses, AppsWebhooksGetToManyRelationshipData, AppsWebhooksGetToManyRelationshipErrors, AppsWebhooksGetToManyRelationshipResponses, AppTagsTerritoriesGetToManyRelatedData, AppTagsTerritoriesGetToManyRelatedErrors, AppTagsTerritoriesGetToManyRelatedResponses, AppTagsTerritoriesGetToManyRelationshipData, AppTagsTerritoriesGetToManyRelationshipErrors, AppTagsTerritoriesGetToManyRelationshipResponses, AppTagsUpdateInstanceData, AppTagsUpdateInstanceErrors, AppTagsUpdateInstanceResponses, BackgroundAssetsCreateInstanceData, BackgroundAssetsCreateInstanceErrors, BackgroundAssetsCreateInstanceResponses, BackgroundAssetsGetInstanceData, BackgroundAssetsGetInstanceErrors, BackgroundAssetsGetInstanceResponses, BackgroundAssetsVersionsGetToManyRelatedData, BackgroundAssetsVersionsGetToManyRelatedErrors, BackgroundAssetsVersionsGetToManyRelatedResponses, BackgroundAssetsVersionsGetToManyRelationshipData, BackgroundAssetsVersionsGetToManyRelationshipErrors, BackgroundAssetsVersionsGetToManyRelationshipResponses, BackgroundAssetUploadFilesCreateInstanceData, BackgroundAssetUploadFilesCreateInstanceErrors, BackgroundAssetUploadFilesCreateInstanceResponses, BackgroundAssetUploadFilesGetInstanceData, BackgroundAssetUploadFilesGetInstanceErrors, BackgroundAssetUploadFilesGetInstanceResponses, BackgroundAssetUploadFilesUpdateInstanceData, BackgroundAssetUploadFilesUpdateInstanceErrors, BackgroundAssetUploadFilesUpdateInstanceResponses, BackgroundAssetVersionAppStoreReleasesGetInstanceData, BackgroundAssetVersionAppStoreReleasesGetInstanceErrors, BackgroundAssetVersionAppStoreReleasesGetInstanceResponses, BackgroundAssetVersionExternalBetaReleasesGetInstanceData, BackgroundAssetVersionExternalBetaReleasesGetInstanceErrors, BackgroundAssetVersionExternalBetaReleasesGetInstanceResponses, BackgroundAssetVersionInternalBetaReleasesGetInstanceData, BackgroundAssetVersionInternalBetaReleasesGetInstanceErrors, BackgroundAssetVersionInternalBetaReleasesGetInstanceResponses, BackgroundAssetVersionsBackgroundAssetUploadFilesGetToManyRelatedData, BackgroundAssetVersionsBackgroundAssetUploadFilesGetToManyRelatedErrors, BackgroundAssetVersionsBackgroundAssetUploadFilesGetToManyRelatedResponses, BackgroundAssetVersionsBackgroundAssetUploadFilesGetToManyRelationshipData, BackgroundAssetVersionsBackgroundAssetUploadFilesGetToManyRelationshipErrors, BackgroundAssetVersionsBackgroundAssetUploadFilesGetToManyRelationshipResponses, BackgroundAssetVersionsCreateInstanceData, BackgroundAssetVersionsCreateInstanceErrors, BackgroundAssetVersionsCreateInstanceResponses, BackgroundAssetVersionsGetInstanceData, BackgroundAssetVersionsGetInstanceErrors, BackgroundAssetVersionsGetInstanceResponses, BetaAppClipInvocationLocalizationsCreateInstanceData, BetaAppClipInvocationLocalizationsCreateInstanceErrors, BetaAppClipInvocationLocalizationsCreateInstanceResponses, BetaAppClipInvocationLocalizationsDeleteInstanceData, BetaAppClipInvocationLocalizationsDeleteInstanceErrors, BetaAppClipInvocationLocalizationsDeleteInstanceResponses, BetaAppClipInvocationLocalizationsUpdateInstanceData, BetaAppClipInvocationLocalizationsUpdateInstanceErrors, BetaAppClipInvocationLocalizationsUpdateInstanceResponses, BetaAppClipInvocationsCreateInstanceData, BetaAppClipInvocationsCreateInstanceErrors, BetaAppClipInvocationsCreateInstanceResponses, BetaAppClipInvocationsDeleteInstanceData, BetaAppClipInvocationsDeleteInstanceErrors, BetaAppClipInvocationsDeleteInstanceResponses, BetaAppClipInvocationsGetInstanceData, BetaAppClipInvocationsGetInstanceErrors, BetaAppClipInvocationsGetInstanceResponses, BetaAppClipInvocationsUpdateInstanceData, BetaAppClipInvocationsUpdateInstanceErrors, BetaAppClipInvocationsUpdateInstanceResponses, BetaAppLocalizationsAppGetToOneRelatedData, BetaAppLocalizationsAppGetToOneRelatedErrors, BetaAppLocalizationsAppGetToOneRelatedResponses, BetaAppLocalizationsAppGetToOneRelationshipData, BetaAppLocalizationsAppGetToOneRelationshipErrors, BetaAppLocalizationsAppGetToOneRelationshipResponses, BetaAppLocalizationsCreateInstanceData, BetaAppLocalizationsCreateInstanceErrors, BetaAppLocalizationsCreateInstanceResponses, BetaAppLocalizationsDeleteInstanceData, BetaAppLocalizationsDeleteInstanceErrors, BetaAppLocalizationsDeleteInstanceResponses, BetaAppLocalizationsGetCollectionData, BetaAppLocalizationsGetCollectionErrors, BetaAppLocalizationsGetCollectionResponses, BetaAppLocalizationsGetInstanceData, BetaAppLocalizationsGetInstanceErrors, BetaAppLocalizationsGetInstanceResponses, BetaAppLocalizationsUpdateInstanceData, BetaAppLocalizationsUpdateInstanceErrors, BetaAppLocalizationsUpdateInstanceResponses, BetaAppReviewDetailsAppGetToOneRelatedData, BetaAppReviewDetailsAppGetToOneRelatedErrors, BetaAppReviewDetailsAppGetToOneRelatedResponses, BetaAppReviewDetailsAppGetToOneRelationshipData, BetaAppReviewDetailsAppGetToOneRelationshipErrors, BetaAppReviewDetailsAppGetToOneRelationshipResponses, BetaAppReviewDetailsGetCollectionData, BetaAppReviewDetailsGetCollectionErrors, BetaAppReviewDetailsGetCollectionResponses, BetaAppReviewDetailsGetInstanceData, BetaAppReviewDetailsGetInstanceErrors, BetaAppReviewDetailsGetInstanceResponses, BetaAppReviewDetailsUpdateInstanceData, BetaAppReviewDetailsUpdateInstanceErrors, BetaAppReviewDetailsUpdateInstanceResponses, BetaAppReviewSubmissionsBuildGetToOneRelatedData, BetaAppReviewSubmissionsBuildGetToOneRelatedErrors, BetaAppReviewSubmissionsBuildGetToOneRelatedResponses, BetaAppReviewSubmissionsBuildGetToOneRelationshipData, BetaAppReviewSubmissionsBuildGetToOneRelationshipErrors, BetaAppReviewSubmissionsBuildGetToOneRelationshipResponses, BetaAppReviewSubmissionsCreateInstanceData, BetaAppReviewSubmissionsCreateInstanceErrors, BetaAppReviewSubmissionsCreateInstanceResponses, BetaAppReviewSubmissionsGetCollectionData, BetaAppReviewSubmissionsGetCollectionErrors, BetaAppReviewSubmissionsGetCollectionResponses, BetaAppReviewSubmissionsGetInstanceData, BetaAppReviewSubmissionsGetInstanceErrors, BetaAppReviewSubmissionsGetInstanceResponses, BetaBuildLocalizationsBuildGetToOneRelatedData, BetaBuildLocalizationsBuildGetToOneRelatedErrors, BetaBuildLocalizationsBuildGetToOneRelatedResponses, BetaBuildLocalizationsBuildGetToOneRelationshipData, BetaBuildLocalizationsBuildGetToOneRelationshipErrors, BetaBuildLocalizationsBuildGetToOneRelationshipResponses, BetaBuildLocalizationsCreateInstanceData, BetaBuildLocalizationsCreateInstanceErrors, BetaBuildLocalizationsCreateInstanceResponses, BetaBuildLocalizationsDeleteInstanceData, BetaBuildLocalizationsDeleteInstanceErrors, BetaBuildLocalizationsDeleteInstanceResponses, BetaBuildLocalizationsGetCollectionData, BetaBuildLocalizationsGetCollectionErrors, BetaBuildLocalizationsGetCollectionResponses, BetaBuildLocalizationsGetInstanceData, BetaBuildLocalizationsGetInstanceErrors, BetaBuildLocalizationsGetInstanceResponses, BetaBuildLocalizationsUpdateInstanceData, BetaBuildLocalizationsUpdateInstanceErrors, BetaBuildLocalizationsUpdateInstanceResponses, BetaCrashLogsGetInstanceData, BetaCrashLogsGetInstanceErrors, BetaCrashLogsGetInstanceResponses, BetaFeedbackCrashSubmissionsCrashLogGetToOneRelatedData, BetaFeedbackCrashSubmissionsCrashLogGetToOneRelatedErrors, BetaFeedbackCrashSubmissionsCrashLogGetToOneRelatedResponses, BetaFeedbackCrashSubmissionsCrashLogGetToOneRelationshipData, BetaFeedbackCrashSubmissionsCrashLogGetToOneRelationshipErrors, BetaFeedbackCrashSubmissionsCrashLogGetToOneRelationshipResponses, BetaFeedbackCrashSubmissionsDeleteInstanceData, BetaFeedbackCrashSubmissionsDeleteInstanceErrors, BetaFeedbackCrashSubmissionsDeleteInstanceResponses, BetaFeedbackCrashSubmissionsGetInstanceData, BetaFeedbackCrashSubmissionsGetInstanceErrors, BetaFeedbackCrashSubmissionsGetInstanceResponses, BetaFeedbackScreenshotSubmissionsDeleteInstanceData, BetaFeedbackScreenshotSubmissionsDeleteInstanceErrors, BetaFeedbackScreenshotSubmissionsDeleteInstanceResponses, BetaFeedbackScreenshotSubmissionsGetInstanceData, BetaFeedbackScreenshotSubmissionsGetInstanceErrors, BetaFeedbackScreenshotSubmissionsGetInstanceResponses, BetaGroupsAppGetToOneRelatedData, BetaGroupsAppGetToOneRelatedErrors, BetaGroupsAppGetToOneRelatedResponses, BetaGroupsAppGetToOneRelationshipData, BetaGroupsAppGetToOneRelationshipErrors, BetaGroupsAppGetToOneRelationshipResponses, BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedData, BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedErrors, BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedResponses, BetaGroupsBetaRecruitmentCriteriaGetToOneRelationshipData, BetaGroupsBetaRecruitmentCriteriaGetToOneRelationshipErrors, BetaGroupsBetaRecruitmentCriteriaGetToOneRelationshipResponses, BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedData, BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedErrors, BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedResponses, BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelationshipData, BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelationshipErrors, BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelationshipResponses, BetaGroupsBetaTestersCreateToManyRelationshipData, BetaGroupsBetaTestersCreateToManyRelationshipErrors, BetaGroupsBetaTestersCreateToManyRelationshipResponses, BetaGroupsBetaTestersDeleteToManyRelationshipData, BetaGroupsBetaTestersDeleteToManyRelationshipErrors, BetaGroupsBetaTestersDeleteToManyRelationshipResponses, BetaGroupsBetaTestersGetToManyRelatedData, BetaGroupsBetaTestersGetToManyRelatedErrors, BetaGroupsBetaTestersGetToManyRelatedResponses, BetaGroupsBetaTestersGetToManyRelationshipData, BetaGroupsBetaTestersGetToManyRelationshipErrors, BetaGroupsBetaTestersGetToManyRelationshipResponses, BetaGroupsBetaTesterUsagesGetMetricsData, BetaGroupsBetaTesterUsagesGetMetricsErrors, BetaGroupsBetaTesterUsagesGetMetricsResponses, BetaGroupsBuildsCreateToManyRelationshipData, BetaGroupsBuildsCreateToManyRelationshipErrors, BetaGroupsBuildsCreateToManyRelationshipResponses, BetaGroupsBuildsDeleteToManyRelationshipData, BetaGroupsBuildsDeleteToManyRelationshipErrors, BetaGroupsBuildsDeleteToManyRelationshipResponses, BetaGroupsBuildsGetToManyRelatedData, BetaGroupsBuildsGetToManyRelatedErrors, BetaGroupsBuildsGetToManyRelatedResponses, BetaGroupsBuildsGetToManyRelationshipData, BetaGroupsBuildsGetToManyRelationshipErrors, BetaGroupsBuildsGetToManyRelationshipResponses, BetaGroupsCreateInstanceData, BetaGroupsCreateInstanceErrors, BetaGroupsCreateInstanceResponses, BetaGroupsDeleteInstanceData, BetaGroupsDeleteInstanceErrors, BetaGroupsDeleteInstanceResponses, BetaGroupsGetCollectionData, BetaGroupsGetCollectionErrors, BetaGroupsGetCollectionResponses, BetaGroupsGetInstanceData, BetaGroupsGetInstanceErrors, BetaGroupsGetInstanceResponses, BetaGroupsPublicLinkUsagesGetMetricsData, BetaGroupsPublicLinkUsagesGetMetricsErrors, BetaGroupsPublicLinkUsagesGetMetricsResponses, BetaGroupsUpdateInstanceData, BetaGroupsUpdateInstanceErrors, BetaGroupsUpdateInstanceResponses, BetaLicenseAgreementsAppGetToOneRelatedData, BetaLicenseAgreementsAppGetToOneRelatedErrors, BetaLicenseAgreementsAppGetToOneRelatedResponses, BetaLicenseAgreementsAppGetToOneRelationshipData, BetaLicenseAgreementsAppGetToOneRelationshipErrors, BetaLicenseAgreementsAppGetToOneRelationshipResponses, BetaLicenseAgreementsGetCollectionData, BetaLicenseAgreementsGetCollectionErrors, BetaLicenseAgreementsGetCollectionResponses, BetaLicenseAgreementsGetInstanceData, BetaLicenseAgreementsGetInstanceErrors, BetaLicenseAgreementsGetInstanceResponses, BetaLicenseAgreementsUpdateInstanceData, BetaLicenseAgreementsUpdateInstanceErrors, BetaLicenseAgreementsUpdateInstanceResponses, BetaRecruitmentCriteriaCreateInstanceData, BetaRecruitmentCriteriaCreateInstanceErrors, BetaRecruitmentCriteriaCreateInstanceResponses, BetaRecruitmentCriteriaDeleteInstanceData, BetaRecruitmentCriteriaDeleteInstanceErrors, BetaRecruitmentCriteriaDeleteInstanceResponses, BetaRecruitmentCriteriaUpdateInstanceData, BetaRecruitmentCriteriaUpdateInstanceErrors, BetaRecruitmentCriteriaUpdateInstanceResponses, BetaRecruitmentCriterionOptionsGetCollectionData, BetaRecruitmentCriterionOptionsGetCollectionErrors, BetaRecruitmentCriterionOptionsGetCollectionResponses, BetaTesterInvitationsCreateInstanceData, BetaTesterInvitationsCreateInstanceErrors, BetaTesterInvitationsCreateInstanceResponses, BetaTestersAppsDeleteToManyRelationshipData, BetaTestersAppsDeleteToManyRelationshipErrors, BetaTestersAppsDeleteToManyRelationshipResponses, BetaTestersAppsGetToManyRelatedData, BetaTestersAppsGetToManyRelatedErrors, BetaTestersAppsGetToManyRelatedResponses, BetaTestersAppsGetToManyRelationshipData, BetaTestersAppsGetToManyRelationshipErrors, BetaTestersAppsGetToManyRelationshipResponses, BetaTestersBetaGroupsCreateToManyRelationshipData, BetaTestersBetaGroupsCreateToManyRelationshipErrors, BetaTestersBetaGroupsCreateToManyRelationshipResponses, BetaTestersBetaGroupsDeleteToManyRelationshipData, BetaTestersBetaGroupsDeleteToManyRelationshipErrors, BetaTestersBetaGroupsDeleteToManyRelationshipResponses, BetaTestersBetaGroupsGetToManyRelatedData, BetaTestersBetaGroupsGetToManyRelatedErrors, BetaTestersBetaGroupsGetToManyRelatedResponses, BetaTestersBetaGroupsGetToManyRelationshipData, BetaTestersBetaGroupsGetToManyRelationshipErrors, BetaTestersBetaGroupsGetToManyRelationshipResponses, BetaTestersBetaTesterUsagesGetMetricsData, BetaTestersBetaTesterUsagesGetMetricsErrors, BetaTestersBetaTesterUsagesGetMetricsResponses, BetaTestersBuildsCreateToManyRelationshipData, BetaTestersBuildsCreateToManyRelationshipErrors, BetaTestersBuildsCreateToManyRelationshipResponses, BetaTestersBuildsDeleteToManyRelationshipData, BetaTestersBuildsDeleteToManyRelationshipErrors, BetaTestersBuildsDeleteToManyRelationshipResponses, BetaTestersBuildsGetToManyRelatedData, BetaTestersBuildsGetToManyRelatedErrors, BetaTestersBuildsGetToManyRelatedResponses, BetaTestersBuildsGetToManyRelationshipData, BetaTestersBuildsGetToManyRelationshipErrors, BetaTestersBuildsGetToManyRelationshipResponses, BetaTestersCreateInstanceData, BetaTestersCreateInstanceErrors, BetaTestersCreateInstanceResponses, BetaTestersDeleteInstanceData, BetaTestersDeleteInstanceErrors, BetaTestersDeleteInstanceResponses, BetaTestersGetCollectionData, BetaTestersGetCollectionErrors, BetaTestersGetCollectionResponses, BetaTestersGetInstanceData, BetaTestersGetInstanceErrors, BetaTestersGetInstanceResponses, BuildBetaDetailsBuildGetToOneRelatedData, BuildBetaDetailsBuildGetToOneRelatedErrors, BuildBetaDetailsBuildGetToOneRelatedResponses, BuildBetaDetailsBuildGetToOneRelationshipData, BuildBetaDetailsBuildGetToOneRelationshipErrors, BuildBetaDetailsBuildGetToOneRelationshipResponses, BuildBetaDetailsGetCollectionData, BuildBetaDetailsGetCollectionErrors, BuildBetaDetailsGetCollectionResponses, BuildBetaDetailsGetInstanceData, BuildBetaDetailsGetInstanceErrors, BuildBetaDetailsGetInstanceResponses, BuildBetaDetailsUpdateInstanceData, BuildBetaDetailsUpdateInstanceErrors, BuildBetaDetailsUpdateInstanceResponses, BuildBetaNotificationsCreateInstanceData, BuildBetaNotificationsCreateInstanceErrors, BuildBetaNotificationsCreateInstanceResponses, BuildBundlesAppClipDomainCacheStatusGetToOneRelatedData, BuildBundlesAppClipDomainCacheStatusGetToOneRelatedErrors, BuildBundlesAppClipDomainCacheStatusGetToOneRelatedResponses, BuildBundlesAppClipDomainCacheStatusGetToOneRelationshipData, BuildBundlesAppClipDomainCacheStatusGetToOneRelationshipErrors, BuildBundlesAppClipDomainCacheStatusGetToOneRelationshipResponses, BuildBundlesAppClipDomainDebugStatusGetToOneRelatedData, BuildBundlesAppClipDomainDebugStatusGetToOneRelatedErrors, BuildBundlesAppClipDomainDebugStatusGetToOneRelatedResponses, BuildBundlesAppClipDomainDebugStatusGetToOneRelationshipData, BuildBundlesAppClipDomainDebugStatusGetToOneRelationshipErrors, BuildBundlesAppClipDomainDebugStatusGetToOneRelationshipResponses, BuildBundlesBetaAppClipInvocationsGetToManyRelatedData, BuildBundlesBetaAppClipInvocationsGetToManyRelatedErrors, BuildBundlesBetaAppClipInvocationsGetToManyRelatedResponses, BuildBundlesBetaAppClipInvocationsGetToManyRelationshipData, BuildBundlesBetaAppClipInvocationsGetToManyRelationshipErrors, BuildBundlesBetaAppClipInvocationsGetToManyRelationshipResponses, BuildBundlesBuildBundleFileSizesGetToManyRelatedData, BuildBundlesBuildBundleFileSizesGetToManyRelatedErrors, BuildBundlesBuildBundleFileSizesGetToManyRelatedResponses, BuildBundlesBuildBundleFileSizesGetToManyRelationshipData, BuildBundlesBuildBundleFileSizesGetToManyRelationshipErrors, BuildBundlesBuildBundleFileSizesGetToManyRelationshipResponses, BuildsAppEncryptionDeclarationGetToOneRelatedData, BuildsAppEncryptionDeclarationGetToOneRelatedErrors, BuildsAppEncryptionDeclarationGetToOneRelatedResponses, BuildsAppEncryptionDeclarationGetToOneRelationshipData, BuildsAppEncryptionDeclarationGetToOneRelationshipErrors, BuildsAppEncryptionDeclarationGetToOneRelationshipResponses, BuildsAppEncryptionDeclarationUpdateToOneRelationshipData, BuildsAppEncryptionDeclarationUpdateToOneRelationshipErrors, BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponses, BuildsAppGetToOneRelatedData, BuildsAppGetToOneRelatedErrors, BuildsAppGetToOneRelatedResponses, BuildsAppGetToOneRelationshipData, BuildsAppGetToOneRelationshipErrors, BuildsAppGetToOneRelationshipResponses, BuildsAppStoreVersionGetToOneRelatedData, BuildsAppStoreVersionGetToOneRelatedErrors, BuildsAppStoreVersionGetToOneRelatedResponses, BuildsAppStoreVersionGetToOneRelationshipData, BuildsAppStoreVersionGetToOneRelationshipErrors, BuildsAppStoreVersionGetToOneRelationshipResponses, BuildsBetaAppReviewSubmissionGetToOneRelatedData, BuildsBetaAppReviewSubmissionGetToOneRelatedErrors, BuildsBetaAppReviewSubmissionGetToOneRelatedResponses, BuildsBetaAppReviewSubmissionGetToOneRelationshipData, BuildsBetaAppReviewSubmissionGetToOneRelationshipErrors, BuildsBetaAppReviewSubmissionGetToOneRelationshipResponses, BuildsBetaBuildLocalizationsGetToManyRelatedData, BuildsBetaBuildLocalizationsGetToManyRelatedErrors, BuildsBetaBuildLocalizationsGetToManyRelatedResponses, BuildsBetaBuildLocalizationsGetToManyRelationshipData, BuildsBetaBuildLocalizationsGetToManyRelationshipErrors, BuildsBetaBuildLocalizationsGetToManyRelationshipResponses, BuildsBetaBuildUsagesGetMetricsData, BuildsBetaBuildUsagesGetMetricsErrors, BuildsBetaBuildUsagesGetMetricsResponses, BuildsBetaGroupsCreateToManyRelationshipData, BuildsBetaGroupsCreateToManyRelationshipErrors, BuildsBetaGroupsCreateToManyRelationshipResponses, BuildsBetaGroupsDeleteToManyRelationshipData, BuildsBetaGroupsDeleteToManyRelationshipErrors, BuildsBetaGroupsDeleteToManyRelationshipResponses, BuildsBuildBetaDetailGetToOneRelatedData, BuildsBuildBetaDetailGetToOneRelatedErrors, BuildsBuildBetaDetailGetToOneRelatedResponses, BuildsBuildBetaDetailGetToOneRelationshipData, BuildsBuildBetaDetailGetToOneRelationshipErrors, BuildsBuildBetaDetailGetToOneRelationshipResponses, BuildsDiagnosticSignaturesGetToManyRelatedData, BuildsDiagnosticSignaturesGetToManyRelatedErrors, BuildsDiagnosticSignaturesGetToManyRelatedResponses, BuildsDiagnosticSignaturesGetToManyRelationshipData, BuildsDiagnosticSignaturesGetToManyRelationshipErrors, BuildsDiagnosticSignaturesGetToManyRelationshipResponses, BuildsGetCollectionData, BuildsGetCollectionErrors, BuildsGetCollectionResponses, BuildsGetInstanceData, BuildsGetInstanceErrors, BuildsGetInstanceResponses, BuildsIconsGetToManyRelatedData, BuildsIconsGetToManyRelatedErrors, BuildsIconsGetToManyRelatedResponses, BuildsIconsGetToManyRelationshipData, BuildsIconsGetToManyRelationshipErrors, BuildsIconsGetToManyRelationshipResponses, BuildsIndividualTestersCreateToManyRelationshipData, BuildsIndividualTestersCreateToManyRelationshipErrors, BuildsIndividualTestersCreateToManyRelationshipResponses, BuildsIndividualTestersDeleteToManyRelationshipData, BuildsIndividualTestersDeleteToManyRelationshipErrors, BuildsIndividualTestersDeleteToManyRelationshipResponses, BuildsIndividualTestersGetToManyRelatedData, BuildsIndividualTestersGetToManyRelatedErrors, BuildsIndividualTestersGetToManyRelatedResponses, BuildsIndividualTestersGetToManyRelationshipData, BuildsIndividualTestersGetToManyRelationshipErrors, BuildsIndividualTestersGetToManyRelationshipResponses, BuildsPerfPowerMetricsGetToManyRelatedData, BuildsPerfPowerMetricsGetToManyRelatedErrors, BuildsPerfPowerMetricsGetToManyRelatedResponses, BuildsPreReleaseVersionGetToOneRelatedData, BuildsPreReleaseVersionGetToOneRelatedErrors, BuildsPreReleaseVersionGetToOneRelatedResponses, BuildsPreReleaseVersionGetToOneRelationshipData, BuildsPreReleaseVersionGetToOneRelationshipErrors, BuildsPreReleaseVersionGetToOneRelationshipResponses, BuildsUpdateInstanceData, BuildsUpdateInstanceErrors, BuildsUpdateInstanceResponses, BuildUploadFilesCreateInstanceData, BuildUploadFilesCreateInstanceErrors, BuildUploadFilesCreateInstanceResponses, BuildUploadFilesGetInstanceData, BuildUploadFilesGetInstanceErrors, BuildUploadFilesGetInstanceResponses, BuildUploadFilesUpdateInstanceData, BuildUploadFilesUpdateInstanceErrors, BuildUploadFilesUpdateInstanceResponses, BuildUploadsBuildUploadFilesGetToManyRelatedData, BuildUploadsBuildUploadFilesGetToManyRelatedErrors, BuildUploadsBuildUploadFilesGetToManyRelatedResponses, BuildUploadsBuildUploadFilesGetToManyRelationshipData, BuildUploadsBuildUploadFilesGetToManyRelationshipErrors, BuildUploadsBuildUploadFilesGetToManyRelationshipResponses, BuildUploadsCreateInstanceData, BuildUploadsCreateInstanceErrors, BuildUploadsCreateInstanceResponses, BuildUploadsDeleteInstanceData, BuildUploadsDeleteInstanceErrors, BuildUploadsDeleteInstanceResponses, BuildUploadsGetInstanceData, BuildUploadsGetInstanceErrors, BuildUploadsGetInstanceResponses, BundleIdCapabilitiesCreateInstanceData, BundleIdCapabilitiesCreateInstanceErrors, BundleIdCapabilitiesCreateInstanceResponses, BundleIdCapabilitiesDeleteInstanceData, BundleIdCapabilitiesDeleteInstanceErrors, BundleIdCapabilitiesDeleteInstanceResponses, BundleIdCapabilitiesUpdateInstanceData, BundleIdCapabilitiesUpdateInstanceErrors, BundleIdCapabilitiesUpdateInstanceResponses, BundleIdsAppGetToOneRelatedData, BundleIdsAppGetToOneRelatedErrors, BundleIdsAppGetToOneRelatedResponses, BundleIdsAppGetToOneRelationshipData, BundleIdsAppGetToOneRelationshipErrors, BundleIdsAppGetToOneRelationshipResponses, BundleIdsBundleIdCapabilitiesGetToManyRelatedData, BundleIdsBundleIdCapabilitiesGetToManyRelatedErrors, BundleIdsBundleIdCapabilitiesGetToManyRelatedResponses, BundleIdsBundleIdCapabilitiesGetToManyRelationshipData, BundleIdsBundleIdCapabilitiesGetToManyRelationshipErrors, BundleIdsBundleIdCapabilitiesGetToManyRelationshipResponses, BundleIdsCreateInstanceData, BundleIdsCreateInstanceErrors, BundleIdsCreateInstanceResponses, BundleIdsDeleteInstanceData, BundleIdsDeleteInstanceErrors, BundleIdsDeleteInstanceResponses, BundleIdsGetCollectionData, BundleIdsGetCollectionErrors, BundleIdsGetCollectionResponses, BundleIdsGetInstanceData, BundleIdsGetInstanceErrors, BundleIdsGetInstanceResponses, BundleIdsProfilesGetToManyRelatedData, BundleIdsProfilesGetToManyRelatedErrors, BundleIdsProfilesGetToManyRelatedResponses, BundleIdsProfilesGetToManyRelationshipData, BundleIdsProfilesGetToManyRelationshipErrors, BundleIdsProfilesGetToManyRelationshipResponses, BundleIdsUpdateInstanceData, BundleIdsUpdateInstanceErrors, BundleIdsUpdateInstanceResponses, CertificatesCreateInstanceData, CertificatesCreateInstanceErrors, CertificatesCreateInstanceResponses, CertificatesDeleteInstanceData, CertificatesDeleteInstanceErrors, CertificatesDeleteInstanceResponses, CertificatesGetCollectionData, CertificatesGetCollectionErrors, CertificatesGetCollectionResponses, CertificatesGetInstanceData, CertificatesGetInstanceErrors, CertificatesGetInstanceResponses, CertificatesPassTypeIdGetToOneRelatedData, CertificatesPassTypeIdGetToOneRelatedErrors, CertificatesPassTypeIdGetToOneRelatedResponses, CertificatesPassTypeIdGetToOneRelationshipData, CertificatesPassTypeIdGetToOneRelationshipErrors, CertificatesPassTypeIdGetToOneRelationshipResponses, CertificatesUpdateInstanceData, CertificatesUpdateInstanceErrors, CertificatesUpdateInstanceResponses, CiArtifactsGetInstanceData, CiArtifactsGetInstanceErrors, CiArtifactsGetInstanceResponses, CiBuildActionsArtifactsGetToManyRelatedData, CiBuildActionsArtifactsGetToManyRelatedErrors, CiBuildActionsArtifactsGetToManyRelatedResponses, CiBuildActionsArtifactsGetToManyRelationshipData, CiBuildActionsArtifactsGetToManyRelationshipErrors, CiBuildActionsArtifactsGetToManyRelationshipResponses, CiBuildActionsBuildRunGetToOneRelatedData, CiBuildActionsBuildRunGetToOneRelatedErrors, CiBuildActionsBuildRunGetToOneRelatedResponses, CiBuildActionsBuildRunGetToOneRelationshipData, CiBuildActionsBuildRunGetToOneRelationshipErrors, CiBuildActionsBuildRunGetToOneRelationshipResponses, CiBuildActionsGetInstanceData, CiBuildActionsGetInstanceErrors, CiBuildActionsGetInstanceResponses, CiBuildActionsIssuesGetToManyRelatedData, CiBuildActionsIssuesGetToManyRelatedErrors, CiBuildActionsIssuesGetToManyRelatedResponses, CiBuildActionsIssuesGetToManyRelationshipData, CiBuildActionsIssuesGetToManyRelationshipErrors, CiBuildActionsIssuesGetToManyRelationshipResponses, CiBuildActionsTestResultsGetToManyRelatedData, CiBuildActionsTestResultsGetToManyRelatedErrors, CiBuildActionsTestResultsGetToManyRelatedResponses, CiBuildActionsTestResultsGetToManyRelationshipData, CiBuildActionsTestResultsGetToManyRelationshipErrors, CiBuildActionsTestResultsGetToManyRelationshipResponses, CiBuildRunsActionsGetToManyRelatedData, CiBuildRunsActionsGetToManyRelatedErrors, CiBuildRunsActionsGetToManyRelatedResponses, CiBuildRunsActionsGetToManyRelationshipData, CiBuildRunsActionsGetToManyRelationshipErrors, CiBuildRunsActionsGetToManyRelationshipResponses, CiBuildRunsBuildsGetToManyRelatedData, CiBuildRunsBuildsGetToManyRelatedErrors, CiBuildRunsBuildsGetToManyRelatedResponses, CiBuildRunsBuildsGetToManyRelationshipData, CiBuildRunsBuildsGetToManyRelationshipErrors, CiBuildRunsBuildsGetToManyRelationshipResponses, CiBuildRunsCreateInstanceData, CiBuildRunsCreateInstanceErrors, CiBuildRunsCreateInstanceResponses, CiBuildRunsGetInstanceData, CiBuildRunsGetInstanceErrors, CiBuildRunsGetInstanceResponses, CiIssuesGetInstanceData, CiIssuesGetInstanceErrors, CiIssuesGetInstanceResponses, CiMacOsVersionsGetCollectionData, CiMacOsVersionsGetCollectionErrors, CiMacOsVersionsGetCollectionResponses, CiMacOsVersionsGetInstanceData, CiMacOsVersionsGetInstanceErrors, CiMacOsVersionsGetInstanceResponses, CiMacOsVersionsXcodeVersionsGetToManyRelatedData, CiMacOsVersionsXcodeVersionsGetToManyRelatedErrors, CiMacOsVersionsXcodeVersionsGetToManyRelatedResponses, CiMacOsVersionsXcodeVersionsGetToManyRelationshipData, CiMacOsVersionsXcodeVersionsGetToManyRelationshipErrors, CiMacOsVersionsXcodeVersionsGetToManyRelationshipResponses, CiProductsAdditionalRepositoriesGetToManyRelatedData, CiProductsAdditionalRepositoriesGetToManyRelatedErrors, CiProductsAdditionalRepositoriesGetToManyRelatedResponses, CiProductsAdditionalRepositoriesGetToManyRelationshipData, CiProductsAdditionalRepositoriesGetToManyRelationshipErrors, CiProductsAdditionalRepositoriesGetToManyRelationshipResponses, CiProductsAppGetToOneRelatedData, CiProductsAppGetToOneRelatedErrors, CiProductsAppGetToOneRelatedResponses, CiProductsAppGetToOneRelationshipData, CiProductsAppGetToOneRelationshipErrors, CiProductsAppGetToOneRelationshipResponses, CiProductsBuildRunsGetToManyRelatedData, CiProductsBuildRunsGetToManyRelatedErrors, CiProductsBuildRunsGetToManyRelatedResponses, CiProductsBuildRunsGetToManyRelationshipData, CiProductsBuildRunsGetToManyRelationshipErrors, CiProductsBuildRunsGetToManyRelationshipResponses, CiProductsDeleteInstanceData, CiProductsDeleteInstanceErrors, CiProductsDeleteInstanceResponses, CiProductsGetCollectionData, CiProductsGetCollectionErrors, CiProductsGetCollectionResponses, CiProductsGetInstanceData, CiProductsGetInstanceErrors, CiProductsGetInstanceResponses, CiProductsPrimaryRepositoriesGetToManyRelatedData, CiProductsPrimaryRepositoriesGetToManyRelatedErrors, CiProductsPrimaryRepositoriesGetToManyRelatedResponses, CiProductsPrimaryRepositoriesGetToManyRelationshipData, CiProductsPrimaryRepositoriesGetToManyRelationshipErrors, CiProductsPrimaryRepositoriesGetToManyRelationshipResponses, CiProductsWorkflowsGetToManyRelatedData, CiProductsWorkflowsGetToManyRelatedErrors, CiProductsWorkflowsGetToManyRelatedResponses, CiProductsWorkflowsGetToManyRelationshipData, CiProductsWorkflowsGetToManyRelationshipErrors, CiProductsWorkflowsGetToManyRelationshipResponses, CiTestResultsGetInstanceData, CiTestResultsGetInstanceErrors, CiTestResultsGetInstanceResponses, CiWorkflowsBuildRunsGetToManyRelatedData, CiWorkflowsBuildRunsGetToManyRelatedErrors, CiWorkflowsBuildRunsGetToManyRelatedResponses, CiWorkflowsBuildRunsGetToManyRelationshipData, CiWorkflowsBuildRunsGetToManyRelationshipErrors, CiWorkflowsBuildRunsGetToManyRelationshipResponses, CiWorkflowsCreateInstanceData, CiWorkflowsCreateInstanceErrors, CiWorkflowsCreateInstanceResponses, CiWorkflowsDeleteInstanceData, CiWorkflowsDeleteInstanceErrors, CiWorkflowsDeleteInstanceResponses, CiWorkflowsGetInstanceData, CiWorkflowsGetInstanceErrors, CiWorkflowsGetInstanceResponses, CiWorkflowsRepositoryGetToOneRelatedData, CiWorkflowsRepositoryGetToOneRelatedErrors, CiWorkflowsRepositoryGetToOneRelatedResponses, CiWorkflowsRepositoryGetToOneRelationshipData, CiWorkflowsRepositoryGetToOneRelationshipErrors, CiWorkflowsRepositoryGetToOneRelationshipResponses, CiWorkflowsUpdateInstanceData, CiWorkflowsUpdateInstanceErrors, CiWorkflowsUpdateInstanceResponses, CiXcodeVersionsGetCollectionData, CiXcodeVersionsGetCollectionErrors, CiXcodeVersionsGetCollectionResponses, CiXcodeVersionsGetInstanceData, CiXcodeVersionsGetInstanceErrors, CiXcodeVersionsGetInstanceResponses, CiXcodeVersionsMacOsVersionsGetToManyRelatedData, CiXcodeVersionsMacOsVersionsGetToManyRelatedErrors, CiXcodeVersionsMacOsVersionsGetToManyRelatedResponses, CiXcodeVersionsMacOsVersionsGetToManyRelationshipData, CiXcodeVersionsMacOsVersionsGetToManyRelationshipErrors, CiXcodeVersionsMacOsVersionsGetToManyRelationshipResponses, CustomerReviewResponsesCreateInstanceData, CustomerReviewResponsesCreateInstanceErrors, CustomerReviewResponsesCreateInstanceResponses, CustomerReviewResponsesDeleteInstanceData, CustomerReviewResponsesDeleteInstanceErrors, CustomerReviewResponsesDeleteInstanceResponses, CustomerReviewResponsesGetInstanceData, CustomerReviewResponsesGetInstanceErrors, CustomerReviewResponsesGetInstanceResponses, CustomerReviewsGetInstanceData, CustomerReviewsGetInstanceErrors, CustomerReviewsGetInstanceResponses, CustomerReviewsResponseGetToOneRelatedData, CustomerReviewsResponseGetToOneRelatedErrors, CustomerReviewsResponseGetToOneRelatedResponses, CustomerReviewsResponseGetToOneRelationshipData, CustomerReviewsResponseGetToOneRelationshipErrors, CustomerReviewsResponseGetToOneRelationshipResponses, DevicesCreateInstanceData, DevicesCreateInstanceErrors, DevicesCreateInstanceResponses, DevicesGetCollectionData, DevicesGetCollectionErrors, DevicesGetCollectionResponses, DevicesGetInstanceData, DevicesGetInstanceErrors, DevicesGetInstanceResponses, DevicesUpdateInstanceData, DevicesUpdateInstanceErrors, DevicesUpdateInstanceResponses, DiagnosticSignaturesLogsGetToManyRelatedData, DiagnosticSignaturesLogsGetToManyRelatedErrors, DiagnosticSignaturesLogsGetToManyRelatedResponses, EndAppAvailabilityPreOrdersCreateInstanceData, EndAppAvailabilityPreOrdersCreateInstanceErrors, EndAppAvailabilityPreOrdersCreateInstanceResponses, EndUserLicenseAgreementsCreateInstanceData, EndUserLicenseAgreementsCreateInstanceErrors, EndUserLicenseAgreementsCreateInstanceResponses, EndUserLicenseAgreementsDeleteInstanceData, EndUserLicenseAgreementsDeleteInstanceErrors, EndUserLicenseAgreementsDeleteInstanceResponses, EndUserLicenseAgreementsGetInstanceData, EndUserLicenseAgreementsGetInstanceErrors, EndUserLicenseAgreementsGetInstanceResponses, EndUserLicenseAgreementsTerritoriesGetToManyRelatedData, EndUserLicenseAgreementsTerritoriesGetToManyRelatedErrors, EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponses, EndUserLicenseAgreementsTerritoriesGetToManyRelationshipData, EndUserLicenseAgreementsTerritoriesGetToManyRelationshipErrors, EndUserLicenseAgreementsTerritoriesGetToManyRelationshipResponses, EndUserLicenseAgreementsUpdateInstanceData, EndUserLicenseAgreementsUpdateInstanceErrors, EndUserLicenseAgreementsUpdateInstanceResponses, FinanceReportsGetCollectionData, FinanceReportsGetCollectionErrors, FinanceReportsGetCollectionResponses, GameCenterAchievementImagesCreateInstanceData, GameCenterAchievementImagesCreateInstanceErrors, GameCenterAchievementImagesCreateInstanceResponses, GameCenterAchievementImagesDeleteInstanceData, GameCenterAchievementImagesDeleteInstanceErrors, GameCenterAchievementImagesDeleteInstanceResponses, GameCenterAchievementImagesGetInstanceData, GameCenterAchievementImagesGetInstanceErrors, GameCenterAchievementImagesGetInstanceResponses, GameCenterAchievementImagesUpdateInstanceData, GameCenterAchievementImagesUpdateInstanceErrors, GameCenterAchievementImagesUpdateInstanceResponses, GameCenterAchievementLocalizationsCreateInstanceData, GameCenterAchievementLocalizationsCreateInstanceErrors, GameCenterAchievementLocalizationsCreateInstanceResponses, GameCenterAchievementLocalizationsDeleteInstanceData, GameCenterAchievementLocalizationsDeleteInstanceErrors, GameCenterAchievementLocalizationsDeleteInstanceResponses, GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedData, GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedErrors, GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedResponses, GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelationshipData, GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelationshipErrors, GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelationshipResponses, GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedData, GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedErrors, GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedResponses, GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelationshipData, GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelationshipErrors, GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelationshipResponses, GameCenterAchievementLocalizationsGetInstanceData, GameCenterAchievementLocalizationsGetInstanceErrors, GameCenterAchievementLocalizationsGetInstanceResponses, GameCenterAchievementLocalizationsUpdateInstanceData, GameCenterAchievementLocalizationsUpdateInstanceErrors, GameCenterAchievementLocalizationsUpdateInstanceResponses, GameCenterAchievementReleasesCreateInstanceData, GameCenterAchievementReleasesCreateInstanceErrors, GameCenterAchievementReleasesCreateInstanceResponses, GameCenterAchievementReleasesDeleteInstanceData, GameCenterAchievementReleasesDeleteInstanceErrors, GameCenterAchievementReleasesDeleteInstanceResponses, GameCenterAchievementReleasesGetInstanceData, GameCenterAchievementReleasesGetInstanceErrors, GameCenterAchievementReleasesGetInstanceResponses, GameCenterAchievementsActivityUpdateToOneRelationshipData, GameCenterAchievementsActivityUpdateToOneRelationshipErrors, GameCenterAchievementsActivityUpdateToOneRelationshipResponses, GameCenterAchievementsCreateInstanceData, GameCenterAchievementsCreateInstanceErrors, GameCenterAchievementsCreateInstanceResponses, GameCenterAchievementsDeleteInstanceData, GameCenterAchievementsDeleteInstanceErrors, GameCenterAchievementsDeleteInstanceResponses, GameCenterAchievementsGetInstanceData, GameCenterAchievementsGetInstanceErrors, GameCenterAchievementsGetInstanceResponses, GameCenterAchievementsGroupAchievementGetToOneRelatedData, GameCenterAchievementsGroupAchievementGetToOneRelatedErrors, GameCenterAchievementsGroupAchievementGetToOneRelatedResponses, GameCenterAchievementsGroupAchievementGetToOneRelationshipData, GameCenterAchievementsGroupAchievementGetToOneRelationshipErrors, GameCenterAchievementsGroupAchievementGetToOneRelationshipResponses, GameCenterAchievementsGroupAchievementUpdateToOneRelationshipData, GameCenterAchievementsGroupAchievementUpdateToOneRelationshipErrors, GameCenterAchievementsGroupAchievementUpdateToOneRelationshipResponses, GameCenterAchievementsLocalizationsGetToManyRelatedData, GameCenterAchievementsLocalizationsGetToManyRelatedErrors, GameCenterAchievementsLocalizationsGetToManyRelatedResponses, GameCenterAchievementsLocalizationsGetToManyRelationshipData, GameCenterAchievementsLocalizationsGetToManyRelationshipErrors, GameCenterAchievementsLocalizationsGetToManyRelationshipResponses, GameCenterAchievementsReleasesGetToManyRelatedData, GameCenterAchievementsReleasesGetToManyRelatedErrors, GameCenterAchievementsReleasesGetToManyRelatedResponses, GameCenterAchievementsReleasesGetToManyRelationshipData, GameCenterAchievementsReleasesGetToManyRelationshipErrors, GameCenterAchievementsReleasesGetToManyRelationshipResponses, GameCenterAchievementsUpdateInstanceData, GameCenterAchievementsUpdateInstanceErrors, GameCenterAchievementsUpdateInstanceResponses, GameCenterActivitiesAchievementsCreateToManyRelationshipData, GameCenterActivitiesAchievementsCreateToManyRelationshipErrors, GameCenterActivitiesAchievementsCreateToManyRelationshipResponses, GameCenterActivitiesAchievementsDeleteToManyRelationshipData, GameCenterActivitiesAchievementsDeleteToManyRelationshipErrors, GameCenterActivitiesAchievementsDeleteToManyRelationshipResponses, GameCenterActivitiesCreateInstanceData, GameCenterActivitiesCreateInstanceErrors, GameCenterActivitiesCreateInstanceResponses, GameCenterActivitiesDeleteInstanceData, GameCenterActivitiesDeleteInstanceErrors, GameCenterActivitiesDeleteInstanceResponses, GameCenterActivitiesGetInstanceData, GameCenterActivitiesGetInstanceErrors, GameCenterActivitiesGetInstanceResponses, GameCenterActivitiesLeaderboardsCreateToManyRelationshipData, GameCenterActivitiesLeaderboardsCreateToManyRelationshipErrors, GameCenterActivitiesLeaderboardsCreateToManyRelationshipResponses, GameCenterActivitiesLeaderboardsDeleteToManyRelationshipData, GameCenterActivitiesLeaderboardsDeleteToManyRelationshipErrors, GameCenterActivitiesLeaderboardsDeleteToManyRelationshipResponses, GameCenterActivitiesUpdateInstanceData, GameCenterActivitiesUpdateInstanceErrors, GameCenterActivitiesUpdateInstanceResponses, GameCenterActivitiesVersionsGetToManyRelatedData, GameCenterActivitiesVersionsGetToManyRelatedErrors, GameCenterActivitiesVersionsGetToManyRelatedResponses, GameCenterActivitiesVersionsGetToManyRelationshipData, GameCenterActivitiesVersionsGetToManyRelationshipErrors, GameCenterActivitiesVersionsGetToManyRelationshipResponses, GameCenterActivityImagesCreateInstanceData, GameCenterActivityImagesCreateInstanceErrors, GameCenterActivityImagesCreateInstanceResponses, GameCenterActivityImagesDeleteInstanceData, GameCenterActivityImagesDeleteInstanceErrors, GameCenterActivityImagesDeleteInstanceResponses, GameCenterActivityImagesGetInstanceData, GameCenterActivityImagesGetInstanceErrors, GameCenterActivityImagesGetInstanceResponses, GameCenterActivityImagesUpdateInstanceData, GameCenterActivityImagesUpdateInstanceErrors, GameCenterActivityImagesUpdateInstanceResponses, GameCenterActivityLocalizationsCreateInstanceData, GameCenterActivityLocalizationsCreateInstanceErrors, GameCenterActivityLocalizationsCreateInstanceResponses, GameCenterActivityLocalizationsDeleteInstanceData, GameCenterActivityLocalizationsDeleteInstanceErrors, GameCenterActivityLocalizationsDeleteInstanceResponses, GameCenterActivityLocalizationsGetInstanceData, GameCenterActivityLocalizationsGetInstanceErrors, GameCenterActivityLocalizationsGetInstanceResponses, GameCenterActivityLocalizationsImageGetToOneRelatedData, GameCenterActivityLocalizationsImageGetToOneRelatedErrors, GameCenterActivityLocalizationsImageGetToOneRelatedResponses, GameCenterActivityLocalizationsImageGetToOneRelationshipData, GameCenterActivityLocalizationsImageGetToOneRelationshipErrors, GameCenterActivityLocalizationsImageGetToOneRelationshipResponses, GameCenterActivityLocalizationsUpdateInstanceData, GameCenterActivityLocalizationsUpdateInstanceErrors, GameCenterActivityLocalizationsUpdateInstanceResponses, GameCenterActivityVersionReleasesCreateInstanceData, GameCenterActivityVersionReleasesCreateInstanceErrors, GameCenterActivityVersionReleasesCreateInstanceResponses, GameCenterActivityVersionReleasesDeleteInstanceData, GameCenterActivityVersionReleasesDeleteInstanceErrors, GameCenterActivityVersionReleasesDeleteInstanceResponses, GameCenterActivityVersionReleasesGetInstanceData, GameCenterActivityVersionReleasesGetInstanceErrors, GameCenterActivityVersionReleasesGetInstanceResponses, GameCenterActivityVersionsCreateInstanceData, GameCenterActivityVersionsCreateInstanceErrors, GameCenterActivityVersionsCreateInstanceResponses, GameCenterActivityVersionsDefaultImageGetToOneRelatedData, GameCenterActivityVersionsDefaultImageGetToOneRelatedErrors, GameCenterActivityVersionsDefaultImageGetToOneRelatedResponses, GameCenterActivityVersionsDefaultImageGetToOneRelationshipData, GameCenterActivityVersionsDefaultImageGetToOneRelationshipErrors, GameCenterActivityVersionsDefaultImageGetToOneRelationshipResponses, GameCenterActivityVersionsGetInstanceData, GameCenterActivityVersionsGetInstanceErrors, GameCenterActivityVersionsGetInstanceResponses, GameCenterActivityVersionsLocalizationsGetToManyRelatedData, GameCenterActivityVersionsLocalizationsGetToManyRelatedErrors, GameCenterActivityVersionsLocalizationsGetToManyRelatedResponses, GameCenterActivityVersionsLocalizationsGetToManyRelationshipData, GameCenterActivityVersionsLocalizationsGetToManyRelationshipErrors, GameCenterActivityVersionsLocalizationsGetToManyRelationshipResponses, GameCenterActivityVersionsUpdateInstanceData, GameCenterActivityVersionsUpdateInstanceErrors, GameCenterActivityVersionsUpdateInstanceResponses, GameCenterAppVersionsAppStoreVersionGetToOneRelatedData, GameCenterAppVersionsAppStoreVersionGetToOneRelatedErrors, GameCenterAppVersionsAppStoreVersionGetToOneRelatedResponses, GameCenterAppVersionsAppStoreVersionGetToOneRelationshipData, GameCenterAppVersionsAppStoreVersionGetToOneRelationshipErrors, GameCenterAppVersionsAppStoreVersionGetToOneRelationshipResponses, GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipData, GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipErrors, GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipResponses, GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipData, GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipErrors, GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipResponses, GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedData, GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedErrors, GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedResponses, GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipData, GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipErrors, GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipResponses, GameCenterAppVersionsCreateInstanceData, GameCenterAppVersionsCreateInstanceErrors, GameCenterAppVersionsCreateInstanceResponses, GameCenterAppVersionsGetInstanceData, GameCenterAppVersionsGetInstanceErrors, GameCenterAppVersionsGetInstanceResponses, GameCenterAppVersionsUpdateInstanceData, GameCenterAppVersionsUpdateInstanceErrors, GameCenterAppVersionsUpdateInstanceResponses, GameCenterChallengeImagesCreateInstanceData, GameCenterChallengeImagesCreateInstanceErrors, GameCenterChallengeImagesCreateInstanceResponses, GameCenterChallengeImagesDeleteInstanceData, GameCenterChallengeImagesDeleteInstanceErrors, GameCenterChallengeImagesDeleteInstanceResponses, GameCenterChallengeImagesGetInstanceData, GameCenterChallengeImagesGetInstanceErrors, GameCenterChallengeImagesGetInstanceResponses, GameCenterChallengeImagesUpdateInstanceData, GameCenterChallengeImagesUpdateInstanceErrors, GameCenterChallengeImagesUpdateInstanceResponses, GameCenterChallengeLocalizationsCreateInstanceData, GameCenterChallengeLocalizationsCreateInstanceErrors, GameCenterChallengeLocalizationsCreateInstanceResponses, GameCenterChallengeLocalizationsDeleteInstanceData, GameCenterChallengeLocalizationsDeleteInstanceErrors, GameCenterChallengeLocalizationsDeleteInstanceResponses, GameCenterChallengeLocalizationsGetInstanceData, GameCenterChallengeLocalizationsGetInstanceErrors, GameCenterChallengeLocalizationsGetInstanceResponses, GameCenterChallengeLocalizationsImageGetToOneRelatedData, GameCenterChallengeLocalizationsImageGetToOneRelatedErrors, GameCenterChallengeLocalizationsImageGetToOneRelatedResponses, GameCenterChallengeLocalizationsImageGetToOneRelationshipData, GameCenterChallengeLocalizationsImageGetToOneRelationshipErrors, GameCenterChallengeLocalizationsImageGetToOneRelationshipResponses, GameCenterChallengeLocalizationsUpdateInstanceData, GameCenterChallengeLocalizationsUpdateInstanceErrors, GameCenterChallengeLocalizationsUpdateInstanceResponses, GameCenterChallengesCreateInstanceData, GameCenterChallengesCreateInstanceErrors, GameCenterChallengesCreateInstanceResponses, GameCenterChallengesDeleteInstanceData, GameCenterChallengesDeleteInstanceErrors, GameCenterChallengesDeleteInstanceResponses, GameCenterChallengesGetInstanceData, GameCenterChallengesGetInstanceErrors, GameCenterChallengesGetInstanceResponses, GameCenterChallengesLeaderboardUpdateToOneRelationshipData, GameCenterChallengesLeaderboardUpdateToOneRelationshipErrors, GameCenterChallengesLeaderboardUpdateToOneRelationshipResponses, GameCenterChallengesUpdateInstanceData, GameCenterChallengesUpdateInstanceErrors, GameCenterChallengesUpdateInstanceResponses, GameCenterChallengesVersionsGetToManyRelatedData, GameCenterChallengesVersionsGetToManyRelatedErrors, GameCenterChallengesVersionsGetToManyRelatedResponses, GameCenterChallengesVersionsGetToManyRelationshipData, GameCenterChallengesVersionsGetToManyRelationshipErrors, GameCenterChallengesVersionsGetToManyRelationshipResponses, GameCenterChallengeVersionReleasesCreateInstanceData, GameCenterChallengeVersionReleasesCreateInstanceErrors, GameCenterChallengeVersionReleasesCreateInstanceResponses, GameCenterChallengeVersionReleasesDeleteInstanceData, GameCenterChallengeVersionReleasesDeleteInstanceErrors, GameCenterChallengeVersionReleasesDeleteInstanceResponses, GameCenterChallengeVersionReleasesGetInstanceData, GameCenterChallengeVersionReleasesGetInstanceErrors, GameCenterChallengeVersionReleasesGetInstanceResponses, GameCenterChallengeVersionsCreateInstanceData, GameCenterChallengeVersionsCreateInstanceErrors, GameCenterChallengeVersionsCreateInstanceResponses, GameCenterChallengeVersionsDefaultImageGetToOneRelatedData, GameCenterChallengeVersionsDefaultImageGetToOneRelatedErrors, GameCenterChallengeVersionsDefaultImageGetToOneRelatedResponses, GameCenterChallengeVersionsDefaultImageGetToOneRelationshipData, GameCenterChallengeVersionsDefaultImageGetToOneRelationshipErrors, GameCenterChallengeVersionsDefaultImageGetToOneRelationshipResponses, GameCenterChallengeVersionsGetInstanceData, GameCenterChallengeVersionsGetInstanceErrors, GameCenterChallengeVersionsGetInstanceResponses, GameCenterChallengeVersionsLocalizationsGetToManyRelatedData, GameCenterChallengeVersionsLocalizationsGetToManyRelatedErrors, GameCenterChallengeVersionsLocalizationsGetToManyRelatedResponses, GameCenterChallengeVersionsLocalizationsGetToManyRelationshipData, GameCenterChallengeVersionsLocalizationsGetToManyRelationshipErrors, GameCenterChallengeVersionsLocalizationsGetToManyRelationshipResponses, GameCenterDetailsAchievementReleasesGetToManyRelatedData, GameCenterDetailsAchievementReleasesGetToManyRelatedErrors, GameCenterDetailsAchievementReleasesGetToManyRelatedResponses, GameCenterDetailsAchievementReleasesGetToManyRelationshipData, GameCenterDetailsAchievementReleasesGetToManyRelationshipErrors, GameCenterDetailsAchievementReleasesGetToManyRelationshipResponses, GameCenterDetailsActivityReleasesGetToManyRelatedData, GameCenterDetailsActivityReleasesGetToManyRelatedErrors, GameCenterDetailsActivityReleasesGetToManyRelatedResponses, GameCenterDetailsActivityReleasesGetToManyRelationshipData, GameCenterDetailsActivityReleasesGetToManyRelationshipErrors, GameCenterDetailsActivityReleasesGetToManyRelationshipResponses, GameCenterDetailsChallengeReleasesGetToManyRelatedData, GameCenterDetailsChallengeReleasesGetToManyRelatedErrors, GameCenterDetailsChallengeReleasesGetToManyRelatedResponses, GameCenterDetailsChallengeReleasesGetToManyRelationshipData, GameCenterDetailsChallengeReleasesGetToManyRelationshipErrors, GameCenterDetailsChallengeReleasesGetToManyRelationshipResponses, GameCenterDetailsChallengesMinimumPlatformVersionsReplaceToManyRelationshipData, GameCenterDetailsChallengesMinimumPlatformVersionsReplaceToManyRelationshipErrors, GameCenterDetailsChallengesMinimumPlatformVersionsReplaceToManyRelationshipResponses, GameCenterDetailsClassicMatchmakingRequestsGetMetricsData, GameCenterDetailsClassicMatchmakingRequestsGetMetricsErrors, GameCenterDetailsClassicMatchmakingRequestsGetMetricsResponses, GameCenterDetailsCreateInstanceData, GameCenterDetailsCreateInstanceErrors, GameCenterDetailsCreateInstanceResponses, GameCenterDetailsGameCenterAchievementsGetToManyRelatedData, GameCenterDetailsGameCenterAchievementsGetToManyRelatedErrors, GameCenterDetailsGameCenterAchievementsGetToManyRelatedResponses, GameCenterDetailsGameCenterAchievementsGetToManyRelationshipData, GameCenterDetailsGameCenterAchievementsGetToManyRelationshipErrors, GameCenterDetailsGameCenterAchievementsGetToManyRelationshipResponses, GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipData, GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipErrors, GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipResponses, GameCenterDetailsGameCenterActivitiesGetToManyRelatedData, GameCenterDetailsGameCenterActivitiesGetToManyRelatedErrors, GameCenterDetailsGameCenterActivitiesGetToManyRelatedResponses, GameCenterDetailsGameCenterActivitiesGetToManyRelationshipData, GameCenterDetailsGameCenterActivitiesGetToManyRelationshipErrors, GameCenterDetailsGameCenterActivitiesGetToManyRelationshipResponses, GameCenterDetailsGameCenterAppVersionsGetToManyRelatedData, GameCenterDetailsGameCenterAppVersionsGetToManyRelatedErrors, GameCenterDetailsGameCenterAppVersionsGetToManyRelatedResponses, GameCenterDetailsGameCenterAppVersionsGetToManyRelationshipData, GameCenterDetailsGameCenterAppVersionsGetToManyRelationshipErrors, GameCenterDetailsGameCenterAppVersionsGetToManyRelationshipResponses, GameCenterDetailsGameCenterChallengesGetToManyRelatedData, GameCenterDetailsGameCenterChallengesGetToManyRelatedErrors, GameCenterDetailsGameCenterChallengesGetToManyRelatedResponses, GameCenterDetailsGameCenterChallengesGetToManyRelationshipData, GameCenterDetailsGameCenterChallengesGetToManyRelationshipErrors, GameCenterDetailsGameCenterChallengesGetToManyRelationshipResponses, GameCenterDetailsGameCenterGroupGetToOneRelatedData, GameCenterDetailsGameCenterGroupGetToOneRelatedErrors, GameCenterDetailsGameCenterGroupGetToOneRelatedResponses, GameCenterDetailsGameCenterGroupGetToOneRelationshipData, GameCenterDetailsGameCenterGroupGetToOneRelationshipErrors, GameCenterDetailsGameCenterGroupGetToOneRelationshipResponses, GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedData, GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedErrors, GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedResponses, GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipData, GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipErrors, GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipResponses, GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipData, GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipErrors, GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipResponses, GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedData, GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedErrors, GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedResponses, GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipData, GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipErrors, GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipResponses, GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipData, GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipErrors, GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipResponses, GameCenterDetailsGetInstanceData, GameCenterDetailsGetInstanceErrors, GameCenterDetailsGetInstanceResponses, GameCenterDetailsLeaderboardReleasesGetToManyRelatedData, GameCenterDetailsLeaderboardReleasesGetToManyRelatedErrors, GameCenterDetailsLeaderboardReleasesGetToManyRelatedResponses, GameCenterDetailsLeaderboardReleasesGetToManyRelationshipData, GameCenterDetailsLeaderboardReleasesGetToManyRelationshipErrors, GameCenterDetailsLeaderboardReleasesGetToManyRelationshipResponses, GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedData, GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedErrors, GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedResponses, GameCenterDetailsLeaderboardSetReleasesGetToManyRelationshipData, GameCenterDetailsLeaderboardSetReleasesGetToManyRelationshipErrors, GameCenterDetailsLeaderboardSetReleasesGetToManyRelationshipResponses, GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsData, GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsErrors, GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsResponses, GameCenterDetailsUpdateInstanceData, GameCenterDetailsUpdateInstanceErrors, GameCenterDetailsUpdateInstanceResponses, GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipData, GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipErrors, GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponses, GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipData, GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipErrors, GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponses, GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedData, GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedErrors, GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponses, GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipData, GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipErrors, GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponses, GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipData, GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipErrors, GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponses, GameCenterGroupsCreateInstanceData, GameCenterGroupsCreateInstanceErrors, GameCenterGroupsCreateInstanceResponses, GameCenterGroupsDeleteInstanceData, GameCenterGroupsDeleteInstanceErrors, GameCenterGroupsDeleteInstanceResponses, GameCenterGroupsGameCenterAchievementsGetToManyRelatedData, GameCenterGroupsGameCenterAchievementsGetToManyRelatedErrors, GameCenterGroupsGameCenterAchievementsGetToManyRelatedResponses, GameCenterGroupsGameCenterAchievementsGetToManyRelationshipData, GameCenterGroupsGameCenterAchievementsGetToManyRelationshipErrors, GameCenterGroupsGameCenterAchievementsGetToManyRelationshipResponses, GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipData, GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipErrors, GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipResponses, GameCenterGroupsGameCenterActivitiesGetToManyRelatedData, GameCenterGroupsGameCenterActivitiesGetToManyRelatedErrors, GameCenterGroupsGameCenterActivitiesGetToManyRelatedResponses, GameCenterGroupsGameCenterActivitiesGetToManyRelationshipData, GameCenterGroupsGameCenterActivitiesGetToManyRelationshipErrors, GameCenterGroupsGameCenterActivitiesGetToManyRelationshipResponses, GameCenterGroupsGameCenterChallengesGetToManyRelatedData, GameCenterGroupsGameCenterChallengesGetToManyRelatedErrors, GameCenterGroupsGameCenterChallengesGetToManyRelatedResponses, GameCenterGroupsGameCenterChallengesGetToManyRelationshipData, GameCenterGroupsGameCenterChallengesGetToManyRelationshipErrors, GameCenterGroupsGameCenterChallengesGetToManyRelationshipResponses, GameCenterGroupsGameCenterDetailsGetToManyRelatedData, GameCenterGroupsGameCenterDetailsGetToManyRelatedErrors, GameCenterGroupsGameCenterDetailsGetToManyRelatedResponses, GameCenterGroupsGameCenterDetailsGetToManyRelationshipData, GameCenterGroupsGameCenterDetailsGetToManyRelationshipErrors, GameCenterGroupsGameCenterDetailsGetToManyRelationshipResponses, GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedData, GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedErrors, GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedResponses, GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipData, GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipErrors, GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipResponses, GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipData, GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipErrors, GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipResponses, GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedData, GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedErrors, GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedResponses, GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipData, GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipErrors, GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipResponses, GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipData, GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipErrors, GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipResponses, GameCenterGroupsGetCollectionData, GameCenterGroupsGetCollectionErrors, GameCenterGroupsGetCollectionResponses, GameCenterGroupsGetInstanceData, GameCenterGroupsGetInstanceErrors, GameCenterGroupsGetInstanceResponses, GameCenterGroupsUpdateInstanceData, GameCenterGroupsUpdateInstanceErrors, GameCenterGroupsUpdateInstanceResponses, GameCenterLeaderboardEntrySubmissionsCreateInstanceData, GameCenterLeaderboardEntrySubmissionsCreateInstanceErrors, GameCenterLeaderboardEntrySubmissionsCreateInstanceResponses, GameCenterLeaderboardImagesCreateInstanceData, GameCenterLeaderboardImagesCreateInstanceErrors, GameCenterLeaderboardImagesCreateInstanceResponses, GameCenterLeaderboardImagesDeleteInstanceData, GameCenterLeaderboardImagesDeleteInstanceErrors, GameCenterLeaderboardImagesDeleteInstanceResponses, GameCenterLeaderboardImagesGetInstanceData, GameCenterLeaderboardImagesGetInstanceErrors, GameCenterLeaderboardImagesGetInstanceResponses, GameCenterLeaderboardImagesUpdateInstanceData, GameCenterLeaderboardImagesUpdateInstanceErrors, GameCenterLeaderboardImagesUpdateInstanceResponses, GameCenterLeaderboardLocalizationsCreateInstanceData, GameCenterLeaderboardLocalizationsCreateInstanceErrors, GameCenterLeaderboardLocalizationsCreateInstanceResponses, GameCenterLeaderboardLocalizationsDeleteInstanceData, GameCenterLeaderboardLocalizationsDeleteInstanceErrors, GameCenterLeaderboardLocalizationsDeleteInstanceResponses, GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedData, GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedErrors, GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedResponses, GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelationshipData, GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelationshipErrors, GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelationshipResponses, GameCenterLeaderboardLocalizationsGetInstanceData, GameCenterLeaderboardLocalizationsGetInstanceErrors, GameCenterLeaderboardLocalizationsGetInstanceResponses, GameCenterLeaderboardLocalizationsUpdateInstanceData, GameCenterLeaderboardLocalizationsUpdateInstanceErrors, GameCenterLeaderboardLocalizationsUpdateInstanceResponses, GameCenterLeaderboardReleasesCreateInstanceData, GameCenterLeaderboardReleasesCreateInstanceErrors, GameCenterLeaderboardReleasesCreateInstanceResponses, GameCenterLeaderboardReleasesDeleteInstanceData, GameCenterLeaderboardReleasesDeleteInstanceErrors, GameCenterLeaderboardReleasesDeleteInstanceResponses, GameCenterLeaderboardReleasesGetInstanceData, GameCenterLeaderboardReleasesGetInstanceErrors, GameCenterLeaderboardReleasesGetInstanceResponses, GameCenterLeaderboardsActivityUpdateToOneRelationshipData, GameCenterLeaderboardsActivityUpdateToOneRelationshipErrors, GameCenterLeaderboardsActivityUpdateToOneRelationshipResponses, GameCenterLeaderboardsChallengeUpdateToOneRelationshipData, GameCenterLeaderboardsChallengeUpdateToOneRelationshipErrors, GameCenterLeaderboardsChallengeUpdateToOneRelationshipResponses, GameCenterLeaderboardsCreateInstanceData, GameCenterLeaderboardsCreateInstanceErrors, GameCenterLeaderboardsCreateInstanceResponses, GameCenterLeaderboardsDeleteInstanceData, GameCenterLeaderboardsDeleteInstanceErrors, GameCenterLeaderboardsDeleteInstanceResponses, GameCenterLeaderboardSetImagesCreateInstanceData, GameCenterLeaderboardSetImagesCreateInstanceErrors, GameCenterLeaderboardSetImagesCreateInstanceResponses, GameCenterLeaderboardSetImagesDeleteInstanceData, GameCenterLeaderboardSetImagesDeleteInstanceErrors, GameCenterLeaderboardSetImagesDeleteInstanceResponses, GameCenterLeaderboardSetImagesGetInstanceData, GameCenterLeaderboardSetImagesGetInstanceErrors, GameCenterLeaderboardSetImagesGetInstanceResponses, GameCenterLeaderboardSetImagesUpdateInstanceData, GameCenterLeaderboardSetImagesUpdateInstanceErrors, GameCenterLeaderboardSetImagesUpdateInstanceResponses, GameCenterLeaderboardSetLocalizationsCreateInstanceData, GameCenterLeaderboardSetLocalizationsCreateInstanceErrors, GameCenterLeaderboardSetLocalizationsCreateInstanceResponses, GameCenterLeaderboardSetLocalizationsDeleteInstanceData, GameCenterLeaderboardSetLocalizationsDeleteInstanceErrors, GameCenterLeaderboardSetLocalizationsDeleteInstanceResponses, GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedData, GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedErrors, GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedResponses, GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelationshipData, GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelationshipErrors, GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelationshipResponses, GameCenterLeaderboardSetLocalizationsGetInstanceData, GameCenterLeaderboardSetLocalizationsGetInstanceErrors, GameCenterLeaderboardSetLocalizationsGetInstanceResponses, GameCenterLeaderboardSetLocalizationsUpdateInstanceData, GameCenterLeaderboardSetLocalizationsUpdateInstanceErrors, GameCenterLeaderboardSetLocalizationsUpdateInstanceResponses, GameCenterLeaderboardSetMemberLocalizationsCreateInstanceData, GameCenterLeaderboardSetMemberLocalizationsCreateInstanceErrors, GameCenterLeaderboardSetMemberLocalizationsCreateInstanceResponses, GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceData, GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceErrors, GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceResponses, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedData, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedErrors, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedResponses, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelationshipData, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelationshipErrors, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelationshipResponses, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedData, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedErrors, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedResponses, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelationshipData, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelationshipErrors, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelationshipResponses, GameCenterLeaderboardSetMemberLocalizationsGetCollectionData, GameCenterLeaderboardSetMemberLocalizationsGetCollectionErrors, GameCenterLeaderboardSetMemberLocalizationsGetCollectionResponses, GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceData, GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceErrors, GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceResponses, GameCenterLeaderboardSetReleasesCreateInstanceData, GameCenterLeaderboardSetReleasesCreateInstanceErrors, GameCenterLeaderboardSetReleasesCreateInstanceResponses, GameCenterLeaderboardSetReleasesDeleteInstanceData, GameCenterLeaderboardSetReleasesDeleteInstanceErrors, GameCenterLeaderboardSetReleasesDeleteInstanceResponses, GameCenterLeaderboardSetReleasesGetInstanceData, GameCenterLeaderboardSetReleasesGetInstanceErrors, GameCenterLeaderboardSetReleasesGetInstanceResponses, GameCenterLeaderboardSetsCreateInstanceData, GameCenterLeaderboardSetsCreateInstanceErrors, GameCenterLeaderboardSetsCreateInstanceResponses, GameCenterLeaderboardSetsDeleteInstanceData, GameCenterLeaderboardSetsDeleteInstanceErrors, GameCenterLeaderboardSetsDeleteInstanceResponses, GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipData, GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipErrors, GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipResponses, GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipData, GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipErrors, GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipResponses, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedData, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedErrors, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedResponses, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipData, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipErrors, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipResponses, GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipData, GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipErrors, GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipResponses, GameCenterLeaderboardSetsGetInstanceData, GameCenterLeaderboardSetsGetInstanceErrors, GameCenterLeaderboardSetsGetInstanceResponses, GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedData, GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedErrors, GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedResponses, GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipData, GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipErrors, GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipResponses, GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipData, GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipErrors, GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipResponses, GameCenterLeaderboardSetsLocalizationsGetToManyRelatedData, GameCenterLeaderboardSetsLocalizationsGetToManyRelatedErrors, GameCenterLeaderboardSetsLocalizationsGetToManyRelatedResponses, GameCenterLeaderboardSetsLocalizationsGetToManyRelationshipData, GameCenterLeaderboardSetsLocalizationsGetToManyRelationshipErrors, GameCenterLeaderboardSetsLocalizationsGetToManyRelationshipResponses, GameCenterLeaderboardSetsReleasesGetToManyRelatedData, GameCenterLeaderboardSetsReleasesGetToManyRelatedErrors, GameCenterLeaderboardSetsReleasesGetToManyRelatedResponses, GameCenterLeaderboardSetsReleasesGetToManyRelationshipData, GameCenterLeaderboardSetsReleasesGetToManyRelationshipErrors, GameCenterLeaderboardSetsReleasesGetToManyRelationshipResponses, GameCenterLeaderboardSetsUpdateInstanceData, GameCenterLeaderboardSetsUpdateInstanceErrors, GameCenterLeaderboardSetsUpdateInstanceResponses, GameCenterLeaderboardsGetInstanceData, GameCenterLeaderboardsGetInstanceErrors, GameCenterLeaderboardsGetInstanceResponses, GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedData, GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedErrors, GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedResponses, GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipData, GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipErrors, GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipResponses, GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipData, GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipErrors, GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipResponses, GameCenterLeaderboardsLocalizationsGetToManyRelatedData, GameCenterLeaderboardsLocalizationsGetToManyRelatedErrors, GameCenterLeaderboardsLocalizationsGetToManyRelatedResponses, GameCenterLeaderboardsLocalizationsGetToManyRelationshipData, GameCenterLeaderboardsLocalizationsGetToManyRelationshipErrors, GameCenterLeaderboardsLocalizationsGetToManyRelationshipResponses, GameCenterLeaderboardsReleasesGetToManyRelatedData, GameCenterLeaderboardsReleasesGetToManyRelatedErrors, GameCenterLeaderboardsReleasesGetToManyRelatedResponses, GameCenterLeaderboardsReleasesGetToManyRelationshipData, GameCenterLeaderboardsReleasesGetToManyRelationshipErrors, GameCenterLeaderboardsReleasesGetToManyRelationshipResponses, GameCenterLeaderboardsUpdateInstanceData, GameCenterLeaderboardsUpdateInstanceErrors, GameCenterLeaderboardsUpdateInstanceResponses, GameCenterMatchmakingQueuesCreateInstanceData, GameCenterMatchmakingQueuesCreateInstanceErrors, GameCenterMatchmakingQueuesCreateInstanceResponses, GameCenterMatchmakingQueuesDeleteInstanceData, GameCenterMatchmakingQueuesDeleteInstanceErrors, GameCenterMatchmakingQueuesDeleteInstanceResponses, GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsData, GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsErrors, GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsResponses, GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsData, GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsErrors, GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsResponses, GameCenterMatchmakingQueuesGetCollectionData, GameCenterMatchmakingQueuesGetCollectionErrors, GameCenterMatchmakingQueuesGetCollectionResponses, GameCenterMatchmakingQueuesGetInstanceData, GameCenterMatchmakingQueuesGetInstanceErrors, GameCenterMatchmakingQueuesGetInstanceResponses, GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsData, GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsErrors, GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsResponses, GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsData, GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsErrors, GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsResponses, GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsData, GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsErrors, GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsResponses, GameCenterMatchmakingQueuesUpdateInstanceData, GameCenterMatchmakingQueuesUpdateInstanceErrors, GameCenterMatchmakingQueuesUpdateInstanceResponses, GameCenterMatchmakingRulesCreateInstanceData, GameCenterMatchmakingRulesCreateInstanceErrors, GameCenterMatchmakingRulesCreateInstanceResponses, GameCenterMatchmakingRulesDeleteInstanceData, GameCenterMatchmakingRulesDeleteInstanceErrors, GameCenterMatchmakingRulesDeleteInstanceResponses, GameCenterMatchmakingRuleSetsCreateInstanceData, GameCenterMatchmakingRuleSetsCreateInstanceErrors, GameCenterMatchmakingRuleSetsCreateInstanceResponses, GameCenterMatchmakingRuleSetsDeleteInstanceData, GameCenterMatchmakingRuleSetsDeleteInstanceErrors, GameCenterMatchmakingRuleSetsDeleteInstanceResponses, GameCenterMatchmakingRuleSetsGetCollectionData, GameCenterMatchmakingRuleSetsGetCollectionErrors, GameCenterMatchmakingRuleSetsGetCollectionResponses, GameCenterMatchmakingRuleSetsGetInstanceData, GameCenterMatchmakingRuleSetsGetInstanceErrors, GameCenterMatchmakingRuleSetsGetInstanceResponses, GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedData, GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedErrors, GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedResponses, GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelationshipData, GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelationshipErrors, GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelationshipResponses, GameCenterMatchmakingRuleSetsRulesGetToManyRelatedData, GameCenterMatchmakingRuleSetsRulesGetToManyRelatedErrors, GameCenterMatchmakingRuleSetsRulesGetToManyRelatedResponses, GameCenterMatchmakingRuleSetsRulesGetToManyRelationshipData, GameCenterMatchmakingRuleSetsRulesGetToManyRelationshipErrors, GameCenterMatchmakingRuleSetsRulesGetToManyRelationshipResponses, GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedData, GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedErrors, GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedResponses, GameCenterMatchmakingRuleSetsTeamsGetToManyRelationshipData, GameCenterMatchmakingRuleSetsTeamsGetToManyRelationshipErrors, GameCenterMatchmakingRuleSetsTeamsGetToManyRelationshipResponses, GameCenterMatchmakingRuleSetsUpdateInstanceData, GameCenterMatchmakingRuleSetsUpdateInstanceErrors, GameCenterMatchmakingRuleSetsUpdateInstanceResponses, GameCenterMatchmakingRuleSetTestsCreateInstanceData, GameCenterMatchmakingRuleSetTestsCreateInstanceErrors, GameCenterMatchmakingRuleSetTestsCreateInstanceResponses, GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsData, GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsErrors, GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsResponses, GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsData, GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsErrors, GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsResponses, GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsData, GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsErrors, GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsResponses, GameCenterMatchmakingRulesUpdateInstanceData, GameCenterMatchmakingRulesUpdateInstanceErrors, GameCenterMatchmakingRulesUpdateInstanceResponses, GameCenterMatchmakingTeamsCreateInstanceData, GameCenterMatchmakingTeamsCreateInstanceErrors, GameCenterMatchmakingTeamsCreateInstanceResponses, GameCenterMatchmakingTeamsDeleteInstanceData, GameCenterMatchmakingTeamsDeleteInstanceErrors, GameCenterMatchmakingTeamsDeleteInstanceResponses, GameCenterMatchmakingTeamsUpdateInstanceData, GameCenterMatchmakingTeamsUpdateInstanceErrors, GameCenterMatchmakingTeamsUpdateInstanceResponses, GameCenterPlayerAchievementSubmissionsCreateInstanceData, GameCenterPlayerAchievementSubmissionsCreateInstanceErrors, GameCenterPlayerAchievementSubmissionsCreateInstanceResponses, InAppPurchaseAppStoreReviewScreenshotsCreateInstanceData, InAppPurchaseAppStoreReviewScreenshotsCreateInstanceErrors, InAppPurchaseAppStoreReviewScreenshotsCreateInstanceResponses, InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceData, InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceErrors, InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceResponses, InAppPurchaseAppStoreReviewScreenshotsGetInstanceData, InAppPurchaseAppStoreReviewScreenshotsGetInstanceErrors, InAppPurchaseAppStoreReviewScreenshotsGetInstanceResponses, InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceData, InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceErrors, InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceResponses, InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedData, InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedErrors, InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedResponses, InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelationshipData, InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelationshipErrors, InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelationshipResponses, InAppPurchaseAvailabilitiesCreateInstanceData, InAppPurchaseAvailabilitiesCreateInstanceErrors, InAppPurchaseAvailabilitiesCreateInstanceResponses, InAppPurchaseAvailabilitiesGetInstanceData, InAppPurchaseAvailabilitiesGetInstanceErrors, InAppPurchaseAvailabilitiesGetInstanceResponses, InAppPurchaseContentsGetInstanceData, InAppPurchaseContentsGetInstanceErrors, InAppPurchaseContentsGetInstanceResponses, InAppPurchaseImagesCreateInstanceData, InAppPurchaseImagesCreateInstanceErrors, InAppPurchaseImagesCreateInstanceResponses, InAppPurchaseImagesDeleteInstanceData, InAppPurchaseImagesDeleteInstanceErrors, InAppPurchaseImagesDeleteInstanceResponses, InAppPurchaseImagesGetInstanceData, InAppPurchaseImagesGetInstanceErrors, InAppPurchaseImagesGetInstanceResponses, InAppPurchaseImagesUpdateInstanceData, InAppPurchaseImagesUpdateInstanceErrors, InAppPurchaseImagesUpdateInstanceResponses, InAppPurchaseLocalizationsCreateInstanceData, InAppPurchaseLocalizationsCreateInstanceErrors, InAppPurchaseLocalizationsCreateInstanceResponses, InAppPurchaseLocalizationsDeleteInstanceData, InAppPurchaseLocalizationsDeleteInstanceErrors, InAppPurchaseLocalizationsDeleteInstanceResponses, InAppPurchaseLocalizationsGetInstanceData, InAppPurchaseLocalizationsGetInstanceErrors, InAppPurchaseLocalizationsGetInstanceResponses, InAppPurchaseLocalizationsUpdateInstanceData, InAppPurchaseLocalizationsUpdateInstanceErrors, InAppPurchaseLocalizationsUpdateInstanceResponses, InAppPurchasePricePointsEqualizationsGetToManyRelatedData, InAppPurchasePricePointsEqualizationsGetToManyRelatedErrors, InAppPurchasePricePointsEqualizationsGetToManyRelatedResponses, InAppPurchasePricePointsEqualizationsGetToManyRelationshipData, InAppPurchasePricePointsEqualizationsGetToManyRelationshipErrors, InAppPurchasePricePointsEqualizationsGetToManyRelationshipResponses, InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedData, InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedErrors, InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedResponses, InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelationshipData, InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelationshipErrors, InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelationshipResponses, InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedData, InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedErrors, InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedResponses, InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelationshipData, InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelationshipErrors, InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelationshipResponses, InAppPurchasePriceSchedulesCreateInstanceData, InAppPurchasePriceSchedulesCreateInstanceErrors, InAppPurchasePriceSchedulesCreateInstanceResponses, InAppPurchasePriceSchedulesGetInstanceData, InAppPurchasePriceSchedulesGetInstanceErrors, InAppPurchasePriceSchedulesGetInstanceResponses, InAppPurchasePriceSchedulesManualPricesGetToManyRelatedData, InAppPurchasePriceSchedulesManualPricesGetToManyRelatedErrors, InAppPurchasePriceSchedulesManualPricesGetToManyRelatedResponses, InAppPurchasePriceSchedulesManualPricesGetToManyRelationshipData, InAppPurchasePriceSchedulesManualPricesGetToManyRelationshipErrors, InAppPurchasePriceSchedulesManualPricesGetToManyRelationshipResponses, InAppPurchasesGetInstanceData, InAppPurchasesGetInstanceErrors, InAppPurchasesGetInstanceResponses, InAppPurchaseSubmissionsCreateInstanceData, InAppPurchaseSubmissionsCreateInstanceErrors, InAppPurchaseSubmissionsCreateInstanceResponses, InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedData, InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedErrors, InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedResponses, InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelationshipData, InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelationshipErrors, InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelationshipResponses, InAppPurchasesV2ContentGetToOneRelatedData, InAppPurchasesV2ContentGetToOneRelatedErrors, InAppPurchasesV2ContentGetToOneRelatedResponses, InAppPurchasesV2ContentGetToOneRelationshipData, InAppPurchasesV2ContentGetToOneRelationshipErrors, InAppPurchasesV2ContentGetToOneRelationshipResponses, InAppPurchasesV2CreateInstanceData, InAppPurchasesV2CreateInstanceErrors, InAppPurchasesV2CreateInstanceResponses, InAppPurchasesV2DeleteInstanceData, InAppPurchasesV2DeleteInstanceErrors, InAppPurchasesV2DeleteInstanceResponses, InAppPurchasesV2GetInstanceData, InAppPurchasesV2GetInstanceErrors, InAppPurchasesV2GetInstanceResponses, InAppPurchasesV2IapPriceScheduleGetToOneRelatedData, InAppPurchasesV2IapPriceScheduleGetToOneRelatedErrors, InAppPurchasesV2IapPriceScheduleGetToOneRelatedResponses, InAppPurchasesV2IapPriceScheduleGetToOneRelationshipData, InAppPurchasesV2IapPriceScheduleGetToOneRelationshipErrors, InAppPurchasesV2IapPriceScheduleGetToOneRelationshipResponses, InAppPurchasesV2ImagesGetToManyRelatedData, InAppPurchasesV2ImagesGetToManyRelatedErrors, InAppPurchasesV2ImagesGetToManyRelatedResponses, InAppPurchasesV2ImagesGetToManyRelationshipData, InAppPurchasesV2ImagesGetToManyRelationshipErrors, InAppPurchasesV2ImagesGetToManyRelationshipResponses, InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedData, InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedErrors, InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedResponses, InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelationshipData, InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelationshipErrors, InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelationshipResponses, InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedData, InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedErrors, InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedResponses, InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelationshipData, InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelationshipErrors, InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelationshipResponses, InAppPurchasesV2PricePointsGetToManyRelatedData, InAppPurchasesV2PricePointsGetToManyRelatedErrors, InAppPurchasesV2PricePointsGetToManyRelatedResponses, InAppPurchasesV2PricePointsGetToManyRelationshipData, InAppPurchasesV2PricePointsGetToManyRelationshipErrors, InAppPurchasesV2PricePointsGetToManyRelationshipResponses, InAppPurchasesV2PromotedPurchaseGetToOneRelatedData, InAppPurchasesV2PromotedPurchaseGetToOneRelatedErrors, InAppPurchasesV2PromotedPurchaseGetToOneRelatedResponses, InAppPurchasesV2PromotedPurchaseGetToOneRelationshipData, InAppPurchasesV2PromotedPurchaseGetToOneRelationshipErrors, InAppPurchasesV2PromotedPurchaseGetToOneRelationshipResponses, InAppPurchasesV2UpdateInstanceData, InAppPurchasesV2UpdateInstanceErrors, InAppPurchasesV2UpdateInstanceResponses, MarketplaceSearchDetailsCreateInstanceData, MarketplaceSearchDetailsCreateInstanceErrors, MarketplaceSearchDetailsCreateInstanceResponses, MarketplaceSearchDetailsDeleteInstanceData, MarketplaceSearchDetailsDeleteInstanceErrors, MarketplaceSearchDetailsDeleteInstanceResponses, MarketplaceSearchDetailsUpdateInstanceData, MarketplaceSearchDetailsUpdateInstanceErrors, MarketplaceSearchDetailsUpdateInstanceResponses, MarketplaceWebhooksCreateInstanceData, MarketplaceWebhooksCreateInstanceErrors, MarketplaceWebhooksCreateInstanceResponses, MarketplaceWebhooksDeleteInstanceData, MarketplaceWebhooksDeleteInstanceErrors, MarketplaceWebhooksDeleteInstanceResponses, MarketplaceWebhooksGetCollectionData, MarketplaceWebhooksGetCollectionErrors, MarketplaceWebhooksGetCollectionResponses, MarketplaceWebhooksUpdateInstanceData, MarketplaceWebhooksUpdateInstanceErrors, MarketplaceWebhooksUpdateInstanceResponses, MerchantIdsCertificatesGetToManyRelatedData, MerchantIdsCertificatesGetToManyRelatedErrors, MerchantIdsCertificatesGetToManyRelatedResponses, MerchantIdsCertificatesGetToManyRelationshipData, MerchantIdsCertificatesGetToManyRelationshipErrors, MerchantIdsCertificatesGetToManyRelationshipResponses, MerchantIdsCreateInstanceData, MerchantIdsCreateInstanceErrors, MerchantIdsCreateInstanceResponses, MerchantIdsDeleteInstanceData, MerchantIdsDeleteInstanceErrors, MerchantIdsDeleteInstanceResponses, MerchantIdsGetCollectionData, MerchantIdsGetCollectionErrors, MerchantIdsGetCollectionResponses, MerchantIdsGetInstanceData, MerchantIdsGetInstanceErrors, MerchantIdsGetInstanceResponses, MerchantIdsUpdateInstanceData, MerchantIdsUpdateInstanceErrors, MerchantIdsUpdateInstanceResponses, NominationsCreateInstanceData, NominationsCreateInstanceErrors, NominationsCreateInstanceResponses, NominationsDeleteInstanceData, NominationsDeleteInstanceErrors, NominationsDeleteInstanceResponses, NominationsGetCollectionData, NominationsGetCollectionErrors, NominationsGetCollectionResponses, NominationsGetInstanceData, NominationsGetInstanceErrors, NominationsGetInstanceResponses, NominationsUpdateInstanceData, NominationsUpdateInstanceErrors, NominationsUpdateInstanceResponses, PassTypeIdsCertificatesGetToManyRelatedData, PassTypeIdsCertificatesGetToManyRelatedErrors, PassTypeIdsCertificatesGetToManyRelatedResponses, PassTypeIdsCertificatesGetToManyRelationshipData, PassTypeIdsCertificatesGetToManyRelationshipErrors, PassTypeIdsCertificatesGetToManyRelationshipResponses, PassTypeIdsCreateInstanceData, PassTypeIdsCreateInstanceErrors, PassTypeIdsCreateInstanceResponses, PassTypeIdsDeleteInstanceData, PassTypeIdsDeleteInstanceErrors, PassTypeIdsDeleteInstanceResponses, PassTypeIdsGetCollectionData, PassTypeIdsGetCollectionErrors, PassTypeIdsGetCollectionResponses, PassTypeIdsGetInstanceData, PassTypeIdsGetInstanceErrors, PassTypeIdsGetInstanceResponses, PassTypeIdsUpdateInstanceData, PassTypeIdsUpdateInstanceErrors, PassTypeIdsUpdateInstanceResponses, PreReleaseVersionsAppGetToOneRelatedData, PreReleaseVersionsAppGetToOneRelatedErrors, PreReleaseVersionsAppGetToOneRelatedResponses, PreReleaseVersionsAppGetToOneRelationshipData, PreReleaseVersionsAppGetToOneRelationshipErrors, PreReleaseVersionsAppGetToOneRelationshipResponses, PreReleaseVersionsBuildsGetToManyRelatedData, PreReleaseVersionsBuildsGetToManyRelatedErrors, PreReleaseVersionsBuildsGetToManyRelatedResponses, PreReleaseVersionsBuildsGetToManyRelationshipData, PreReleaseVersionsBuildsGetToManyRelationshipErrors, PreReleaseVersionsBuildsGetToManyRelationshipResponses, PreReleaseVersionsGetCollectionData, PreReleaseVersionsGetCollectionErrors, PreReleaseVersionsGetCollectionResponses, PreReleaseVersionsGetInstanceData, PreReleaseVersionsGetInstanceErrors, PreReleaseVersionsGetInstanceResponses, ProfilesBundleIdGetToOneRelatedData, ProfilesBundleIdGetToOneRelatedErrors, ProfilesBundleIdGetToOneRelatedResponses, ProfilesBundleIdGetToOneRelationshipData, ProfilesBundleIdGetToOneRelationshipErrors, ProfilesBundleIdGetToOneRelationshipResponses, ProfilesCertificatesGetToManyRelatedData, ProfilesCertificatesGetToManyRelatedErrors, ProfilesCertificatesGetToManyRelatedResponses, ProfilesCertificatesGetToManyRelationshipData, ProfilesCertificatesGetToManyRelationshipErrors, ProfilesCertificatesGetToManyRelationshipResponses, ProfilesCreateInstanceData, ProfilesCreateInstanceErrors, ProfilesCreateInstanceResponses, ProfilesDeleteInstanceData, ProfilesDeleteInstanceErrors, ProfilesDeleteInstanceResponses, ProfilesDevicesGetToManyRelatedData, ProfilesDevicesGetToManyRelatedErrors, ProfilesDevicesGetToManyRelatedResponses, ProfilesDevicesGetToManyRelationshipData, ProfilesDevicesGetToManyRelationshipErrors, ProfilesDevicesGetToManyRelationshipResponses, ProfilesGetCollectionData, ProfilesGetCollectionErrors, ProfilesGetCollectionResponses, ProfilesGetInstanceData, ProfilesGetInstanceErrors, ProfilesGetInstanceResponses, PromotedPurchasesCreateInstanceData, PromotedPurchasesCreateInstanceErrors, PromotedPurchasesCreateInstanceResponses, PromotedPurchasesDeleteInstanceData, PromotedPurchasesDeleteInstanceErrors, PromotedPurchasesDeleteInstanceResponses, PromotedPurchasesGetInstanceData, PromotedPurchasesGetInstanceErrors, PromotedPurchasesGetInstanceResponses, PromotedPurchasesUpdateInstanceData, PromotedPurchasesUpdateInstanceErrors, PromotedPurchasesUpdateInstanceResponses, ReviewSubmissionItemsCreateInstanceData, ReviewSubmissionItemsCreateInstanceErrors, ReviewSubmissionItemsCreateInstanceResponses, ReviewSubmissionItemsDeleteInstanceData, ReviewSubmissionItemsDeleteInstanceErrors, ReviewSubmissionItemsDeleteInstanceResponses, ReviewSubmissionItemsUpdateInstanceData, ReviewSubmissionItemsUpdateInstanceErrors, ReviewSubmissionItemsUpdateInstanceResponses, ReviewSubmissionsCreateInstanceData, ReviewSubmissionsCreateInstanceErrors, ReviewSubmissionsCreateInstanceResponses, ReviewSubmissionsGetCollectionData, ReviewSubmissionsGetCollectionErrors, ReviewSubmissionsGetCollectionResponses, ReviewSubmissionsGetInstanceData, ReviewSubmissionsGetInstanceErrors, ReviewSubmissionsGetInstanceResponses, ReviewSubmissionsItemsGetToManyRelatedData, ReviewSubmissionsItemsGetToManyRelatedErrors, ReviewSubmissionsItemsGetToManyRelatedResponses, ReviewSubmissionsItemsGetToManyRelationshipData, ReviewSubmissionsItemsGetToManyRelationshipErrors, ReviewSubmissionsItemsGetToManyRelationshipResponses, ReviewSubmissionsUpdateInstanceData, ReviewSubmissionsUpdateInstanceErrors, ReviewSubmissionsUpdateInstanceResponses, RoutingAppCoveragesCreateInstanceData, RoutingAppCoveragesCreateInstanceErrors, RoutingAppCoveragesCreateInstanceResponses, RoutingAppCoveragesDeleteInstanceData, RoutingAppCoveragesDeleteInstanceErrors, RoutingAppCoveragesDeleteInstanceResponses, RoutingAppCoveragesGetInstanceData, RoutingAppCoveragesGetInstanceErrors, RoutingAppCoveragesGetInstanceResponses, RoutingAppCoveragesUpdateInstanceData, RoutingAppCoveragesUpdateInstanceErrors, RoutingAppCoveragesUpdateInstanceResponses, SalesReportsGetCollectionData, SalesReportsGetCollectionErrors, SalesReportsGetCollectionResponses, SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceData, SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceErrors, SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceResponses, SandboxTestersV2GetCollectionData, SandboxTestersV2GetCollectionErrors, SandboxTestersV2GetCollectionResponses, SandboxTestersV2UpdateInstanceData, SandboxTestersV2UpdateInstanceErrors, SandboxTestersV2UpdateInstanceResponses, ScmGitReferencesGetInstanceData, ScmGitReferencesGetInstanceErrors, ScmGitReferencesGetInstanceResponses, ScmProvidersGetCollectionData, ScmProvidersGetCollectionErrors, ScmProvidersGetCollectionResponses, ScmProvidersGetInstanceData, ScmProvidersGetInstanceErrors, ScmProvidersGetInstanceResponses, ScmProvidersRepositoriesGetToManyRelatedData, ScmProvidersRepositoriesGetToManyRelatedErrors, ScmProvidersRepositoriesGetToManyRelatedResponses, ScmProvidersRepositoriesGetToManyRelationshipData, ScmProvidersRepositoriesGetToManyRelationshipErrors, ScmProvidersRepositoriesGetToManyRelationshipResponses, ScmPullRequestsGetInstanceData, ScmPullRequestsGetInstanceErrors, ScmPullRequestsGetInstanceResponses, ScmRepositoriesGetCollectionData, ScmRepositoriesGetCollectionErrors, ScmRepositoriesGetCollectionResponses, ScmRepositoriesGetInstanceData, ScmRepositoriesGetInstanceErrors, ScmRepositoriesGetInstanceResponses, ScmRepositoriesGitReferencesGetToManyRelatedData, ScmRepositoriesGitReferencesGetToManyRelatedErrors, ScmRepositoriesGitReferencesGetToManyRelatedResponses, ScmRepositoriesGitReferencesGetToManyRelationshipData, ScmRepositoriesGitReferencesGetToManyRelationshipErrors, ScmRepositoriesGitReferencesGetToManyRelationshipResponses, ScmRepositoriesPullRequestsGetToManyRelatedData, ScmRepositoriesPullRequestsGetToManyRelatedErrors, ScmRepositoriesPullRequestsGetToManyRelatedResponses, ScmRepositoriesPullRequestsGetToManyRelationshipData, ScmRepositoriesPullRequestsGetToManyRelationshipErrors, ScmRepositoriesPullRequestsGetToManyRelationshipResponses, SubscriptionAppStoreReviewScreenshotsCreateInstanceData, SubscriptionAppStoreReviewScreenshotsCreateInstanceErrors, SubscriptionAppStoreReviewScreenshotsCreateInstanceResponses, SubscriptionAppStoreReviewScreenshotsDeleteInstanceData, SubscriptionAppStoreReviewScreenshotsDeleteInstanceErrors, SubscriptionAppStoreReviewScreenshotsDeleteInstanceResponses, SubscriptionAppStoreReviewScreenshotsGetInstanceData, SubscriptionAppStoreReviewScreenshotsGetInstanceErrors, SubscriptionAppStoreReviewScreenshotsGetInstanceResponses, SubscriptionAppStoreReviewScreenshotsUpdateInstanceData, SubscriptionAppStoreReviewScreenshotsUpdateInstanceErrors, SubscriptionAppStoreReviewScreenshotsUpdateInstanceResponses, SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedData, SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedErrors, SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedResponses, SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelationshipData, SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelationshipErrors, SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelationshipResponses, SubscriptionAvailabilitiesCreateInstanceData, SubscriptionAvailabilitiesCreateInstanceErrors, SubscriptionAvailabilitiesCreateInstanceResponses, SubscriptionAvailabilitiesGetInstanceData, SubscriptionAvailabilitiesGetInstanceErrors, SubscriptionAvailabilitiesGetInstanceResponses, SubscriptionGracePeriodsGetInstanceData, SubscriptionGracePeriodsGetInstanceErrors, SubscriptionGracePeriodsGetInstanceResponses, SubscriptionGracePeriodsUpdateInstanceData, SubscriptionGracePeriodsUpdateInstanceErrors, SubscriptionGracePeriodsUpdateInstanceResponses, SubscriptionGroupLocalizationsCreateInstanceData, SubscriptionGroupLocalizationsCreateInstanceErrors, SubscriptionGroupLocalizationsCreateInstanceResponses, SubscriptionGroupLocalizationsDeleteInstanceData, SubscriptionGroupLocalizationsDeleteInstanceErrors, SubscriptionGroupLocalizationsDeleteInstanceResponses, SubscriptionGroupLocalizationsGetInstanceData, SubscriptionGroupLocalizationsGetInstanceErrors, SubscriptionGroupLocalizationsGetInstanceResponses, SubscriptionGroupLocalizationsUpdateInstanceData, SubscriptionGroupLocalizationsUpdateInstanceErrors, SubscriptionGroupLocalizationsUpdateInstanceResponses, SubscriptionGroupsCreateInstanceData, SubscriptionGroupsCreateInstanceErrors, SubscriptionGroupsCreateInstanceResponses, SubscriptionGroupsDeleteInstanceData, SubscriptionGroupsDeleteInstanceErrors, SubscriptionGroupsDeleteInstanceResponses, SubscriptionGroupsGetInstanceData, SubscriptionGroupsGetInstanceErrors, SubscriptionGroupsGetInstanceResponses, SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedData, SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedErrors, SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedResponses, SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelationshipData, SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelationshipErrors, SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelationshipResponses, SubscriptionGroupsSubscriptionsGetToManyRelatedData, SubscriptionGroupsSubscriptionsGetToManyRelatedErrors, SubscriptionGroupsSubscriptionsGetToManyRelatedResponses, SubscriptionGroupsSubscriptionsGetToManyRelationshipData, SubscriptionGroupsSubscriptionsGetToManyRelationshipErrors, SubscriptionGroupsSubscriptionsGetToManyRelationshipResponses, SubscriptionGroupSubmissionsCreateInstanceData, SubscriptionGroupSubmissionsCreateInstanceErrors, SubscriptionGroupSubmissionsCreateInstanceResponses, SubscriptionGroupsUpdateInstanceData, SubscriptionGroupsUpdateInstanceErrors, SubscriptionGroupsUpdateInstanceResponses, SubscriptionImagesCreateInstanceData, SubscriptionImagesCreateInstanceErrors, SubscriptionImagesCreateInstanceResponses, SubscriptionImagesDeleteInstanceData, SubscriptionImagesDeleteInstanceErrors, SubscriptionImagesDeleteInstanceResponses, SubscriptionImagesGetInstanceData, SubscriptionImagesGetInstanceErrors, SubscriptionImagesGetInstanceResponses, SubscriptionImagesUpdateInstanceData, SubscriptionImagesUpdateInstanceErrors, SubscriptionImagesUpdateInstanceResponses, SubscriptionIntroductoryOffersCreateInstanceData, SubscriptionIntroductoryOffersCreateInstanceErrors, SubscriptionIntroductoryOffersCreateInstanceResponses, SubscriptionIntroductoryOffersDeleteInstanceData, SubscriptionIntroductoryOffersDeleteInstanceErrors, SubscriptionIntroductoryOffersDeleteInstanceResponses, SubscriptionIntroductoryOffersUpdateInstanceData, SubscriptionIntroductoryOffersUpdateInstanceErrors, SubscriptionIntroductoryOffersUpdateInstanceResponses, SubscriptionLocalizationsCreateInstanceData, SubscriptionLocalizationsCreateInstanceErrors, SubscriptionLocalizationsCreateInstanceResponses, SubscriptionLocalizationsDeleteInstanceData, SubscriptionLocalizationsDeleteInstanceErrors, SubscriptionLocalizationsDeleteInstanceResponses, SubscriptionLocalizationsGetInstanceData, SubscriptionLocalizationsGetInstanceErrors, SubscriptionLocalizationsGetInstanceResponses, SubscriptionLocalizationsUpdateInstanceData, SubscriptionLocalizationsUpdateInstanceErrors, SubscriptionLocalizationsUpdateInstanceResponses, SubscriptionOfferCodeCustomCodesCreateInstanceData, SubscriptionOfferCodeCustomCodesCreateInstanceErrors, SubscriptionOfferCodeCustomCodesCreateInstanceResponses, SubscriptionOfferCodeCustomCodesGetInstanceData, SubscriptionOfferCodeCustomCodesGetInstanceErrors, SubscriptionOfferCodeCustomCodesGetInstanceResponses, SubscriptionOfferCodeCustomCodesUpdateInstanceData, SubscriptionOfferCodeCustomCodesUpdateInstanceErrors, SubscriptionOfferCodeCustomCodesUpdateInstanceResponses, SubscriptionOfferCodeOneTimeUseCodesCreateInstanceData, SubscriptionOfferCodeOneTimeUseCodesCreateInstanceErrors, SubscriptionOfferCodeOneTimeUseCodesCreateInstanceResponses, SubscriptionOfferCodeOneTimeUseCodesGetInstanceData, SubscriptionOfferCodeOneTimeUseCodesGetInstanceErrors, SubscriptionOfferCodeOneTimeUseCodesGetInstanceResponses, SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceData, SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceErrors, SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceResponses, SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedData, SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedErrors, SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedResponses, SubscriptionOfferCodesCreateInstanceData, SubscriptionOfferCodesCreateInstanceErrors, SubscriptionOfferCodesCreateInstanceResponses, SubscriptionOfferCodesCustomCodesGetToManyRelatedData, SubscriptionOfferCodesCustomCodesGetToManyRelatedErrors, SubscriptionOfferCodesCustomCodesGetToManyRelatedResponses, SubscriptionOfferCodesCustomCodesGetToManyRelationshipData, SubscriptionOfferCodesCustomCodesGetToManyRelationshipErrors, SubscriptionOfferCodesCustomCodesGetToManyRelationshipResponses, SubscriptionOfferCodesGetInstanceData, SubscriptionOfferCodesGetInstanceErrors, SubscriptionOfferCodesGetInstanceResponses, SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedData, SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedErrors, SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedResponses, SubscriptionOfferCodesOneTimeUseCodesGetToManyRelationshipData, SubscriptionOfferCodesOneTimeUseCodesGetToManyRelationshipErrors, SubscriptionOfferCodesOneTimeUseCodesGetToManyRelationshipResponses, SubscriptionOfferCodesPricesGetToManyRelatedData, SubscriptionOfferCodesPricesGetToManyRelatedErrors, SubscriptionOfferCodesPricesGetToManyRelatedResponses, SubscriptionOfferCodesPricesGetToManyRelationshipData, SubscriptionOfferCodesPricesGetToManyRelationshipErrors, SubscriptionOfferCodesPricesGetToManyRelationshipResponses, SubscriptionOfferCodesUpdateInstanceData, SubscriptionOfferCodesUpdateInstanceErrors, SubscriptionOfferCodesUpdateInstanceResponses, SubscriptionPricePointsEqualizationsGetToManyRelatedData, SubscriptionPricePointsEqualizationsGetToManyRelatedErrors, SubscriptionPricePointsEqualizationsGetToManyRelatedResponses, SubscriptionPricePointsEqualizationsGetToManyRelationshipData, SubscriptionPricePointsEqualizationsGetToManyRelationshipErrors, SubscriptionPricePointsEqualizationsGetToManyRelationshipResponses, SubscriptionPricePointsGetInstanceData, SubscriptionPricePointsGetInstanceErrors, SubscriptionPricePointsGetInstanceResponses, SubscriptionPricesCreateInstanceData, SubscriptionPricesCreateInstanceErrors, SubscriptionPricesCreateInstanceResponses, SubscriptionPricesDeleteInstanceData, SubscriptionPricesDeleteInstanceErrors, SubscriptionPricesDeleteInstanceResponses, SubscriptionPromotionalOffersCreateInstanceData, SubscriptionPromotionalOffersCreateInstanceErrors, SubscriptionPromotionalOffersCreateInstanceResponses, SubscriptionPromotionalOffersDeleteInstanceData, SubscriptionPromotionalOffersDeleteInstanceErrors, SubscriptionPromotionalOffersDeleteInstanceResponses, SubscriptionPromotionalOffersGetInstanceData, SubscriptionPromotionalOffersGetInstanceErrors, SubscriptionPromotionalOffersGetInstanceResponses, SubscriptionPromotionalOffersPricesGetToManyRelatedData, SubscriptionPromotionalOffersPricesGetToManyRelatedErrors, SubscriptionPromotionalOffersPricesGetToManyRelatedResponses, SubscriptionPromotionalOffersPricesGetToManyRelationshipData, SubscriptionPromotionalOffersPricesGetToManyRelationshipErrors, SubscriptionPromotionalOffersPricesGetToManyRelationshipResponses, SubscriptionPromotionalOffersUpdateInstanceData, SubscriptionPromotionalOffersUpdateInstanceErrors, SubscriptionPromotionalOffersUpdateInstanceResponses, SubscriptionsAppStoreReviewScreenshotGetToOneRelatedData, SubscriptionsAppStoreReviewScreenshotGetToOneRelatedErrors, SubscriptionsAppStoreReviewScreenshotGetToOneRelatedResponses, SubscriptionsAppStoreReviewScreenshotGetToOneRelationshipData, SubscriptionsAppStoreReviewScreenshotGetToOneRelationshipErrors, SubscriptionsAppStoreReviewScreenshotGetToOneRelationshipResponses, SubscriptionsCreateInstanceData, SubscriptionsCreateInstanceErrors, SubscriptionsCreateInstanceResponses, SubscriptionsDeleteInstanceData, SubscriptionsDeleteInstanceErrors, SubscriptionsDeleteInstanceResponses, SubscriptionsGetInstanceData, SubscriptionsGetInstanceErrors, SubscriptionsGetInstanceResponses, SubscriptionsImagesGetToManyRelatedData, SubscriptionsImagesGetToManyRelatedErrors, SubscriptionsImagesGetToManyRelatedResponses, SubscriptionsImagesGetToManyRelationshipData, SubscriptionsImagesGetToManyRelationshipErrors, SubscriptionsImagesGetToManyRelationshipResponses, SubscriptionsIntroductoryOffersDeleteToManyRelationshipData, SubscriptionsIntroductoryOffersDeleteToManyRelationshipErrors, SubscriptionsIntroductoryOffersDeleteToManyRelationshipResponses, SubscriptionsIntroductoryOffersGetToManyRelatedData, SubscriptionsIntroductoryOffersGetToManyRelatedErrors, SubscriptionsIntroductoryOffersGetToManyRelatedResponses, SubscriptionsIntroductoryOffersGetToManyRelationshipData, SubscriptionsIntroductoryOffersGetToManyRelationshipErrors, SubscriptionsIntroductoryOffersGetToManyRelationshipResponses, SubscriptionsOfferCodesGetToManyRelatedData, SubscriptionsOfferCodesGetToManyRelatedErrors, SubscriptionsOfferCodesGetToManyRelatedResponses, SubscriptionsOfferCodesGetToManyRelationshipData, SubscriptionsOfferCodesGetToManyRelationshipErrors, SubscriptionsOfferCodesGetToManyRelationshipResponses, SubscriptionsPricePointsGetToManyRelatedData, SubscriptionsPricePointsGetToManyRelatedErrors, SubscriptionsPricePointsGetToManyRelatedResponses, SubscriptionsPricePointsGetToManyRelationshipData, SubscriptionsPricePointsGetToManyRelationshipErrors, SubscriptionsPricePointsGetToManyRelationshipResponses, SubscriptionsPricesDeleteToManyRelationshipData, SubscriptionsPricesDeleteToManyRelationshipErrors, SubscriptionsPricesDeleteToManyRelationshipResponses, SubscriptionsPricesGetToManyRelatedData, SubscriptionsPricesGetToManyRelatedErrors, SubscriptionsPricesGetToManyRelatedResponses, SubscriptionsPricesGetToManyRelationshipData, SubscriptionsPricesGetToManyRelationshipErrors, SubscriptionsPricesGetToManyRelationshipResponses, SubscriptionsPromotedPurchaseGetToOneRelatedData, SubscriptionsPromotedPurchaseGetToOneRelatedErrors, SubscriptionsPromotedPurchaseGetToOneRelatedResponses, SubscriptionsPromotedPurchaseGetToOneRelationshipData, SubscriptionsPromotedPurchaseGetToOneRelationshipErrors, SubscriptionsPromotedPurchaseGetToOneRelationshipResponses, SubscriptionsPromotionalOffersGetToManyRelatedData, SubscriptionsPromotionalOffersGetToManyRelatedErrors, SubscriptionsPromotionalOffersGetToManyRelatedResponses, SubscriptionsPromotionalOffersGetToManyRelationshipData, SubscriptionsPromotionalOffersGetToManyRelationshipErrors, SubscriptionsPromotionalOffersGetToManyRelationshipResponses, SubscriptionsSubscriptionAvailabilityGetToOneRelatedData, SubscriptionsSubscriptionAvailabilityGetToOneRelatedErrors, SubscriptionsSubscriptionAvailabilityGetToOneRelatedResponses, SubscriptionsSubscriptionAvailabilityGetToOneRelationshipData, SubscriptionsSubscriptionAvailabilityGetToOneRelationshipErrors, SubscriptionsSubscriptionAvailabilityGetToOneRelationshipResponses, SubscriptionsSubscriptionLocalizationsGetToManyRelatedData, SubscriptionsSubscriptionLocalizationsGetToManyRelatedErrors, SubscriptionsSubscriptionLocalizationsGetToManyRelatedResponses, SubscriptionsSubscriptionLocalizationsGetToManyRelationshipData, SubscriptionsSubscriptionLocalizationsGetToManyRelationshipErrors, SubscriptionsSubscriptionLocalizationsGetToManyRelationshipResponses, SubscriptionSubmissionsCreateInstanceData, SubscriptionSubmissionsCreateInstanceErrors, SubscriptionSubmissionsCreateInstanceResponses, SubscriptionsUpdateInstanceData, SubscriptionsUpdateInstanceErrors, SubscriptionsUpdateInstanceResponses, SubscriptionsWinBackOffersGetToManyRelatedData, SubscriptionsWinBackOffersGetToManyRelatedErrors, SubscriptionsWinBackOffersGetToManyRelatedResponses, SubscriptionsWinBackOffersGetToManyRelationshipData, SubscriptionsWinBackOffersGetToManyRelationshipErrors, SubscriptionsWinBackOffersGetToManyRelationshipResponses, TerritoriesGetCollectionData, TerritoriesGetCollectionErrors, TerritoriesGetCollectionResponses, TerritoryAvailabilitiesUpdateInstanceData, TerritoryAvailabilitiesUpdateInstanceErrors, TerritoryAvailabilitiesUpdateInstanceResponses, UserInvitationsCreateInstanceData, UserInvitationsCreateInstanceErrors, UserInvitationsCreateInstanceResponses, UserInvitationsDeleteInstanceData, UserInvitationsDeleteInstanceErrors, UserInvitationsDeleteInstanceResponses, UserInvitationsGetCollectionData, UserInvitationsGetCollectionErrors, UserInvitationsGetCollectionResponses, UserInvitationsGetInstanceData, UserInvitationsGetInstanceErrors, UserInvitationsGetInstanceResponses, UserInvitationsVisibleAppsGetToManyRelatedData, UserInvitationsVisibleAppsGetToManyRelatedErrors, UserInvitationsVisibleAppsGetToManyRelatedResponses, UserInvitationsVisibleAppsGetToManyRelationshipData, UserInvitationsVisibleAppsGetToManyRelationshipErrors, UserInvitationsVisibleAppsGetToManyRelationshipResponses, UsersDeleteInstanceData, UsersDeleteInstanceErrors, UsersDeleteInstanceResponses, UsersGetCollectionData, UsersGetCollectionErrors, UsersGetCollectionResponses, UsersGetInstanceData, UsersGetInstanceErrors, UsersGetInstanceResponses, UsersUpdateInstanceData, UsersUpdateInstanceErrors, UsersUpdateInstanceResponses, UsersVisibleAppsCreateToManyRelationshipData, UsersVisibleAppsCreateToManyRelationshipErrors, UsersVisibleAppsCreateToManyRelationshipResponses, UsersVisibleAppsDeleteToManyRelationshipData, UsersVisibleAppsDeleteToManyRelationshipErrors, UsersVisibleAppsDeleteToManyRelationshipResponses, UsersVisibleAppsGetToManyRelatedData, UsersVisibleAppsGetToManyRelatedErrors, UsersVisibleAppsGetToManyRelatedResponses, UsersVisibleAppsGetToManyRelationshipData, UsersVisibleAppsGetToManyRelationshipErrors, UsersVisibleAppsGetToManyRelationshipResponses, UsersVisibleAppsReplaceToManyRelationshipData, UsersVisibleAppsReplaceToManyRelationshipErrors, UsersVisibleAppsReplaceToManyRelationshipResponses, WebhookDeliveriesCreateInstanceData, WebhookDeliveriesCreateInstanceErrors, WebhookDeliveriesCreateInstanceResponses, WebhookPingsCreateInstanceData, WebhookPingsCreateInstanceErrors, WebhookPingsCreateInstanceResponses, WebhooksCreateInstanceData, WebhooksCreateInstanceErrors, WebhooksCreateInstanceResponses, WebhooksDeleteInstanceData, WebhooksDeleteInstanceErrors, WebhooksDeleteInstanceResponses, WebhooksDeliveriesGetToManyRelatedData, WebhooksDeliveriesGetToManyRelatedErrors, WebhooksDeliveriesGetToManyRelatedResponses, WebhooksDeliveriesGetToManyRelationshipData, WebhooksDeliveriesGetToManyRelationshipErrors, WebhooksDeliveriesGetToManyRelationshipResponses, WebhooksGetInstanceData, WebhooksGetInstanceErrors, WebhooksGetInstanceResponses, WebhooksUpdateInstanceData, WebhooksUpdateInstanceErrors, WebhooksUpdateInstanceResponses, WinBackOffersCreateInstanceData, WinBackOffersCreateInstanceErrors, WinBackOffersCreateInstanceResponses, WinBackOffersDeleteInstanceData, WinBackOffersDeleteInstanceErrors, WinBackOffersDeleteInstanceResponses, WinBackOffersGetInstanceData, WinBackOffersGetInstanceErrors, WinBackOffersGetInstanceResponses, WinBackOffersPricesGetToManyRelatedData, WinBackOffersPricesGetToManyRelatedErrors, WinBackOffersPricesGetToManyRelatedResponses, WinBackOffersPricesGetToManyRelationshipData, WinBackOffersPricesGetToManyRelationshipErrors, WinBackOffersPricesGetToManyRelationshipResponses, WinBackOffersUpdateInstanceData, WinBackOffersUpdateInstanceErrors, WinBackOffersUpdateInstanceResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class AccessibilityDeclarations {
    public static accessibilityDeclarationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AccessibilityDeclarationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AccessibilityDeclarationsCreateInstanceResponses, AccessibilityDeclarationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/accessibilityDeclarations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static accessibilityDeclarationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AccessibilityDeclarationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AccessibilityDeclarationsDeleteInstanceResponses, AccessibilityDeclarationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/accessibilityDeclarations/{id}',
            ...options
        });
    }
    
    public static accessibilityDeclarationsGetInstance<ThrowOnError extends boolean = false>(options: Options<AccessibilityDeclarationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AccessibilityDeclarationsGetInstanceResponses, AccessibilityDeclarationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/accessibilityDeclarations/{id}',
            ...options
        });
    }
    
    public static accessibilityDeclarationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AccessibilityDeclarationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AccessibilityDeclarationsUpdateInstanceResponses, AccessibilityDeclarationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/accessibilityDeclarations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class Actors {
    public static actorsGetCollection<ThrowOnError extends boolean = false>(options: Options<ActorsGetCollectionData, ThrowOnError>) {
        return (options.client ?? client).get<ActorsGetCollectionResponses, ActorsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/actors',
            ...options
        });
    }
    
    public static actorsGetInstance<ThrowOnError extends boolean = false>(options: Options<ActorsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<ActorsGetInstanceResponses, ActorsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/actors/{id}',
            ...options
        });
    }
}

export class AgeRatingDeclarations {
    public static ageRatingDeclarationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AgeRatingDeclarationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AgeRatingDeclarationsUpdateInstanceResponses, AgeRatingDeclarationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ageRatingDeclarations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AlternativeDistributionDomains {
    public static alternativeDistributionDomainsGetCollection<ThrowOnError extends boolean = false>(options?: Options<AlternativeDistributionDomainsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<AlternativeDistributionDomainsGetCollectionResponses, AlternativeDistributionDomainsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionDomains',
            ...options
        });
    }
    
    public static alternativeDistributionDomainsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionDomainsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AlternativeDistributionDomainsCreateInstanceResponses, AlternativeDistributionDomainsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionDomains',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static alternativeDistributionDomainsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionDomainsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AlternativeDistributionDomainsDeleteInstanceResponses, AlternativeDistributionDomainsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionDomains/{id}',
            ...options
        });
    }
    
    public static alternativeDistributionDomainsGetInstance<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionDomainsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AlternativeDistributionDomainsGetInstanceResponses, AlternativeDistributionDomainsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionDomains/{id}',
            ...options
        });
    }
}

export class AlternativeDistributionKeys {
    public static alternativeDistributionKeysGetCollection<ThrowOnError extends boolean = false>(options?: Options<AlternativeDistributionKeysGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<AlternativeDistributionKeysGetCollectionResponses, AlternativeDistributionKeysGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionKeys',
            ...options
        });
    }
    
    public static alternativeDistributionKeysCreateInstance<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionKeysCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AlternativeDistributionKeysCreateInstanceResponses, AlternativeDistributionKeysCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionKeys',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static alternativeDistributionKeysDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionKeysDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AlternativeDistributionKeysDeleteInstanceResponses, AlternativeDistributionKeysDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionKeys/{id}',
            ...options
        });
    }
    
    public static alternativeDistributionKeysGetInstance<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionKeysGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AlternativeDistributionKeysGetInstanceResponses, AlternativeDistributionKeysGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionKeys/{id}',
            ...options
        });
    }
}

export class AlternativeDistributionPackageDeltas {
    public static alternativeDistributionPackageDeltasGetInstance<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackageDeltasGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AlternativeDistributionPackageDeltasGetInstanceResponses, AlternativeDistributionPackageDeltasGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionPackageDeltas/{id}',
            ...options
        });
    }
}

export class AlternativeDistributionPackageVariants {
    public static alternativeDistributionPackageVariantsGetInstance<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackageVariantsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AlternativeDistributionPackageVariantsGetInstanceResponses, AlternativeDistributionPackageVariantsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionPackageVariants/{id}',
            ...options
        });
    }
}

export class AlternativeDistributionPackageVersions {
    public static alternativeDistributionPackageVersionsGetInstance<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackageVersionsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AlternativeDistributionPackageVersionsGetInstanceResponses, AlternativeDistributionPackageVersionsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionPackageVersions/{id}',
            ...options
        });
    }
    
    public static alternativeDistributionPackageVersionsDeltasGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackageVersionsDeltasGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AlternativeDistributionPackageVersionsDeltasGetToManyRelationshipResponses, AlternativeDistributionPackageVersionsDeltasGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionPackageVersions/{id}/relationships/deltas',
            ...options
        });
    }
    
    public static alternativeDistributionPackageVersionsDeltasGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackageVersionsDeltasGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AlternativeDistributionPackageVersionsDeltasGetToManyRelatedResponses, AlternativeDistributionPackageVersionsDeltasGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionPackageVersions/{id}/deltas',
            ...options
        });
    }
    
    public static alternativeDistributionPackageVersionsVariantsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackageVersionsVariantsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AlternativeDistributionPackageVersionsVariantsGetToManyRelationshipResponses, AlternativeDistributionPackageVersionsVariantsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionPackageVersions/{id}/relationships/variants',
            ...options
        });
    }
    
    public static alternativeDistributionPackageVersionsVariantsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackageVersionsVariantsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AlternativeDistributionPackageVersionsVariantsGetToManyRelatedResponses, AlternativeDistributionPackageVersionsVariantsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionPackageVersions/{id}/variants',
            ...options
        });
    }
}

export class AlternativeDistributionPackages {
    public static alternativeDistributionPackagesCreateInstance<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackagesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AlternativeDistributionPackagesCreateInstanceResponses, AlternativeDistributionPackagesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionPackages',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static alternativeDistributionPackagesGetInstance<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackagesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AlternativeDistributionPackagesGetInstanceResponses, AlternativeDistributionPackagesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionPackages/{id}',
            ...options
        });
    }
    
    public static alternativeDistributionPackagesVersionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackagesVersionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AlternativeDistributionPackagesVersionsGetToManyRelationshipResponses, AlternativeDistributionPackagesVersionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionPackages/{id}/relationships/versions',
            ...options
        });
    }
    
    public static alternativeDistributionPackagesVersionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AlternativeDistributionPackagesVersionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AlternativeDistributionPackagesVersionsGetToManyRelatedResponses, AlternativeDistributionPackagesVersionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/alternativeDistributionPackages/{id}/versions',
            ...options
        });
    }
}

export class AnalyticsReportInstances {
    public static analyticsReportInstancesGetInstance<ThrowOnError extends boolean = false>(options: Options<AnalyticsReportInstancesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AnalyticsReportInstancesGetInstanceResponses, AnalyticsReportInstancesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/analyticsReportInstances/{id}',
            ...options
        });
    }
    
    public static analyticsReportInstancesSegmentsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AnalyticsReportInstancesSegmentsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AnalyticsReportInstancesSegmentsGetToManyRelationshipResponses, AnalyticsReportInstancesSegmentsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/analyticsReportInstances/{id}/relationships/segments',
            ...options
        });
    }
    
    public static analyticsReportInstancesSegmentsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AnalyticsReportInstancesSegmentsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AnalyticsReportInstancesSegmentsGetToManyRelatedResponses, AnalyticsReportInstancesSegmentsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/analyticsReportInstances/{id}/segments',
            ...options
        });
    }
}

export class AnalyticsReportRequests {
    public static analyticsReportRequestsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AnalyticsReportRequestsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AnalyticsReportRequestsCreateInstanceResponses, AnalyticsReportRequestsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/analyticsReportRequests',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static analyticsReportRequestsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AnalyticsReportRequestsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AnalyticsReportRequestsDeleteInstanceResponses, AnalyticsReportRequestsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/analyticsReportRequests/{id}',
            ...options
        });
    }
    
    public static analyticsReportRequestsGetInstance<ThrowOnError extends boolean = false>(options: Options<AnalyticsReportRequestsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AnalyticsReportRequestsGetInstanceResponses, AnalyticsReportRequestsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/analyticsReportRequests/{id}',
            ...options
        });
    }
    
    public static analyticsReportRequestsReportsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AnalyticsReportRequestsReportsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AnalyticsReportRequestsReportsGetToManyRelationshipResponses, AnalyticsReportRequestsReportsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/analyticsReportRequests/{id}/relationships/reports',
            ...options
        });
    }
    
    public static analyticsReportRequestsReportsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AnalyticsReportRequestsReportsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AnalyticsReportRequestsReportsGetToManyRelatedResponses, AnalyticsReportRequestsReportsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/analyticsReportRequests/{id}/reports',
            ...options
        });
    }
}

export class AnalyticsReportSegments {
    public static analyticsReportSegmentsGetInstance<ThrowOnError extends boolean = false>(options: Options<AnalyticsReportSegmentsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AnalyticsReportSegmentsGetInstanceResponses, AnalyticsReportSegmentsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/analyticsReportSegments/{id}',
            ...options
        });
    }
}

export class AnalyticsReports {
    public static analyticsReportsGetInstance<ThrowOnError extends boolean = false>(options: Options<AnalyticsReportsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AnalyticsReportsGetInstanceResponses, AnalyticsReportsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/analyticsReports/{id}',
            ...options
        });
    }
    
    public static analyticsReportsInstancesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AnalyticsReportsInstancesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AnalyticsReportsInstancesGetToManyRelationshipResponses, AnalyticsReportsInstancesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/analyticsReports/{id}/relationships/instances',
            ...options
        });
    }
    
    public static analyticsReportsInstancesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AnalyticsReportsInstancesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AnalyticsReportsInstancesGetToManyRelatedResponses, AnalyticsReportsInstancesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/analyticsReports/{id}/instances',
            ...options
        });
    }
}

export class AppAvailabilities {
    public static appAvailabilitiesV2CreateInstance<ThrowOnError extends boolean = false>(options: Options<AppAvailabilitiesV2CreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppAvailabilitiesV2CreateInstanceResponses, AppAvailabilitiesV2CreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/appAvailabilities',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appAvailabilitiesV2GetInstance<ThrowOnError extends boolean = false>(options: Options<AppAvailabilitiesV2GetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppAvailabilitiesV2GetInstanceResponses, AppAvailabilitiesV2GetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/appAvailabilities/{id}',
            ...options
        });
    }
    
    public static appAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelationshipResponses, AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/appAvailabilities/{id}/relationships/territoryAvailabilities',
            ...options
        });
    }
    
    public static appAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedResponses, AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/appAvailabilities/{id}/territoryAvailabilities',
            ...options
        });
    }
}

export class AppCategories {
    public static appCategoriesGetCollection<ThrowOnError extends boolean = false>(options?: Options<AppCategoriesGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<AppCategoriesGetCollectionResponses, AppCategoriesGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCategories',
            ...options
        });
    }
    
    public static appCategoriesGetInstance<ThrowOnError extends boolean = false>(options: Options<AppCategoriesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppCategoriesGetInstanceResponses, AppCategoriesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCategories/{id}',
            ...options
        });
    }
    
    public static appCategoriesParentGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppCategoriesParentGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppCategoriesParentGetToOneRelationshipResponses, AppCategoriesParentGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCategories/{id}/relationships/parent',
            ...options
        });
    }
    
    public static appCategoriesParentGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppCategoriesParentGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppCategoriesParentGetToOneRelatedResponses, AppCategoriesParentGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCategories/{id}/parent',
            ...options
        });
    }
    
    public static appCategoriesSubcategoriesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppCategoriesSubcategoriesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppCategoriesSubcategoriesGetToManyRelationshipResponses, AppCategoriesSubcategoriesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCategories/{id}/relationships/subcategories',
            ...options
        });
    }
    
    public static appCategoriesSubcategoriesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppCategoriesSubcategoriesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppCategoriesSubcategoriesGetToManyRelatedResponses, AppCategoriesSubcategoriesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCategories/{id}/subcategories',
            ...options
        });
    }
}

export class AppClipAdvancedExperienceImages {
    public static appClipAdvancedExperienceImagesCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppClipAdvancedExperienceImagesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppClipAdvancedExperienceImagesCreateInstanceResponses, AppClipAdvancedExperienceImagesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipAdvancedExperienceImages',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appClipAdvancedExperienceImagesGetInstance<ThrowOnError extends boolean = false>(options: Options<AppClipAdvancedExperienceImagesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipAdvancedExperienceImagesGetInstanceResponses, AppClipAdvancedExperienceImagesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipAdvancedExperienceImages/{id}',
            ...options
        });
    }
    
    public static appClipAdvancedExperienceImagesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppClipAdvancedExperienceImagesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppClipAdvancedExperienceImagesUpdateInstanceResponses, AppClipAdvancedExperienceImagesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipAdvancedExperienceImages/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AppClipAdvancedExperiences {
    public static appClipAdvancedExperiencesCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppClipAdvancedExperiencesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppClipAdvancedExperiencesCreateInstanceResponses, AppClipAdvancedExperiencesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipAdvancedExperiences',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appClipAdvancedExperiencesGetInstance<ThrowOnError extends boolean = false>(options: Options<AppClipAdvancedExperiencesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipAdvancedExperiencesGetInstanceResponses, AppClipAdvancedExperiencesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipAdvancedExperiences/{id}',
            ...options
        });
    }
    
    public static appClipAdvancedExperiencesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppClipAdvancedExperiencesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppClipAdvancedExperiencesUpdateInstanceResponses, AppClipAdvancedExperiencesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipAdvancedExperiences/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AppClipAppStoreReviewDetails {
    public static appClipAppStoreReviewDetailsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppClipAppStoreReviewDetailsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppClipAppStoreReviewDetailsCreateInstanceResponses, AppClipAppStoreReviewDetailsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipAppStoreReviewDetails',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appClipAppStoreReviewDetailsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppClipAppStoreReviewDetailsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipAppStoreReviewDetailsGetInstanceResponses, AppClipAppStoreReviewDetailsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipAppStoreReviewDetails/{id}',
            ...options
        });
    }
    
    public static appClipAppStoreReviewDetailsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppClipAppStoreReviewDetailsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppClipAppStoreReviewDetailsUpdateInstanceResponses, AppClipAppStoreReviewDetailsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipAppStoreReviewDetails/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AppClipDefaultExperienceLocalizations {
    public static appClipDefaultExperienceLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperienceLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppClipDefaultExperienceLocalizationsCreateInstanceResponses, AppClipDefaultExperienceLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperienceLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appClipDefaultExperienceLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperienceLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppClipDefaultExperienceLocalizationsDeleteInstanceResponses, AppClipDefaultExperienceLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperienceLocalizations/{id}',
            ...options
        });
    }
    
    public static appClipDefaultExperienceLocalizationsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperienceLocalizationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipDefaultExperienceLocalizationsGetInstanceResponses, AppClipDefaultExperienceLocalizationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperienceLocalizations/{id}',
            ...options
        });
    }
    
    public static appClipDefaultExperienceLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperienceLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppClipDefaultExperienceLocalizationsUpdateInstanceResponses, AppClipDefaultExperienceLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperienceLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelationshipResponses, AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperienceLocalizations/{id}/relationships/appClipHeaderImage',
            ...options
        });
    }
    
    public static appClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedResponses, AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperienceLocalizations/{id}/appClipHeaderImage',
            ...options
        });
    }
}

export class AppClipDefaultExperiences {
    public static appClipDefaultExperiencesCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppClipDefaultExperiencesCreateInstanceResponses, AppClipDefaultExperiencesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperiences',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appClipDefaultExperiencesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppClipDefaultExperiencesDeleteInstanceResponses, AppClipDefaultExperiencesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperiences/{id}',
            ...options
        });
    }
    
    public static appClipDefaultExperiencesGetInstance<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipDefaultExperiencesGetInstanceResponses, AppClipDefaultExperiencesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperiences/{id}',
            ...options
        });
    }
    
    public static appClipDefaultExperiencesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppClipDefaultExperiencesUpdateInstanceResponses, AppClipDefaultExperiencesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperiences/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelationshipResponses, AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperiences/{id}/relationships/appClipAppStoreReviewDetail',
            ...options
        });
    }
    
    public static appClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedResponses, AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperiences/{id}/appClipAppStoreReviewDetail',
            ...options
        });
    }
    
    public static appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelationshipResponses, AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperiences/{id}/relationships/appClipDefaultExperienceLocalizations',
            ...options
        });
    }
    
    public static appClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedResponses, AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperiences/{id}/appClipDefaultExperienceLocalizations',
            ...options
        });
    }
    
    public static appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipResponses, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion',
            ...options
        });
    }
    
    public static appClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipResponses, AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedResponses, AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipDefaultExperiences/{id}/releaseWithAppStoreVersion',
            ...options
        });
    }
}

export class AppClipHeaderImages {
    public static appClipHeaderImagesCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppClipHeaderImagesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppClipHeaderImagesCreateInstanceResponses, AppClipHeaderImagesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipHeaderImages',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appClipHeaderImagesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppClipHeaderImagesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppClipHeaderImagesDeleteInstanceResponses, AppClipHeaderImagesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipHeaderImages/{id}',
            ...options
        });
    }
    
    public static appClipHeaderImagesGetInstance<ThrowOnError extends boolean = false>(options: Options<AppClipHeaderImagesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipHeaderImagesGetInstanceResponses, AppClipHeaderImagesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipHeaderImages/{id}',
            ...options
        });
    }
    
    public static appClipHeaderImagesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppClipHeaderImagesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppClipHeaderImagesUpdateInstanceResponses, AppClipHeaderImagesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClipHeaderImages/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AppClips {
    public static appClipsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppClipsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipsGetInstanceResponses, AppClipsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClips/{id}',
            ...options
        });
    }
    
    public static appClipsAppClipAdvancedExperiencesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppClipsAppClipAdvancedExperiencesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipsAppClipAdvancedExperiencesGetToManyRelationshipResponses, AppClipsAppClipAdvancedExperiencesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClips/{id}/relationships/appClipAdvancedExperiences',
            ...options
        });
    }
    
    public static appClipsAppClipAdvancedExperiencesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppClipsAppClipAdvancedExperiencesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipsAppClipAdvancedExperiencesGetToManyRelatedResponses, AppClipsAppClipAdvancedExperiencesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClips/{id}/appClipAdvancedExperiences',
            ...options
        });
    }
    
    public static appClipsAppClipDefaultExperiencesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppClipsAppClipDefaultExperiencesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipsAppClipDefaultExperiencesGetToManyRelationshipResponses, AppClipsAppClipDefaultExperiencesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClips/{id}/relationships/appClipDefaultExperiences',
            ...options
        });
    }
    
    public static appClipsAppClipDefaultExperiencesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppClipsAppClipDefaultExperiencesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppClipsAppClipDefaultExperiencesGetToManyRelatedResponses, AppClipsAppClipDefaultExperiencesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appClips/{id}/appClipDefaultExperiences',
            ...options
        });
    }
}

export class AppCustomProductPageLocalizations {
    public static appCustomProductPageLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppCustomProductPageLocalizationsCreateInstanceResponses, AppCustomProductPageLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appCustomProductPageLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppCustomProductPageLocalizationsDeleteInstanceResponses, AppCustomProductPageLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageLocalizations/{id}',
            ...options
        });
    }
    
    public static appCustomProductPageLocalizationsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppCustomProductPageLocalizationsGetInstanceResponses, AppCustomProductPageLocalizationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageLocalizations/{id}',
            ...options
        });
    }
    
    public static appCustomProductPageLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppCustomProductPageLocalizationsUpdateInstanceResponses, AppCustomProductPageLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appCustomProductPageLocalizationsAppPreviewSetsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelationshipResponses, AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageLocalizations/{id}/relationships/appPreviewSets',
            ...options
        });
    }
    
    public static appCustomProductPageLocalizationsAppPreviewSetsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedResponses, AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageLocalizations/{id}/appPreviewSets',
            ...options
        });
    }
    
    public static appCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelationshipResponses, AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageLocalizations/{id}/relationships/appScreenshotSets',
            ...options
        });
    }
    
    public static appCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedResponses, AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageLocalizations/{id}/appScreenshotSets',
            ...options
        });
    }
    
    public static appCustomProductPageLocalizationsSearchKeywordsDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsSearchKeywordsDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<AppCustomProductPageLocalizationsSearchKeywordsDeleteToManyRelationshipResponses, AppCustomProductPageLocalizationsSearchKeywordsDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageLocalizations/{id}/relationships/searchKeywords',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appCustomProductPageLocalizationsSearchKeywordsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsSearchKeywordsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppCustomProductPageLocalizationsSearchKeywordsGetToManyRelationshipResponses, AppCustomProductPageLocalizationsSearchKeywordsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageLocalizations/{id}/relationships/searchKeywords',
            ...options
        });
    }
    
    public static appCustomProductPageLocalizationsSearchKeywordsCreateToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsSearchKeywordsCreateToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).post<AppCustomProductPageLocalizationsSearchKeywordsCreateToManyRelationshipResponses, AppCustomProductPageLocalizationsSearchKeywordsCreateToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageLocalizations/{id}/relationships/searchKeywords',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appCustomProductPageLocalizationsSearchKeywordsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageLocalizationsSearchKeywordsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppCustomProductPageLocalizationsSearchKeywordsGetToManyRelatedResponses, AppCustomProductPageLocalizationsSearchKeywordsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageLocalizations/{id}/searchKeywords',
            ...options
        });
    }
}

export class AppCustomProductPageVersions {
    public static appCustomProductPageVersionsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageVersionsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppCustomProductPageVersionsCreateInstanceResponses, AppCustomProductPageVersionsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageVersions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appCustomProductPageVersionsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageVersionsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppCustomProductPageVersionsGetInstanceResponses, AppCustomProductPageVersionsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageVersions/{id}',
            ...options
        });
    }
    
    public static appCustomProductPageVersionsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageVersionsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppCustomProductPageVersionsUpdateInstanceResponses, AppCustomProductPageVersionsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageVersions/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelationshipResponses, AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageVersions/{id}/relationships/appCustomProductPageLocalizations',
            ...options
        });
    }
    
    public static appCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedResponses, AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPageVersions/{id}/appCustomProductPageLocalizations',
            ...options
        });
    }
}

export class AppCustomProductPages {
    public static appCustomProductPagesCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPagesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppCustomProductPagesCreateInstanceResponses, AppCustomProductPagesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPages',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appCustomProductPagesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPagesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppCustomProductPagesDeleteInstanceResponses, AppCustomProductPagesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPages/{id}',
            ...options
        });
    }
    
    public static appCustomProductPagesGetInstance<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPagesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppCustomProductPagesGetInstanceResponses, AppCustomProductPagesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPages/{id}',
            ...options
        });
    }
    
    public static appCustomProductPagesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPagesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppCustomProductPagesUpdateInstanceResponses, AppCustomProductPagesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPages/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appCustomProductPagesAppCustomProductPageVersionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelationshipResponses, AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPages/{id}/relationships/appCustomProductPageVersions',
            ...options
        });
    }
    
    public static appCustomProductPagesAppCustomProductPageVersionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedResponses, AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appCustomProductPages/{id}/appCustomProductPageVersions',
            ...options
        });
    }
}

export class AppEncryptionDeclarationDocuments {
    public static appEncryptionDeclarationDocumentsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationDocumentsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppEncryptionDeclarationDocumentsCreateInstanceResponses, AppEncryptionDeclarationDocumentsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEncryptionDeclarationDocuments',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appEncryptionDeclarationDocumentsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationDocumentsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppEncryptionDeclarationDocumentsGetInstanceResponses, AppEncryptionDeclarationDocumentsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEncryptionDeclarationDocuments/{id}',
            ...options
        });
    }
    
    public static appEncryptionDeclarationDocumentsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationDocumentsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppEncryptionDeclarationDocumentsUpdateInstanceResponses, AppEncryptionDeclarationDocumentsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEncryptionDeclarationDocuments/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AppEncryptionDeclarations {
    public static appEncryptionDeclarationsGetCollection<ThrowOnError extends boolean = false>(options?: Options<AppEncryptionDeclarationsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<AppEncryptionDeclarationsGetCollectionResponses, AppEncryptionDeclarationsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEncryptionDeclarations',
            ...options
        });
    }
    
    public static appEncryptionDeclarationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppEncryptionDeclarationsCreateInstanceResponses, AppEncryptionDeclarationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEncryptionDeclarations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appEncryptionDeclarationsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppEncryptionDeclarationsGetInstanceResponses, AppEncryptionDeclarationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEncryptionDeclarations/{id}',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static appEncryptionDeclarationsAppGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationsAppGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppEncryptionDeclarationsAppGetToOneRelationshipResponses, AppEncryptionDeclarationsAppGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEncryptionDeclarations/{id}/relationships/app',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static appEncryptionDeclarationsAppGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationsAppGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppEncryptionDeclarationsAppGetToOneRelatedResponses, AppEncryptionDeclarationsAppGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEncryptionDeclarations/{id}/app',
            ...options
        });
    }
    
    public static appEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelationshipResponses, AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEncryptionDeclarations/{id}/relationships/appEncryptionDeclarationDocument',
            ...options
        });
    }
    
    public static appEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedResponses, AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEncryptionDeclarations/{id}/appEncryptionDeclarationDocument',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static appEncryptionDeclarationsBuildsCreateToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppEncryptionDeclarationsBuildsCreateToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).post<AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponses, AppEncryptionDeclarationsBuildsCreateToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEncryptionDeclarations/{id}/relationships/builds',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AppEventLocalizations {
    public static appEventLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppEventLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppEventLocalizationsCreateInstanceResponses, AppEventLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEventLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appEventLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppEventLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppEventLocalizationsDeleteInstanceResponses, AppEventLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEventLocalizations/{id}',
            ...options
        });
    }
    
    public static appEventLocalizationsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppEventLocalizationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppEventLocalizationsGetInstanceResponses, AppEventLocalizationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEventLocalizations/{id}',
            ...options
        });
    }
    
    public static appEventLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppEventLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppEventLocalizationsUpdateInstanceResponses, AppEventLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEventLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appEventLocalizationsAppEventScreenshotsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppEventLocalizationsAppEventScreenshotsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppEventLocalizationsAppEventScreenshotsGetToManyRelationshipResponses, AppEventLocalizationsAppEventScreenshotsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEventLocalizations/{id}/relationships/appEventScreenshots',
            ...options
        });
    }
    
    public static appEventLocalizationsAppEventScreenshotsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppEventLocalizationsAppEventScreenshotsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppEventLocalizationsAppEventScreenshotsGetToManyRelatedResponses, AppEventLocalizationsAppEventScreenshotsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEventLocalizations/{id}/appEventScreenshots',
            ...options
        });
    }
    
    public static appEventLocalizationsAppEventVideoClipsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppEventLocalizationsAppEventVideoClipsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppEventLocalizationsAppEventVideoClipsGetToManyRelationshipResponses, AppEventLocalizationsAppEventVideoClipsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEventLocalizations/{id}/relationships/appEventVideoClips',
            ...options
        });
    }
    
    public static appEventLocalizationsAppEventVideoClipsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppEventLocalizationsAppEventVideoClipsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppEventLocalizationsAppEventVideoClipsGetToManyRelatedResponses, AppEventLocalizationsAppEventVideoClipsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEventLocalizations/{id}/appEventVideoClips',
            ...options
        });
    }
}

export class AppEventScreenshots {
    public static appEventScreenshotsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppEventScreenshotsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppEventScreenshotsCreateInstanceResponses, AppEventScreenshotsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEventScreenshots',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appEventScreenshotsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppEventScreenshotsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppEventScreenshotsDeleteInstanceResponses, AppEventScreenshotsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEventScreenshots/{id}',
            ...options
        });
    }
    
    public static appEventScreenshotsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppEventScreenshotsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppEventScreenshotsGetInstanceResponses, AppEventScreenshotsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEventScreenshots/{id}',
            ...options
        });
    }
    
    public static appEventScreenshotsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppEventScreenshotsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppEventScreenshotsUpdateInstanceResponses, AppEventScreenshotsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEventScreenshots/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AppEventVideoClips {
    public static appEventVideoClipsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppEventVideoClipsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppEventVideoClipsCreateInstanceResponses, AppEventVideoClipsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEventVideoClips',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appEventVideoClipsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppEventVideoClipsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppEventVideoClipsDeleteInstanceResponses, AppEventVideoClipsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEventVideoClips/{id}',
            ...options
        });
    }
    
    public static appEventVideoClipsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppEventVideoClipsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppEventVideoClipsGetInstanceResponses, AppEventVideoClipsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEventVideoClips/{id}',
            ...options
        });
    }
    
    public static appEventVideoClipsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppEventVideoClipsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppEventVideoClipsUpdateInstanceResponses, AppEventVideoClipsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEventVideoClips/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AppEvents {
    public static appEventsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppEventsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppEventsCreateInstanceResponses, AppEventsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEvents',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appEventsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppEventsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppEventsDeleteInstanceResponses, AppEventsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEvents/{id}',
            ...options
        });
    }
    
    public static appEventsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppEventsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppEventsGetInstanceResponses, AppEventsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEvents/{id}',
            ...options
        });
    }
    
    public static appEventsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppEventsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppEventsUpdateInstanceResponses, AppEventsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEvents/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appEventsLocalizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppEventsLocalizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppEventsLocalizationsGetToManyRelationshipResponses, AppEventsLocalizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEvents/{id}/relationships/localizations',
            ...options
        });
    }
    
    public static appEventsLocalizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppEventsLocalizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppEventsLocalizationsGetToManyRelatedResponses, AppEventsLocalizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appEvents/{id}/localizations',
            ...options
        });
    }
}

export class AppInfoLocalizations {
    public static appInfoLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppInfoLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppInfoLocalizationsCreateInstanceResponses, AppInfoLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfoLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appInfoLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppInfoLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppInfoLocalizationsDeleteInstanceResponses, AppInfoLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfoLocalizations/{id}',
            ...options
        });
    }
    
    public static appInfoLocalizationsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppInfoLocalizationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfoLocalizationsGetInstanceResponses, AppInfoLocalizationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfoLocalizations/{id}',
            ...options
        });
    }
    
    public static appInfoLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppInfoLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppInfoLocalizationsUpdateInstanceResponses, AppInfoLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfoLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AppInfos {
    public static appInfosGetInstance<ThrowOnError extends boolean = false>(options: Options<AppInfosGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosGetInstanceResponses, AppInfosGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}',
            ...options
        });
    }
    
    public static appInfosUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppInfosUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppInfosUpdateInstanceResponses, AppInfosUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appInfosAgeRatingDeclarationGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppInfosAgeRatingDeclarationGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosAgeRatingDeclarationGetToOneRelationshipResponses, AppInfosAgeRatingDeclarationGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/relationships/ageRatingDeclaration',
            ...options
        });
    }
    
    public static appInfosAgeRatingDeclarationGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppInfosAgeRatingDeclarationGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosAgeRatingDeclarationGetToOneRelatedResponses, AppInfosAgeRatingDeclarationGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/ageRatingDeclaration',
            ...options
        });
    }
    
    public static appInfosAppInfoLocalizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppInfosAppInfoLocalizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosAppInfoLocalizationsGetToManyRelationshipResponses, AppInfosAppInfoLocalizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/relationships/appInfoLocalizations',
            ...options
        });
    }
    
    public static appInfosAppInfoLocalizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppInfosAppInfoLocalizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosAppInfoLocalizationsGetToManyRelatedResponses, AppInfosAppInfoLocalizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/appInfoLocalizations',
            ...options
        });
    }
    
    public static appInfosPrimaryCategoryGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppInfosPrimaryCategoryGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosPrimaryCategoryGetToOneRelationshipResponses, AppInfosPrimaryCategoryGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/relationships/primaryCategory',
            ...options
        });
    }
    
    public static appInfosPrimaryCategoryGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppInfosPrimaryCategoryGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosPrimaryCategoryGetToOneRelatedResponses, AppInfosPrimaryCategoryGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/primaryCategory',
            ...options
        });
    }
    
    public static appInfosPrimarySubcategoryOneGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppInfosPrimarySubcategoryOneGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosPrimarySubcategoryOneGetToOneRelationshipResponses, AppInfosPrimarySubcategoryOneGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/relationships/primarySubcategoryOne',
            ...options
        });
    }
    
    public static appInfosPrimarySubcategoryOneGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppInfosPrimarySubcategoryOneGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosPrimarySubcategoryOneGetToOneRelatedResponses, AppInfosPrimarySubcategoryOneGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/primarySubcategoryOne',
            ...options
        });
    }
    
    public static appInfosPrimarySubcategoryTwoGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppInfosPrimarySubcategoryTwoGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosPrimarySubcategoryTwoGetToOneRelationshipResponses, AppInfosPrimarySubcategoryTwoGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/relationships/primarySubcategoryTwo',
            ...options
        });
    }
    
    public static appInfosPrimarySubcategoryTwoGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppInfosPrimarySubcategoryTwoGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosPrimarySubcategoryTwoGetToOneRelatedResponses, AppInfosPrimarySubcategoryTwoGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/primarySubcategoryTwo',
            ...options
        });
    }
    
    public static appInfosSecondaryCategoryGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppInfosSecondaryCategoryGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosSecondaryCategoryGetToOneRelationshipResponses, AppInfosSecondaryCategoryGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/relationships/secondaryCategory',
            ...options
        });
    }
    
    public static appInfosSecondaryCategoryGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppInfosSecondaryCategoryGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosSecondaryCategoryGetToOneRelatedResponses, AppInfosSecondaryCategoryGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/secondaryCategory',
            ...options
        });
    }
    
    public static appInfosSecondarySubcategoryOneGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppInfosSecondarySubcategoryOneGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosSecondarySubcategoryOneGetToOneRelationshipResponses, AppInfosSecondarySubcategoryOneGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/relationships/secondarySubcategoryOne',
            ...options
        });
    }
    
    public static appInfosSecondarySubcategoryOneGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppInfosSecondarySubcategoryOneGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosSecondarySubcategoryOneGetToOneRelatedResponses, AppInfosSecondarySubcategoryOneGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/secondarySubcategoryOne',
            ...options
        });
    }
    
    public static appInfosSecondarySubcategoryTwoGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppInfosSecondarySubcategoryTwoGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosSecondarySubcategoryTwoGetToOneRelationshipResponses, AppInfosSecondarySubcategoryTwoGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/relationships/secondarySubcategoryTwo',
            ...options
        });
    }
    
    public static appInfosSecondarySubcategoryTwoGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppInfosSecondarySubcategoryTwoGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosSecondarySubcategoryTwoGetToOneRelatedResponses, AppInfosSecondarySubcategoryTwoGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/secondarySubcategoryTwo',
            ...options
        });
    }
    
    public static appInfosTerritoryAgeRatingsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppInfosTerritoryAgeRatingsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosTerritoryAgeRatingsGetToManyRelationshipResponses, AppInfosTerritoryAgeRatingsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/relationships/territoryAgeRatings',
            ...options
        });
    }
    
    public static appInfosTerritoryAgeRatingsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppInfosTerritoryAgeRatingsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppInfosTerritoryAgeRatingsGetToManyRelatedResponses, AppInfosTerritoryAgeRatingsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appInfos/{id}/territoryAgeRatings',
            ...options
        });
    }
}

export class AppPreviewSets {
    public static appPreviewSetsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppPreviewSetsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppPreviewSetsCreateInstanceResponses, AppPreviewSetsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPreviewSets',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appPreviewSetsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppPreviewSetsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppPreviewSetsDeleteInstanceResponses, AppPreviewSetsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPreviewSets/{id}',
            ...options
        });
    }
    
    public static appPreviewSetsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppPreviewSetsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppPreviewSetsGetInstanceResponses, AppPreviewSetsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPreviewSets/{id}',
            ...options
        });
    }
    
    public static appPreviewSetsAppPreviewsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppPreviewSetsAppPreviewsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppPreviewSetsAppPreviewsGetToManyRelationshipResponses, AppPreviewSetsAppPreviewsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPreviewSets/{id}/relationships/appPreviews',
            ...options
        });
    }
    
    public static appPreviewSetsAppPreviewsReplaceToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppPreviewSetsAppPreviewsReplaceToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponses, AppPreviewSetsAppPreviewsReplaceToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPreviewSets/{id}/relationships/appPreviews',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appPreviewSetsAppPreviewsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppPreviewSetsAppPreviewsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppPreviewSetsAppPreviewsGetToManyRelatedResponses, AppPreviewSetsAppPreviewsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPreviewSets/{id}/appPreviews',
            ...options
        });
    }
}

export class AppPreviews {
    public static appPreviewsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppPreviewsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppPreviewsCreateInstanceResponses, AppPreviewsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPreviews',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appPreviewsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppPreviewsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppPreviewsDeleteInstanceResponses, AppPreviewsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPreviews/{id}',
            ...options
        });
    }
    
    public static appPreviewsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppPreviewsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppPreviewsGetInstanceResponses, AppPreviewsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPreviews/{id}',
            ...options
        });
    }
    
    public static appPreviewsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppPreviewsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppPreviewsUpdateInstanceResponses, AppPreviewsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPreviews/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AppPricePoints {
    public static appPricePointsV3GetInstance<ThrowOnError extends boolean = false>(options: Options<AppPricePointsV3GetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppPricePointsV3GetInstanceResponses, AppPricePointsV3GetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v3/appPricePoints/{id}',
            ...options
        });
    }
    
    public static appPricePointsV3EqualizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppPricePointsV3EqualizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppPricePointsV3EqualizationsGetToManyRelationshipResponses, AppPricePointsV3EqualizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v3/appPricePoints/{id}/relationships/equalizations',
            ...options
        });
    }
    
    public static appPricePointsV3EqualizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppPricePointsV3EqualizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppPricePointsV3EqualizationsGetToManyRelatedResponses, AppPricePointsV3EqualizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v3/appPricePoints/{id}/equalizations',
            ...options
        });
    }
}

export class AppPriceSchedules {
    public static appPriceSchedulesCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppPriceSchedulesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppPriceSchedulesCreateInstanceResponses, AppPriceSchedulesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPriceSchedules',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appPriceSchedulesGetInstance<ThrowOnError extends boolean = false>(options: Options<AppPriceSchedulesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppPriceSchedulesGetInstanceResponses, AppPriceSchedulesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPriceSchedules/{id}',
            ...options
        });
    }
    
    public static appPriceSchedulesAutomaticPricesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppPriceSchedulesAutomaticPricesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppPriceSchedulesAutomaticPricesGetToManyRelationshipResponses, AppPriceSchedulesAutomaticPricesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPriceSchedules/{id}/relationships/automaticPrices',
            ...options
        });
    }
    
    public static appPriceSchedulesAutomaticPricesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppPriceSchedulesAutomaticPricesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppPriceSchedulesAutomaticPricesGetToManyRelatedResponses, AppPriceSchedulesAutomaticPricesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPriceSchedules/{id}/automaticPrices',
            ...options
        });
    }
    
    public static appPriceSchedulesBaseTerritoryGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppPriceSchedulesBaseTerritoryGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppPriceSchedulesBaseTerritoryGetToOneRelationshipResponses, AppPriceSchedulesBaseTerritoryGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPriceSchedules/{id}/relationships/baseTerritory',
            ...options
        });
    }
    
    public static appPriceSchedulesBaseTerritoryGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppPriceSchedulesBaseTerritoryGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppPriceSchedulesBaseTerritoryGetToOneRelatedResponses, AppPriceSchedulesBaseTerritoryGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPriceSchedules/{id}/baseTerritory',
            ...options
        });
    }
    
    public static appPriceSchedulesManualPricesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppPriceSchedulesManualPricesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppPriceSchedulesManualPricesGetToManyRelationshipResponses, AppPriceSchedulesManualPricesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPriceSchedules/{id}/relationships/manualPrices',
            ...options
        });
    }
    
    public static appPriceSchedulesManualPricesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppPriceSchedulesManualPricesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppPriceSchedulesManualPricesGetToManyRelatedResponses, AppPriceSchedulesManualPricesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appPriceSchedules/{id}/manualPrices',
            ...options
        });
    }
}

export class AppScreenshotSets {
    public static appScreenshotSetsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppScreenshotSetsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppScreenshotSetsCreateInstanceResponses, AppScreenshotSetsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appScreenshotSets',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appScreenshotSetsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppScreenshotSetsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppScreenshotSetsDeleteInstanceResponses, AppScreenshotSetsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appScreenshotSets/{id}',
            ...options
        });
    }
    
    public static appScreenshotSetsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppScreenshotSetsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppScreenshotSetsGetInstanceResponses, AppScreenshotSetsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appScreenshotSets/{id}',
            ...options
        });
    }
    
    public static appScreenshotSetsAppScreenshotsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppScreenshotSetsAppScreenshotsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponses, AppScreenshotSetsAppScreenshotsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appScreenshotSets/{id}/relationships/appScreenshots',
            ...options
        });
    }
    
    public static appScreenshotSetsAppScreenshotsReplaceToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponses, AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appScreenshotSets/{id}/relationships/appScreenshots',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appScreenshotSetsAppScreenshotsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppScreenshotSetsAppScreenshotsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppScreenshotSetsAppScreenshotsGetToManyRelatedResponses, AppScreenshotSetsAppScreenshotsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appScreenshotSets/{id}/appScreenshots',
            ...options
        });
    }
}

export class AppScreenshots {
    public static appScreenshotsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppScreenshotsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppScreenshotsCreateInstanceResponses, AppScreenshotsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appScreenshots',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appScreenshotsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppScreenshotsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppScreenshotsDeleteInstanceResponses, AppScreenshotsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appScreenshots/{id}',
            ...options
        });
    }
    
    public static appScreenshotsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppScreenshotsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppScreenshotsGetInstanceResponses, AppScreenshotsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appScreenshots/{id}',
            ...options
        });
    }
    
    public static appScreenshotsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppScreenshotsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppScreenshotsUpdateInstanceResponses, AppScreenshotsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appScreenshots/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AppStoreReviewAttachments {
    public static appStoreReviewAttachmentsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreReviewAttachmentsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppStoreReviewAttachmentsCreateInstanceResponses, AppStoreReviewAttachmentsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreReviewAttachments',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appStoreReviewAttachmentsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreReviewAttachmentsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppStoreReviewAttachmentsDeleteInstanceResponses, AppStoreReviewAttachmentsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreReviewAttachments/{id}',
            ...options
        });
    }
    
    public static appStoreReviewAttachmentsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreReviewAttachmentsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreReviewAttachmentsGetInstanceResponses, AppStoreReviewAttachmentsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreReviewAttachments/{id}',
            ...options
        });
    }
    
    public static appStoreReviewAttachmentsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreReviewAttachmentsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppStoreReviewAttachmentsUpdateInstanceResponses, AppStoreReviewAttachmentsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreReviewAttachments/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AppStoreReviewDetails {
    public static appStoreReviewDetailsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreReviewDetailsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppStoreReviewDetailsCreateInstanceResponses, AppStoreReviewDetailsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreReviewDetails',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appStoreReviewDetailsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreReviewDetailsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreReviewDetailsGetInstanceResponses, AppStoreReviewDetailsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreReviewDetails/{id}',
            ...options
        });
    }
    
    public static appStoreReviewDetailsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreReviewDetailsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppStoreReviewDetailsUpdateInstanceResponses, AppStoreReviewDetailsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreReviewDetails/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelationshipResponses, AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreReviewDetails/{id}/relationships/appStoreReviewAttachments',
            ...options
        });
    }
    
    public static appStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponses, AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreReviewDetails/{id}/appStoreReviewAttachments',
            ...options
        });
    }
}

export class AppStoreVersionExperimentTreatmentLocalizations {
    public static appStoreVersionExperimentTreatmentLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceResponses, AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperimentTreatmentLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appStoreVersionExperimentTreatmentLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceResponses, AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperimentTreatmentLocalizations/{id}',
            ...options
        });
    }
    
    public static appStoreVersionExperimentTreatmentLocalizationsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentLocalizationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionExperimentTreatmentLocalizationsGetInstanceResponses, AppStoreVersionExperimentTreatmentLocalizationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperimentTreatmentLocalizations/{id}',
            ...options
        });
    }
    
    public static appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelationshipResponses, AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/relationships/appPreviewSets',
            ...options
        });
    }
    
    public static appStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedResponses, AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appPreviewSets',
            ...options
        });
    }
    
    public static appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelationshipResponses, AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/relationships/appScreenshotSets',
            ...options
        });
    }
    
    public static appStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedResponses, AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appScreenshotSets',
            ...options
        });
    }
}

export class AppStoreVersionExperimentTreatments {
    public static appStoreVersionExperimentTreatmentsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppStoreVersionExperimentTreatmentsCreateInstanceResponses, AppStoreVersionExperimentTreatmentsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperimentTreatments',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appStoreVersionExperimentTreatmentsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppStoreVersionExperimentTreatmentsDeleteInstanceResponses, AppStoreVersionExperimentTreatmentsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperimentTreatments/{id}',
            ...options
        });
    }
    
    public static appStoreVersionExperimentTreatmentsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionExperimentTreatmentsGetInstanceResponses, AppStoreVersionExperimentTreatmentsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperimentTreatments/{id}',
            ...options
        });
    }
    
    public static appStoreVersionExperimentTreatmentsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppStoreVersionExperimentTreatmentsUpdateInstanceResponses, AppStoreVersionExperimentTreatmentsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperimentTreatments/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelationshipResponses, AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperimentTreatments/{id}/relationships/appStoreVersionExperimentTreatmentLocalizations',
            ...options
        });
    }
    
    public static appStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedResponses, AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperimentTreatments/{id}/appStoreVersionExperimentTreatmentLocalizations',
            ...options
        });
    }
}

export class AppStoreVersionExperiments {
    public static appStoreVersionExperimentsV2CreateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsV2CreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppStoreVersionExperimentsV2CreateInstanceResponses, AppStoreVersionExperimentsV2CreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/appStoreVersionExperiments',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appStoreVersionExperimentsV2DeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsV2DeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppStoreVersionExperimentsV2DeleteInstanceResponses, AppStoreVersionExperimentsV2DeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/appStoreVersionExperiments/{id}',
            ...options
        });
    }
    
    public static appStoreVersionExperimentsV2GetInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsV2GetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionExperimentsV2GetInstanceResponses, AppStoreVersionExperimentsV2GetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/appStoreVersionExperiments/{id}',
            ...options
        });
    }
    
    public static appStoreVersionExperimentsV2UpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsV2UpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppStoreVersionExperimentsV2UpdateInstanceResponses, AppStoreVersionExperimentsV2UpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/appStoreVersionExperiments/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * @deprecated
     */
    public static appStoreVersionExperimentsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppStoreVersionExperimentsCreateInstanceResponses, AppStoreVersionExperimentsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperiments',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * @deprecated
     */
    public static appStoreVersionExperimentsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppStoreVersionExperimentsDeleteInstanceResponses, AppStoreVersionExperimentsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperiments/{id}',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static appStoreVersionExperimentsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionExperimentsGetInstanceResponses, AppStoreVersionExperimentsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperiments/{id}',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static appStoreVersionExperimentsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppStoreVersionExperimentsUpdateInstanceResponses, AppStoreVersionExperimentsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperiments/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelationshipResponses, AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/appStoreVersionExperiments/{id}/relationships/appStoreVersionExperimentTreatments',
            ...options
        });
    }
    
    public static appStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedResponses, AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelationshipResponses, AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperiments/{id}/relationships/appStoreVersionExperimentTreatments',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static appStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedResponses, AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionExperiments/{id}/appStoreVersionExperimentTreatments',
            ...options
        });
    }
}

export class AppStoreVersionLocalizations {
    public static appStoreVersionLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppStoreVersionLocalizationsCreateInstanceResponses, AppStoreVersionLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appStoreVersionLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppStoreVersionLocalizationsDeleteInstanceResponses, AppStoreVersionLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionLocalizations/{id}',
            ...options
        });
    }
    
    public static appStoreVersionLocalizationsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionLocalizationsGetInstanceResponses, AppStoreVersionLocalizationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionLocalizations/{id}',
            ...options
        });
    }
    
    public static appStoreVersionLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppStoreVersionLocalizationsUpdateInstanceResponses, AppStoreVersionLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appStoreVersionLocalizationsAppPreviewSetsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelationshipResponses, AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionLocalizations/{id}/relationships/appPreviewSets',
            ...options
        });
    }
    
    public static appStoreVersionLocalizationsAppPreviewSetsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponses, AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionLocalizations/{id}/appPreviewSets',
            ...options
        });
    }
    
    public static appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelationshipResponses, AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionLocalizations/{id}/relationships/appScreenshotSets',
            ...options
        });
    }
    
    public static appStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponses, AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionLocalizations/{id}/appScreenshotSets',
            ...options
        });
    }
    
    public static appStoreVersionLocalizationsSearchKeywordsDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsSearchKeywordsDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<AppStoreVersionLocalizationsSearchKeywordsDeleteToManyRelationshipResponses, AppStoreVersionLocalizationsSearchKeywordsDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionLocalizations/{id}/relationships/searchKeywords',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appStoreVersionLocalizationsSearchKeywordsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsSearchKeywordsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionLocalizationsSearchKeywordsGetToManyRelationshipResponses, AppStoreVersionLocalizationsSearchKeywordsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionLocalizations/{id}/relationships/searchKeywords',
            ...options
        });
    }
    
    public static appStoreVersionLocalizationsSearchKeywordsCreateToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsSearchKeywordsCreateToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).post<AppStoreVersionLocalizationsSearchKeywordsCreateToManyRelationshipResponses, AppStoreVersionLocalizationsSearchKeywordsCreateToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionLocalizations/{id}/relationships/searchKeywords',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appStoreVersionLocalizationsSearchKeywordsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionLocalizationsSearchKeywordsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionLocalizationsSearchKeywordsGetToManyRelatedResponses, AppStoreVersionLocalizationsSearchKeywordsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionLocalizations/{id}/searchKeywords',
            ...options
        });
    }
}

export class AppStoreVersionPhasedReleases {
    public static appStoreVersionPhasedReleasesCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionPhasedReleasesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppStoreVersionPhasedReleasesCreateInstanceResponses, AppStoreVersionPhasedReleasesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionPhasedReleases',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appStoreVersionPhasedReleasesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionPhasedReleasesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppStoreVersionPhasedReleasesDeleteInstanceResponses, AppStoreVersionPhasedReleasesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionPhasedReleases/{id}',
            ...options
        });
    }
    
    public static appStoreVersionPhasedReleasesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionPhasedReleasesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppStoreVersionPhasedReleasesUpdateInstanceResponses, AppStoreVersionPhasedReleasesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionPhasedReleases/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AppStoreVersionPromotions {
    public static appStoreVersionPromotionsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionPromotionsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppStoreVersionPromotionsCreateInstanceResponses, AppStoreVersionPromotionsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionPromotions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AppStoreVersionReleaseRequests {
    public static appStoreVersionReleaseRequestsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionReleaseRequestsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppStoreVersionReleaseRequestsCreateInstanceResponses, AppStoreVersionReleaseRequestsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionReleaseRequests',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class AppStoreVersionSubmissions {
    /**
     * @deprecated
     */
    public static appStoreVersionSubmissionsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionSubmissionsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppStoreVersionSubmissionsDeleteInstanceResponses, AppStoreVersionSubmissionsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersionSubmissions/{id}',
            ...options
        });
    }
}

export class AppStoreVersions {
    public static appStoreVersionsCreateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<AppStoreVersionsCreateInstanceResponses, AppStoreVersionsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appStoreVersionsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<AppStoreVersionsDeleteInstanceResponses, AppStoreVersionsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}',
            ...options
        });
    }
    
    public static appStoreVersionsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsGetInstanceResponses, AppStoreVersionsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}',
            ...options
        });
    }
    
    public static appStoreVersionsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppStoreVersionsUpdateInstanceResponses, AppStoreVersionsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * @deprecated
     */
    public static appStoreVersionsAgeRatingDeclarationGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAgeRatingDeclarationGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAgeRatingDeclarationGetToOneRelationshipResponses, AppStoreVersionsAgeRatingDeclarationGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/relationships/ageRatingDeclaration',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static appStoreVersionsAgeRatingDeclarationGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAgeRatingDeclarationGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponses, AppStoreVersionsAgeRatingDeclarationGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/ageRatingDeclaration',
            ...options
        });
    }
    
    public static appStoreVersionsAlternativeDistributionPackageGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAlternativeDistributionPackageGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAlternativeDistributionPackageGetToOneRelationshipResponses, AppStoreVersionsAlternativeDistributionPackageGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/relationships/alternativeDistributionPackage',
            ...options
        });
    }
    
    public static appStoreVersionsAlternativeDistributionPackageGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedResponses, AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/alternativeDistributionPackage',
            ...options
        });
    }
    
    public static appStoreVersionsAppClipDefaultExperienceGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipResponses, AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience',
            ...options
        });
    }
    
    public static appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipResponses, AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appStoreVersionsAppClipDefaultExperienceGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedResponses, AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/appClipDefaultExperience',
            ...options
        });
    }
    
    public static appStoreVersionsAppStoreReviewDetailGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreReviewDetailGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAppStoreReviewDetailGetToOneRelationshipResponses, AppStoreVersionsAppStoreReviewDetailGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/relationships/appStoreReviewDetail',
            ...options
        });
    }
    
    public static appStoreVersionsAppStoreReviewDetailGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreReviewDetailGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponses, AppStoreVersionsAppStoreReviewDetailGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/appStoreReviewDetail',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static appStoreVersionsAppStoreVersionExperimentsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelationshipResponses, AppStoreVersionsAppStoreVersionExperimentsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/relationships/appStoreVersionExperiments',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static appStoreVersionsAppStoreVersionExperimentsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedResponses, AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/appStoreVersionExperiments',
            ...options
        });
    }
    
    public static appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelationshipResponses, AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/relationships/appStoreVersionExperimentsV2',
            ...options
        });
    }
    
    public static appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedResponses, AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/appStoreVersionExperimentsV2',
            ...options
        });
    }
    
    public static appStoreVersionsAppStoreVersionLocalizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelationshipResponses, AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/relationships/appStoreVersionLocalizations',
            ...options
        });
    }
    
    public static appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponses, AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/appStoreVersionLocalizations',
            ...options
        });
    }
    
    public static appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelationshipResponses, AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/relationships/appStoreVersionPhasedRelease',
            ...options
        });
    }
    
    public static appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponses, AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static appStoreVersionsAppStoreVersionSubmissionGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreVersionSubmissionGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAppStoreVersionSubmissionGetToOneRelationshipResponses, AppStoreVersionsAppStoreVersionSubmissionGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/relationships/appStoreVersionSubmission',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static appStoreVersionsAppStoreVersionSubmissionGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponses, AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/appStoreVersionSubmission',
            ...options
        });
    }
    
    public static appStoreVersionsBuildGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsBuildGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsBuildGetToOneRelationshipResponses, AppStoreVersionsBuildGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/relationships/build',
            ...options
        });
    }
    
    public static appStoreVersionsBuildUpdateToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsBuildUpdateToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<AppStoreVersionsBuildUpdateToOneRelationshipResponses, AppStoreVersionsBuildUpdateToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/relationships/build',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appStoreVersionsBuildGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsBuildGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsBuildGetToOneRelatedResponses, AppStoreVersionsBuildGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/build',
            ...options
        });
    }
    
    public static appStoreVersionsCustomerReviewsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsCustomerReviewsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsCustomerReviewsGetToManyRelationshipResponses, AppStoreVersionsCustomerReviewsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/relationships/customerReviews',
            ...options
        });
    }
    
    public static appStoreVersionsCustomerReviewsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsCustomerReviewsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsCustomerReviewsGetToManyRelatedResponses, AppStoreVersionsCustomerReviewsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/customerReviews',
            ...options
        });
    }
    
    public static appStoreVersionsGameCenterAppVersionGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsGameCenterAppVersionGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsGameCenterAppVersionGetToOneRelationshipResponses, AppStoreVersionsGameCenterAppVersionGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/relationships/gameCenterAppVersion',
            ...options
        });
    }
    
    public static appStoreVersionsGameCenterAppVersionGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsGameCenterAppVersionGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsGameCenterAppVersionGetToOneRelatedResponses, AppStoreVersionsGameCenterAppVersionGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/gameCenterAppVersion',
            ...options
        });
    }
    
    public static appStoreVersionsRoutingAppCoverageGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsRoutingAppCoverageGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsRoutingAppCoverageGetToOneRelationshipResponses, AppStoreVersionsRoutingAppCoverageGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/relationships/routingAppCoverage',
            ...options
        });
    }
    
    public static appStoreVersionsRoutingAppCoverageGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppStoreVersionsRoutingAppCoverageGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponses, AppStoreVersionsRoutingAppCoverageGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appStoreVersions/{id}/routingAppCoverage',
            ...options
        });
    }
}

export class AppTags {
    public static appTagsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppTagsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppTagsUpdateInstanceResponses, AppTagsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appTags/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appTagsTerritoriesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppTagsTerritoriesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppTagsTerritoriesGetToManyRelationshipResponses, AppTagsTerritoriesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appTags/{id}/relationships/territories',
            ...options
        });
    }
    
    public static appTagsTerritoriesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppTagsTerritoriesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppTagsTerritoriesGetToManyRelatedResponses, AppTagsTerritoriesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/appTags/{id}/territories',
            ...options
        });
    }
}

export class Apps {
    public static appsGetCollection<ThrowOnError extends boolean = false>(options?: Options<AppsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<AppsGetCollectionResponses, AppsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps',
            ...options
        });
    }
    
    public static appsGetInstance<ThrowOnError extends boolean = false>(options: Options<AppsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<AppsGetInstanceResponses, AppsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}',
            ...options
        });
    }
    
    public static appsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<AppsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<AppsUpdateInstanceResponses, AppsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appsAccessibilityDeclarationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsAccessibilityDeclarationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAccessibilityDeclarationsGetToManyRelationshipResponses, AppsAccessibilityDeclarationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/accessibilityDeclarations',
            ...options
        });
    }
    
    public static appsAccessibilityDeclarationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsAccessibilityDeclarationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAccessibilityDeclarationsGetToManyRelatedResponses, AppsAccessibilityDeclarationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/accessibilityDeclarations',
            ...options
        });
    }
    
    public static appsAlternativeDistributionKeyGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppsAlternativeDistributionKeyGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAlternativeDistributionKeyGetToOneRelationshipResponses, AppsAlternativeDistributionKeyGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/alternativeDistributionKey',
            ...options
        });
    }
    
    public static appsAlternativeDistributionKeyGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppsAlternativeDistributionKeyGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAlternativeDistributionKeyGetToOneRelatedResponses, AppsAlternativeDistributionKeyGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/alternativeDistributionKey',
            ...options
        });
    }
    
    public static appsAnalyticsReportRequestsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsAnalyticsReportRequestsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAnalyticsReportRequestsGetToManyRelationshipResponses, AppsAnalyticsReportRequestsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/analyticsReportRequests',
            ...options
        });
    }
    
    public static appsAnalyticsReportRequestsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsAnalyticsReportRequestsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAnalyticsReportRequestsGetToManyRelatedResponses, AppsAnalyticsReportRequestsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/analyticsReportRequests',
            ...options
        });
    }
    
    public static appsAppAvailabilityV2GetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppsAppAvailabilityV2GetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppAvailabilityV2GetToOneRelationshipResponses, AppsAppAvailabilityV2GetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/appAvailabilityV2',
            ...options
        });
    }
    
    public static appsAppAvailabilityV2GetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppsAppAvailabilityV2GetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppAvailabilityV2GetToOneRelatedResponses, AppsAppAvailabilityV2GetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/appAvailabilityV2',
            ...options
        });
    }
    
    public static appsAppClipsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsAppClipsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppClipsGetToManyRelationshipResponses, AppsAppClipsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/appClips',
            ...options
        });
    }
    
    public static appsAppClipsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsAppClipsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppClipsGetToManyRelatedResponses, AppsAppClipsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/appClips',
            ...options
        });
    }
    
    public static appsAppCustomProductPagesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsAppCustomProductPagesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppCustomProductPagesGetToManyRelationshipResponses, AppsAppCustomProductPagesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/appCustomProductPages',
            ...options
        });
    }
    
    public static appsAppCustomProductPagesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsAppCustomProductPagesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppCustomProductPagesGetToManyRelatedResponses, AppsAppCustomProductPagesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/appCustomProductPages',
            ...options
        });
    }
    
    public static appsAppEncryptionDeclarationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsAppEncryptionDeclarationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppEncryptionDeclarationsGetToManyRelationshipResponses, AppsAppEncryptionDeclarationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/appEncryptionDeclarations',
            ...options
        });
    }
    
    public static appsAppEncryptionDeclarationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsAppEncryptionDeclarationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppEncryptionDeclarationsGetToManyRelatedResponses, AppsAppEncryptionDeclarationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/appEncryptionDeclarations',
            ...options
        });
    }
    
    public static appsAppEventsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsAppEventsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppEventsGetToManyRelationshipResponses, AppsAppEventsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/appEvents',
            ...options
        });
    }
    
    public static appsAppEventsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsAppEventsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppEventsGetToManyRelatedResponses, AppsAppEventsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/appEvents',
            ...options
        });
    }
    
    public static appsAppInfosGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsAppInfosGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppInfosGetToManyRelationshipResponses, AppsAppInfosGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/appInfos',
            ...options
        });
    }
    
    public static appsAppInfosGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsAppInfosGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppInfosGetToManyRelatedResponses, AppsAppInfosGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/appInfos',
            ...options
        });
    }
    
    public static appsAppPricePointsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsAppPricePointsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppPricePointsGetToManyRelationshipResponses, AppsAppPricePointsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/appPricePoints',
            ...options
        });
    }
    
    public static appsAppPricePointsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsAppPricePointsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppPricePointsGetToManyRelatedResponses, AppsAppPricePointsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/appPricePoints',
            ...options
        });
    }
    
    public static appsAppPriceScheduleGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppsAppPriceScheduleGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppPriceScheduleGetToOneRelationshipResponses, AppsAppPriceScheduleGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/appPriceSchedule',
            ...options
        });
    }
    
    public static appsAppPriceScheduleGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppsAppPriceScheduleGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppPriceScheduleGetToOneRelatedResponses, AppsAppPriceScheduleGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/appPriceSchedule',
            ...options
        });
    }
    
    public static appsAppStoreVersionExperimentsV2GetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsAppStoreVersionExperimentsV2GetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppStoreVersionExperimentsV2GetToManyRelationshipResponses, AppsAppStoreVersionExperimentsV2GetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/appStoreVersionExperimentsV2',
            ...options
        });
    }
    
    public static appsAppStoreVersionExperimentsV2GetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsAppStoreVersionExperimentsV2GetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppStoreVersionExperimentsV2GetToManyRelatedResponses, AppsAppStoreVersionExperimentsV2GetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/appStoreVersionExperimentsV2',
            ...options
        });
    }
    
    public static appsAppStoreVersionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsAppStoreVersionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppStoreVersionsGetToManyRelationshipResponses, AppsAppStoreVersionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/appStoreVersions',
            ...options
        });
    }
    
    public static appsAppStoreVersionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsAppStoreVersionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppStoreVersionsGetToManyRelatedResponses, AppsAppStoreVersionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/appStoreVersions',
            ...options
        });
    }
    
    public static appsAppTagsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsAppTagsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppTagsGetToManyRelationshipResponses, AppsAppTagsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/appTags',
            ...options
        });
    }
    
    public static appsAppTagsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsAppTagsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsAppTagsGetToManyRelatedResponses, AppsAppTagsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/appTags',
            ...options
        });
    }
    
    public static appsBackgroundAssetsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsBackgroundAssetsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBackgroundAssetsGetToManyRelationshipResponses, AppsBackgroundAssetsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/backgroundAssets',
            ...options
        });
    }
    
    public static appsBackgroundAssetsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsBackgroundAssetsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBackgroundAssetsGetToManyRelatedResponses, AppsBackgroundAssetsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/backgroundAssets',
            ...options
        });
    }
    
    public static appsBetaAppLocalizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsBetaAppLocalizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBetaAppLocalizationsGetToManyRelationshipResponses, AppsBetaAppLocalizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/betaAppLocalizations',
            ...options
        });
    }
    
    public static appsBetaAppLocalizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsBetaAppLocalizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBetaAppLocalizationsGetToManyRelatedResponses, AppsBetaAppLocalizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/betaAppLocalizations',
            ...options
        });
    }
    
    public static appsBetaAppReviewDetailGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppsBetaAppReviewDetailGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBetaAppReviewDetailGetToOneRelationshipResponses, AppsBetaAppReviewDetailGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/betaAppReviewDetail',
            ...options
        });
    }
    
    public static appsBetaAppReviewDetailGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppsBetaAppReviewDetailGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBetaAppReviewDetailGetToOneRelatedResponses, AppsBetaAppReviewDetailGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/betaAppReviewDetail',
            ...options
        });
    }
    
    public static appsBetaFeedbackCrashSubmissionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsBetaFeedbackCrashSubmissionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBetaFeedbackCrashSubmissionsGetToManyRelationshipResponses, AppsBetaFeedbackCrashSubmissionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/betaFeedbackCrashSubmissions',
            ...options
        });
    }
    
    public static appsBetaFeedbackCrashSubmissionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsBetaFeedbackCrashSubmissionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBetaFeedbackCrashSubmissionsGetToManyRelatedResponses, AppsBetaFeedbackCrashSubmissionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/betaFeedbackCrashSubmissions',
            ...options
        });
    }
    
    public static appsBetaFeedbackScreenshotSubmissionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsBetaFeedbackScreenshotSubmissionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBetaFeedbackScreenshotSubmissionsGetToManyRelationshipResponses, AppsBetaFeedbackScreenshotSubmissionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/betaFeedbackScreenshotSubmissions',
            ...options
        });
    }
    
    public static appsBetaFeedbackScreenshotSubmissionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsBetaFeedbackScreenshotSubmissionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBetaFeedbackScreenshotSubmissionsGetToManyRelatedResponses, AppsBetaFeedbackScreenshotSubmissionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/betaFeedbackScreenshotSubmissions',
            ...options
        });
    }
    
    public static appsBetaGroupsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsBetaGroupsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBetaGroupsGetToManyRelationshipResponses, AppsBetaGroupsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/betaGroups',
            ...options
        });
    }
    
    public static appsBetaGroupsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsBetaGroupsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBetaGroupsGetToManyRelatedResponses, AppsBetaGroupsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/betaGroups',
            ...options
        });
    }
    
    public static appsBetaLicenseAgreementGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppsBetaLicenseAgreementGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBetaLicenseAgreementGetToOneRelationshipResponses, AppsBetaLicenseAgreementGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/betaLicenseAgreement',
            ...options
        });
    }
    
    public static appsBetaLicenseAgreementGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppsBetaLicenseAgreementGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBetaLicenseAgreementGetToOneRelatedResponses, AppsBetaLicenseAgreementGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/betaLicenseAgreement',
            ...options
        });
    }
    
    public static appsBetaTestersDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsBetaTestersDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<AppsBetaTestersDeleteToManyRelationshipResponses, AppsBetaTestersDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/betaTesters',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appsBuildUploadsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsBuildUploadsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBuildUploadsGetToManyRelationshipResponses, AppsBuildUploadsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/buildUploads',
            ...options
        });
    }
    
    public static appsBuildUploadsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsBuildUploadsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBuildUploadsGetToManyRelatedResponses, AppsBuildUploadsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/buildUploads',
            ...options
        });
    }
    
    public static appsBuildsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsBuildsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBuildsGetToManyRelationshipResponses, AppsBuildsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/builds',
            ...options
        });
    }
    
    public static appsBuildsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsBuildsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBuildsGetToManyRelatedResponses, AppsBuildsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/builds',
            ...options
        });
    }
    
    public static appsCiProductGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppsCiProductGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsCiProductGetToOneRelationshipResponses, AppsCiProductGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/ciProduct',
            ...options
        });
    }
    
    public static appsCiProductGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppsCiProductGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsCiProductGetToOneRelatedResponses, AppsCiProductGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/ciProduct',
            ...options
        });
    }
    
    public static appsCustomerReviewSummarizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsCustomerReviewSummarizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsCustomerReviewSummarizationsGetToManyRelatedResponses, AppsCustomerReviewSummarizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/customerReviewSummarizations',
            ...options
        });
    }
    
    public static appsCustomerReviewsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsCustomerReviewsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsCustomerReviewsGetToManyRelationshipResponses, AppsCustomerReviewsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/customerReviews',
            ...options
        });
    }
    
    public static appsCustomerReviewsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsCustomerReviewsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsCustomerReviewsGetToManyRelatedResponses, AppsCustomerReviewsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/customerReviews',
            ...options
        });
    }
    
    public static appsEndUserLicenseAgreementGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppsEndUserLicenseAgreementGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsEndUserLicenseAgreementGetToOneRelationshipResponses, AppsEndUserLicenseAgreementGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/endUserLicenseAgreement',
            ...options
        });
    }
    
    public static appsEndUserLicenseAgreementGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppsEndUserLicenseAgreementGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsEndUserLicenseAgreementGetToOneRelatedResponses, AppsEndUserLicenseAgreementGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/endUserLicenseAgreement',
            ...options
        });
    }
    
    public static appsGameCenterDetailGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppsGameCenterDetailGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsGameCenterDetailGetToOneRelationshipResponses, AppsGameCenterDetailGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/gameCenterDetail',
            ...options
        });
    }
    
    public static appsGameCenterDetailGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppsGameCenterDetailGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsGameCenterDetailGetToOneRelatedResponses, AppsGameCenterDetailGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/gameCenterDetail',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static appsGameCenterEnabledVersionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsGameCenterEnabledVersionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsGameCenterEnabledVersionsGetToManyRelationshipResponses, AppsGameCenterEnabledVersionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/gameCenterEnabledVersions',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static appsGameCenterEnabledVersionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsGameCenterEnabledVersionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsGameCenterEnabledVersionsGetToManyRelatedResponses, AppsGameCenterEnabledVersionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/gameCenterEnabledVersions',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static appsInAppPurchasesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsInAppPurchasesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsInAppPurchasesGetToManyRelationshipResponses, AppsInAppPurchasesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/inAppPurchases',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static appsInAppPurchasesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsInAppPurchasesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsInAppPurchasesGetToManyRelatedResponses, AppsInAppPurchasesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/inAppPurchases',
            ...options
        });
    }
    
    public static appsInAppPurchasesV2GetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsInAppPurchasesV2GetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsInAppPurchasesV2GetToManyRelationshipResponses, AppsInAppPurchasesV2GetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/inAppPurchasesV2',
            ...options
        });
    }
    
    public static appsInAppPurchasesV2GetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsInAppPurchasesV2GetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsInAppPurchasesV2GetToManyRelatedResponses, AppsInAppPurchasesV2GetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/inAppPurchasesV2',
            ...options
        });
    }
    
    public static appsMarketplaceSearchDetailGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppsMarketplaceSearchDetailGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsMarketplaceSearchDetailGetToOneRelationshipResponses, AppsMarketplaceSearchDetailGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/marketplaceSearchDetail',
            ...options
        });
    }
    
    public static appsMarketplaceSearchDetailGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppsMarketplaceSearchDetailGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsMarketplaceSearchDetailGetToOneRelatedResponses, AppsMarketplaceSearchDetailGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/marketplaceSearchDetail',
            ...options
        });
    }
    
    public static appsPerfPowerMetricsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsPerfPowerMetricsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsPerfPowerMetricsGetToManyRelatedResponses, AppsPerfPowerMetricsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/perfPowerMetrics',
            ...options
        });
    }
    
    public static appsPreReleaseVersionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsPreReleaseVersionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsPreReleaseVersionsGetToManyRelationshipResponses, AppsPreReleaseVersionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/preReleaseVersions',
            ...options
        });
    }
    
    public static appsPreReleaseVersionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsPreReleaseVersionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsPreReleaseVersionsGetToManyRelatedResponses, AppsPreReleaseVersionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/preReleaseVersions',
            ...options
        });
    }
    
    public static appsPromotedPurchasesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsPromotedPurchasesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsPromotedPurchasesGetToManyRelationshipResponses, AppsPromotedPurchasesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/promotedPurchases',
            ...options
        });
    }
    
    public static appsPromotedPurchasesReplaceToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsPromotedPurchasesReplaceToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<AppsPromotedPurchasesReplaceToManyRelationshipResponses, AppsPromotedPurchasesReplaceToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/promotedPurchases',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static appsPromotedPurchasesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsPromotedPurchasesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsPromotedPurchasesGetToManyRelatedResponses, AppsPromotedPurchasesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/promotedPurchases',
            ...options
        });
    }
    
    public static appsReviewSubmissionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsReviewSubmissionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsReviewSubmissionsGetToManyRelationshipResponses, AppsReviewSubmissionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/reviewSubmissions',
            ...options
        });
    }
    
    public static appsReviewSubmissionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsReviewSubmissionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsReviewSubmissionsGetToManyRelatedResponses, AppsReviewSubmissionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/reviewSubmissions',
            ...options
        });
    }
    
    public static appsSearchKeywordsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsSearchKeywordsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsSearchKeywordsGetToManyRelationshipResponses, AppsSearchKeywordsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/searchKeywords',
            ...options
        });
    }
    
    public static appsSearchKeywordsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsSearchKeywordsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsSearchKeywordsGetToManyRelatedResponses, AppsSearchKeywordsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/searchKeywords',
            ...options
        });
    }
    
    public static appsSubscriptionGracePeriodGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<AppsSubscriptionGracePeriodGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsSubscriptionGracePeriodGetToOneRelationshipResponses, AppsSubscriptionGracePeriodGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/subscriptionGracePeriod',
            ...options
        });
    }
    
    public static appsSubscriptionGracePeriodGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<AppsSubscriptionGracePeriodGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsSubscriptionGracePeriodGetToOneRelatedResponses, AppsSubscriptionGracePeriodGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/subscriptionGracePeriod',
            ...options
        });
    }
    
    public static appsSubscriptionGroupsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsSubscriptionGroupsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsSubscriptionGroupsGetToManyRelationshipResponses, AppsSubscriptionGroupsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/subscriptionGroups',
            ...options
        });
    }
    
    public static appsSubscriptionGroupsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsSubscriptionGroupsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsSubscriptionGroupsGetToManyRelatedResponses, AppsSubscriptionGroupsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/subscriptionGroups',
            ...options
        });
    }
    
    public static appsWebhooksGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<AppsWebhooksGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<AppsWebhooksGetToManyRelationshipResponses, AppsWebhooksGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/relationships/webhooks',
            ...options
        });
    }
    
    public static appsWebhooksGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<AppsWebhooksGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<AppsWebhooksGetToManyRelatedResponses, AppsWebhooksGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/webhooks',
            ...options
        });
    }
    
    public static appsBetaTesterUsagesGetMetrics<ThrowOnError extends boolean = false>(options: Options<AppsBetaTesterUsagesGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBetaTesterUsagesGetMetricsResponses, AppsBetaTesterUsagesGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/metrics/betaTesterUsages',
            ...options
        });
    }
}

export class BackgroundAssetUploadFiles {
    public static backgroundAssetUploadFilesCreateInstance<ThrowOnError extends boolean = false>(options: Options<BackgroundAssetUploadFilesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BackgroundAssetUploadFilesCreateInstanceResponses, BackgroundAssetUploadFilesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/backgroundAssetUploadFiles',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static backgroundAssetUploadFilesGetInstance<ThrowOnError extends boolean = false>(options: Options<BackgroundAssetUploadFilesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BackgroundAssetUploadFilesGetInstanceResponses, BackgroundAssetUploadFilesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/backgroundAssetUploadFiles/{id}',
            ...options
        });
    }
    
    public static backgroundAssetUploadFilesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<BackgroundAssetUploadFilesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<BackgroundAssetUploadFilesUpdateInstanceResponses, BackgroundAssetUploadFilesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/backgroundAssetUploadFiles/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class BackgroundAssetVersionAppStoreReleases {
    public static backgroundAssetVersionAppStoreReleasesGetInstance<ThrowOnError extends boolean = false>(options: Options<BackgroundAssetVersionAppStoreReleasesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BackgroundAssetVersionAppStoreReleasesGetInstanceResponses, BackgroundAssetVersionAppStoreReleasesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/backgroundAssetVersionAppStoreReleases/{id}',
            ...options
        });
    }
}

export class BackgroundAssetVersionExternalBetaReleases {
    public static backgroundAssetVersionExternalBetaReleasesGetInstance<ThrowOnError extends boolean = false>(options: Options<BackgroundAssetVersionExternalBetaReleasesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BackgroundAssetVersionExternalBetaReleasesGetInstanceResponses, BackgroundAssetVersionExternalBetaReleasesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/backgroundAssetVersionExternalBetaReleases/{id}',
            ...options
        });
    }
}

export class BackgroundAssetVersionInternalBetaReleases {
    public static backgroundAssetVersionInternalBetaReleasesGetInstance<ThrowOnError extends boolean = false>(options: Options<BackgroundAssetVersionInternalBetaReleasesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BackgroundAssetVersionInternalBetaReleasesGetInstanceResponses, BackgroundAssetVersionInternalBetaReleasesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/backgroundAssetVersionInternalBetaReleases/{id}',
            ...options
        });
    }
}

export class BackgroundAssetVersions {
    public static backgroundAssetVersionsCreateInstance<ThrowOnError extends boolean = false>(options: Options<BackgroundAssetVersionsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BackgroundAssetVersionsCreateInstanceResponses, BackgroundAssetVersionsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/backgroundAssetVersions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static backgroundAssetVersionsGetInstance<ThrowOnError extends boolean = false>(options: Options<BackgroundAssetVersionsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BackgroundAssetVersionsGetInstanceResponses, BackgroundAssetVersionsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/backgroundAssetVersions/{id}',
            ...options
        });
    }
    
    public static backgroundAssetVersionsBackgroundAssetUploadFilesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BackgroundAssetVersionsBackgroundAssetUploadFilesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BackgroundAssetVersionsBackgroundAssetUploadFilesGetToManyRelationshipResponses, BackgroundAssetVersionsBackgroundAssetUploadFilesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/backgroundAssetVersions/{id}/relationships/backgroundAssetUploadFiles',
            ...options
        });
    }
    
    public static backgroundAssetVersionsBackgroundAssetUploadFilesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BackgroundAssetVersionsBackgroundAssetUploadFilesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BackgroundAssetVersionsBackgroundAssetUploadFilesGetToManyRelatedResponses, BackgroundAssetVersionsBackgroundAssetUploadFilesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/backgroundAssetVersions/{id}/backgroundAssetUploadFiles',
            ...options
        });
    }
}

export class BackgroundAssets {
    public static backgroundAssetsCreateInstance<ThrowOnError extends boolean = false>(options: Options<BackgroundAssetsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BackgroundAssetsCreateInstanceResponses, BackgroundAssetsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/backgroundAssets',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static backgroundAssetsGetInstance<ThrowOnError extends boolean = false>(options: Options<BackgroundAssetsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BackgroundAssetsGetInstanceResponses, BackgroundAssetsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/backgroundAssets/{id}',
            ...options
        });
    }
    
    public static backgroundAssetsVersionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BackgroundAssetsVersionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BackgroundAssetsVersionsGetToManyRelationshipResponses, BackgroundAssetsVersionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/backgroundAssets/{id}/relationships/versions',
            ...options
        });
    }
    
    public static backgroundAssetsVersionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BackgroundAssetsVersionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BackgroundAssetsVersionsGetToManyRelatedResponses, BackgroundAssetsVersionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/backgroundAssets/{id}/versions',
            ...options
        });
    }
}

export class BetaAppClipInvocationLocalizations {
    public static betaAppClipInvocationLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<BetaAppClipInvocationLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BetaAppClipInvocationLocalizationsCreateInstanceResponses, BetaAppClipInvocationLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppClipInvocationLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaAppClipInvocationLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<BetaAppClipInvocationLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<BetaAppClipInvocationLocalizationsDeleteInstanceResponses, BetaAppClipInvocationLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppClipInvocationLocalizations/{id}',
            ...options
        });
    }
    
    public static betaAppClipInvocationLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<BetaAppClipInvocationLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<BetaAppClipInvocationLocalizationsUpdateInstanceResponses, BetaAppClipInvocationLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppClipInvocationLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class BetaAppClipInvocations {
    public static betaAppClipInvocationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<BetaAppClipInvocationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BetaAppClipInvocationsCreateInstanceResponses, BetaAppClipInvocationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppClipInvocations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaAppClipInvocationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<BetaAppClipInvocationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<BetaAppClipInvocationsDeleteInstanceResponses, BetaAppClipInvocationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppClipInvocations/{id}',
            ...options
        });
    }
    
    public static betaAppClipInvocationsGetInstance<ThrowOnError extends boolean = false>(options: Options<BetaAppClipInvocationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BetaAppClipInvocationsGetInstanceResponses, BetaAppClipInvocationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppClipInvocations/{id}',
            ...options
        });
    }
    
    public static betaAppClipInvocationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<BetaAppClipInvocationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<BetaAppClipInvocationsUpdateInstanceResponses, BetaAppClipInvocationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppClipInvocations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class BetaAppLocalizations {
    public static betaAppLocalizationsGetCollection<ThrowOnError extends boolean = false>(options?: Options<BetaAppLocalizationsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<BetaAppLocalizationsGetCollectionResponses, BetaAppLocalizationsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppLocalizations',
            ...options
        });
    }
    
    public static betaAppLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<BetaAppLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BetaAppLocalizationsCreateInstanceResponses, BetaAppLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaAppLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<BetaAppLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<BetaAppLocalizationsDeleteInstanceResponses, BetaAppLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppLocalizations/{id}',
            ...options
        });
    }
    
    public static betaAppLocalizationsGetInstance<ThrowOnError extends boolean = false>(options: Options<BetaAppLocalizationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BetaAppLocalizationsGetInstanceResponses, BetaAppLocalizationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppLocalizations/{id}',
            ...options
        });
    }
    
    public static betaAppLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<BetaAppLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<BetaAppLocalizationsUpdateInstanceResponses, BetaAppLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaAppLocalizationsAppGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BetaAppLocalizationsAppGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BetaAppLocalizationsAppGetToOneRelationshipResponses, BetaAppLocalizationsAppGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppLocalizations/{id}/relationships/app',
            ...options
        });
    }
    
    public static betaAppLocalizationsAppGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BetaAppLocalizationsAppGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BetaAppLocalizationsAppGetToOneRelatedResponses, BetaAppLocalizationsAppGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppLocalizations/{id}/app',
            ...options
        });
    }
}

export class BetaAppReviewDetails {
    public static betaAppReviewDetailsGetCollection<ThrowOnError extends boolean = false>(options: Options<BetaAppReviewDetailsGetCollectionData, ThrowOnError>) {
        return (options.client ?? client).get<BetaAppReviewDetailsGetCollectionResponses, BetaAppReviewDetailsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppReviewDetails',
            ...options
        });
    }
    
    public static betaAppReviewDetailsGetInstance<ThrowOnError extends boolean = false>(options: Options<BetaAppReviewDetailsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BetaAppReviewDetailsGetInstanceResponses, BetaAppReviewDetailsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppReviewDetails/{id}',
            ...options
        });
    }
    
    public static betaAppReviewDetailsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<BetaAppReviewDetailsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<BetaAppReviewDetailsUpdateInstanceResponses, BetaAppReviewDetailsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppReviewDetails/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaAppReviewDetailsAppGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BetaAppReviewDetailsAppGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BetaAppReviewDetailsAppGetToOneRelationshipResponses, BetaAppReviewDetailsAppGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppReviewDetails/{id}/relationships/app',
            ...options
        });
    }
    
    public static betaAppReviewDetailsAppGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BetaAppReviewDetailsAppGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BetaAppReviewDetailsAppGetToOneRelatedResponses, BetaAppReviewDetailsAppGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppReviewDetails/{id}/app',
            ...options
        });
    }
}

export class BetaAppReviewSubmissions {
    public static betaAppReviewSubmissionsGetCollection<ThrowOnError extends boolean = false>(options: Options<BetaAppReviewSubmissionsGetCollectionData, ThrowOnError>) {
        return (options.client ?? client).get<BetaAppReviewSubmissionsGetCollectionResponses, BetaAppReviewSubmissionsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppReviewSubmissions',
            ...options
        });
    }
    
    public static betaAppReviewSubmissionsCreateInstance<ThrowOnError extends boolean = false>(options: Options<BetaAppReviewSubmissionsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BetaAppReviewSubmissionsCreateInstanceResponses, BetaAppReviewSubmissionsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppReviewSubmissions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaAppReviewSubmissionsGetInstance<ThrowOnError extends boolean = false>(options: Options<BetaAppReviewSubmissionsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BetaAppReviewSubmissionsGetInstanceResponses, BetaAppReviewSubmissionsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppReviewSubmissions/{id}',
            ...options
        });
    }
    
    public static betaAppReviewSubmissionsBuildGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BetaAppReviewSubmissionsBuildGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BetaAppReviewSubmissionsBuildGetToOneRelationshipResponses, BetaAppReviewSubmissionsBuildGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppReviewSubmissions/{id}/relationships/build',
            ...options
        });
    }
    
    public static betaAppReviewSubmissionsBuildGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BetaAppReviewSubmissionsBuildGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BetaAppReviewSubmissionsBuildGetToOneRelatedResponses, BetaAppReviewSubmissionsBuildGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaAppReviewSubmissions/{id}/build',
            ...options
        });
    }
}

export class BetaBuildLocalizations {
    public static betaBuildLocalizationsGetCollection<ThrowOnError extends boolean = false>(options?: Options<BetaBuildLocalizationsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<BetaBuildLocalizationsGetCollectionResponses, BetaBuildLocalizationsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaBuildLocalizations',
            ...options
        });
    }
    
    public static betaBuildLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<BetaBuildLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BetaBuildLocalizationsCreateInstanceResponses, BetaBuildLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaBuildLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaBuildLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<BetaBuildLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<BetaBuildLocalizationsDeleteInstanceResponses, BetaBuildLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaBuildLocalizations/{id}',
            ...options
        });
    }
    
    public static betaBuildLocalizationsGetInstance<ThrowOnError extends boolean = false>(options: Options<BetaBuildLocalizationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BetaBuildLocalizationsGetInstanceResponses, BetaBuildLocalizationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaBuildLocalizations/{id}',
            ...options
        });
    }
    
    public static betaBuildLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<BetaBuildLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<BetaBuildLocalizationsUpdateInstanceResponses, BetaBuildLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaBuildLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaBuildLocalizationsBuildGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BetaBuildLocalizationsBuildGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BetaBuildLocalizationsBuildGetToOneRelationshipResponses, BetaBuildLocalizationsBuildGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaBuildLocalizations/{id}/relationships/build',
            ...options
        });
    }
    
    public static betaBuildLocalizationsBuildGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BetaBuildLocalizationsBuildGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BetaBuildLocalizationsBuildGetToOneRelatedResponses, BetaBuildLocalizationsBuildGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaBuildLocalizations/{id}/build',
            ...options
        });
    }
}

export class BetaCrashLogs {
    public static betaCrashLogsGetInstance<ThrowOnError extends boolean = false>(options: Options<BetaCrashLogsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BetaCrashLogsGetInstanceResponses, BetaCrashLogsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaCrashLogs/{id}',
            ...options
        });
    }
}

export class BetaFeedbackCrashSubmissions {
    public static betaFeedbackCrashSubmissionsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<BetaFeedbackCrashSubmissionsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<BetaFeedbackCrashSubmissionsDeleteInstanceResponses, BetaFeedbackCrashSubmissionsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaFeedbackCrashSubmissions/{id}',
            ...options
        });
    }
    
    public static betaFeedbackCrashSubmissionsGetInstance<ThrowOnError extends boolean = false>(options: Options<BetaFeedbackCrashSubmissionsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BetaFeedbackCrashSubmissionsGetInstanceResponses, BetaFeedbackCrashSubmissionsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaFeedbackCrashSubmissions/{id}',
            ...options
        });
    }
    
    public static betaFeedbackCrashSubmissionsCrashLogGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BetaFeedbackCrashSubmissionsCrashLogGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BetaFeedbackCrashSubmissionsCrashLogGetToOneRelationshipResponses, BetaFeedbackCrashSubmissionsCrashLogGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaFeedbackCrashSubmissions/{id}/relationships/crashLog',
            ...options
        });
    }
    
    public static betaFeedbackCrashSubmissionsCrashLogGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BetaFeedbackCrashSubmissionsCrashLogGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BetaFeedbackCrashSubmissionsCrashLogGetToOneRelatedResponses, BetaFeedbackCrashSubmissionsCrashLogGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaFeedbackCrashSubmissions/{id}/crashLog',
            ...options
        });
    }
}

export class BetaFeedbackScreenshotSubmissions {
    public static betaFeedbackScreenshotSubmissionsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<BetaFeedbackScreenshotSubmissionsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<BetaFeedbackScreenshotSubmissionsDeleteInstanceResponses, BetaFeedbackScreenshotSubmissionsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaFeedbackScreenshotSubmissions/{id}',
            ...options
        });
    }
    
    public static betaFeedbackScreenshotSubmissionsGetInstance<ThrowOnError extends boolean = false>(options: Options<BetaFeedbackScreenshotSubmissionsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BetaFeedbackScreenshotSubmissionsGetInstanceResponses, BetaFeedbackScreenshotSubmissionsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaFeedbackScreenshotSubmissions/{id}',
            ...options
        });
    }
}

export class BetaGroups {
    public static betaGroupsGetCollection<ThrowOnError extends boolean = false>(options?: Options<BetaGroupsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<BetaGroupsGetCollectionResponses, BetaGroupsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups',
            ...options
        });
    }
    
    public static betaGroupsCreateInstance<ThrowOnError extends boolean = false>(options: Options<BetaGroupsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BetaGroupsCreateInstanceResponses, BetaGroupsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaGroupsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<BetaGroupsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<BetaGroupsDeleteInstanceResponses, BetaGroupsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}',
            ...options
        });
    }
    
    public static betaGroupsGetInstance<ThrowOnError extends boolean = false>(options: Options<BetaGroupsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BetaGroupsGetInstanceResponses, BetaGroupsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}',
            ...options
        });
    }
    
    public static betaGroupsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<BetaGroupsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<BetaGroupsUpdateInstanceResponses, BetaGroupsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaGroupsAppGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BetaGroupsAppGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BetaGroupsAppGetToOneRelationshipResponses, BetaGroupsAppGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/relationships/app',
            ...options
        });
    }
    
    public static betaGroupsAppGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BetaGroupsAppGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BetaGroupsAppGetToOneRelatedResponses, BetaGroupsAppGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/app',
            ...options
        });
    }
    
    public static betaGroupsBetaRecruitmentCriteriaGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaRecruitmentCriteriaGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BetaGroupsBetaRecruitmentCriteriaGetToOneRelationshipResponses, BetaGroupsBetaRecruitmentCriteriaGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/relationships/betaRecruitmentCriteria',
            ...options
        });
    }
    
    public static betaGroupsBetaRecruitmentCriteriaGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedResponses, BetaGroupsBetaRecruitmentCriteriaGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/betaRecruitmentCriteria',
            ...options
        });
    }
    
    public static betaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelationshipResponses, BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/relationships/betaRecruitmentCriterionCompatibleBuildCheck',
            ...options
        });
    }
    
    public static betaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedResponses, BetaGroupsBetaRecruitmentCriterionCompatibleBuildCheckGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/betaRecruitmentCriterionCompatibleBuildCheck',
            ...options
        });
    }
    
    public static betaGroupsBetaTestersDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaTestersDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<BetaGroupsBetaTestersDeleteToManyRelationshipResponses, BetaGroupsBetaTestersDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/relationships/betaTesters',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaGroupsBetaTestersGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaTestersGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BetaGroupsBetaTestersGetToManyRelationshipResponses, BetaGroupsBetaTestersGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/relationships/betaTesters',
            ...options
        });
    }
    
    public static betaGroupsBetaTestersCreateToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaTestersCreateToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).post<BetaGroupsBetaTestersCreateToManyRelationshipResponses, BetaGroupsBetaTestersCreateToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/relationships/betaTesters',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaGroupsBetaTestersGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaTestersGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BetaGroupsBetaTestersGetToManyRelatedResponses, BetaGroupsBetaTestersGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/betaTesters',
            ...options
        });
    }
    
    public static betaGroupsBuildsDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BetaGroupsBuildsDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<BetaGroupsBuildsDeleteToManyRelationshipResponses, BetaGroupsBuildsDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/relationships/builds',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaGroupsBuildsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BetaGroupsBuildsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BetaGroupsBuildsGetToManyRelationshipResponses, BetaGroupsBuildsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/relationships/builds',
            ...options
        });
    }
    
    public static betaGroupsBuildsCreateToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BetaGroupsBuildsCreateToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).post<BetaGroupsBuildsCreateToManyRelationshipResponses, BetaGroupsBuildsCreateToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/relationships/builds',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaGroupsBuildsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BetaGroupsBuildsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BetaGroupsBuildsGetToManyRelatedResponses, BetaGroupsBuildsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/builds',
            ...options
        });
    }
    
    public static betaGroupsBetaTesterUsagesGetMetrics<ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaTesterUsagesGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<BetaGroupsBetaTesterUsagesGetMetricsResponses, BetaGroupsBetaTesterUsagesGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/metrics/betaTesterUsages',
            ...options
        });
    }
    
    public static betaGroupsPublicLinkUsagesGetMetrics<ThrowOnError extends boolean = false>(options: Options<BetaGroupsPublicLinkUsagesGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<BetaGroupsPublicLinkUsagesGetMetricsResponses, BetaGroupsPublicLinkUsagesGetMetricsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/metrics/publicLinkUsages',
            ...options
        });
    }
}

export class BetaLicenseAgreements {
    public static betaLicenseAgreementsGetCollection<ThrowOnError extends boolean = false>(options?: Options<BetaLicenseAgreementsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<BetaLicenseAgreementsGetCollectionResponses, BetaLicenseAgreementsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaLicenseAgreements',
            ...options
        });
    }
    
    public static betaLicenseAgreementsGetInstance<ThrowOnError extends boolean = false>(options: Options<BetaLicenseAgreementsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BetaLicenseAgreementsGetInstanceResponses, BetaLicenseAgreementsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaLicenseAgreements/{id}',
            ...options
        });
    }
    
    public static betaLicenseAgreementsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<BetaLicenseAgreementsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<BetaLicenseAgreementsUpdateInstanceResponses, BetaLicenseAgreementsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaLicenseAgreements/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaLicenseAgreementsAppGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BetaLicenseAgreementsAppGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BetaLicenseAgreementsAppGetToOneRelationshipResponses, BetaLicenseAgreementsAppGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaLicenseAgreements/{id}/relationships/app',
            ...options
        });
    }
    
    public static betaLicenseAgreementsAppGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BetaLicenseAgreementsAppGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BetaLicenseAgreementsAppGetToOneRelatedResponses, BetaLicenseAgreementsAppGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaLicenseAgreements/{id}/app',
            ...options
        });
    }
}

export class BetaRecruitmentCriteria {
    public static betaRecruitmentCriteriaCreateInstance<ThrowOnError extends boolean = false>(options: Options<BetaRecruitmentCriteriaCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BetaRecruitmentCriteriaCreateInstanceResponses, BetaRecruitmentCriteriaCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaRecruitmentCriteria',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaRecruitmentCriteriaDeleteInstance<ThrowOnError extends boolean = false>(options: Options<BetaRecruitmentCriteriaDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<BetaRecruitmentCriteriaDeleteInstanceResponses, BetaRecruitmentCriteriaDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaRecruitmentCriteria/{id}',
            ...options
        });
    }
    
    public static betaRecruitmentCriteriaUpdateInstance<ThrowOnError extends boolean = false>(options: Options<BetaRecruitmentCriteriaUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<BetaRecruitmentCriteriaUpdateInstanceResponses, BetaRecruitmentCriteriaUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaRecruitmentCriteria/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class BetaRecruitmentCriterionOptions {
    public static betaRecruitmentCriterionOptionsGetCollection<ThrowOnError extends boolean = false>(options?: Options<BetaRecruitmentCriterionOptionsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<BetaRecruitmentCriterionOptionsGetCollectionResponses, BetaRecruitmentCriterionOptionsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaRecruitmentCriterionOptions',
            ...options
        });
    }
}

export class BetaTesterInvitations {
    public static betaTesterInvitationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<BetaTesterInvitationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BetaTesterInvitationsCreateInstanceResponses, BetaTesterInvitationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesterInvitations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class BetaTesters {
    public static betaTestersGetCollection<ThrowOnError extends boolean = false>(options?: Options<BetaTestersGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<BetaTestersGetCollectionResponses, BetaTestersGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters',
            ...options
        });
    }
    
    public static betaTestersCreateInstance<ThrowOnError extends boolean = false>(options: Options<BetaTestersCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BetaTestersCreateInstanceResponses, BetaTestersCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaTestersDeleteInstance<ThrowOnError extends boolean = false>(options: Options<BetaTestersDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<BetaTestersDeleteInstanceResponses, BetaTestersDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters/{id}',
            ...options
        });
    }
    
    public static betaTestersGetInstance<ThrowOnError extends boolean = false>(options: Options<BetaTestersGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BetaTestersGetInstanceResponses, BetaTestersGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters/{id}',
            ...options
        });
    }
    
    public static betaTestersAppsDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BetaTestersAppsDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<BetaTestersAppsDeleteToManyRelationshipResponses, BetaTestersAppsDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters/{id}/relationships/apps',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaTestersAppsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BetaTestersAppsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BetaTestersAppsGetToManyRelationshipResponses, BetaTestersAppsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters/{id}/relationships/apps',
            ...options
        });
    }
    
    public static betaTestersAppsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BetaTestersAppsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BetaTestersAppsGetToManyRelatedResponses, BetaTestersAppsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters/{id}/apps',
            ...options
        });
    }
    
    public static betaTestersBetaGroupsDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BetaTestersBetaGroupsDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<BetaTestersBetaGroupsDeleteToManyRelationshipResponses, BetaTestersBetaGroupsDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters/{id}/relationships/betaGroups',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaTestersBetaGroupsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BetaTestersBetaGroupsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BetaTestersBetaGroupsGetToManyRelationshipResponses, BetaTestersBetaGroupsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters/{id}/relationships/betaGroups',
            ...options
        });
    }
    
    public static betaTestersBetaGroupsCreateToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BetaTestersBetaGroupsCreateToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).post<BetaTestersBetaGroupsCreateToManyRelationshipResponses, BetaTestersBetaGroupsCreateToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters/{id}/relationships/betaGroups',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaTestersBetaGroupsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BetaTestersBetaGroupsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BetaTestersBetaGroupsGetToManyRelatedResponses, BetaTestersBetaGroupsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters/{id}/betaGroups',
            ...options
        });
    }
    
    public static betaTestersBuildsDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BetaTestersBuildsDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<BetaTestersBuildsDeleteToManyRelationshipResponses, BetaTestersBuildsDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters/{id}/relationships/builds',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaTestersBuildsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BetaTestersBuildsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BetaTestersBuildsGetToManyRelationshipResponses, BetaTestersBuildsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters/{id}/relationships/builds',
            ...options
        });
    }
    
    public static betaTestersBuildsCreateToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BetaTestersBuildsCreateToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).post<BetaTestersBuildsCreateToManyRelationshipResponses, BetaTestersBuildsCreateToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters/{id}/relationships/builds',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static betaTestersBuildsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BetaTestersBuildsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BetaTestersBuildsGetToManyRelatedResponses, BetaTestersBuildsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters/{id}/builds',
            ...options
        });
    }
    
    public static betaTestersBetaTesterUsagesGetMetrics<ThrowOnError extends boolean = false>(options: Options<BetaTestersBetaTesterUsagesGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<BetaTestersBetaTesterUsagesGetMetricsResponses, BetaTestersBetaTesterUsagesGetMetricsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters/{id}/metrics/betaTesterUsages',
            ...options
        });
    }
}

export class BuildBetaDetails {
    public static buildBetaDetailsGetCollection<ThrowOnError extends boolean = false>(options?: Options<BuildBetaDetailsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<BuildBetaDetailsGetCollectionResponses, BuildBetaDetailsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildBetaDetails',
            ...options
        });
    }
    
    public static buildBetaDetailsGetInstance<ThrowOnError extends boolean = false>(options: Options<BuildBetaDetailsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BuildBetaDetailsGetInstanceResponses, BuildBetaDetailsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildBetaDetails/{id}',
            ...options
        });
    }
    
    public static buildBetaDetailsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<BuildBetaDetailsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<BuildBetaDetailsUpdateInstanceResponses, BuildBetaDetailsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildBetaDetails/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static buildBetaDetailsBuildGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BuildBetaDetailsBuildGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BuildBetaDetailsBuildGetToOneRelationshipResponses, BuildBetaDetailsBuildGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildBetaDetails/{id}/relationships/build',
            ...options
        });
    }
    
    public static buildBetaDetailsBuildGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BuildBetaDetailsBuildGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildBetaDetailsBuildGetToOneRelatedResponses, BuildBetaDetailsBuildGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildBetaDetails/{id}/build',
            ...options
        });
    }
}

export class BuildBetaNotifications {
    public static buildBetaNotificationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<BuildBetaNotificationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BuildBetaNotificationsCreateInstanceResponses, BuildBetaNotificationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildBetaNotifications',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class BuildUploadFiles {
    public static buildUploadFilesCreateInstance<ThrowOnError extends boolean = false>(options: Options<BuildUploadFilesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BuildUploadFilesCreateInstanceResponses, BuildUploadFilesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildUploadFiles',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static buildUploadFilesGetInstance<ThrowOnError extends boolean = false>(options: Options<BuildUploadFilesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BuildUploadFilesGetInstanceResponses, BuildUploadFilesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildUploadFiles/{id}',
            ...options
        });
    }
    
    public static buildUploadFilesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<BuildUploadFilesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<BuildUploadFilesUpdateInstanceResponses, BuildUploadFilesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildUploadFiles/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class BuildUploads {
    public static buildUploadsCreateInstance<ThrowOnError extends boolean = false>(options: Options<BuildUploadsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BuildUploadsCreateInstanceResponses, BuildUploadsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildUploads',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static buildUploadsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<BuildUploadsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<BuildUploadsDeleteInstanceResponses, BuildUploadsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildUploads/{id}',
            ...options
        });
    }
    
    public static buildUploadsGetInstance<ThrowOnError extends boolean = false>(options: Options<BuildUploadsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BuildUploadsGetInstanceResponses, BuildUploadsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildUploads/{id}',
            ...options
        });
    }
    
    public static buildUploadsBuildUploadFilesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BuildUploadsBuildUploadFilesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BuildUploadsBuildUploadFilesGetToManyRelationshipResponses, BuildUploadsBuildUploadFilesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildUploads/{id}/relationships/buildUploadFiles',
            ...options
        });
    }
    
    public static buildUploadsBuildUploadFilesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BuildUploadsBuildUploadFilesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildUploadsBuildUploadFilesGetToManyRelatedResponses, BuildUploadsBuildUploadFilesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildUploads/{id}/buildUploadFiles',
            ...options
        });
    }
}

export class Builds {
    public static buildsGetCollection<ThrowOnError extends boolean = false>(options?: Options<BuildsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<BuildsGetCollectionResponses, BuildsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds',
            ...options
        });
    }
    
    public static buildsGetInstance<ThrowOnError extends boolean = false>(options: Options<BuildsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsGetInstanceResponses, BuildsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}',
            ...options
        });
    }
    
    public static buildsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<BuildsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<BuildsUpdateInstanceResponses, BuildsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static buildsAppGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BuildsAppGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsAppGetToOneRelationshipResponses, BuildsAppGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/relationships/app',
            ...options
        });
    }
    
    public static buildsAppGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BuildsAppGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsAppGetToOneRelatedResponses, BuildsAppGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/app',
            ...options
        });
    }
    
    public static buildsAppEncryptionDeclarationGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BuildsAppEncryptionDeclarationGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsAppEncryptionDeclarationGetToOneRelationshipResponses, BuildsAppEncryptionDeclarationGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/relationships/appEncryptionDeclaration',
            ...options
        });
    }
    
    public static buildsAppEncryptionDeclarationUpdateToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BuildsAppEncryptionDeclarationUpdateToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponses, BuildsAppEncryptionDeclarationUpdateToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/relationships/appEncryptionDeclaration',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static buildsAppEncryptionDeclarationGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BuildsAppEncryptionDeclarationGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsAppEncryptionDeclarationGetToOneRelatedResponses, BuildsAppEncryptionDeclarationGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/appEncryptionDeclaration',
            ...options
        });
    }
    
    public static buildsAppStoreVersionGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BuildsAppStoreVersionGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsAppStoreVersionGetToOneRelationshipResponses, BuildsAppStoreVersionGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/relationships/appStoreVersion',
            ...options
        });
    }
    
    public static buildsAppStoreVersionGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BuildsAppStoreVersionGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsAppStoreVersionGetToOneRelatedResponses, BuildsAppStoreVersionGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/appStoreVersion',
            ...options
        });
    }
    
    public static buildsBetaAppReviewSubmissionGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BuildsBetaAppReviewSubmissionGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsBetaAppReviewSubmissionGetToOneRelationshipResponses, BuildsBetaAppReviewSubmissionGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/relationships/betaAppReviewSubmission',
            ...options
        });
    }
    
    public static buildsBetaAppReviewSubmissionGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BuildsBetaAppReviewSubmissionGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsBetaAppReviewSubmissionGetToOneRelatedResponses, BuildsBetaAppReviewSubmissionGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/betaAppReviewSubmission',
            ...options
        });
    }
    
    public static buildsBetaBuildLocalizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BuildsBetaBuildLocalizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsBetaBuildLocalizationsGetToManyRelationshipResponses, BuildsBetaBuildLocalizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/relationships/betaBuildLocalizations',
            ...options
        });
    }
    
    public static buildsBetaBuildLocalizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BuildsBetaBuildLocalizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsBetaBuildLocalizationsGetToManyRelatedResponses, BuildsBetaBuildLocalizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/betaBuildLocalizations',
            ...options
        });
    }
    
    public static buildsBetaGroupsDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BuildsBetaGroupsDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<BuildsBetaGroupsDeleteToManyRelationshipResponses, BuildsBetaGroupsDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/relationships/betaGroups',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static buildsBetaGroupsCreateToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BuildsBetaGroupsCreateToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).post<BuildsBetaGroupsCreateToManyRelationshipResponses, BuildsBetaGroupsCreateToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/relationships/betaGroups',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static buildsBuildBetaDetailGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BuildsBuildBetaDetailGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsBuildBetaDetailGetToOneRelationshipResponses, BuildsBuildBetaDetailGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/relationships/buildBetaDetail',
            ...options
        });
    }
    
    public static buildsBuildBetaDetailGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BuildsBuildBetaDetailGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsBuildBetaDetailGetToOneRelatedResponses, BuildsBuildBetaDetailGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/buildBetaDetail',
            ...options
        });
    }
    
    public static buildsDiagnosticSignaturesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BuildsDiagnosticSignaturesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsDiagnosticSignaturesGetToManyRelationshipResponses, BuildsDiagnosticSignaturesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/relationships/diagnosticSignatures',
            ...options
        });
    }
    
    public static buildsDiagnosticSignaturesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BuildsDiagnosticSignaturesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsDiagnosticSignaturesGetToManyRelatedResponses, BuildsDiagnosticSignaturesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/diagnosticSignatures',
            ...options
        });
    }
    
    public static buildsIconsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BuildsIconsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsIconsGetToManyRelationshipResponses, BuildsIconsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/relationships/icons',
            ...options
        });
    }
    
    public static buildsIconsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BuildsIconsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsIconsGetToManyRelatedResponses, BuildsIconsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/icons',
            ...options
        });
    }
    
    public static buildsIndividualTestersDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BuildsIndividualTestersDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<BuildsIndividualTestersDeleteToManyRelationshipResponses, BuildsIndividualTestersDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/relationships/individualTesters',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static buildsIndividualTestersGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BuildsIndividualTestersGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsIndividualTestersGetToManyRelationshipResponses, BuildsIndividualTestersGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/relationships/individualTesters',
            ...options
        });
    }
    
    public static buildsIndividualTestersCreateToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BuildsIndividualTestersCreateToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).post<BuildsIndividualTestersCreateToManyRelationshipResponses, BuildsIndividualTestersCreateToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/relationships/individualTesters',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static buildsIndividualTestersGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BuildsIndividualTestersGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsIndividualTestersGetToManyRelatedResponses, BuildsIndividualTestersGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/individualTesters',
            ...options
        });
    }
    
    public static buildsPerfPowerMetricsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BuildsPerfPowerMetricsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsPerfPowerMetricsGetToManyRelatedResponses, BuildsPerfPowerMetricsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/perfPowerMetrics',
            ...options
        });
    }
    
    public static buildsPreReleaseVersionGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BuildsPreReleaseVersionGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsPreReleaseVersionGetToOneRelationshipResponses, BuildsPreReleaseVersionGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/relationships/preReleaseVersion',
            ...options
        });
    }
    
    public static buildsPreReleaseVersionGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BuildsPreReleaseVersionGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsPreReleaseVersionGetToOneRelatedResponses, BuildsPreReleaseVersionGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/preReleaseVersion',
            ...options
        });
    }
    
    public static buildsBetaBuildUsagesGetMetrics<ThrowOnError extends boolean = false>(options: Options<BuildsBetaBuildUsagesGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsBetaBuildUsagesGetMetricsResponses, BuildsBetaBuildUsagesGetMetricsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/metrics/betaBuildUsages',
            ...options
        });
    }
}

export class BundleIdCapabilities {
    public static bundleIdCapabilitiesCreateInstance<ThrowOnError extends boolean = false>(options: Options<BundleIdCapabilitiesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BundleIdCapabilitiesCreateInstanceResponses, BundleIdCapabilitiesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/bundleIdCapabilities',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static bundleIdCapabilitiesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<BundleIdCapabilitiesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<BundleIdCapabilitiesDeleteInstanceResponses, BundleIdCapabilitiesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/bundleIdCapabilities/{id}',
            ...options
        });
    }
    
    public static bundleIdCapabilitiesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<BundleIdCapabilitiesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<BundleIdCapabilitiesUpdateInstanceResponses, BundleIdCapabilitiesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/bundleIdCapabilities/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class BundleIds {
    public static bundleIdsGetCollection<ThrowOnError extends boolean = false>(options?: Options<BundleIdsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<BundleIdsGetCollectionResponses, BundleIdsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/bundleIds',
            ...options
        });
    }
    
    public static bundleIdsCreateInstance<ThrowOnError extends boolean = false>(options: Options<BundleIdsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<BundleIdsCreateInstanceResponses, BundleIdsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/bundleIds',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static bundleIdsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<BundleIdsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<BundleIdsDeleteInstanceResponses, BundleIdsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/bundleIds/{id}',
            ...options
        });
    }
    
    public static bundleIdsGetInstance<ThrowOnError extends boolean = false>(options: Options<BundleIdsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<BundleIdsGetInstanceResponses, BundleIdsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/bundleIds/{id}',
            ...options
        });
    }
    
    public static bundleIdsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<BundleIdsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<BundleIdsUpdateInstanceResponses, BundleIdsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/bundleIds/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static bundleIdsAppGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BundleIdsAppGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BundleIdsAppGetToOneRelationshipResponses, BundleIdsAppGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/bundleIds/{id}/relationships/app',
            ...options
        });
    }
    
    public static bundleIdsAppGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BundleIdsAppGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BundleIdsAppGetToOneRelatedResponses, BundleIdsAppGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/bundleIds/{id}/app',
            ...options
        });
    }
    
    public static bundleIdsBundleIdCapabilitiesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BundleIdsBundleIdCapabilitiesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BundleIdsBundleIdCapabilitiesGetToManyRelationshipResponses, BundleIdsBundleIdCapabilitiesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/bundleIds/{id}/relationships/bundleIdCapabilities',
            ...options
        });
    }
    
    public static bundleIdsBundleIdCapabilitiesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BundleIdsBundleIdCapabilitiesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BundleIdsBundleIdCapabilitiesGetToManyRelatedResponses, BundleIdsBundleIdCapabilitiesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/bundleIds/{id}/bundleIdCapabilities',
            ...options
        });
    }
    
    public static bundleIdsProfilesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BundleIdsProfilesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BundleIdsProfilesGetToManyRelationshipResponses, BundleIdsProfilesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/bundleIds/{id}/relationships/profiles',
            ...options
        });
    }
    
    public static bundleIdsProfilesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BundleIdsProfilesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BundleIdsProfilesGetToManyRelatedResponses, BundleIdsProfilesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/bundleIds/{id}/profiles',
            ...options
        });
    }
}

export class Certificates {
    public static certificatesGetCollection<ThrowOnError extends boolean = false>(options?: Options<CertificatesGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<CertificatesGetCollectionResponses, CertificatesGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/certificates',
            ...options
        });
    }
    
    public static certificatesCreateInstance<ThrowOnError extends boolean = false>(options: Options<CertificatesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<CertificatesCreateInstanceResponses, CertificatesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/certificates',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static certificatesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<CertificatesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<CertificatesDeleteInstanceResponses, CertificatesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/certificates/{id}',
            ...options
        });
    }
    
    public static certificatesGetInstance<ThrowOnError extends boolean = false>(options: Options<CertificatesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<CertificatesGetInstanceResponses, CertificatesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/certificates/{id}',
            ...options
        });
    }
    
    public static certificatesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<CertificatesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<CertificatesUpdateInstanceResponses, CertificatesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/certificates/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static certificatesPassTypeIdGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<CertificatesPassTypeIdGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CertificatesPassTypeIdGetToOneRelationshipResponses, CertificatesPassTypeIdGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/certificates/{id}/relationships/passTypeId',
            ...options
        });
    }
    
    public static certificatesPassTypeIdGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<CertificatesPassTypeIdGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CertificatesPassTypeIdGetToOneRelatedResponses, CertificatesPassTypeIdGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/certificates/{id}/passTypeId',
            ...options
        });
    }
}

export class CiArtifacts {
    public static ciArtifactsGetInstance<ThrowOnError extends boolean = false>(options: Options<CiArtifactsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<CiArtifactsGetInstanceResponses, CiArtifactsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciArtifacts/{id}',
            ...options
        });
    }
}

export class CiBuildActions {
    public static ciBuildActionsGetInstance<ThrowOnError extends boolean = false>(options: Options<CiBuildActionsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<CiBuildActionsGetInstanceResponses, CiBuildActionsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciBuildActions/{id}',
            ...options
        });
    }
    
    public static ciBuildActionsArtifactsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<CiBuildActionsArtifactsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CiBuildActionsArtifactsGetToManyRelationshipResponses, CiBuildActionsArtifactsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciBuildActions/{id}/relationships/artifacts',
            ...options
        });
    }
    
    public static ciBuildActionsArtifactsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<CiBuildActionsArtifactsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CiBuildActionsArtifactsGetToManyRelatedResponses, CiBuildActionsArtifactsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciBuildActions/{id}/artifacts',
            ...options
        });
    }
    
    public static ciBuildActionsBuildRunGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<CiBuildActionsBuildRunGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CiBuildActionsBuildRunGetToOneRelationshipResponses, CiBuildActionsBuildRunGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciBuildActions/{id}/relationships/buildRun',
            ...options
        });
    }
    
    public static ciBuildActionsBuildRunGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<CiBuildActionsBuildRunGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CiBuildActionsBuildRunGetToOneRelatedResponses, CiBuildActionsBuildRunGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciBuildActions/{id}/buildRun',
            ...options
        });
    }
    
    public static ciBuildActionsIssuesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<CiBuildActionsIssuesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CiBuildActionsIssuesGetToManyRelationshipResponses, CiBuildActionsIssuesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciBuildActions/{id}/relationships/issues',
            ...options
        });
    }
    
    public static ciBuildActionsIssuesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<CiBuildActionsIssuesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CiBuildActionsIssuesGetToManyRelatedResponses, CiBuildActionsIssuesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciBuildActions/{id}/issues',
            ...options
        });
    }
    
    public static ciBuildActionsTestResultsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<CiBuildActionsTestResultsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CiBuildActionsTestResultsGetToManyRelationshipResponses, CiBuildActionsTestResultsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciBuildActions/{id}/relationships/testResults',
            ...options
        });
    }
    
    public static ciBuildActionsTestResultsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<CiBuildActionsTestResultsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CiBuildActionsTestResultsGetToManyRelatedResponses, CiBuildActionsTestResultsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciBuildActions/{id}/testResults',
            ...options
        });
    }
}

export class CiBuildRuns {
    public static ciBuildRunsCreateInstance<ThrowOnError extends boolean = false>(options: Options<CiBuildRunsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<CiBuildRunsCreateInstanceResponses, CiBuildRunsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciBuildRuns',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static ciBuildRunsGetInstance<ThrowOnError extends boolean = false>(options: Options<CiBuildRunsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<CiBuildRunsGetInstanceResponses, CiBuildRunsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciBuildRuns/{id}',
            ...options
        });
    }
    
    public static ciBuildRunsActionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<CiBuildRunsActionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CiBuildRunsActionsGetToManyRelationshipResponses, CiBuildRunsActionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciBuildRuns/{id}/relationships/actions',
            ...options
        });
    }
    
    public static ciBuildRunsActionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<CiBuildRunsActionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CiBuildRunsActionsGetToManyRelatedResponses, CiBuildRunsActionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciBuildRuns/{id}/actions',
            ...options
        });
    }
    
    public static ciBuildRunsBuildsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<CiBuildRunsBuildsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CiBuildRunsBuildsGetToManyRelationshipResponses, CiBuildRunsBuildsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciBuildRuns/{id}/relationships/builds',
            ...options
        });
    }
    
    public static ciBuildRunsBuildsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<CiBuildRunsBuildsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CiBuildRunsBuildsGetToManyRelatedResponses, CiBuildRunsBuildsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciBuildRuns/{id}/builds',
            ...options
        });
    }
}

export class CiIssues {
    public static ciIssuesGetInstance<ThrowOnError extends boolean = false>(options: Options<CiIssuesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<CiIssuesGetInstanceResponses, CiIssuesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciIssues/{id}',
            ...options
        });
    }
}

export class CiMacOsVersions {
    public static ciMacOsVersionsGetCollection<ThrowOnError extends boolean = false>(options?: Options<CiMacOsVersionsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<CiMacOsVersionsGetCollectionResponses, CiMacOsVersionsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciMacOsVersions',
            ...options
        });
    }
    
    public static ciMacOsVersionsGetInstance<ThrowOnError extends boolean = false>(options: Options<CiMacOsVersionsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<CiMacOsVersionsGetInstanceResponses, CiMacOsVersionsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciMacOsVersions/{id}',
            ...options
        });
    }
    
    public static ciMacOsVersionsXcodeVersionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<CiMacOsVersionsXcodeVersionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CiMacOsVersionsXcodeVersionsGetToManyRelationshipResponses, CiMacOsVersionsXcodeVersionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciMacOsVersions/{id}/relationships/xcodeVersions',
            ...options
        });
    }
    
    public static ciMacOsVersionsXcodeVersionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<CiMacOsVersionsXcodeVersionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CiMacOsVersionsXcodeVersionsGetToManyRelatedResponses, CiMacOsVersionsXcodeVersionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciMacOsVersions/{id}/xcodeVersions',
            ...options
        });
    }
}

export class CiProducts {
    public static ciProductsGetCollection<ThrowOnError extends boolean = false>(options?: Options<CiProductsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<CiProductsGetCollectionResponses, CiProductsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciProducts',
            ...options
        });
    }
    
    public static ciProductsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<CiProductsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<CiProductsDeleteInstanceResponses, CiProductsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciProducts/{id}',
            ...options
        });
    }
    
    public static ciProductsGetInstance<ThrowOnError extends boolean = false>(options: Options<CiProductsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<CiProductsGetInstanceResponses, CiProductsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciProducts/{id}',
            ...options
        });
    }
    
    public static ciProductsAdditionalRepositoriesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<CiProductsAdditionalRepositoriesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CiProductsAdditionalRepositoriesGetToManyRelationshipResponses, CiProductsAdditionalRepositoriesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciProducts/{id}/relationships/additionalRepositories',
            ...options
        });
    }
    
    public static ciProductsAdditionalRepositoriesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<CiProductsAdditionalRepositoriesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CiProductsAdditionalRepositoriesGetToManyRelatedResponses, CiProductsAdditionalRepositoriesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciProducts/{id}/additionalRepositories',
            ...options
        });
    }
    
    public static ciProductsAppGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<CiProductsAppGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CiProductsAppGetToOneRelationshipResponses, CiProductsAppGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciProducts/{id}/relationships/app',
            ...options
        });
    }
    
    public static ciProductsAppGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<CiProductsAppGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CiProductsAppGetToOneRelatedResponses, CiProductsAppGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciProducts/{id}/app',
            ...options
        });
    }
    
    public static ciProductsBuildRunsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<CiProductsBuildRunsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CiProductsBuildRunsGetToManyRelationshipResponses, CiProductsBuildRunsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciProducts/{id}/relationships/buildRuns',
            ...options
        });
    }
    
    public static ciProductsBuildRunsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<CiProductsBuildRunsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CiProductsBuildRunsGetToManyRelatedResponses, CiProductsBuildRunsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciProducts/{id}/buildRuns',
            ...options
        });
    }
    
    public static ciProductsPrimaryRepositoriesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<CiProductsPrimaryRepositoriesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CiProductsPrimaryRepositoriesGetToManyRelationshipResponses, CiProductsPrimaryRepositoriesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciProducts/{id}/relationships/primaryRepositories',
            ...options
        });
    }
    
    public static ciProductsPrimaryRepositoriesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<CiProductsPrimaryRepositoriesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CiProductsPrimaryRepositoriesGetToManyRelatedResponses, CiProductsPrimaryRepositoriesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciProducts/{id}/primaryRepositories',
            ...options
        });
    }
    
    public static ciProductsWorkflowsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<CiProductsWorkflowsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CiProductsWorkflowsGetToManyRelationshipResponses, CiProductsWorkflowsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciProducts/{id}/relationships/workflows',
            ...options
        });
    }
    
    public static ciProductsWorkflowsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<CiProductsWorkflowsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CiProductsWorkflowsGetToManyRelatedResponses, CiProductsWorkflowsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciProducts/{id}/workflows',
            ...options
        });
    }
}

export class CiTestResults {
    public static ciTestResultsGetInstance<ThrowOnError extends boolean = false>(options: Options<CiTestResultsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<CiTestResultsGetInstanceResponses, CiTestResultsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciTestResults/{id}',
            ...options
        });
    }
}

export class CiWorkflows {
    public static ciWorkflowsCreateInstance<ThrowOnError extends boolean = false>(options: Options<CiWorkflowsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<CiWorkflowsCreateInstanceResponses, CiWorkflowsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciWorkflows',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static ciWorkflowsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<CiWorkflowsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<CiWorkflowsDeleteInstanceResponses, CiWorkflowsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciWorkflows/{id}',
            ...options
        });
    }
    
    public static ciWorkflowsGetInstance<ThrowOnError extends boolean = false>(options: Options<CiWorkflowsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<CiWorkflowsGetInstanceResponses, CiWorkflowsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciWorkflows/{id}',
            ...options
        });
    }
    
    public static ciWorkflowsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<CiWorkflowsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<CiWorkflowsUpdateInstanceResponses, CiWorkflowsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciWorkflows/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static ciWorkflowsBuildRunsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<CiWorkflowsBuildRunsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CiWorkflowsBuildRunsGetToManyRelationshipResponses, CiWorkflowsBuildRunsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciWorkflows/{id}/relationships/buildRuns',
            ...options
        });
    }
    
    public static ciWorkflowsBuildRunsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<CiWorkflowsBuildRunsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CiWorkflowsBuildRunsGetToManyRelatedResponses, CiWorkflowsBuildRunsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciWorkflows/{id}/buildRuns',
            ...options
        });
    }
    
    public static ciWorkflowsRepositoryGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<CiWorkflowsRepositoryGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CiWorkflowsRepositoryGetToOneRelationshipResponses, CiWorkflowsRepositoryGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciWorkflows/{id}/relationships/repository',
            ...options
        });
    }
    
    public static ciWorkflowsRepositoryGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<CiWorkflowsRepositoryGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CiWorkflowsRepositoryGetToOneRelatedResponses, CiWorkflowsRepositoryGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciWorkflows/{id}/repository',
            ...options
        });
    }
}

export class CiXcodeVersions {
    public static ciXcodeVersionsGetCollection<ThrowOnError extends boolean = false>(options?: Options<CiXcodeVersionsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<CiXcodeVersionsGetCollectionResponses, CiXcodeVersionsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciXcodeVersions',
            ...options
        });
    }
    
    public static ciXcodeVersionsGetInstance<ThrowOnError extends boolean = false>(options: Options<CiXcodeVersionsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<CiXcodeVersionsGetInstanceResponses, CiXcodeVersionsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciXcodeVersions/{id}',
            ...options
        });
    }
    
    public static ciXcodeVersionsMacOsVersionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<CiXcodeVersionsMacOsVersionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CiXcodeVersionsMacOsVersionsGetToManyRelationshipResponses, CiXcodeVersionsMacOsVersionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciXcodeVersions/{id}/relationships/macOsVersions',
            ...options
        });
    }
    
    public static ciXcodeVersionsMacOsVersionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<CiXcodeVersionsMacOsVersionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CiXcodeVersionsMacOsVersionsGetToManyRelatedResponses, CiXcodeVersionsMacOsVersionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/ciXcodeVersions/{id}/macOsVersions',
            ...options
        });
    }
}

export class CustomerReviewResponses {
    public static customerReviewResponsesCreateInstance<ThrowOnError extends boolean = false>(options: Options<CustomerReviewResponsesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<CustomerReviewResponsesCreateInstanceResponses, CustomerReviewResponsesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/customerReviewResponses',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static customerReviewResponsesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<CustomerReviewResponsesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<CustomerReviewResponsesDeleteInstanceResponses, CustomerReviewResponsesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/customerReviewResponses/{id}',
            ...options
        });
    }
    
    public static customerReviewResponsesGetInstance<ThrowOnError extends boolean = false>(options: Options<CustomerReviewResponsesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<CustomerReviewResponsesGetInstanceResponses, CustomerReviewResponsesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/customerReviewResponses/{id}',
            ...options
        });
    }
}

export class CustomerReviews {
    public static customerReviewsGetInstance<ThrowOnError extends boolean = false>(options: Options<CustomerReviewsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<CustomerReviewsGetInstanceResponses, CustomerReviewsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/customerReviews/{id}',
            ...options
        });
    }
    
    public static customerReviewsResponseGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<CustomerReviewsResponseGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<CustomerReviewsResponseGetToOneRelationshipResponses, CustomerReviewsResponseGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/customerReviews/{id}/relationships/response',
            ...options
        });
    }
    
    public static customerReviewsResponseGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<CustomerReviewsResponseGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<CustomerReviewsResponseGetToOneRelatedResponses, CustomerReviewsResponseGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/customerReviews/{id}/response',
            ...options
        });
    }
}

export class Devices {
    public static devicesGetCollection<ThrowOnError extends boolean = false>(options?: Options<DevicesGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<DevicesGetCollectionResponses, DevicesGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/devices',
            ...options
        });
    }
    
    public static devicesCreateInstance<ThrowOnError extends boolean = false>(options: Options<DevicesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<DevicesCreateInstanceResponses, DevicesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/devices',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static devicesGetInstance<ThrowOnError extends boolean = false>(options: Options<DevicesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<DevicesGetInstanceResponses, DevicesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/devices/{id}',
            ...options
        });
    }
    
    public static devicesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<DevicesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<DevicesUpdateInstanceResponses, DevicesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/devices/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class EndAppAvailabilityPreOrders {
    public static endAppAvailabilityPreOrdersCreateInstance<ThrowOnError extends boolean = false>(options: Options<EndAppAvailabilityPreOrdersCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<EndAppAvailabilityPreOrdersCreateInstanceResponses, EndAppAvailabilityPreOrdersCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/endAppAvailabilityPreOrders',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class EndUserLicenseAgreements {
    public static endUserLicenseAgreementsCreateInstance<ThrowOnError extends boolean = false>(options: Options<EndUserLicenseAgreementsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<EndUserLicenseAgreementsCreateInstanceResponses, EndUserLicenseAgreementsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/endUserLicenseAgreements',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static endUserLicenseAgreementsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<EndUserLicenseAgreementsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<EndUserLicenseAgreementsDeleteInstanceResponses, EndUserLicenseAgreementsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/endUserLicenseAgreements/{id}',
            ...options
        });
    }
    
    public static endUserLicenseAgreementsGetInstance<ThrowOnError extends boolean = false>(options: Options<EndUserLicenseAgreementsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<EndUserLicenseAgreementsGetInstanceResponses, EndUserLicenseAgreementsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/endUserLicenseAgreements/{id}',
            ...options
        });
    }
    
    public static endUserLicenseAgreementsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<EndUserLicenseAgreementsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<EndUserLicenseAgreementsUpdateInstanceResponses, EndUserLicenseAgreementsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/endUserLicenseAgreements/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static endUserLicenseAgreementsTerritoriesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<EndUserLicenseAgreementsTerritoriesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<EndUserLicenseAgreementsTerritoriesGetToManyRelationshipResponses, EndUserLicenseAgreementsTerritoriesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/endUserLicenseAgreements/{id}/relationships/territories',
            ...options
        });
    }
    
    public static endUserLicenseAgreementsTerritoriesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<EndUserLicenseAgreementsTerritoriesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponses, EndUserLicenseAgreementsTerritoriesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/endUserLicenseAgreements/{id}/territories',
            ...options
        });
    }
}

export class FinanceReports {
    public static financeReportsGetCollection<ThrowOnError extends boolean = false>(options: Options<FinanceReportsGetCollectionData, ThrowOnError>) {
        return (options.client ?? client).get<FinanceReportsGetCollectionResponses, FinanceReportsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/financeReports',
            ...options
        });
    }
}

export class GameCenterAchievementImages {
    public static gameCenterAchievementImagesCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementImagesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterAchievementImagesCreateInstanceResponses, GameCenterAchievementImagesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievementImages',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterAchievementImagesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementImagesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterAchievementImagesDeleteInstanceResponses, GameCenterAchievementImagesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievementImages/{id}',
            ...options
        });
    }
    
    public static gameCenterAchievementImagesGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementImagesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAchievementImagesGetInstanceResponses, GameCenterAchievementImagesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievementImages/{id}',
            ...options
        });
    }
    
    public static gameCenterAchievementImagesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementImagesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterAchievementImagesUpdateInstanceResponses, GameCenterAchievementImagesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievementImages/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class GameCenterAchievementLocalizations {
    public static gameCenterAchievementLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterAchievementLocalizationsCreateInstanceResponses, GameCenterAchievementLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievementLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterAchievementLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterAchievementLocalizationsDeleteInstanceResponses, GameCenterAchievementLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievementLocalizations/{id}',
            ...options
        });
    }
    
    public static gameCenterAchievementLocalizationsGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementLocalizationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAchievementLocalizationsGetInstanceResponses, GameCenterAchievementLocalizationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievementLocalizations/{id}',
            ...options
        });
    }
    
    public static gameCenterAchievementLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterAchievementLocalizationsUpdateInstanceResponses, GameCenterAchievementLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievementLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelationshipResponses, GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievementLocalizations/{id}/relationships/gameCenterAchievement',
            ...options
        });
    }
    
    public static gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedResponses, GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievement',
            ...options
        });
    }
    
    public static gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelationshipResponses, GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievementLocalizations/{id}/relationships/gameCenterAchievementImage',
            ...options
        });
    }
    
    public static gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedResponses, GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievementImage',
            ...options
        });
    }
}

export class GameCenterAchievementReleases {
    public static gameCenterAchievementReleasesCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementReleasesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterAchievementReleasesCreateInstanceResponses, GameCenterAchievementReleasesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievementReleases',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterAchievementReleasesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementReleasesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterAchievementReleasesDeleteInstanceResponses, GameCenterAchievementReleasesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievementReleases/{id}',
            ...options
        });
    }
    
    public static gameCenterAchievementReleasesGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementReleasesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAchievementReleasesGetInstanceResponses, GameCenterAchievementReleasesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievementReleases/{id}',
            ...options
        });
    }
}

export class GameCenterAchievements {
    public static gameCenterAchievementsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterAchievementsCreateInstanceResponses, GameCenterAchievementsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievements',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterAchievementsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterAchievementsDeleteInstanceResponses, GameCenterAchievementsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievements/{id}',
            ...options
        });
    }
    
    public static gameCenterAchievementsGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAchievementsGetInstanceResponses, GameCenterAchievementsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievements/{id}',
            ...options
        });
    }
    
    public static gameCenterAchievementsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterAchievementsUpdateInstanceResponses, GameCenterAchievementsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievements/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterAchievementsActivityUpdateToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsActivityUpdateToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterAchievementsActivityUpdateToOneRelationshipResponses, GameCenterAchievementsActivityUpdateToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievements/{id}/relationships/activity',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * @deprecated
     */
    public static gameCenterAchievementsGroupAchievementGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsGroupAchievementGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAchievementsGroupAchievementGetToOneRelationshipResponses, GameCenterAchievementsGroupAchievementGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievements/{id}/relationships/groupAchievement',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static gameCenterAchievementsGroupAchievementUpdateToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsGroupAchievementUpdateToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterAchievementsGroupAchievementUpdateToOneRelationshipResponses, GameCenterAchievementsGroupAchievementUpdateToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievements/{id}/relationships/groupAchievement',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * @deprecated
     */
    public static gameCenterAchievementsGroupAchievementGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsGroupAchievementGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAchievementsGroupAchievementGetToOneRelatedResponses, GameCenterAchievementsGroupAchievementGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievements/{id}/groupAchievement',
            ...options
        });
    }
    
    public static gameCenterAchievementsLocalizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsLocalizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAchievementsLocalizationsGetToManyRelationshipResponses, GameCenterAchievementsLocalizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievements/{id}/relationships/localizations',
            ...options
        });
    }
    
    public static gameCenterAchievementsLocalizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsLocalizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAchievementsLocalizationsGetToManyRelatedResponses, GameCenterAchievementsLocalizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievements/{id}/localizations',
            ...options
        });
    }
    
    public static gameCenterAchievementsReleasesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsReleasesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAchievementsReleasesGetToManyRelationshipResponses, GameCenterAchievementsReleasesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievements/{id}/relationships/releases',
            ...options
        });
    }
    
    public static gameCenterAchievementsReleasesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterAchievementsReleasesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAchievementsReleasesGetToManyRelatedResponses, GameCenterAchievementsReleasesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAchievements/{id}/releases',
            ...options
        });
    }
}

export class GameCenterActivities {
    public static gameCenterActivitiesCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivitiesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterActivitiesCreateInstanceResponses, GameCenterActivitiesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivities',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterActivitiesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivitiesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterActivitiesDeleteInstanceResponses, GameCenterActivitiesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivities/{id}',
            ...options
        });
    }
    
    public static gameCenterActivitiesGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivitiesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterActivitiesGetInstanceResponses, GameCenterActivitiesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivities/{id}',
            ...options
        });
    }
    
    public static gameCenterActivitiesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivitiesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterActivitiesUpdateInstanceResponses, GameCenterActivitiesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivities/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterActivitiesAchievementsDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterActivitiesAchievementsDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterActivitiesAchievementsDeleteToManyRelationshipResponses, GameCenterActivitiesAchievementsDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivities/{id}/relationships/achievements',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterActivitiesAchievementsCreateToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterActivitiesAchievementsCreateToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterActivitiesAchievementsCreateToManyRelationshipResponses, GameCenterActivitiesAchievementsCreateToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivities/{id}/relationships/achievements',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterActivitiesLeaderboardsDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterActivitiesLeaderboardsDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterActivitiesLeaderboardsDeleteToManyRelationshipResponses, GameCenterActivitiesLeaderboardsDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivities/{id}/relationships/leaderboards',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterActivitiesLeaderboardsCreateToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterActivitiesLeaderboardsCreateToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterActivitiesLeaderboardsCreateToManyRelationshipResponses, GameCenterActivitiesLeaderboardsCreateToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivities/{id}/relationships/leaderboards',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterActivitiesVersionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterActivitiesVersionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterActivitiesVersionsGetToManyRelationshipResponses, GameCenterActivitiesVersionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivities/{id}/relationships/versions',
            ...options
        });
    }
    
    public static gameCenterActivitiesVersionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterActivitiesVersionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterActivitiesVersionsGetToManyRelatedResponses, GameCenterActivitiesVersionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivities/{id}/versions',
            ...options
        });
    }
}

export class GameCenterActivityImages {
    public static gameCenterActivityImagesCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityImagesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterActivityImagesCreateInstanceResponses, GameCenterActivityImagesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityImages',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterActivityImagesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityImagesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterActivityImagesDeleteInstanceResponses, GameCenterActivityImagesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityImages/{id}',
            ...options
        });
    }
    
    public static gameCenterActivityImagesGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityImagesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterActivityImagesGetInstanceResponses, GameCenterActivityImagesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityImages/{id}',
            ...options
        });
    }
    
    public static gameCenterActivityImagesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityImagesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterActivityImagesUpdateInstanceResponses, GameCenterActivityImagesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityImages/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class GameCenterActivityLocalizations {
    public static gameCenterActivityLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterActivityLocalizationsCreateInstanceResponses, GameCenterActivityLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterActivityLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterActivityLocalizationsDeleteInstanceResponses, GameCenterActivityLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityLocalizations/{id}',
            ...options
        });
    }
    
    public static gameCenterActivityLocalizationsGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityLocalizationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterActivityLocalizationsGetInstanceResponses, GameCenterActivityLocalizationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityLocalizations/{id}',
            ...options
        });
    }
    
    public static gameCenterActivityLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterActivityLocalizationsUpdateInstanceResponses, GameCenterActivityLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterActivityLocalizationsImageGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityLocalizationsImageGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterActivityLocalizationsImageGetToOneRelationshipResponses, GameCenterActivityLocalizationsImageGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityLocalizations/{id}/relationships/image',
            ...options
        });
    }
    
    public static gameCenterActivityLocalizationsImageGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityLocalizationsImageGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterActivityLocalizationsImageGetToOneRelatedResponses, GameCenterActivityLocalizationsImageGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityLocalizations/{id}/image',
            ...options
        });
    }
}

export class GameCenterActivityVersionReleases {
    public static gameCenterActivityVersionReleasesCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityVersionReleasesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterActivityVersionReleasesCreateInstanceResponses, GameCenterActivityVersionReleasesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityVersionReleases',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterActivityVersionReleasesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityVersionReleasesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterActivityVersionReleasesDeleteInstanceResponses, GameCenterActivityVersionReleasesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityVersionReleases/{id}',
            ...options
        });
    }
    
    public static gameCenterActivityVersionReleasesGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityVersionReleasesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterActivityVersionReleasesGetInstanceResponses, GameCenterActivityVersionReleasesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityVersionReleases/{id}',
            ...options
        });
    }
}

export class GameCenterActivityVersions {
    public static gameCenterActivityVersionsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityVersionsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterActivityVersionsCreateInstanceResponses, GameCenterActivityVersionsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityVersions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterActivityVersionsGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityVersionsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterActivityVersionsGetInstanceResponses, GameCenterActivityVersionsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityVersions/{id}',
            ...options
        });
    }
    
    public static gameCenterActivityVersionsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityVersionsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterActivityVersionsUpdateInstanceResponses, GameCenterActivityVersionsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityVersions/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterActivityVersionsDefaultImageGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityVersionsDefaultImageGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterActivityVersionsDefaultImageGetToOneRelationshipResponses, GameCenterActivityVersionsDefaultImageGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityVersions/{id}/relationships/defaultImage',
            ...options
        });
    }
    
    public static gameCenterActivityVersionsDefaultImageGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityVersionsDefaultImageGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterActivityVersionsDefaultImageGetToOneRelatedResponses, GameCenterActivityVersionsDefaultImageGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityVersions/{id}/defaultImage',
            ...options
        });
    }
    
    public static gameCenterActivityVersionsLocalizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityVersionsLocalizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterActivityVersionsLocalizationsGetToManyRelationshipResponses, GameCenterActivityVersionsLocalizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityVersions/{id}/relationships/localizations',
            ...options
        });
    }
    
    public static gameCenterActivityVersionsLocalizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterActivityVersionsLocalizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterActivityVersionsLocalizationsGetToManyRelatedResponses, GameCenterActivityVersionsLocalizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterActivityVersions/{id}/localizations',
            ...options
        });
    }
}

export class GameCenterAppVersions {
    public static gameCenterAppVersionsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterAppVersionsCreateInstanceResponses, GameCenterAppVersionsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAppVersions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterAppVersionsGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAppVersionsGetInstanceResponses, GameCenterAppVersionsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAppVersions/{id}',
            ...options
        });
    }
    
    public static gameCenterAppVersionsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterAppVersionsUpdateInstanceResponses, GameCenterAppVersionsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAppVersions/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterAppVersionsAppStoreVersionGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsAppStoreVersionGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAppVersionsAppStoreVersionGetToOneRelationshipResponses, GameCenterAppVersionsAppStoreVersionGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAppVersions/{id}/relationships/appStoreVersion',
            ...options
        });
    }
    
    public static gameCenterAppVersionsAppStoreVersionGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsAppStoreVersionGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAppVersionsAppStoreVersionGetToOneRelatedResponses, GameCenterAppVersionsAppStoreVersionGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAppVersions/{id}/appStoreVersion',
            ...options
        });
    }
    
    public static gameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipResponses, GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterAppVersionsCompatibilityVersionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipResponses, GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions',
            ...options
        });
    }
    
    public static gameCenterAppVersionsCompatibilityVersionsCreateToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipResponses, GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterAppVersionsCompatibilityVersionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedResponses, GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterAppVersions/{id}/compatibilityVersions',
            ...options
        });
    }
}

export class GameCenterChallengeImages {
    public static gameCenterChallengeImagesCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeImagesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterChallengeImagesCreateInstanceResponses, GameCenterChallengeImagesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeImages',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterChallengeImagesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeImagesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterChallengeImagesDeleteInstanceResponses, GameCenterChallengeImagesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeImages/{id}',
            ...options
        });
    }
    
    public static gameCenterChallengeImagesGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeImagesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterChallengeImagesGetInstanceResponses, GameCenterChallengeImagesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeImages/{id}',
            ...options
        });
    }
    
    public static gameCenterChallengeImagesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeImagesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterChallengeImagesUpdateInstanceResponses, GameCenterChallengeImagesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeImages/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class GameCenterChallengeLocalizations {
    public static gameCenterChallengeLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterChallengeLocalizationsCreateInstanceResponses, GameCenterChallengeLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterChallengeLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterChallengeLocalizationsDeleteInstanceResponses, GameCenterChallengeLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeLocalizations/{id}',
            ...options
        });
    }
    
    public static gameCenterChallengeLocalizationsGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeLocalizationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterChallengeLocalizationsGetInstanceResponses, GameCenterChallengeLocalizationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeLocalizations/{id}',
            ...options
        });
    }
    
    public static gameCenterChallengeLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterChallengeLocalizationsUpdateInstanceResponses, GameCenterChallengeLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterChallengeLocalizationsImageGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeLocalizationsImageGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterChallengeLocalizationsImageGetToOneRelationshipResponses, GameCenterChallengeLocalizationsImageGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeLocalizations/{id}/relationships/image',
            ...options
        });
    }
    
    public static gameCenterChallengeLocalizationsImageGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeLocalizationsImageGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterChallengeLocalizationsImageGetToOneRelatedResponses, GameCenterChallengeLocalizationsImageGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeLocalizations/{id}/image',
            ...options
        });
    }
}

export class GameCenterChallengeVersionReleases {
    public static gameCenterChallengeVersionReleasesCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeVersionReleasesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterChallengeVersionReleasesCreateInstanceResponses, GameCenterChallengeVersionReleasesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeVersionReleases',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterChallengeVersionReleasesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeVersionReleasesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterChallengeVersionReleasesDeleteInstanceResponses, GameCenterChallengeVersionReleasesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeVersionReleases/{id}',
            ...options
        });
    }
    
    public static gameCenterChallengeVersionReleasesGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeVersionReleasesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterChallengeVersionReleasesGetInstanceResponses, GameCenterChallengeVersionReleasesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeVersionReleases/{id}',
            ...options
        });
    }
}

export class GameCenterChallengeVersions {
    public static gameCenterChallengeVersionsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeVersionsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterChallengeVersionsCreateInstanceResponses, GameCenterChallengeVersionsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeVersions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterChallengeVersionsGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeVersionsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterChallengeVersionsGetInstanceResponses, GameCenterChallengeVersionsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeVersions/{id}',
            ...options
        });
    }
    
    public static gameCenterChallengeVersionsDefaultImageGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeVersionsDefaultImageGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterChallengeVersionsDefaultImageGetToOneRelationshipResponses, GameCenterChallengeVersionsDefaultImageGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeVersions/{id}/relationships/defaultImage',
            ...options
        });
    }
    
    public static gameCenterChallengeVersionsDefaultImageGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeVersionsDefaultImageGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterChallengeVersionsDefaultImageGetToOneRelatedResponses, GameCenterChallengeVersionsDefaultImageGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeVersions/{id}/defaultImage',
            ...options
        });
    }
    
    public static gameCenterChallengeVersionsLocalizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeVersionsLocalizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterChallengeVersionsLocalizationsGetToManyRelationshipResponses, GameCenterChallengeVersionsLocalizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeVersions/{id}/relationships/localizations',
            ...options
        });
    }
    
    public static gameCenterChallengeVersionsLocalizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengeVersionsLocalizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterChallengeVersionsLocalizationsGetToManyRelatedResponses, GameCenterChallengeVersionsLocalizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallengeVersions/{id}/localizations',
            ...options
        });
    }
}

export class GameCenterChallenges {
    public static gameCenterChallengesCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterChallengesCreateInstanceResponses, GameCenterChallengesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallenges',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterChallengesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterChallengesDeleteInstanceResponses, GameCenterChallengesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallenges/{id}',
            ...options
        });
    }
    
    public static gameCenterChallengesGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterChallengesGetInstanceResponses, GameCenterChallengesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallenges/{id}',
            ...options
        });
    }
    
    public static gameCenterChallengesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterChallengesUpdateInstanceResponses, GameCenterChallengesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallenges/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterChallengesLeaderboardUpdateToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengesLeaderboardUpdateToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterChallengesLeaderboardUpdateToOneRelationshipResponses, GameCenterChallengesLeaderboardUpdateToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallenges/{id}/relationships/leaderboard',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterChallengesVersionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengesVersionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterChallengesVersionsGetToManyRelationshipResponses, GameCenterChallengesVersionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallenges/{id}/relationships/versions',
            ...options
        });
    }
    
    public static gameCenterChallengesVersionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterChallengesVersionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterChallengesVersionsGetToManyRelatedResponses, GameCenterChallengesVersionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterChallenges/{id}/versions',
            ...options
        });
    }
}

export class GameCenterDetails {
    public static gameCenterDetailsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterDetailsCreateInstanceResponses, GameCenterDetailsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterDetailsGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsGetInstanceResponses, GameCenterDetailsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}',
            ...options
        });
    }
    
    public static gameCenterDetailsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterDetailsUpdateInstanceResponses, GameCenterDetailsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterDetailsAchievementReleasesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsAchievementReleasesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsAchievementReleasesGetToManyRelationshipResponses, GameCenterDetailsAchievementReleasesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/relationships/achievementReleases',
            ...options
        });
    }
    
    public static gameCenterDetailsAchievementReleasesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsAchievementReleasesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsAchievementReleasesGetToManyRelatedResponses, GameCenterDetailsAchievementReleasesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/achievementReleases',
            ...options
        });
    }
    
    public static gameCenterDetailsActivityReleasesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsActivityReleasesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsActivityReleasesGetToManyRelationshipResponses, GameCenterDetailsActivityReleasesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/relationships/activityReleases',
            ...options
        });
    }
    
    public static gameCenterDetailsActivityReleasesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsActivityReleasesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsActivityReleasesGetToManyRelatedResponses, GameCenterDetailsActivityReleasesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/activityReleases',
            ...options
        });
    }
    
    public static gameCenterDetailsChallengeReleasesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsChallengeReleasesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsChallengeReleasesGetToManyRelationshipResponses, GameCenterDetailsChallengeReleasesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/relationships/challengeReleases',
            ...options
        });
    }
    
    public static gameCenterDetailsChallengeReleasesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsChallengeReleasesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsChallengeReleasesGetToManyRelatedResponses, GameCenterDetailsChallengeReleasesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/challengeReleases',
            ...options
        });
    }
    
    public static gameCenterDetailsChallengesMinimumPlatformVersionsReplaceToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsChallengesMinimumPlatformVersionsReplaceToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterDetailsChallengesMinimumPlatformVersionsReplaceToManyRelationshipResponses, GameCenterDetailsChallengesMinimumPlatformVersionsReplaceToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/relationships/challengesMinimumPlatformVersions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterDetailsGameCenterAchievementsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterAchievementsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsGameCenterAchievementsGetToManyRelationshipResponses, GameCenterDetailsGameCenterAchievementsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements',
            ...options
        });
    }
    
    public static gameCenterDetailsGameCenterAchievementsReplaceToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipResponses, GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterDetailsGameCenterAchievementsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterAchievementsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsGameCenterAchievementsGetToManyRelatedResponses, GameCenterDetailsGameCenterAchievementsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/gameCenterAchievements',
            ...options
        });
    }
    
    public static gameCenterDetailsGameCenterActivitiesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterActivitiesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsGameCenterActivitiesGetToManyRelationshipResponses, GameCenterDetailsGameCenterActivitiesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/relationships/gameCenterActivities',
            ...options
        });
    }
    
    public static gameCenterDetailsGameCenterActivitiesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterActivitiesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsGameCenterActivitiesGetToManyRelatedResponses, GameCenterDetailsGameCenterActivitiesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/gameCenterActivities',
            ...options
        });
    }
    
    public static gameCenterDetailsGameCenterAppVersionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterAppVersionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsGameCenterAppVersionsGetToManyRelationshipResponses, GameCenterDetailsGameCenterAppVersionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/relationships/gameCenterAppVersions',
            ...options
        });
    }
    
    public static gameCenterDetailsGameCenterAppVersionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterAppVersionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsGameCenterAppVersionsGetToManyRelatedResponses, GameCenterDetailsGameCenterAppVersionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/gameCenterAppVersions',
            ...options
        });
    }
    
    public static gameCenterDetailsGameCenterChallengesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterChallengesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsGameCenterChallengesGetToManyRelationshipResponses, GameCenterDetailsGameCenterChallengesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/relationships/gameCenterChallenges',
            ...options
        });
    }
    
    public static gameCenterDetailsGameCenterChallengesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterChallengesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsGameCenterChallengesGetToManyRelatedResponses, GameCenterDetailsGameCenterChallengesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/gameCenterChallenges',
            ...options
        });
    }
    
    public static gameCenterDetailsGameCenterGroupGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterGroupGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsGameCenterGroupGetToOneRelationshipResponses, GameCenterDetailsGameCenterGroupGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/relationships/gameCenterGroup',
            ...options
        });
    }
    
    public static gameCenterDetailsGameCenterGroupGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterGroupGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsGameCenterGroupGetToOneRelatedResponses, GameCenterDetailsGameCenterGroupGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/gameCenterGroup',
            ...options
        });
    }
    
    public static gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipResponses, GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets',
            ...options
        });
    }
    
    public static gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipResponses, GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedResponses, GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/gameCenterLeaderboardSets',
            ...options
        });
    }
    
    public static gameCenterDetailsGameCenterLeaderboardsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipResponses, GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards',
            ...options
        });
    }
    
    public static gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipResponses, GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterDetailsGameCenterLeaderboardsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedResponses, GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/gameCenterLeaderboards',
            ...options
        });
    }
    
    public static gameCenterDetailsLeaderboardReleasesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsLeaderboardReleasesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsLeaderboardReleasesGetToManyRelationshipResponses, GameCenterDetailsLeaderboardReleasesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/relationships/leaderboardReleases',
            ...options
        });
    }
    
    public static gameCenterDetailsLeaderboardReleasesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsLeaderboardReleasesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsLeaderboardReleasesGetToManyRelatedResponses, GameCenterDetailsLeaderboardReleasesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/leaderboardReleases',
            ...options
        });
    }
    
    public static gameCenterDetailsLeaderboardSetReleasesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsLeaderboardSetReleasesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsLeaderboardSetReleasesGetToManyRelationshipResponses, GameCenterDetailsLeaderboardSetReleasesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/relationships/leaderboardSetReleases',
            ...options
        });
    }
    
    public static gameCenterDetailsLeaderboardSetReleasesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedResponses, GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/leaderboardSetReleases',
            ...options
        });
    }
    
    public static gameCenterDetailsClassicMatchmakingRequestsGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsClassicMatchmakingRequestsGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsClassicMatchmakingRequestsGetMetricsResponses, GameCenterDetailsClassicMatchmakingRequestsGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests',
            ...options
        });
    }
    
    public static gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsResponses, GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests',
            ...options
        });
    }
}

export class GameCenterGroups {
    public static gameCenterGroupsGetCollection<ThrowOnError extends boolean = false>(options?: Options<GameCenterGroupsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<GameCenterGroupsGetCollectionResponses, GameCenterGroupsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups',
            ...options
        });
    }
    
    public static gameCenterGroupsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterGroupsCreateInstanceResponses, GameCenterGroupsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterGroupsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterGroupsDeleteInstanceResponses, GameCenterGroupsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}',
            ...options
        });
    }
    
    public static gameCenterGroupsGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterGroupsGetInstanceResponses, GameCenterGroupsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}',
            ...options
        });
    }
    
    public static gameCenterGroupsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterGroupsUpdateInstanceResponses, GameCenterGroupsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterGroupsGameCenterAchievementsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterAchievementsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterGroupsGameCenterAchievementsGetToManyRelationshipResponses, GameCenterGroupsGameCenterAchievementsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements',
            ...options
        });
    }
    
    public static gameCenterGroupsGameCenterAchievementsReplaceToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipResponses, GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterGroupsGameCenterAchievementsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterAchievementsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterGroupsGameCenterAchievementsGetToManyRelatedResponses, GameCenterGroupsGameCenterAchievementsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}/gameCenterAchievements',
            ...options
        });
    }
    
    public static gameCenterGroupsGameCenterActivitiesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterActivitiesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterGroupsGameCenterActivitiesGetToManyRelationshipResponses, GameCenterGroupsGameCenterActivitiesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}/relationships/gameCenterActivities',
            ...options
        });
    }
    
    public static gameCenterGroupsGameCenterActivitiesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterActivitiesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterGroupsGameCenterActivitiesGetToManyRelatedResponses, GameCenterGroupsGameCenterActivitiesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}/gameCenterActivities',
            ...options
        });
    }
    
    public static gameCenterGroupsGameCenterChallengesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterChallengesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterGroupsGameCenterChallengesGetToManyRelationshipResponses, GameCenterGroupsGameCenterChallengesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}/relationships/gameCenterChallenges',
            ...options
        });
    }
    
    public static gameCenterGroupsGameCenterChallengesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterChallengesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterGroupsGameCenterChallengesGetToManyRelatedResponses, GameCenterGroupsGameCenterChallengesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}/gameCenterChallenges',
            ...options
        });
    }
    
    public static gameCenterGroupsGameCenterDetailsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterDetailsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterGroupsGameCenterDetailsGetToManyRelationshipResponses, GameCenterGroupsGameCenterDetailsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}/relationships/gameCenterDetails',
            ...options
        });
    }
    
    public static gameCenterGroupsGameCenterDetailsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterDetailsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterGroupsGameCenterDetailsGetToManyRelatedResponses, GameCenterGroupsGameCenterDetailsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}/gameCenterDetails',
            ...options
        });
    }
    
    public static gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipResponses, GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets',
            ...options
        });
    }
    
    public static gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipResponses, GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedResponses, GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}/gameCenterLeaderboardSets',
            ...options
        });
    }
    
    public static gameCenterGroupsGameCenterLeaderboardsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipResponses, GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards',
            ...options
        });
    }
    
    public static gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipResponses, GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterGroupsGameCenterLeaderboardsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedResponses, GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterGroups/{id}/gameCenterLeaderboards',
            ...options
        });
    }
}

export class GameCenterLeaderboardEntrySubmissions {
    public static gameCenterLeaderboardEntrySubmissionsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardEntrySubmissionsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterLeaderboardEntrySubmissionsCreateInstanceResponses, GameCenterLeaderboardEntrySubmissionsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardEntrySubmissions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class GameCenterLeaderboardImages {
    public static gameCenterLeaderboardImagesCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardImagesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterLeaderboardImagesCreateInstanceResponses, GameCenterLeaderboardImagesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardImages',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardImagesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardImagesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterLeaderboardImagesDeleteInstanceResponses, GameCenterLeaderboardImagesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardImages/{id}',
            ...options
        });
    }
    
    public static gameCenterLeaderboardImagesGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardImagesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardImagesGetInstanceResponses, GameCenterLeaderboardImagesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardImages/{id}',
            ...options
        });
    }
    
    public static gameCenterLeaderboardImagesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardImagesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterLeaderboardImagesUpdateInstanceResponses, GameCenterLeaderboardImagesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardImages/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class GameCenterLeaderboardLocalizations {
    public static gameCenterLeaderboardLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterLeaderboardLocalizationsCreateInstanceResponses, GameCenterLeaderboardLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterLeaderboardLocalizationsDeleteInstanceResponses, GameCenterLeaderboardLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardLocalizations/{id}',
            ...options
        });
    }
    
    public static gameCenterLeaderboardLocalizationsGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardLocalizationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardLocalizationsGetInstanceResponses, GameCenterLeaderboardLocalizationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardLocalizations/{id}',
            ...options
        });
    }
    
    public static gameCenterLeaderboardLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterLeaderboardLocalizationsUpdateInstanceResponses, GameCenterLeaderboardLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelationshipResponses, GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardLocalizations/{id}/relationships/gameCenterLeaderboardImage',
            ...options
        });
    }
    
    public static gameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedResponses, GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardLocalizations/{id}/gameCenterLeaderboardImage',
            ...options
        });
    }
}

export class GameCenterLeaderboardReleases {
    public static gameCenterLeaderboardReleasesCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardReleasesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterLeaderboardReleasesCreateInstanceResponses, GameCenterLeaderboardReleasesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardReleases',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardReleasesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardReleasesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterLeaderboardReleasesDeleteInstanceResponses, GameCenterLeaderboardReleasesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardReleases/{id}',
            ...options
        });
    }
    
    public static gameCenterLeaderboardReleasesGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardReleasesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardReleasesGetInstanceResponses, GameCenterLeaderboardReleasesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardReleases/{id}',
            ...options
        });
    }
}

export class GameCenterLeaderboardSetImages {
    public static gameCenterLeaderboardSetImagesCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetImagesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterLeaderboardSetImagesCreateInstanceResponses, GameCenterLeaderboardSetImagesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetImages',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardSetImagesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetImagesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterLeaderboardSetImagesDeleteInstanceResponses, GameCenterLeaderboardSetImagesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetImages/{id}',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetImagesGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetImagesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetImagesGetInstanceResponses, GameCenterLeaderboardSetImagesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetImages/{id}',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetImagesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetImagesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterLeaderboardSetImagesUpdateInstanceResponses, GameCenterLeaderboardSetImagesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetImages/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class GameCenterLeaderboardSetLocalizations {
    public static gameCenterLeaderboardSetLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterLeaderboardSetLocalizationsCreateInstanceResponses, GameCenterLeaderboardSetLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardSetLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterLeaderboardSetLocalizationsDeleteInstanceResponses, GameCenterLeaderboardSetLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetLocalizations/{id}',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetLocalizationsGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetLocalizationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetLocalizationsGetInstanceResponses, GameCenterLeaderboardSetLocalizationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetLocalizations/{id}',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterLeaderboardSetLocalizationsUpdateInstanceResponses, GameCenterLeaderboardSetLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelationshipResponses, GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetLocalizations/{id}/relationships/gameCenterLeaderboardSetImage',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedResponses, GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetLocalizations/{id}/gameCenterLeaderboardSetImage',
            ...options
        });
    }
}

export class GameCenterLeaderboardSetMemberLocalizations {
    public static gameCenterLeaderboardSetMemberLocalizationsGetCollection<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetMemberLocalizationsGetCollectionData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetMemberLocalizationsGetCollectionResponses, GameCenterLeaderboardSetMemberLocalizationsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetMemberLocalizations',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetMemberLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetMemberLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterLeaderboardSetMemberLocalizationsCreateInstanceResponses, GameCenterLeaderboardSetMemberLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetMemberLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardSetMemberLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceResponses, GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetMemberLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceResponses, GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelationshipResponses, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/relationships/gameCenterLeaderboard',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedResponses, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboard',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelationshipResponses, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/relationships/gameCenterLeaderboardSet',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedResponses, GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetMemberLocalizations/{id}/gameCenterLeaderboardSet',
            ...options
        });
    }
}

export class GameCenterLeaderboardSetReleases {
    public static gameCenterLeaderboardSetReleasesCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetReleasesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterLeaderboardSetReleasesCreateInstanceResponses, GameCenterLeaderboardSetReleasesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetReleases',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardSetReleasesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetReleasesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterLeaderboardSetReleasesDeleteInstanceResponses, GameCenterLeaderboardSetReleasesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetReleases/{id}',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetReleasesGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetReleasesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetReleasesGetInstanceResponses, GameCenterLeaderboardSetReleasesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSetReleases/{id}',
            ...options
        });
    }
}

export class GameCenterLeaderboardSets {
    public static gameCenterLeaderboardSetsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterLeaderboardSetsCreateInstanceResponses, GameCenterLeaderboardSetsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSets',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardSetsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterLeaderboardSetsDeleteInstanceResponses, GameCenterLeaderboardSetsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSets/{id}',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetsGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetsGetInstanceResponses, GameCenterLeaderboardSetsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSets/{id}',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterLeaderboardSetsUpdateInstanceResponses, GameCenterLeaderboardSetsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSets/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipResponses, GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipResponses, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipResponses, GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipResponses, GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedResponses, GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSets/{id}/gameCenterLeaderboards',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipResponses, GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipResponses, GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * @deprecated
     */
    public static gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedResponses, GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSets/{id}/groupLeaderboardSet',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetsLocalizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsLocalizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetsLocalizationsGetToManyRelationshipResponses, GameCenterLeaderboardSetsLocalizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSets/{id}/relationships/localizations',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetsLocalizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsLocalizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetsLocalizationsGetToManyRelatedResponses, GameCenterLeaderboardSetsLocalizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSets/{id}/localizations',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetsReleasesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsReleasesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetsReleasesGetToManyRelationshipResponses, GameCenterLeaderboardSetsReleasesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSets/{id}/relationships/releases',
            ...options
        });
    }
    
    public static gameCenterLeaderboardSetsReleasesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardSetsReleasesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardSetsReleasesGetToManyRelatedResponses, GameCenterLeaderboardSetsReleasesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboardSets/{id}/releases',
            ...options
        });
    }
}

export class GameCenterLeaderboards {
    public static gameCenterLeaderboardsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterLeaderboardsCreateInstanceResponses, GameCenterLeaderboardsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboards',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterLeaderboardsDeleteInstanceResponses, GameCenterLeaderboardsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboards/{id}',
            ...options
        });
    }
    
    public static gameCenterLeaderboardsGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardsGetInstanceResponses, GameCenterLeaderboardsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboards/{id}',
            ...options
        });
    }
    
    public static gameCenterLeaderboardsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterLeaderboardsUpdateInstanceResponses, GameCenterLeaderboardsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboards/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardsActivityUpdateToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsActivityUpdateToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterLeaderboardsActivityUpdateToOneRelationshipResponses, GameCenterLeaderboardsActivityUpdateToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboards/{id}/relationships/activity',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterLeaderboardsChallengeUpdateToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsChallengeUpdateToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterLeaderboardsChallengeUpdateToOneRelationshipResponses, GameCenterLeaderboardsChallengeUpdateToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboards/{id}/relationships/challenge',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * @deprecated
     */
    public static gameCenterLeaderboardsGroupLeaderboardGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipResponses, GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static gameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipResponses, GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboards/{id}/relationships/groupLeaderboard',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * @deprecated
     */
    public static gameCenterLeaderboardsGroupLeaderboardGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedResponses, GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboards/{id}/groupLeaderboard',
            ...options
        });
    }
    
    public static gameCenterLeaderboardsLocalizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsLocalizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardsLocalizationsGetToManyRelationshipResponses, GameCenterLeaderboardsLocalizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboards/{id}/relationships/localizations',
            ...options
        });
    }
    
    public static gameCenterLeaderboardsLocalizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsLocalizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardsLocalizationsGetToManyRelatedResponses, GameCenterLeaderboardsLocalizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboards/{id}/localizations',
            ...options
        });
    }
    
    public static gameCenterLeaderboardsReleasesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsReleasesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardsReleasesGetToManyRelationshipResponses, GameCenterLeaderboardsReleasesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboards/{id}/relationships/releases',
            ...options
        });
    }
    
    public static gameCenterLeaderboardsReleasesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterLeaderboardsReleasesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterLeaderboardsReleasesGetToManyRelatedResponses, GameCenterLeaderboardsReleasesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterLeaderboards/{id}/releases',
            ...options
        });
    }
}

export class GameCenterMatchmakingQueues {
    public static gameCenterMatchmakingQueuesGetCollection<ThrowOnError extends boolean = false>(options?: Options<GameCenterMatchmakingQueuesGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<GameCenterMatchmakingQueuesGetCollectionResponses, GameCenterMatchmakingQueuesGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingQueues',
            ...options
        });
    }
    
    public static gameCenterMatchmakingQueuesCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterMatchmakingQueuesCreateInstanceResponses, GameCenterMatchmakingQueuesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingQueues',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterMatchmakingQueuesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterMatchmakingQueuesDeleteInstanceResponses, GameCenterMatchmakingQueuesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingQueues/{id}',
            ...options
        });
    }
    
    public static gameCenterMatchmakingQueuesGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingQueuesGetInstanceResponses, GameCenterMatchmakingQueuesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingQueues/{id}',
            ...options
        });
    }
    
    public static gameCenterMatchmakingQueuesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterMatchmakingQueuesUpdateInstanceResponses, GameCenterMatchmakingQueuesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingQueues/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsResponses, GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes',
            ...options
        });
    }
    
    public static gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsResponses, GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests',
            ...options
        });
    }
    
    public static gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsResponses, GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes',
            ...options
        });
    }
    
    public static gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsResponses, GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests',
            ...options
        });
    }
    
    public static gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsResponses, GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions',
            ...options
        });
    }
}

export class GameCenterMatchmakingRuleSetTests {
    public static gameCenterMatchmakingRuleSetTestsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetTestsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterMatchmakingRuleSetTestsCreateInstanceResponses, GameCenterMatchmakingRuleSetTestsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRuleSetTests',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class GameCenterMatchmakingRuleSets {
    public static gameCenterMatchmakingRuleSetsGetCollection<ThrowOnError extends boolean = false>(options?: Options<GameCenterMatchmakingRuleSetsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<GameCenterMatchmakingRuleSetsGetCollectionResponses, GameCenterMatchmakingRuleSetsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRuleSets',
            ...options
        });
    }
    
    public static gameCenterMatchmakingRuleSetsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterMatchmakingRuleSetsCreateInstanceResponses, GameCenterMatchmakingRuleSetsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRuleSets',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterMatchmakingRuleSetsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterMatchmakingRuleSetsDeleteInstanceResponses, GameCenterMatchmakingRuleSetsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRuleSets/{id}',
            ...options
        });
    }
    
    public static gameCenterMatchmakingRuleSetsGetInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingRuleSetsGetInstanceResponses, GameCenterMatchmakingRuleSetsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRuleSets/{id}',
            ...options
        });
    }
    
    public static gameCenterMatchmakingRuleSetsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterMatchmakingRuleSetsUpdateInstanceResponses, GameCenterMatchmakingRuleSetsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRuleSets/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelationshipResponses, GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRuleSets/{id}/relationships/matchmakingQueues',
            ...options
        });
    }
    
    public static gameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedResponses, GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRuleSets/{id}/matchmakingQueues',
            ...options
        });
    }
    
    public static gameCenterMatchmakingRuleSetsRulesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsRulesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingRuleSetsRulesGetToManyRelationshipResponses, GameCenterMatchmakingRuleSetsRulesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRuleSets/{id}/relationships/rules',
            ...options
        });
    }
    
    public static gameCenterMatchmakingRuleSetsRulesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsRulesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingRuleSetsRulesGetToManyRelatedResponses, GameCenterMatchmakingRuleSetsRulesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRuleSets/{id}/rules',
            ...options
        });
    }
    
    public static gameCenterMatchmakingRuleSetsTeamsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsTeamsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingRuleSetsTeamsGetToManyRelationshipResponses, GameCenterMatchmakingRuleSetsTeamsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRuleSets/{id}/relationships/teams',
            ...options
        });
    }
    
    public static gameCenterMatchmakingRuleSetsTeamsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedResponses, GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRuleSets/{id}/teams',
            ...options
        });
    }
}

export class GameCenterMatchmakingRules {
    public static gameCenterMatchmakingRulesCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRulesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterMatchmakingRulesCreateInstanceResponses, GameCenterMatchmakingRulesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRules',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterMatchmakingRulesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRulesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterMatchmakingRulesDeleteInstanceResponses, GameCenterMatchmakingRulesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRules/{id}',
            ...options
        });
    }
    
    public static gameCenterMatchmakingRulesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRulesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterMatchmakingRulesUpdateInstanceResponses, GameCenterMatchmakingRulesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRules/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsResponses, GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults',
            ...options
        });
    }
    
    public static gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsResponses, GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults',
            ...options
        });
    }
    
    public static gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsResponses, GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors',
            ...options
        });
    }
}

export class GameCenterMatchmakingTeams {
    public static gameCenterMatchmakingTeamsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingTeamsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterMatchmakingTeamsCreateInstanceResponses, GameCenterMatchmakingTeamsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingTeams',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static gameCenterMatchmakingTeamsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingTeamsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterMatchmakingTeamsDeleteInstanceResponses, GameCenterMatchmakingTeamsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingTeams/{id}',
            ...options
        });
    }
    
    public static gameCenterMatchmakingTeamsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingTeamsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterMatchmakingTeamsUpdateInstanceResponses, GameCenterMatchmakingTeamsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingTeams/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class GameCenterPlayerAchievementSubmissions {
    public static gameCenterPlayerAchievementSubmissionsCreateInstance<ThrowOnError extends boolean = false>(options: Options<GameCenterPlayerAchievementSubmissionsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterPlayerAchievementSubmissionsCreateInstanceResponses, GameCenterPlayerAchievementSubmissionsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterPlayerAchievementSubmissions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class InAppPurchaseAppStoreReviewScreenshots {
    public static inAppPurchaseAppStoreReviewScreenshotsCreateInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseAppStoreReviewScreenshotsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<InAppPurchaseAppStoreReviewScreenshotsCreateInstanceResponses, InAppPurchaseAppStoreReviewScreenshotsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseAppStoreReviewScreenshots',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static inAppPurchaseAppStoreReviewScreenshotsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceResponses, InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseAppStoreReviewScreenshots/{id}',
            ...options
        });
    }
    
    public static inAppPurchaseAppStoreReviewScreenshotsGetInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseAppStoreReviewScreenshotsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchaseAppStoreReviewScreenshotsGetInstanceResponses, InAppPurchaseAppStoreReviewScreenshotsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseAppStoreReviewScreenshots/{id}',
            ...options
        });
    }
    
    public static inAppPurchaseAppStoreReviewScreenshotsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceResponses, InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseAppStoreReviewScreenshots/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class InAppPurchaseAvailabilities {
    public static inAppPurchaseAvailabilitiesCreateInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseAvailabilitiesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<InAppPurchaseAvailabilitiesCreateInstanceResponses, InAppPurchaseAvailabilitiesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseAvailabilities',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static inAppPurchaseAvailabilitiesGetInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseAvailabilitiesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchaseAvailabilitiesGetInstanceResponses, InAppPurchaseAvailabilitiesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseAvailabilities/{id}',
            ...options
        });
    }
    
    public static inAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelationshipResponses, InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseAvailabilities/{id}/relationships/availableTerritories',
            ...options
        });
    }
    
    public static inAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedResponses, InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseAvailabilities/{id}/availableTerritories',
            ...options
        });
    }
}

export class InAppPurchaseContents {
    public static inAppPurchaseContentsGetInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseContentsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchaseContentsGetInstanceResponses, InAppPurchaseContentsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseContents/{id}',
            ...options
        });
    }
}

export class InAppPurchaseImages {
    public static inAppPurchaseImagesCreateInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseImagesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<InAppPurchaseImagesCreateInstanceResponses, InAppPurchaseImagesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseImages',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static inAppPurchaseImagesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseImagesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<InAppPurchaseImagesDeleteInstanceResponses, InAppPurchaseImagesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseImages/{id}',
            ...options
        });
    }
    
    public static inAppPurchaseImagesGetInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseImagesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchaseImagesGetInstanceResponses, InAppPurchaseImagesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseImages/{id}',
            ...options
        });
    }
    
    public static inAppPurchaseImagesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseImagesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<InAppPurchaseImagesUpdateInstanceResponses, InAppPurchaseImagesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseImages/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class InAppPurchaseLocalizations {
    public static inAppPurchaseLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<InAppPurchaseLocalizationsCreateInstanceResponses, InAppPurchaseLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static inAppPurchaseLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<InAppPurchaseLocalizationsDeleteInstanceResponses, InAppPurchaseLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseLocalizations/{id}',
            ...options
        });
    }
    
    public static inAppPurchaseLocalizationsGetInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseLocalizationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchaseLocalizationsGetInstanceResponses, InAppPurchaseLocalizationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseLocalizations/{id}',
            ...options
        });
    }
    
    public static inAppPurchaseLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<InAppPurchaseLocalizationsUpdateInstanceResponses, InAppPurchaseLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class InAppPurchasePriceSchedules {
    public static inAppPurchasePriceSchedulesCreateInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchasePriceSchedulesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<InAppPurchasePriceSchedulesCreateInstanceResponses, InAppPurchasePriceSchedulesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchasePriceSchedules',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static inAppPurchasePriceSchedulesGetInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchasePriceSchedulesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasePriceSchedulesGetInstanceResponses, InAppPurchasePriceSchedulesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchasePriceSchedules/{id}',
            ...options
        });
    }
    
    public static inAppPurchasePriceSchedulesAutomaticPricesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelationshipResponses, InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchasePriceSchedules/{id}/relationships/automaticPrices',
            ...options
        });
    }
    
    public static inAppPurchasePriceSchedulesAutomaticPricesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedResponses, InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchasePriceSchedules/{id}/automaticPrices',
            ...options
        });
    }
    
    public static inAppPurchasePriceSchedulesBaseTerritoryGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelationshipResponses, InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchasePriceSchedules/{id}/relationships/baseTerritory',
            ...options
        });
    }
    
    public static inAppPurchasePriceSchedulesBaseTerritoryGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedResponses, InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchasePriceSchedules/{id}/baseTerritory',
            ...options
        });
    }
    
    public static inAppPurchasePriceSchedulesManualPricesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<InAppPurchasePriceSchedulesManualPricesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasePriceSchedulesManualPricesGetToManyRelationshipResponses, InAppPurchasePriceSchedulesManualPricesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchasePriceSchedules/{id}/relationships/manualPrices',
            ...options
        });
    }
    
    public static inAppPurchasePriceSchedulesManualPricesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<InAppPurchasePriceSchedulesManualPricesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasePriceSchedulesManualPricesGetToManyRelatedResponses, InAppPurchasePriceSchedulesManualPricesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchasePriceSchedules/{id}/manualPrices',
            ...options
        });
    }
}

export class InAppPurchaseSubmissions {
    public static inAppPurchaseSubmissionsCreateInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchaseSubmissionsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<InAppPurchaseSubmissionsCreateInstanceResponses, InAppPurchaseSubmissionsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchaseSubmissions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class InAppPurchases {
    /**
     * @deprecated
     */
    public static inAppPurchasesGetInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesGetInstanceResponses, InAppPurchasesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchases/{id}',
            ...options
        });
    }
    
    public static inAppPurchasesV2CreateInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2CreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<InAppPurchasesV2CreateInstanceResponses, InAppPurchasesV2CreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static inAppPurchasesV2DeleteInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2DeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<InAppPurchasesV2DeleteInstanceResponses, InAppPurchasesV2DeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}',
            ...options
        });
    }
    
    public static inAppPurchasesV2GetInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2GetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2GetInstanceResponses, InAppPurchasesV2GetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}',
            ...options
        });
    }
    
    public static inAppPurchasesV2UpdateInstance<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2UpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<InAppPurchasesV2UpdateInstanceResponses, InAppPurchasesV2UpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static inAppPurchasesV2AppStoreReviewScreenshotGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelationshipResponses, InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}/relationships/appStoreReviewScreenshot',
            ...options
        });
    }
    
    public static inAppPurchasesV2AppStoreReviewScreenshotGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedResponses, InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}/appStoreReviewScreenshot',
            ...options
        });
    }
    
    public static inAppPurchasesV2ContentGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2ContentGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2ContentGetToOneRelationshipResponses, InAppPurchasesV2ContentGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}/relationships/content',
            ...options
        });
    }
    
    public static inAppPurchasesV2ContentGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2ContentGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2ContentGetToOneRelatedResponses, InAppPurchasesV2ContentGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}/content',
            ...options
        });
    }
    
    public static inAppPurchasesV2IapPriceScheduleGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2IapPriceScheduleGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2IapPriceScheduleGetToOneRelationshipResponses, InAppPurchasesV2IapPriceScheduleGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}/relationships/iapPriceSchedule',
            ...options
        });
    }
    
    public static inAppPurchasesV2IapPriceScheduleGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2IapPriceScheduleGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2IapPriceScheduleGetToOneRelatedResponses, InAppPurchasesV2IapPriceScheduleGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}/iapPriceSchedule',
            ...options
        });
    }
    
    public static inAppPurchasesV2ImagesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2ImagesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2ImagesGetToManyRelationshipResponses, InAppPurchasesV2ImagesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}/relationships/images',
            ...options
        });
    }
    
    public static inAppPurchasesV2ImagesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2ImagesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2ImagesGetToManyRelatedResponses, InAppPurchasesV2ImagesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}/images',
            ...options
        });
    }
    
    public static inAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelationshipResponses, InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}/relationships/inAppPurchaseAvailability',
            ...options
        });
    }
    
    public static inAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedResponses, InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}/inAppPurchaseAvailability',
            ...options
        });
    }
    
    public static inAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelationshipResponses, InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}/relationships/inAppPurchaseLocalizations',
            ...options
        });
    }
    
    public static inAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedResponses, InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}/inAppPurchaseLocalizations',
            ...options
        });
    }
    
    public static inAppPurchasesV2PricePointsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2PricePointsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2PricePointsGetToManyRelationshipResponses, InAppPurchasesV2PricePointsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}/relationships/pricePoints',
            ...options
        });
    }
    
    public static inAppPurchasesV2PricePointsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2PricePointsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2PricePointsGetToManyRelatedResponses, InAppPurchasesV2PricePointsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}/pricePoints',
            ...options
        });
    }
    
    public static inAppPurchasesV2PromotedPurchaseGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2PromotedPurchaseGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2PromotedPurchaseGetToOneRelationshipResponses, InAppPurchasesV2PromotedPurchaseGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}/relationships/promotedPurchase',
            ...options
        });
    }
    
    public static inAppPurchasesV2PromotedPurchaseGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<InAppPurchasesV2PromotedPurchaseGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasesV2PromotedPurchaseGetToOneRelatedResponses, InAppPurchasesV2PromotedPurchaseGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/inAppPurchases/{id}/promotedPurchase',
            ...options
        });
    }
}

export class MarketplaceSearchDetails {
    public static marketplaceSearchDetailsCreateInstance<ThrowOnError extends boolean = false>(options: Options<MarketplaceSearchDetailsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<MarketplaceSearchDetailsCreateInstanceResponses, MarketplaceSearchDetailsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/marketplaceSearchDetails',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static marketplaceSearchDetailsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<MarketplaceSearchDetailsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<MarketplaceSearchDetailsDeleteInstanceResponses, MarketplaceSearchDetailsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/marketplaceSearchDetails/{id}',
            ...options
        });
    }
    
    public static marketplaceSearchDetailsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<MarketplaceSearchDetailsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<MarketplaceSearchDetailsUpdateInstanceResponses, MarketplaceSearchDetailsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/marketplaceSearchDetails/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class MarketplaceWebhooks {
    /**
     * @deprecated
     */
    public static marketplaceWebhooksGetCollection<ThrowOnError extends boolean = false>(options?: Options<MarketplaceWebhooksGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<MarketplaceWebhooksGetCollectionResponses, MarketplaceWebhooksGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/marketplaceWebhooks',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static marketplaceWebhooksCreateInstance<ThrowOnError extends boolean = false>(options: Options<MarketplaceWebhooksCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<MarketplaceWebhooksCreateInstanceResponses, MarketplaceWebhooksCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/marketplaceWebhooks',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * @deprecated
     */
    public static marketplaceWebhooksDeleteInstance<ThrowOnError extends boolean = false>(options: Options<MarketplaceWebhooksDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<MarketplaceWebhooksDeleteInstanceResponses, MarketplaceWebhooksDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/marketplaceWebhooks/{id}',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static marketplaceWebhooksUpdateInstance<ThrowOnError extends boolean = false>(options: Options<MarketplaceWebhooksUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<MarketplaceWebhooksUpdateInstanceResponses, MarketplaceWebhooksUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/marketplaceWebhooks/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class MerchantIds {
    public static merchantIdsGetCollection<ThrowOnError extends boolean = false>(options?: Options<MerchantIdsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<MerchantIdsGetCollectionResponses, MerchantIdsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/merchantIds',
            ...options
        });
    }
    
    public static merchantIdsCreateInstance<ThrowOnError extends boolean = false>(options: Options<MerchantIdsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<MerchantIdsCreateInstanceResponses, MerchantIdsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/merchantIds',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static merchantIdsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<MerchantIdsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<MerchantIdsDeleteInstanceResponses, MerchantIdsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/merchantIds/{id}',
            ...options
        });
    }
    
    public static merchantIdsGetInstance<ThrowOnError extends boolean = false>(options: Options<MerchantIdsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<MerchantIdsGetInstanceResponses, MerchantIdsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/merchantIds/{id}',
            ...options
        });
    }
    
    public static merchantIdsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<MerchantIdsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<MerchantIdsUpdateInstanceResponses, MerchantIdsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/merchantIds/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static merchantIdsCertificatesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<MerchantIdsCertificatesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<MerchantIdsCertificatesGetToManyRelationshipResponses, MerchantIdsCertificatesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/merchantIds/{id}/relationships/certificates',
            ...options
        });
    }
    
    public static merchantIdsCertificatesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<MerchantIdsCertificatesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<MerchantIdsCertificatesGetToManyRelatedResponses, MerchantIdsCertificatesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/merchantIds/{id}/certificates',
            ...options
        });
    }
}

export class Nominations {
    public static nominationsGetCollection<ThrowOnError extends boolean = false>(options: Options<NominationsGetCollectionData, ThrowOnError>) {
        return (options.client ?? client).get<NominationsGetCollectionResponses, NominationsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/nominations',
            ...options
        });
    }
    
    public static nominationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<NominationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<NominationsCreateInstanceResponses, NominationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/nominations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static nominationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<NominationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<NominationsDeleteInstanceResponses, NominationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/nominations/{id}',
            ...options
        });
    }
    
    public static nominationsGetInstance<ThrowOnError extends boolean = false>(options: Options<NominationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<NominationsGetInstanceResponses, NominationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/nominations/{id}',
            ...options
        });
    }
    
    public static nominationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<NominationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<NominationsUpdateInstanceResponses, NominationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/nominations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class PassTypeIds {
    public static passTypeIdsGetCollection<ThrowOnError extends boolean = false>(options?: Options<PassTypeIdsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<PassTypeIdsGetCollectionResponses, PassTypeIdsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/passTypeIds',
            ...options
        });
    }
    
    public static passTypeIdsCreateInstance<ThrowOnError extends boolean = false>(options: Options<PassTypeIdsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<PassTypeIdsCreateInstanceResponses, PassTypeIdsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/passTypeIds',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static passTypeIdsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<PassTypeIdsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<PassTypeIdsDeleteInstanceResponses, PassTypeIdsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/passTypeIds/{id}',
            ...options
        });
    }
    
    public static passTypeIdsGetInstance<ThrowOnError extends boolean = false>(options: Options<PassTypeIdsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<PassTypeIdsGetInstanceResponses, PassTypeIdsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/passTypeIds/{id}',
            ...options
        });
    }
    
    public static passTypeIdsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<PassTypeIdsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<PassTypeIdsUpdateInstanceResponses, PassTypeIdsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/passTypeIds/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static passTypeIdsCertificatesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<PassTypeIdsCertificatesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<PassTypeIdsCertificatesGetToManyRelationshipResponses, PassTypeIdsCertificatesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/passTypeIds/{id}/relationships/certificates',
            ...options
        });
    }
    
    public static passTypeIdsCertificatesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<PassTypeIdsCertificatesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<PassTypeIdsCertificatesGetToManyRelatedResponses, PassTypeIdsCertificatesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/passTypeIds/{id}/certificates',
            ...options
        });
    }
}

export class PreReleaseVersions {
    public static preReleaseVersionsGetCollection<ThrowOnError extends boolean = false>(options?: Options<PreReleaseVersionsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<PreReleaseVersionsGetCollectionResponses, PreReleaseVersionsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/preReleaseVersions',
            ...options
        });
    }
    
    public static preReleaseVersionsGetInstance<ThrowOnError extends boolean = false>(options: Options<PreReleaseVersionsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<PreReleaseVersionsGetInstanceResponses, PreReleaseVersionsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/preReleaseVersions/{id}',
            ...options
        });
    }
    
    public static preReleaseVersionsAppGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<PreReleaseVersionsAppGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<PreReleaseVersionsAppGetToOneRelationshipResponses, PreReleaseVersionsAppGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/preReleaseVersions/{id}/relationships/app',
            ...options
        });
    }
    
    public static preReleaseVersionsAppGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<PreReleaseVersionsAppGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<PreReleaseVersionsAppGetToOneRelatedResponses, PreReleaseVersionsAppGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/preReleaseVersions/{id}/app',
            ...options
        });
    }
    
    public static preReleaseVersionsBuildsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<PreReleaseVersionsBuildsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<PreReleaseVersionsBuildsGetToManyRelationshipResponses, PreReleaseVersionsBuildsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/preReleaseVersions/{id}/relationships/builds',
            ...options
        });
    }
    
    public static preReleaseVersionsBuildsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<PreReleaseVersionsBuildsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<PreReleaseVersionsBuildsGetToManyRelatedResponses, PreReleaseVersionsBuildsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/preReleaseVersions/{id}/builds',
            ...options
        });
    }
}

export class Profiles {
    public static profilesGetCollection<ThrowOnError extends boolean = false>(options?: Options<ProfilesGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<ProfilesGetCollectionResponses, ProfilesGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/profiles',
            ...options
        });
    }
    
    public static profilesCreateInstance<ThrowOnError extends boolean = false>(options: Options<ProfilesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<ProfilesCreateInstanceResponses, ProfilesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/profiles',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static profilesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<ProfilesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<ProfilesDeleteInstanceResponses, ProfilesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/profiles/{id}',
            ...options
        });
    }
    
    public static profilesGetInstance<ThrowOnError extends boolean = false>(options: Options<ProfilesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<ProfilesGetInstanceResponses, ProfilesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/profiles/{id}',
            ...options
        });
    }
    
    public static profilesBundleIdGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<ProfilesBundleIdGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<ProfilesBundleIdGetToOneRelationshipResponses, ProfilesBundleIdGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/profiles/{id}/relationships/bundleId',
            ...options
        });
    }
    
    public static profilesBundleIdGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<ProfilesBundleIdGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<ProfilesBundleIdGetToOneRelatedResponses, ProfilesBundleIdGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/profiles/{id}/bundleId',
            ...options
        });
    }
    
    public static profilesCertificatesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<ProfilesCertificatesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<ProfilesCertificatesGetToManyRelationshipResponses, ProfilesCertificatesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/profiles/{id}/relationships/certificates',
            ...options
        });
    }
    
    public static profilesCertificatesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<ProfilesCertificatesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<ProfilesCertificatesGetToManyRelatedResponses, ProfilesCertificatesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/profiles/{id}/certificates',
            ...options
        });
    }
    
    public static profilesDevicesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<ProfilesDevicesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<ProfilesDevicesGetToManyRelationshipResponses, ProfilesDevicesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/profiles/{id}/relationships/devices',
            ...options
        });
    }
    
    public static profilesDevicesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<ProfilesDevicesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<ProfilesDevicesGetToManyRelatedResponses, ProfilesDevicesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/profiles/{id}/devices',
            ...options
        });
    }
}

export class PromotedPurchases {
    public static promotedPurchasesCreateInstance<ThrowOnError extends boolean = false>(options: Options<PromotedPurchasesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<PromotedPurchasesCreateInstanceResponses, PromotedPurchasesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/promotedPurchases',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static promotedPurchasesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<PromotedPurchasesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<PromotedPurchasesDeleteInstanceResponses, PromotedPurchasesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/promotedPurchases/{id}',
            ...options
        });
    }
    
    public static promotedPurchasesGetInstance<ThrowOnError extends boolean = false>(options: Options<PromotedPurchasesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<PromotedPurchasesGetInstanceResponses, PromotedPurchasesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/promotedPurchases/{id}',
            ...options
        });
    }
    
    public static promotedPurchasesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<PromotedPurchasesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<PromotedPurchasesUpdateInstanceResponses, PromotedPurchasesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/promotedPurchases/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class ReviewSubmissionItems {
    public static reviewSubmissionItemsCreateInstance<ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionItemsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<ReviewSubmissionItemsCreateInstanceResponses, ReviewSubmissionItemsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/reviewSubmissionItems',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static reviewSubmissionItemsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionItemsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<ReviewSubmissionItemsDeleteInstanceResponses, ReviewSubmissionItemsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/reviewSubmissionItems/{id}',
            ...options
        });
    }
    
    public static reviewSubmissionItemsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionItemsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<ReviewSubmissionItemsUpdateInstanceResponses, ReviewSubmissionItemsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/reviewSubmissionItems/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class ReviewSubmissions {
    public static reviewSubmissionsGetCollection<ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionsGetCollectionData, ThrowOnError>) {
        return (options.client ?? client).get<ReviewSubmissionsGetCollectionResponses, ReviewSubmissionsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/reviewSubmissions',
            ...options
        });
    }
    
    public static reviewSubmissionsCreateInstance<ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<ReviewSubmissionsCreateInstanceResponses, ReviewSubmissionsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/reviewSubmissions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static reviewSubmissionsGetInstance<ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<ReviewSubmissionsGetInstanceResponses, ReviewSubmissionsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/reviewSubmissions/{id}',
            ...options
        });
    }
    
    public static reviewSubmissionsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<ReviewSubmissionsUpdateInstanceResponses, ReviewSubmissionsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/reviewSubmissions/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static reviewSubmissionsItemsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionsItemsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<ReviewSubmissionsItemsGetToManyRelationshipResponses, ReviewSubmissionsItemsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/reviewSubmissions/{id}/relationships/items',
            ...options
        });
    }
    
    public static reviewSubmissionsItemsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<ReviewSubmissionsItemsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<ReviewSubmissionsItemsGetToManyRelatedResponses, ReviewSubmissionsItemsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/reviewSubmissions/{id}/items',
            ...options
        });
    }
}

export class RoutingAppCoverages {
    public static routingAppCoveragesCreateInstance<ThrowOnError extends boolean = false>(options: Options<RoutingAppCoveragesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<RoutingAppCoveragesCreateInstanceResponses, RoutingAppCoveragesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/routingAppCoverages',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static routingAppCoveragesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<RoutingAppCoveragesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<RoutingAppCoveragesDeleteInstanceResponses, RoutingAppCoveragesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/routingAppCoverages/{id}',
            ...options
        });
    }
    
    public static routingAppCoveragesGetInstance<ThrowOnError extends boolean = false>(options: Options<RoutingAppCoveragesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<RoutingAppCoveragesGetInstanceResponses, RoutingAppCoveragesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/routingAppCoverages/{id}',
            ...options
        });
    }
    
    public static routingAppCoveragesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<RoutingAppCoveragesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<RoutingAppCoveragesUpdateInstanceResponses, RoutingAppCoveragesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/routingAppCoverages/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class SalesReports {
    public static salesReportsGetCollection<ThrowOnError extends boolean = false>(options: Options<SalesReportsGetCollectionData, ThrowOnError>) {
        return (options.client ?? client).get<SalesReportsGetCollectionResponses, SalesReportsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/salesReports',
            ...options
        });
    }
}

export class SandboxTesters {
    public static sandboxTestersV2GetCollection<ThrowOnError extends boolean = false>(options?: Options<SandboxTestersV2GetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<SandboxTestersV2GetCollectionResponses, SandboxTestersV2GetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/sandboxTesters',
            ...options
        });
    }
    
    public static sandboxTestersV2UpdateInstance<ThrowOnError extends boolean = false>(options: Options<SandboxTestersV2UpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<SandboxTestersV2UpdateInstanceResponses, SandboxTestersV2UpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/sandboxTesters/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class SandboxTestersClearPurchaseHistoryRequest {
    public static sandboxTestersClearPurchaseHistoryRequestV2CreateInstance<ThrowOnError extends boolean = false>(options: Options<SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceResponses, SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v2/sandboxTestersClearPurchaseHistoryRequest',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class ScmGitReferences {
    public static scmGitReferencesGetInstance<ThrowOnError extends boolean = false>(options: Options<ScmGitReferencesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<ScmGitReferencesGetInstanceResponses, ScmGitReferencesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/scmGitReferences/{id}',
            ...options
        });
    }
}

export class ScmProviders {
    public static scmProvidersGetCollection<ThrowOnError extends boolean = false>(options?: Options<ScmProvidersGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<ScmProvidersGetCollectionResponses, ScmProvidersGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/scmProviders',
            ...options
        });
    }
    
    public static scmProvidersGetInstance<ThrowOnError extends boolean = false>(options: Options<ScmProvidersGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<ScmProvidersGetInstanceResponses, ScmProvidersGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/scmProviders/{id}',
            ...options
        });
    }
    
    public static scmProvidersRepositoriesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<ScmProvidersRepositoriesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<ScmProvidersRepositoriesGetToManyRelationshipResponses, ScmProvidersRepositoriesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/scmProviders/{id}/relationships/repositories',
            ...options
        });
    }
    
    public static scmProvidersRepositoriesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<ScmProvidersRepositoriesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<ScmProvidersRepositoriesGetToManyRelatedResponses, ScmProvidersRepositoriesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/scmProviders/{id}/repositories',
            ...options
        });
    }
}

export class ScmPullRequests {
    public static scmPullRequestsGetInstance<ThrowOnError extends boolean = false>(options: Options<ScmPullRequestsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<ScmPullRequestsGetInstanceResponses, ScmPullRequestsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/scmPullRequests/{id}',
            ...options
        });
    }
}

export class ScmRepositories {
    public static scmRepositoriesGetCollection<ThrowOnError extends boolean = false>(options?: Options<ScmRepositoriesGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<ScmRepositoriesGetCollectionResponses, ScmRepositoriesGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/scmRepositories',
            ...options
        });
    }
    
    public static scmRepositoriesGetInstance<ThrowOnError extends boolean = false>(options: Options<ScmRepositoriesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<ScmRepositoriesGetInstanceResponses, ScmRepositoriesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/scmRepositories/{id}',
            ...options
        });
    }
    
    public static scmRepositoriesGitReferencesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<ScmRepositoriesGitReferencesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<ScmRepositoriesGitReferencesGetToManyRelationshipResponses, ScmRepositoriesGitReferencesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/scmRepositories/{id}/relationships/gitReferences',
            ...options
        });
    }
    
    public static scmRepositoriesGitReferencesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<ScmRepositoriesGitReferencesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<ScmRepositoriesGitReferencesGetToManyRelatedResponses, ScmRepositoriesGitReferencesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/scmRepositories/{id}/gitReferences',
            ...options
        });
    }
    
    public static scmRepositoriesPullRequestsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<ScmRepositoriesPullRequestsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<ScmRepositoriesPullRequestsGetToManyRelationshipResponses, ScmRepositoriesPullRequestsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/scmRepositories/{id}/relationships/pullRequests',
            ...options
        });
    }
    
    public static scmRepositoriesPullRequestsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<ScmRepositoriesPullRequestsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<ScmRepositoriesPullRequestsGetToManyRelatedResponses, ScmRepositoriesPullRequestsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/scmRepositories/{id}/pullRequests',
            ...options
        });
    }
}

export class SubscriptionAppStoreReviewScreenshots {
    public static subscriptionAppStoreReviewScreenshotsCreateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionAppStoreReviewScreenshotsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<SubscriptionAppStoreReviewScreenshotsCreateInstanceResponses, SubscriptionAppStoreReviewScreenshotsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionAppStoreReviewScreenshots',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionAppStoreReviewScreenshotsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionAppStoreReviewScreenshotsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<SubscriptionAppStoreReviewScreenshotsDeleteInstanceResponses, SubscriptionAppStoreReviewScreenshotsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionAppStoreReviewScreenshots/{id}',
            ...options
        });
    }
    
    public static subscriptionAppStoreReviewScreenshotsGetInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionAppStoreReviewScreenshotsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionAppStoreReviewScreenshotsGetInstanceResponses, SubscriptionAppStoreReviewScreenshotsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionAppStoreReviewScreenshots/{id}',
            ...options
        });
    }
    
    public static subscriptionAppStoreReviewScreenshotsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionAppStoreReviewScreenshotsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<SubscriptionAppStoreReviewScreenshotsUpdateInstanceResponses, SubscriptionAppStoreReviewScreenshotsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionAppStoreReviewScreenshots/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class SubscriptionAvailabilities {
    public static subscriptionAvailabilitiesCreateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionAvailabilitiesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<SubscriptionAvailabilitiesCreateInstanceResponses, SubscriptionAvailabilitiesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionAvailabilities',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionAvailabilitiesGetInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionAvailabilitiesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionAvailabilitiesGetInstanceResponses, SubscriptionAvailabilitiesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionAvailabilities/{id}',
            ...options
        });
    }
    
    public static subscriptionAvailabilitiesAvailableTerritoriesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelationshipResponses, SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionAvailabilities/{id}/relationships/availableTerritories',
            ...options
        });
    }
    
    public static subscriptionAvailabilitiesAvailableTerritoriesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedResponses, SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionAvailabilities/{id}/availableTerritories',
            ...options
        });
    }
}

export class SubscriptionGracePeriods {
    public static subscriptionGracePeriodsGetInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionGracePeriodsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionGracePeriodsGetInstanceResponses, SubscriptionGracePeriodsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionGracePeriods/{id}',
            ...options
        });
    }
    
    public static subscriptionGracePeriodsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionGracePeriodsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<SubscriptionGracePeriodsUpdateInstanceResponses, SubscriptionGracePeriodsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionGracePeriods/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class SubscriptionGroupLocalizations {
    public static subscriptionGroupLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<SubscriptionGroupLocalizationsCreateInstanceResponses, SubscriptionGroupLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionGroupLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionGroupLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<SubscriptionGroupLocalizationsDeleteInstanceResponses, SubscriptionGroupLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionGroupLocalizations/{id}',
            ...options
        });
    }
    
    public static subscriptionGroupLocalizationsGetInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupLocalizationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionGroupLocalizationsGetInstanceResponses, SubscriptionGroupLocalizationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionGroupLocalizations/{id}',
            ...options
        });
    }
    
    public static subscriptionGroupLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<SubscriptionGroupLocalizationsUpdateInstanceResponses, SubscriptionGroupLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionGroupLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class SubscriptionGroupSubmissions {
    public static subscriptionGroupSubmissionsCreateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupSubmissionsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<SubscriptionGroupSubmissionsCreateInstanceResponses, SubscriptionGroupSubmissionsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionGroupSubmissions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class SubscriptionGroups {
    public static subscriptionGroupsCreateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<SubscriptionGroupsCreateInstanceResponses, SubscriptionGroupsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionGroups',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionGroupsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<SubscriptionGroupsDeleteInstanceResponses, SubscriptionGroupsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionGroups/{id}',
            ...options
        });
    }
    
    public static subscriptionGroupsGetInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionGroupsGetInstanceResponses, SubscriptionGroupsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionGroups/{id}',
            ...options
        });
    }
    
    public static subscriptionGroupsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<SubscriptionGroupsUpdateInstanceResponses, SubscriptionGroupsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionGroups/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelationshipResponses, SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionGroups/{id}/relationships/subscriptionGroupLocalizations',
            ...options
        });
    }
    
    public static subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedResponses, SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionGroups/{id}/subscriptionGroupLocalizations',
            ...options
        });
    }
    
    public static subscriptionGroupsSubscriptionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupsSubscriptionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionGroupsSubscriptionsGetToManyRelationshipResponses, SubscriptionGroupsSubscriptionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionGroups/{id}/relationships/subscriptions',
            ...options
        });
    }
    
    public static subscriptionGroupsSubscriptionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionGroupsSubscriptionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionGroupsSubscriptionsGetToManyRelatedResponses, SubscriptionGroupsSubscriptionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionGroups/{id}/subscriptions',
            ...options
        });
    }
}

export class SubscriptionImages {
    public static subscriptionImagesCreateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionImagesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<SubscriptionImagesCreateInstanceResponses, SubscriptionImagesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionImages',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionImagesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionImagesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<SubscriptionImagesDeleteInstanceResponses, SubscriptionImagesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionImages/{id}',
            ...options
        });
    }
    
    public static subscriptionImagesGetInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionImagesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionImagesGetInstanceResponses, SubscriptionImagesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionImages/{id}',
            ...options
        });
    }
    
    public static subscriptionImagesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionImagesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<SubscriptionImagesUpdateInstanceResponses, SubscriptionImagesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionImages/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class SubscriptionIntroductoryOffers {
    public static subscriptionIntroductoryOffersCreateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionIntroductoryOffersCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<SubscriptionIntroductoryOffersCreateInstanceResponses, SubscriptionIntroductoryOffersCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionIntroductoryOffers',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionIntroductoryOffersDeleteInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionIntroductoryOffersDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<SubscriptionIntroductoryOffersDeleteInstanceResponses, SubscriptionIntroductoryOffersDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionIntroductoryOffers/{id}',
            ...options
        });
    }
    
    public static subscriptionIntroductoryOffersUpdateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionIntroductoryOffersUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<SubscriptionIntroductoryOffersUpdateInstanceResponses, SubscriptionIntroductoryOffersUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionIntroductoryOffers/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class SubscriptionLocalizations {
    public static subscriptionLocalizationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionLocalizationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<SubscriptionLocalizationsCreateInstanceResponses, SubscriptionLocalizationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionLocalizations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionLocalizationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionLocalizationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<SubscriptionLocalizationsDeleteInstanceResponses, SubscriptionLocalizationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionLocalizations/{id}',
            ...options
        });
    }
    
    public static subscriptionLocalizationsGetInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionLocalizationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionLocalizationsGetInstanceResponses, SubscriptionLocalizationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionLocalizations/{id}',
            ...options
        });
    }
    
    public static subscriptionLocalizationsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionLocalizationsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<SubscriptionLocalizationsUpdateInstanceResponses, SubscriptionLocalizationsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionLocalizations/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class SubscriptionOfferCodeCustomCodes {
    public static subscriptionOfferCodeCustomCodesCreateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodeCustomCodesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<SubscriptionOfferCodeCustomCodesCreateInstanceResponses, SubscriptionOfferCodeCustomCodesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionOfferCodeCustomCodes',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionOfferCodeCustomCodesGetInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodeCustomCodesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionOfferCodeCustomCodesGetInstanceResponses, SubscriptionOfferCodeCustomCodesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionOfferCodeCustomCodes/{id}',
            ...options
        });
    }
    
    public static subscriptionOfferCodeCustomCodesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodeCustomCodesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<SubscriptionOfferCodeCustomCodesUpdateInstanceResponses, SubscriptionOfferCodeCustomCodesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionOfferCodeCustomCodes/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class SubscriptionOfferCodeOneTimeUseCodes {
    public static subscriptionOfferCodeOneTimeUseCodesCreateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodeOneTimeUseCodesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<SubscriptionOfferCodeOneTimeUseCodesCreateInstanceResponses, SubscriptionOfferCodeOneTimeUseCodesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionOfferCodeOneTimeUseCodes',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionOfferCodeOneTimeUseCodesGetInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodeOneTimeUseCodesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionOfferCodeOneTimeUseCodesGetInstanceResponses, SubscriptionOfferCodeOneTimeUseCodesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionOfferCodeOneTimeUseCodes/{id}',
            ...options
        });
    }
    
    public static subscriptionOfferCodeOneTimeUseCodesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceResponses, SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionOfferCodeOneTimeUseCodes/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedResponses, SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionOfferCodeOneTimeUseCodes/{id}/values',
            ...options
        });
    }
}

export class SubscriptionOfferCodes {
    public static subscriptionOfferCodesCreateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<SubscriptionOfferCodesCreateInstanceResponses, SubscriptionOfferCodesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionOfferCodes',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionOfferCodesGetInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodesGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionOfferCodesGetInstanceResponses, SubscriptionOfferCodesGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionOfferCodes/{id}',
            ...options
        });
    }
    
    public static subscriptionOfferCodesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<SubscriptionOfferCodesUpdateInstanceResponses, SubscriptionOfferCodesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionOfferCodes/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionOfferCodesCustomCodesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodesCustomCodesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionOfferCodesCustomCodesGetToManyRelationshipResponses, SubscriptionOfferCodesCustomCodesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionOfferCodes/{id}/relationships/customCodes',
            ...options
        });
    }
    
    public static subscriptionOfferCodesCustomCodesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodesCustomCodesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionOfferCodesCustomCodesGetToManyRelatedResponses, SubscriptionOfferCodesCustomCodesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionOfferCodes/{id}/customCodes',
            ...options
        });
    }
    
    public static subscriptionOfferCodesOneTimeUseCodesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodesOneTimeUseCodesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionOfferCodesOneTimeUseCodesGetToManyRelationshipResponses, SubscriptionOfferCodesOneTimeUseCodesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionOfferCodes/{id}/relationships/oneTimeUseCodes',
            ...options
        });
    }
    
    public static subscriptionOfferCodesOneTimeUseCodesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedResponses, SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionOfferCodes/{id}/oneTimeUseCodes',
            ...options
        });
    }
    
    public static subscriptionOfferCodesPricesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodesPricesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionOfferCodesPricesGetToManyRelationshipResponses, SubscriptionOfferCodesPricesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionOfferCodes/{id}/relationships/prices',
            ...options
        });
    }
    
    public static subscriptionOfferCodesPricesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionOfferCodesPricesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionOfferCodesPricesGetToManyRelatedResponses, SubscriptionOfferCodesPricesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionOfferCodes/{id}/prices',
            ...options
        });
    }
}

export class SubscriptionPricePoints {
    public static subscriptionPricePointsGetInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionPricePointsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionPricePointsGetInstanceResponses, SubscriptionPricePointsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionPricePoints/{id}',
            ...options
        });
    }
    
    public static subscriptionPricePointsEqualizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionPricePointsEqualizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionPricePointsEqualizationsGetToManyRelationshipResponses, SubscriptionPricePointsEqualizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionPricePoints/{id}/relationships/equalizations',
            ...options
        });
    }
    
    public static subscriptionPricePointsEqualizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionPricePointsEqualizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionPricePointsEqualizationsGetToManyRelatedResponses, SubscriptionPricePointsEqualizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionPricePoints/{id}/equalizations',
            ...options
        });
    }
}

export class SubscriptionPrices {
    public static subscriptionPricesCreateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionPricesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<SubscriptionPricesCreateInstanceResponses, SubscriptionPricesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionPrices',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionPricesDeleteInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionPricesDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<SubscriptionPricesDeleteInstanceResponses, SubscriptionPricesDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionPrices/{id}',
            ...options
        });
    }
}

export class SubscriptionPromotionalOffers {
    public static subscriptionPromotionalOffersCreateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionPromotionalOffersCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<SubscriptionPromotionalOffersCreateInstanceResponses, SubscriptionPromotionalOffersCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionPromotionalOffers',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionPromotionalOffersDeleteInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionPromotionalOffersDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<SubscriptionPromotionalOffersDeleteInstanceResponses, SubscriptionPromotionalOffersDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionPromotionalOffers/{id}',
            ...options
        });
    }
    
    public static subscriptionPromotionalOffersGetInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionPromotionalOffersGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionPromotionalOffersGetInstanceResponses, SubscriptionPromotionalOffersGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionPromotionalOffers/{id}',
            ...options
        });
    }
    
    public static subscriptionPromotionalOffersUpdateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionPromotionalOffersUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<SubscriptionPromotionalOffersUpdateInstanceResponses, SubscriptionPromotionalOffersUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionPromotionalOffers/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionPromotionalOffersPricesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionPromotionalOffersPricesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionPromotionalOffersPricesGetToManyRelationshipResponses, SubscriptionPromotionalOffersPricesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionPromotionalOffers/{id}/relationships/prices',
            ...options
        });
    }
    
    public static subscriptionPromotionalOffersPricesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionPromotionalOffersPricesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionPromotionalOffersPricesGetToManyRelatedResponses, SubscriptionPromotionalOffersPricesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionPromotionalOffers/{id}/prices',
            ...options
        });
    }
}

export class SubscriptionSubmissions {
    public static subscriptionSubmissionsCreateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionSubmissionsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<SubscriptionSubmissionsCreateInstanceResponses, SubscriptionSubmissionsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptionSubmissions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class Subscriptions {
    public static subscriptionsCreateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<SubscriptionsCreateInstanceResponses, SubscriptionsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<SubscriptionsDeleteInstanceResponses, SubscriptionsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}',
            ...options
        });
    }
    
    public static subscriptionsGetInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsGetInstanceResponses, SubscriptionsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}',
            ...options
        });
    }
    
    public static subscriptionsUpdateInstance<ThrowOnError extends boolean = false>(options: Options<SubscriptionsUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<SubscriptionsUpdateInstanceResponses, SubscriptionsUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionsAppStoreReviewScreenshotGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionsAppStoreReviewScreenshotGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsAppStoreReviewScreenshotGetToOneRelationshipResponses, SubscriptionsAppStoreReviewScreenshotGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/relationships/appStoreReviewScreenshot',
            ...options
        });
    }
    
    public static subscriptionsAppStoreReviewScreenshotGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionsAppStoreReviewScreenshotGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsAppStoreReviewScreenshotGetToOneRelatedResponses, SubscriptionsAppStoreReviewScreenshotGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/appStoreReviewScreenshot',
            ...options
        });
    }
    
    public static subscriptionsImagesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionsImagesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsImagesGetToManyRelationshipResponses, SubscriptionsImagesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/relationships/images',
            ...options
        });
    }
    
    public static subscriptionsImagesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionsImagesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsImagesGetToManyRelatedResponses, SubscriptionsImagesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/images',
            ...options
        });
    }
    
    public static subscriptionsIntroductoryOffersDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionsIntroductoryOffersDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<SubscriptionsIntroductoryOffersDeleteToManyRelationshipResponses, SubscriptionsIntroductoryOffersDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/relationships/introductoryOffers',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionsIntroductoryOffersGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionsIntroductoryOffersGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsIntroductoryOffersGetToManyRelationshipResponses, SubscriptionsIntroductoryOffersGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/relationships/introductoryOffers',
            ...options
        });
    }
    
    public static subscriptionsIntroductoryOffersGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionsIntroductoryOffersGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsIntroductoryOffersGetToManyRelatedResponses, SubscriptionsIntroductoryOffersGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/introductoryOffers',
            ...options
        });
    }
    
    public static subscriptionsOfferCodesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionsOfferCodesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsOfferCodesGetToManyRelationshipResponses, SubscriptionsOfferCodesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/relationships/offerCodes',
            ...options
        });
    }
    
    public static subscriptionsOfferCodesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionsOfferCodesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsOfferCodesGetToManyRelatedResponses, SubscriptionsOfferCodesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/offerCodes',
            ...options
        });
    }
    
    public static subscriptionsPricePointsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionsPricePointsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsPricePointsGetToManyRelationshipResponses, SubscriptionsPricePointsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/relationships/pricePoints',
            ...options
        });
    }
    
    public static subscriptionsPricePointsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionsPricePointsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsPricePointsGetToManyRelatedResponses, SubscriptionsPricePointsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/pricePoints',
            ...options
        });
    }
    
    public static subscriptionsPricesDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionsPricesDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<SubscriptionsPricesDeleteToManyRelationshipResponses, SubscriptionsPricesDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/relationships/prices',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static subscriptionsPricesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionsPricesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsPricesGetToManyRelationshipResponses, SubscriptionsPricesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/relationships/prices',
            ...options
        });
    }
    
    public static subscriptionsPricesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionsPricesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsPricesGetToManyRelatedResponses, SubscriptionsPricesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/prices',
            ...options
        });
    }
    
    public static subscriptionsPromotedPurchaseGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionsPromotedPurchaseGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsPromotedPurchaseGetToOneRelationshipResponses, SubscriptionsPromotedPurchaseGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/relationships/promotedPurchase',
            ...options
        });
    }
    
    public static subscriptionsPromotedPurchaseGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionsPromotedPurchaseGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsPromotedPurchaseGetToOneRelatedResponses, SubscriptionsPromotedPurchaseGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/promotedPurchase',
            ...options
        });
    }
    
    public static subscriptionsPromotionalOffersGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionsPromotionalOffersGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsPromotionalOffersGetToManyRelationshipResponses, SubscriptionsPromotionalOffersGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/relationships/promotionalOffers',
            ...options
        });
    }
    
    public static subscriptionsPromotionalOffersGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionsPromotionalOffersGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsPromotionalOffersGetToManyRelatedResponses, SubscriptionsPromotionalOffersGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/promotionalOffers',
            ...options
        });
    }
    
    public static subscriptionsSubscriptionAvailabilityGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionsSubscriptionAvailabilityGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsSubscriptionAvailabilityGetToOneRelationshipResponses, SubscriptionsSubscriptionAvailabilityGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/relationships/subscriptionAvailability',
            ...options
        });
    }
    
    public static subscriptionsSubscriptionAvailabilityGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionsSubscriptionAvailabilityGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsSubscriptionAvailabilityGetToOneRelatedResponses, SubscriptionsSubscriptionAvailabilityGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/subscriptionAvailability',
            ...options
        });
    }
    
    public static subscriptionsSubscriptionLocalizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionsSubscriptionLocalizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsSubscriptionLocalizationsGetToManyRelationshipResponses, SubscriptionsSubscriptionLocalizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/relationships/subscriptionLocalizations',
            ...options
        });
    }
    
    public static subscriptionsSubscriptionLocalizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionsSubscriptionLocalizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsSubscriptionLocalizationsGetToManyRelatedResponses, SubscriptionsSubscriptionLocalizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/subscriptionLocalizations',
            ...options
        });
    }
    
    public static subscriptionsWinBackOffersGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<SubscriptionsWinBackOffersGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsWinBackOffersGetToManyRelationshipResponses, SubscriptionsWinBackOffersGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/relationships/winBackOffers',
            ...options
        });
    }
    
    public static subscriptionsWinBackOffersGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<SubscriptionsWinBackOffersGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<SubscriptionsWinBackOffersGetToManyRelatedResponses, SubscriptionsWinBackOffersGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/subscriptions/{id}/winBackOffers',
            ...options
        });
    }
}

export class Territories {
    public static territoriesGetCollection<ThrowOnError extends boolean = false>(options?: Options<TerritoriesGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<TerritoriesGetCollectionResponses, TerritoriesGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/territories',
            ...options
        });
    }
}

export class TerritoryAvailabilities {
    public static territoryAvailabilitiesUpdateInstance<ThrowOnError extends boolean = false>(options: Options<TerritoryAvailabilitiesUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<TerritoryAvailabilitiesUpdateInstanceResponses, TerritoryAvailabilitiesUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/territoryAvailabilities/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class UserInvitations {
    public static userInvitationsGetCollection<ThrowOnError extends boolean = false>(options?: Options<UserInvitationsGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<UserInvitationsGetCollectionResponses, UserInvitationsGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/userInvitations',
            ...options
        });
    }
    
    public static userInvitationsCreateInstance<ThrowOnError extends boolean = false>(options: Options<UserInvitationsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<UserInvitationsCreateInstanceResponses, UserInvitationsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/userInvitations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static userInvitationsDeleteInstance<ThrowOnError extends boolean = false>(options: Options<UserInvitationsDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<UserInvitationsDeleteInstanceResponses, UserInvitationsDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/userInvitations/{id}',
            ...options
        });
    }
    
    public static userInvitationsGetInstance<ThrowOnError extends boolean = false>(options: Options<UserInvitationsGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<UserInvitationsGetInstanceResponses, UserInvitationsGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/userInvitations/{id}',
            ...options
        });
    }
    
    public static userInvitationsVisibleAppsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<UserInvitationsVisibleAppsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<UserInvitationsVisibleAppsGetToManyRelationshipResponses, UserInvitationsVisibleAppsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/userInvitations/{id}/relationships/visibleApps',
            ...options
        });
    }
    
    public static userInvitationsVisibleAppsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<UserInvitationsVisibleAppsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<UserInvitationsVisibleAppsGetToManyRelatedResponses, UserInvitationsVisibleAppsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/userInvitations/{id}/visibleApps',
            ...options
        });
    }
}

export class Users {
    public static usersGetCollection<ThrowOnError extends boolean = false>(options?: Options<UsersGetCollectionData, ThrowOnError>) {
        return (options?.client ?? client).get<UsersGetCollectionResponses, UsersGetCollectionErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/users',
            ...options
        });
    }
    
    public static usersDeleteInstance<ThrowOnError extends boolean = false>(options: Options<UsersDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<UsersDeleteInstanceResponses, UsersDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/users/{id}',
            ...options
        });
    }
    
    public static usersGetInstance<ThrowOnError extends boolean = false>(options: Options<UsersGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<UsersGetInstanceResponses, UsersGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/users/{id}',
            ...options
        });
    }
    
    public static usersUpdateInstance<ThrowOnError extends boolean = false>(options: Options<UsersUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<UsersUpdateInstanceResponses, UsersUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/users/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static usersVisibleAppsDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<UsersVisibleAppsDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<UsersVisibleAppsDeleteToManyRelationshipResponses, UsersVisibleAppsDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/users/{id}/relationships/visibleApps',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static usersVisibleAppsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<UsersVisibleAppsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<UsersVisibleAppsGetToManyRelationshipResponses, UsersVisibleAppsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/users/{id}/relationships/visibleApps',
            ...options
        });
    }
    
    public static usersVisibleAppsReplaceToManyRelationship<ThrowOnError extends boolean = false>(options: Options<UsersVisibleAppsReplaceToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<UsersVisibleAppsReplaceToManyRelationshipResponses, UsersVisibleAppsReplaceToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/users/{id}/relationships/visibleApps',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static usersVisibleAppsCreateToManyRelationship<ThrowOnError extends boolean = false>(options: Options<UsersVisibleAppsCreateToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).post<UsersVisibleAppsCreateToManyRelationshipResponses, UsersVisibleAppsCreateToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/users/{id}/relationships/visibleApps',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static usersVisibleAppsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<UsersVisibleAppsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<UsersVisibleAppsGetToManyRelatedResponses, UsersVisibleAppsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/users/{id}/visibleApps',
            ...options
        });
    }
}

export class WebhookDeliveries {
    public static webhookDeliveriesCreateInstance<ThrowOnError extends boolean = false>(options: Options<WebhookDeliveriesCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<WebhookDeliveriesCreateInstanceResponses, WebhookDeliveriesCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/webhookDeliveries',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class WebhookPings {
    public static webhookPingsCreateInstance<ThrowOnError extends boolean = false>(options: Options<WebhookPingsCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<WebhookPingsCreateInstanceResponses, WebhookPingsCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/webhookPings',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class Webhooks {
    public static webhooksCreateInstance<ThrowOnError extends boolean = false>(options: Options<WebhooksCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<WebhooksCreateInstanceResponses, WebhooksCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/webhooks',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static webhooksDeleteInstance<ThrowOnError extends boolean = false>(options: Options<WebhooksDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<WebhooksDeleteInstanceResponses, WebhooksDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/webhooks/{id}',
            ...options
        });
    }
    
    public static webhooksGetInstance<ThrowOnError extends boolean = false>(options: Options<WebhooksGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<WebhooksGetInstanceResponses, WebhooksGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/webhooks/{id}',
            ...options
        });
    }
    
    public static webhooksUpdateInstance<ThrowOnError extends boolean = false>(options: Options<WebhooksUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<WebhooksUpdateInstanceResponses, WebhooksUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/webhooks/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static webhooksDeliveriesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<WebhooksDeliveriesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<WebhooksDeliveriesGetToManyRelationshipResponses, WebhooksDeliveriesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/webhooks/{id}/relationships/deliveries',
            ...options
        });
    }
    
    public static webhooksDeliveriesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<WebhooksDeliveriesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<WebhooksDeliveriesGetToManyRelatedResponses, WebhooksDeliveriesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/webhooks/{id}/deliveries',
            ...options
        });
    }
}

export class WinBackOffers {
    public static winBackOffersCreateInstance<ThrowOnError extends boolean = false>(options: Options<WinBackOffersCreateInstanceData, ThrowOnError>) {
        return (options.client ?? client).post<WinBackOffersCreateInstanceResponses, WinBackOffersCreateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/winBackOffers',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static winBackOffersDeleteInstance<ThrowOnError extends boolean = false>(options: Options<WinBackOffersDeleteInstanceData, ThrowOnError>) {
        return (options.client ?? client).delete<WinBackOffersDeleteInstanceResponses, WinBackOffersDeleteInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/winBackOffers/{id}',
            ...options
        });
    }
    
    public static winBackOffersGetInstance<ThrowOnError extends boolean = false>(options: Options<WinBackOffersGetInstanceData, ThrowOnError>) {
        return (options.client ?? client).get<WinBackOffersGetInstanceResponses, WinBackOffersGetInstanceErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/winBackOffers/{id}',
            ...options
        });
    }
    
    public static winBackOffersUpdateInstance<ThrowOnError extends boolean = false>(options: Options<WinBackOffersUpdateInstanceData, ThrowOnError>) {
        return (options.client ?? client).patch<WinBackOffersUpdateInstanceResponses, WinBackOffersUpdateInstanceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/winBackOffers/{id}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static winBackOffersPricesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<WinBackOffersPricesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<WinBackOffersPricesGetToManyRelationshipResponses, WinBackOffersPricesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/winBackOffers/{id}/relationships/prices',
            ...options
        });
    }
    
    public static winBackOffersPricesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<WinBackOffersPricesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<WinBackOffersPricesGetToManyRelatedResponses, WinBackOffersPricesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/winBackOffers/{id}/prices',
            ...options
        });
    }
}

export class BuildBundles {
    public static buildBundlesAppClipDomainCacheStatusGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BuildBundlesAppClipDomainCacheStatusGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BuildBundlesAppClipDomainCacheStatusGetToOneRelationshipResponses, BuildBundlesAppClipDomainCacheStatusGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildBundles/{id}/relationships/appClipDomainCacheStatus',
            ...options
        });
    }
    
    public static buildBundlesAppClipDomainCacheStatusGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BuildBundlesAppClipDomainCacheStatusGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildBundlesAppClipDomainCacheStatusGetToOneRelatedResponses, BuildBundlesAppClipDomainCacheStatusGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildBundles/{id}/appClipDomainCacheStatus',
            ...options
        });
    }
    
    public static buildBundlesAppClipDomainDebugStatusGetToOneRelationship<ThrowOnError extends boolean = false>(options: Options<BuildBundlesAppClipDomainDebugStatusGetToOneRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BuildBundlesAppClipDomainDebugStatusGetToOneRelationshipResponses, BuildBundlesAppClipDomainDebugStatusGetToOneRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildBundles/{id}/relationships/appClipDomainDebugStatus',
            ...options
        });
    }
    
    public static buildBundlesAppClipDomainDebugStatusGetToOneRelated<ThrowOnError extends boolean = false>(options: Options<BuildBundlesAppClipDomainDebugStatusGetToOneRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildBundlesAppClipDomainDebugStatusGetToOneRelatedResponses, BuildBundlesAppClipDomainDebugStatusGetToOneRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildBundles/{id}/appClipDomainDebugStatus',
            ...options
        });
    }
    
    public static buildBundlesBetaAppClipInvocationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BuildBundlesBetaAppClipInvocationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BuildBundlesBetaAppClipInvocationsGetToManyRelationshipResponses, BuildBundlesBetaAppClipInvocationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildBundles/{id}/relationships/betaAppClipInvocations',
            ...options
        });
    }
    
    public static buildBundlesBetaAppClipInvocationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BuildBundlesBetaAppClipInvocationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildBundlesBetaAppClipInvocationsGetToManyRelatedResponses, BuildBundlesBetaAppClipInvocationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildBundles/{id}/betaAppClipInvocations',
            ...options
        });
    }
    
    public static buildBundlesBuildBundleFileSizesGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<BuildBundlesBuildBundleFileSizesGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<BuildBundlesBuildBundleFileSizesGetToManyRelationshipResponses, BuildBundlesBuildBundleFileSizesGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildBundles/{id}/relationships/buildBundleFileSizes',
            ...options
        });
    }
    
    public static buildBundlesBuildBundleFileSizesGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<BuildBundlesBuildBundleFileSizesGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<BuildBundlesBuildBundleFileSizesGetToManyRelatedResponses, BuildBundlesBuildBundleFileSizesGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/buildBundles/{id}/buildBundleFileSizes',
            ...options
        });
    }
}

export class DiagnosticSignatures {
    public static diagnosticSignaturesLogsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<DiagnosticSignaturesLogsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<DiagnosticSignaturesLogsGetToManyRelatedResponses, DiagnosticSignaturesLogsGetToManyRelatedErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/diagnosticSignatures/{id}/logs',
            ...options
        });
    }
}

export class GameCenterEnabledVersions {
    /**
     * @deprecated
     */
    public static gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).delete<GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponses, GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * @deprecated
     */
    public static gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponses, GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).patch<GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponses, GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * @deprecated
     */
    public static gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship<ThrowOnError extends boolean = false>(options: Options<GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).post<GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponses, GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    /**
     * @deprecated
     */
    public static gameCenterEnabledVersionsCompatibleVersionsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponses, GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterEnabledVersions/{id}/compatibleVersions',
            ...options
        });
    }
}

export class InAppPurchasePricePoints {
    public static inAppPurchasePricePointsEqualizationsGetToManyRelationship<ThrowOnError extends boolean = false>(options: Options<InAppPurchasePricePointsEqualizationsGetToManyRelationshipData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasePricePointsEqualizationsGetToManyRelationshipResponses, InAppPurchasePricePointsEqualizationsGetToManyRelationshipErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchasePricePoints/{id}/relationships/equalizations',
            ...options
        });
    }
    
    public static inAppPurchasePricePointsEqualizationsGetToManyRelated<ThrowOnError extends boolean = false>(options: Options<InAppPurchasePricePointsEqualizationsGetToManyRelatedData, ThrowOnError>) {
        return (options.client ?? client).get<InAppPurchasePricePointsEqualizationsGetToManyRelatedResponses, InAppPurchasePricePointsEqualizationsGetToManyRelatedErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/inAppPurchasePricePoints/{id}/equalizations',
            ...options
        });
    }
}

export class Metrics {
    public static appsBetaTesterUsagesGetMetrics<ThrowOnError extends boolean = false>(options: Options<AppsBetaTesterUsagesGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<AppsBetaTesterUsagesGetMetricsResponses, AppsBetaTesterUsagesGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/apps/{id}/metrics/betaTesterUsages',
            ...options
        });
    }
    
    public static betaGroupsBetaTesterUsagesGetMetrics<ThrowOnError extends boolean = false>(options: Options<BetaGroupsBetaTesterUsagesGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<BetaGroupsBetaTesterUsagesGetMetricsResponses, BetaGroupsBetaTesterUsagesGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/metrics/betaTesterUsages',
            ...options
        });
    }
    
    public static betaGroupsPublicLinkUsagesGetMetrics<ThrowOnError extends boolean = false>(options: Options<BetaGroupsPublicLinkUsagesGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<BetaGroupsPublicLinkUsagesGetMetricsResponses, BetaGroupsPublicLinkUsagesGetMetricsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaGroups/{id}/metrics/publicLinkUsages',
            ...options
        });
    }
    
    public static betaTestersBetaTesterUsagesGetMetrics<ThrowOnError extends boolean = false>(options: Options<BetaTestersBetaTesterUsagesGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<BetaTestersBetaTesterUsagesGetMetricsResponses, BetaTestersBetaTesterUsagesGetMetricsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/betaTesters/{id}/metrics/betaTesterUsages',
            ...options
        });
    }
    
    public static buildsBetaBuildUsagesGetMetrics<ThrowOnError extends boolean = false>(options: Options<BuildsBetaBuildUsagesGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<BuildsBetaBuildUsagesGetMetricsResponses, BuildsBetaBuildUsagesGetMetricsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/builds/{id}/metrics/betaBuildUsages',
            ...options
        });
    }
    
    public static gameCenterDetailsClassicMatchmakingRequestsGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsClassicMatchmakingRequestsGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsClassicMatchmakingRequestsGetMetricsResponses, GameCenterDetailsClassicMatchmakingRequestsGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests',
            ...options
        });
    }
    
    public static gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsResponses, GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests',
            ...options
        });
    }
    
    public static gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsResponses, GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes',
            ...options
        });
    }
    
    public static gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsResponses, GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests',
            ...options
        });
    }
    
    public static gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsResponses, GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes',
            ...options
        });
    }
    
    public static gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsResponses, GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests',
            ...options
        });
    }
    
    public static gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsResponses, GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions',
            ...options
        });
    }
    
    public static gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsResponses, GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults',
            ...options
        });
    }
    
    public static gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsResponses, GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults',
            ...options
        });
    }
    
    public static gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics<ThrowOnError extends boolean = false>(options: Options<GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsData, ThrowOnError>) {
        return (options.client ?? client).get<GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsResponses, GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsErrors, ThrowOnError>({
            querySerializer: {
                array: {
                    explode: false,
                    style: 'form'
                }
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors',
            ...options
        });
    }
}
