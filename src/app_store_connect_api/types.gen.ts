// This file is auto-generated by @hey-api/openapi-ts

export type Actor = {
    type: 'actors';
    id: string;
    attributes?: {
        actorType?: 'USER' | 'API_KEY' | 'XCODE_CLOUD' | 'APPLE';
        userFirstName?: string;
        userLastName?: string;
        userEmail?: string;
        apiKeyId?: string;
    };
    links?: ResourceLinks;
};

export type type = 'actors';

export type actorType = 'USER' | 'API_KEY' | 'XCODE_CLOUD' | 'APPLE';

export type ActorsResponse = {
    data: Array<Actor>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ActorResponse = {
    data: Actor;
    links: DocumentLinks;
};

export type AgeRatingDeclaration = {
    type: 'ageRatingDeclarations';
    id: string;
    attributes?: {
        alcoholTobaccoOrDrugUseOrReferences?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        contests?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        /**
         * @deprecated
         */
        gamblingAndContests?: boolean;
        gambling?: boolean;
        gamblingSimulated?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        kidsAgeBand?: KidsAgeBand;
        lootBox?: boolean;
        medicalOrTreatmentInformation?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        profanityOrCrudeHumor?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        sexualContentGraphicAndNudity?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        sexualContentOrNudity?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        horrorOrFearThemes?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        matureOrSuggestiveThemes?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        unrestrictedWebAccess?: boolean;
        violenceCartoonOrFantasy?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        violenceRealisticProlongedGraphicOrSadistic?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        violenceRealistic?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
        ageRatingOverride?: 'NONE' | 'SEVENTEEN_PLUS' | 'UNRATED';
        koreaAgeRatingOverride?: 'NONE' | 'FIFTEEN_PLUS' | 'NINETEEN_PLUS';
        /**
         * @deprecated
         */
        seventeenPlus?: boolean;
    };
    links?: ResourceLinks;
};

export type type2 = 'ageRatingDeclarations';

export type alcoholTobaccoOrDrugUseOrReferences = 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';

export type contests = 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';

export type gamblingSimulated = 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';

export type medicalOrTreatmentInformation = 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';

export type profanityOrCrudeHumor = 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';

export type sexualContentGraphicAndNudity = 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';

export type sexualContentOrNudity = 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';

export type horrorOrFearThemes = 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';

export type matureOrSuggestiveThemes = 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';

export type violenceCartoonOrFantasy = 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';

export type violenceRealisticProlongedGraphicOrSadistic = 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';

export type violenceRealistic = 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';

export type ageRatingOverride = 'NONE' | 'SEVENTEEN_PLUS' | 'UNRATED';

export type koreaAgeRatingOverride = 'NONE' | 'FIFTEEN_PLUS' | 'NINETEEN_PLUS';

export type AgeRatingDeclarationResponse = {
    data: AgeRatingDeclaration;
    links: DocumentLinks;
};

export type AgeRatingDeclarationUpdateRequest = {
    data: {
        type: 'ageRatingDeclarations';
        id: string;
        attributes?: {
            alcoholTobaccoOrDrugUseOrReferences?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            contests?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            /**
             * @deprecated
             */
            gamblingAndContests?: boolean;
            gambling?: boolean;
            gamblingSimulated?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            kidsAgeBand?: KidsAgeBand;
            lootBox?: boolean;
            medicalOrTreatmentInformation?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            profanityOrCrudeHumor?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            sexualContentGraphicAndNudity?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            sexualContentOrNudity?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            horrorOrFearThemes?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            matureOrSuggestiveThemes?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            unrestrictedWebAccess?: boolean;
            violenceCartoonOrFantasy?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            violenceRealisticProlongedGraphicOrSadistic?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            violenceRealistic?: 'NONE' | 'INFREQUENT_OR_MILD' | 'FREQUENT_OR_INTENSE';
            ageRatingOverride?: 'NONE' | 'SEVENTEEN_PLUS' | 'UNRATED';
            koreaAgeRatingOverride?: 'NONE' | 'FIFTEEN_PLUS' | 'NINETEEN_PLUS';
            /**
             * @deprecated
             */
            seventeenPlus?: boolean;
        };
    };
};

export type AlternativeDistributionDomain = {
    type: 'alternativeDistributionDomains';
    id: string;
    attributes?: {
        domain?: string;
        referenceName?: string;
        createdDate?: string;
    };
    links?: ResourceLinks;
};

export type type3 = 'alternativeDistributionDomains';

export type AlternativeDistributionDomainsResponse = {
    data: Array<AlternativeDistributionDomain>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AlternativeDistributionDomainResponse = {
    data: AlternativeDistributionDomain;
    links: DocumentLinks;
};

export type AlternativeDistributionDomainCreateRequest = {
    data: {
        type: 'alternativeDistributionDomains';
        attributes: {
            domain: string;
            referenceName: string;
        };
    };
};

export type AlternativeDistributionKey = {
    type: 'alternativeDistributionKeys';
    id: string;
    attributes?: {
        publicKey?: string;
    };
    links?: ResourceLinks;
};

export type type4 = 'alternativeDistributionKeys';

export type AlternativeDistributionKeysResponse = {
    data: Array<AlternativeDistributionKey>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AlternativeDistributionKeyResponse = {
    data: AlternativeDistributionKey;
    links: DocumentLinks;
};

export type AlternativeDistributionKeyCreateRequest = {
    data: {
        type: 'alternativeDistributionKeys';
        attributes: {
            publicKey: string;
        };
        relationships?: {
            app?: {
                data?: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type AlternativeDistributionPackageDelta = {
    type: 'alternativeDistributionPackageDeltas';
    id: string;
    attributes?: {
        url?: string;
        urlExpirationDate?: string;
        alternativeDistributionKeyBlob?: string;
        fileChecksum?: string;
    };
    links?: ResourceLinks;
};

export type type5 = 'alternativeDistributionPackageDeltas';

export type AlternativeDistributionPackageDeltasResponse = {
    data: Array<AlternativeDistributionPackageDelta>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AlternativeDistributionPackageDeltaResponse = {
    data: AlternativeDistributionPackageDelta;
    links: DocumentLinks;
};

export type AlternativeDistributionPackageVariant = {
    type: 'alternativeDistributionPackageVariants';
    id: string;
    attributes?: {
        url?: string;
        urlExpirationDate?: string;
        alternativeDistributionKeyBlob?: string;
        fileChecksum?: string;
    };
    links?: ResourceLinks;
};

export type type6 = 'alternativeDistributionPackageVariants';

export type AlternativeDistributionPackageVariantsResponse = {
    data: Array<AlternativeDistributionPackageVariant>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AlternativeDistributionPackageVariantResponse = {
    data: AlternativeDistributionPackageVariant;
    links: DocumentLinks;
};

export type AlternativeDistributionPackageVersion = {
    type: 'alternativeDistributionPackageVersions';
    id: string;
    attributes?: {
        url?: string;
        urlExpirationDate?: string;
        version?: string;
        fileChecksum?: string;
        state?: 'COMPLETED' | 'REPLACED';
    };
    relationships?: {
        variants?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'alternativeDistributionPackageVariants';
                id: string;
            }>;
        };
        deltas?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'alternativeDistributionPackageDeltas';
                id: string;
            }>;
        };
        alternativeDistributionPackage?: {
            data?: {
                type: 'alternativeDistributionPackages';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type7 = 'alternativeDistributionPackageVersions';

export type state = 'COMPLETED' | 'REPLACED';

export type AlternativeDistributionPackageVersionsResponse = {
    data: Array<AlternativeDistributionPackageVersion>;
    included?: Array<(AlternativeDistributionPackageVariant | AlternativeDistributionPackageDelta | AlternativeDistributionPackage)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AlternativeDistributionPackageVersionResponse = {
    data: AlternativeDistributionPackageVersion;
    included?: Array<(AlternativeDistributionPackageVariant | AlternativeDistributionPackageDelta | AlternativeDistributionPackage)>;
    links: DocumentLinks;
};

export type AlternativeDistributionPackage = {
    type: 'alternativeDistributionPackages';
    id: string;
    relationships?: {
        versions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'alternativeDistributionPackageVersions';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type8 = 'alternativeDistributionPackages';

export type AlternativeDistributionPackageResponse = {
    data: AlternativeDistributionPackage;
    included?: Array<AlternativeDistributionPackageVersion>;
    links: DocumentLinks;
};

export type AlternativeDistributionPackageCreateRequest = {
    data: {
        type: 'alternativeDistributionPackages';
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

export type AnalyticsReportInstance = {
    type: 'analyticsReportInstances';
    id: string;
    attributes?: {
        granularity?: 'DAILY' | 'WEEKLY' | 'MONTHLY';
        processingDate?: string;
    };
    relationships?: {
        segments?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type type9 = 'analyticsReportInstances';

export type granularity = 'DAILY' | 'WEEKLY' | 'MONTHLY';

export type AnalyticsReportInstancesResponse = {
    data: Array<AnalyticsReportInstance>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AnalyticsReportInstanceResponse = {
    data: AnalyticsReportInstance;
    links: DocumentLinks;
};

export type AnalyticsReportRequest = {
    type: 'analyticsReportRequests';
    id: string;
    attributes?: {
        accessType?: 'ONE_TIME_SNAPSHOT' | 'ONGOING';
        stoppedDueToInactivity?: boolean;
    };
    relationships?: {
        reports?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'analyticsReports';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type10 = 'analyticsReportRequests';

export type accessType = 'ONE_TIME_SNAPSHOT' | 'ONGOING';

export type AnalyticsReportRequestsResponse = {
    data: Array<AnalyticsReportRequest>;
    included?: Array<AnalyticsReport>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AnalyticsReportRequestResponse = {
    data: AnalyticsReportRequest;
    included?: Array<AnalyticsReport>;
    links: DocumentLinks;
};

export type AnalyticsReportRequestCreateRequest = {
    data: {
        type: 'analyticsReportRequests';
        attributes: {
            accessType: 'ONE_TIME_SNAPSHOT' | 'ONGOING';
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type AnalyticsReportSegment = {
    type: 'analyticsReportSegments';
    id: string;
    attributes?: {
        checksum?: string;
        sizeInBytes?: number;
        url?: string;
    };
    links?: ResourceLinks;
};

export type type11 = 'analyticsReportSegments';

export type AnalyticsReportSegmentsResponse = {
    data: Array<AnalyticsReportSegment>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AnalyticsReportSegmentResponse = {
    data: AnalyticsReportSegment;
    links: DocumentLinks;
};

export type AnalyticsReport = {
    type: 'analyticsReports';
    id: string;
    attributes?: {
        name?: string;
        category?: 'APP_USAGE' | 'APP_STORE_ENGAGEMENT' | 'COMMERCE' | 'FRAMEWORK_USAGE' | 'PERFORMANCE';
    };
    relationships?: {
        instances?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type type12 = 'analyticsReports';

export type category = 'APP_USAGE' | 'APP_STORE_ENGAGEMENT' | 'COMMERCE' | 'FRAMEWORK_USAGE' | 'PERFORMANCE';

export type AnalyticsReportsResponse = {
    data: Array<AnalyticsReport>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AnalyticsReportResponse = {
    data: AnalyticsReport;
    links: DocumentLinks;
};

export type AppAvailabilityV2 = {
    type: 'appAvailabilities';
    id: string;
    attributes?: {
        availableInNewTerritories?: boolean;
    };
    relationships?: {
        territoryAvailabilities?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'territoryAvailabilities';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type13 = 'appAvailabilities';

export type AppAvailabilityV2Response = {
    data: AppAvailabilityV2;
    included?: Array<TerritoryAvailability>;
    links: DocumentLinks;
};

export type AppAvailabilityV2CreateRequest = {
    data: {
        type: 'appAvailabilities';
        attributes: {
            availableInNewTerritories: boolean;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
            territoryAvailabilities: {
                data: Array<{
                    type: 'territoryAvailabilities';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<TerritoryAvailabilityInlineCreate>;
};

/**
 * @deprecated
 */
export type AppAvailability = {
    type: 'appAvailabilities';
    id: string;
    attributes?: {
        availableInNewTerritories?: boolean;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        availableTerritories?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'territories';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

/**
 * @deprecated
 */
export type AppAvailabilityResponse = {
    data: AppAvailability;
    included?: Array<(App | Territory)>;
    links: DocumentLinks;
};

/**
 * @deprecated
 */
export type AppAvailabilityCreateRequest = {
    data: {
        type: 'appAvailabilities';
        attributes: {
            availableInNewTerritories: boolean;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
            availableTerritories: {
                data: Array<{
                    type: 'territories';
                    id: string;
                }>;
            };
        };
    };
};

export type AppCategory = {
    type: 'appCategories';
    id: string;
    attributes?: {
        platforms?: Array<Platform>;
    };
    relationships?: {
        subcategories?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appCategories';
                id: string;
            }>;
        };
        parent?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appCategories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type14 = 'appCategories';

export type AppCategoriesResponse = {
    data: Array<AppCategory>;
    included?: Array<AppCategory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppCategoryResponse = {
    data: AppCategory;
    included?: Array<AppCategory>;
    links: DocumentLinks;
};

export type AppClipAdvancedExperienceImage = {
    type: 'appClipAdvancedExperienceImages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        imageAsset?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    links?: ResourceLinks;
};

export type type15 = 'appClipAdvancedExperienceImages';

export type AppClipAdvancedExperienceImageResponse = {
    data: AppClipAdvancedExperienceImage;
    links: DocumentLinks;
};

export type AppClipAdvancedExperienceImageCreateRequest = {
    data: {
        type: 'appClipAdvancedExperienceImages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
    };
};

export type AppClipAdvancedExperienceImageUpdateRequest = {
    data: {
        type: 'appClipAdvancedExperienceImages';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type AppClipAdvancedExperienceLocalization = {
    type: 'appClipAdvancedExperienceLocalizations';
    id: string;
    attributes?: {
        language?: AppClipAdvancedExperienceLanguage;
        title?: string;
        subtitle?: string;
    };
    links?: ResourceLinks;
};

export type type16 = 'appClipAdvancedExperienceLocalizations';

export type AppClipAdvancedExperienceLocalizationInlineCreate = {
    type: 'appClipAdvancedExperienceLocalizations';
    id?: string;
    attributes?: {
        language?: AppClipAdvancedExperienceLanguage;
        title?: string;
        subtitle?: string;
    };
};

export type AppClipAdvancedExperience = {
    type: 'appClipAdvancedExperiences';
    id: string;
    attributes?: {
        link?: string;
        version?: number;
        status?: 'RECEIVED' | 'DEACTIVATED' | 'APP_TRANSFER_IN_PROGRESS';
        action?: AppClipAction;
        isPoweredBy?: boolean;
        place?: {
            placeId?: string;
            names?: Array<(string)>;
            mainAddress?: {
                fullAddress?: string;
                structuredAddress?: {
                    streetAddress?: Array<(string)>;
                    floor?: string;
                    neighborhood?: string;
                    locality?: string;
                    stateProvince?: string;
                    postalCode?: string;
                    countryCode?: string;
                };
            };
            displayPoint?: {
                coordinates?: {
                    latitude?: number;
                    longitude?: number;
                };
                source?: 'CALCULATED' | 'MANUALLY_PLACED';
            };
            mapAction?: 'BUY_TICKETS' | 'VIEW_AVAILABILITY' | 'VIEW_PRICING' | 'HOTEL_BOOK_ROOM' | 'PARKING_RESERVE_PARKING' | 'RESTAURANT_JOIN_WAITLIST' | 'RESTAURANT_ORDER_DELIVERY' | 'RESTAURANT_ORDER_FOOD' | 'RESTAURANT_ORDER_TAKEOUT' | 'RESTAURANT_RESERVATION' | 'SCHEDULE_APPOINTMENT' | 'RESTAURANT_VIEW_MENU' | 'THEATER_NOW_PLAYING';
            relationship?: 'OWNER' | 'AUTHORIZED' | 'OTHER';
            phoneNumber?: {
                number?: string;
                type?: 'FAX' | 'LANDLINE' | 'MOBILE' | 'TOLLFREE';
                intent?: string;
            };
            homePage?: string;
            categories?: Array<(string)>;
        };
        placeStatus?: 'PENDING' | 'MATCHED' | 'NO_MATCH';
        businessCategory?: 'AUTOMOTIVE' | 'BEAUTY' | 'BIKES' | 'BOOKS' | 'CASINO' | 'EDUCATION' | 'EDUCATION_JAPAN' | 'ENTERTAINMENT' | 'EV_CHARGER' | 'FINANCIAL_USD' | 'FINANCIAL_CNY' | 'FINANCIAL_GBP' | 'FINANCIAL_JPY' | 'FINANCIAL_EUR' | 'FITNESS' | 'FOOD_AND_DRINK' | 'GAS' | 'GROCERY' | 'HEALTH_AND_MEDICAL' | 'HOTEL_AND_TRAVEL' | 'MUSIC' | 'PARKING' | 'PET_SERVICES' | 'PROFESSIONAL_SERVICES' | 'SHOPPING' | 'TICKETING' | 'TRANSIT';
        defaultLanguage?: AppClipAdvancedExperienceLanguage;
    };
    relationships?: {
        appClip?: {
            data?: {
                type: 'appClips';
                id: string;
            };
        };
        headerImage?: {
            data?: {
                type: 'appClipAdvancedExperienceImages';
                id: string;
            };
        };
        localizations?: {
            meta?: PagingInformation;
            data?: Array<{
                type: 'appClipAdvancedExperienceLocalizations';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type17 = 'appClipAdvancedExperiences';

export type status = 'RECEIVED' | 'DEACTIVATED' | 'APP_TRANSFER_IN_PROGRESS';

export type source = 'CALCULATED' | 'MANUALLY_PLACED';

export type mapAction = 'BUY_TICKETS' | 'VIEW_AVAILABILITY' | 'VIEW_PRICING' | 'HOTEL_BOOK_ROOM' | 'PARKING_RESERVE_PARKING' | 'RESTAURANT_JOIN_WAITLIST' | 'RESTAURANT_ORDER_DELIVERY' | 'RESTAURANT_ORDER_FOOD' | 'RESTAURANT_ORDER_TAKEOUT' | 'RESTAURANT_RESERVATION' | 'SCHEDULE_APPOINTMENT' | 'RESTAURANT_VIEW_MENU' | 'THEATER_NOW_PLAYING';

export type relationship = 'OWNER' | 'AUTHORIZED' | 'OTHER';

export type placeStatus = 'PENDING' | 'MATCHED' | 'NO_MATCH';

export type businessCategory = 'AUTOMOTIVE' | 'BEAUTY' | 'BIKES' | 'BOOKS' | 'CASINO' | 'EDUCATION' | 'EDUCATION_JAPAN' | 'ENTERTAINMENT' | 'EV_CHARGER' | 'FINANCIAL_USD' | 'FINANCIAL_CNY' | 'FINANCIAL_GBP' | 'FINANCIAL_JPY' | 'FINANCIAL_EUR' | 'FITNESS' | 'FOOD_AND_DRINK' | 'GAS' | 'GROCERY' | 'HEALTH_AND_MEDICAL' | 'HOTEL_AND_TRAVEL' | 'MUSIC' | 'PARKING' | 'PET_SERVICES' | 'PROFESSIONAL_SERVICES' | 'SHOPPING' | 'TICKETING' | 'TRANSIT';

export type AppClipAdvancedExperiencesResponse = {
    data: Array<AppClipAdvancedExperience>;
    included?: Array<(AppClip | AppClipAdvancedExperienceImage | AppClipAdvancedExperienceLocalization)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppClipAdvancedExperienceResponse = {
    data: AppClipAdvancedExperience;
    included?: Array<(AppClip | AppClipAdvancedExperienceImage | AppClipAdvancedExperienceLocalization)>;
    links: DocumentLinks;
};

export type AppClipAdvancedExperienceCreateRequest = {
    data: {
        type: 'appClipAdvancedExperiences';
        attributes: {
            link: string;
            action?: AppClipAction;
            isPoweredBy: boolean;
            place?: {
                placeId?: string;
                names?: Array<(string)>;
                mainAddress?: {
                    fullAddress?: string;
                    structuredAddress?: {
                        streetAddress?: Array<(string)>;
                        floor?: string;
                        neighborhood?: string;
                        locality?: string;
                        stateProvince?: string;
                        postalCode?: string;
                        countryCode?: string;
                    };
                };
                displayPoint?: {
                    coordinates?: {
                        latitude?: number;
                        longitude?: number;
                    };
                    source?: 'CALCULATED' | 'MANUALLY_PLACED';
                };
                mapAction?: 'BUY_TICKETS' | 'VIEW_AVAILABILITY' | 'VIEW_PRICING' | 'HOTEL_BOOK_ROOM' | 'PARKING_RESERVE_PARKING' | 'RESTAURANT_JOIN_WAITLIST' | 'RESTAURANT_ORDER_DELIVERY' | 'RESTAURANT_ORDER_FOOD' | 'RESTAURANT_ORDER_TAKEOUT' | 'RESTAURANT_RESERVATION' | 'SCHEDULE_APPOINTMENT' | 'RESTAURANT_VIEW_MENU' | 'THEATER_NOW_PLAYING';
                relationship?: 'OWNER' | 'AUTHORIZED' | 'OTHER';
                phoneNumber?: {
                    number?: string;
                    type?: 'FAX' | 'LANDLINE' | 'MOBILE' | 'TOLLFREE';
                    intent?: string;
                };
                homePage?: string;
                categories?: Array<(string)>;
            };
            businessCategory?: 'AUTOMOTIVE' | 'BEAUTY' | 'BIKES' | 'BOOKS' | 'CASINO' | 'EDUCATION' | 'EDUCATION_JAPAN' | 'ENTERTAINMENT' | 'EV_CHARGER' | 'FINANCIAL_USD' | 'FINANCIAL_CNY' | 'FINANCIAL_GBP' | 'FINANCIAL_JPY' | 'FINANCIAL_EUR' | 'FITNESS' | 'FOOD_AND_DRINK' | 'GAS' | 'GROCERY' | 'HEALTH_AND_MEDICAL' | 'HOTEL_AND_TRAVEL' | 'MUSIC' | 'PARKING' | 'PET_SERVICES' | 'PROFESSIONAL_SERVICES' | 'SHOPPING' | 'TICKETING' | 'TRANSIT';
            defaultLanguage: AppClipAdvancedExperienceLanguage;
        };
        relationships: {
            appClip: {
                data: {
                    type: 'appClips';
                    id: string;
                };
            };
            headerImage: {
                data: {
                    type: 'appClipAdvancedExperienceImages';
                    id: string;
                };
            };
            localizations: {
                data: Array<{
                    type: 'appClipAdvancedExperienceLocalizations';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<AppClipAdvancedExperienceLocalizationInlineCreate>;
};

export type AppClipAdvancedExperienceUpdateRequest = {
    data: {
        type: 'appClipAdvancedExperiences';
        id: string;
        attributes?: {
            action?: AppClipAction;
            isPoweredBy?: boolean;
            place?: {
                placeId?: string;
                names?: Array<(string)>;
                mainAddress?: {
                    fullAddress?: string;
                    structuredAddress?: {
                        streetAddress?: Array<(string)>;
                        floor?: string;
                        neighborhood?: string;
                        locality?: string;
                        stateProvince?: string;
                        postalCode?: string;
                        countryCode?: string;
                    };
                };
                displayPoint?: {
                    coordinates?: {
                        latitude?: number;
                        longitude?: number;
                    };
                    source?: 'CALCULATED' | 'MANUALLY_PLACED';
                };
                mapAction?: 'BUY_TICKETS' | 'VIEW_AVAILABILITY' | 'VIEW_PRICING' | 'HOTEL_BOOK_ROOM' | 'PARKING_RESERVE_PARKING' | 'RESTAURANT_JOIN_WAITLIST' | 'RESTAURANT_ORDER_DELIVERY' | 'RESTAURANT_ORDER_FOOD' | 'RESTAURANT_ORDER_TAKEOUT' | 'RESTAURANT_RESERVATION' | 'SCHEDULE_APPOINTMENT' | 'RESTAURANT_VIEW_MENU' | 'THEATER_NOW_PLAYING';
                relationship?: 'OWNER' | 'AUTHORIZED' | 'OTHER';
                phoneNumber?: {
                    number?: string;
                    type?: 'FAX' | 'LANDLINE' | 'MOBILE' | 'TOLLFREE';
                    intent?: string;
                };
                homePage?: string;
                categories?: Array<(string)>;
            };
            businessCategory?: 'AUTOMOTIVE' | 'BEAUTY' | 'BIKES' | 'BOOKS' | 'CASINO' | 'EDUCATION' | 'EDUCATION_JAPAN' | 'ENTERTAINMENT' | 'EV_CHARGER' | 'FINANCIAL_USD' | 'FINANCIAL_CNY' | 'FINANCIAL_GBP' | 'FINANCIAL_JPY' | 'FINANCIAL_EUR' | 'FITNESS' | 'FOOD_AND_DRINK' | 'GAS' | 'GROCERY' | 'HEALTH_AND_MEDICAL' | 'HOTEL_AND_TRAVEL' | 'MUSIC' | 'PARKING' | 'PET_SERVICES' | 'PROFESSIONAL_SERVICES' | 'SHOPPING' | 'TICKETING' | 'TRANSIT';
            defaultLanguage?: AppClipAdvancedExperienceLanguage;
            removed?: boolean;
        };
        relationships?: {
            appClip?: {
                data?: {
                    type: 'appClips';
                    id: string;
                };
            };
            headerImage?: {
                data?: {
                    type: 'appClipAdvancedExperienceImages';
                    id: string;
                };
            };
            localizations?: {
                data?: Array<{
                    type: 'appClipAdvancedExperienceLocalizations';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<AppClipAdvancedExperienceLocalizationInlineCreate>;
};

export type AppClipAppStoreReviewDetail = {
    type: 'appClipAppStoreReviewDetails';
    id: string;
    attributes?: {
        invocationUrls?: Array<(string)>;
    };
    relationships?: {
        appClipDefaultExperience?: {
            data?: {
                type: 'appClipDefaultExperiences';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type18 = 'appClipAppStoreReviewDetails';

export type AppClipAppStoreReviewDetailResponse = {
    data: AppClipAppStoreReviewDetail;
    included?: Array<AppClipDefaultExperience>;
    links: DocumentLinks;
};

export type AppClipAppStoreReviewDetailCreateRequest = {
    data: {
        type: 'appClipAppStoreReviewDetails';
        attributes?: {
            invocationUrls?: Array<(string)>;
        };
        relationships: {
            appClipDefaultExperience: {
                data: {
                    type: 'appClipDefaultExperiences';
                    id: string;
                };
            };
        };
    };
};

export type AppClipAppStoreReviewDetailUpdateRequest = {
    data: {
        type: 'appClipAppStoreReviewDetails';
        id: string;
        attributes?: {
            invocationUrls?: Array<(string)>;
        };
    };
};

export type AppClipDefaultExperienceLocalization = {
    type: 'appClipDefaultExperienceLocalizations';
    id: string;
    attributes?: {
        locale?: string;
        subtitle?: string;
    };
    relationships?: {
        appClipDefaultExperience?: {
            data?: {
                type: 'appClipDefaultExperiences';
                id: string;
            };
        };
        appClipHeaderImage?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appClipHeaderImages';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type19 = 'appClipDefaultExperienceLocalizations';

export type AppClipDefaultExperienceLocalizationsResponse = {
    data: Array<AppClipDefaultExperienceLocalization>;
    included?: Array<(AppClipDefaultExperience | AppClipHeaderImage)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppClipDefaultExperienceLocalizationResponse = {
    data: AppClipDefaultExperienceLocalization;
    included?: Array<(AppClipDefaultExperience | AppClipHeaderImage)>;
    links: DocumentLinks;
};

export type AppClipDefaultExperienceLocalizationCreateRequest = {
    data: {
        type: 'appClipDefaultExperienceLocalizations';
        attributes: {
            locale: string;
            subtitle?: string;
        };
        relationships: {
            appClipDefaultExperience: {
                data: {
                    type: 'appClipDefaultExperiences';
                    id: string;
                };
            };
        };
    };
};

export type AppClipDefaultExperienceLocalizationUpdateRequest = {
    data: {
        type: 'appClipDefaultExperienceLocalizations';
        id: string;
        attributes?: {
            subtitle?: string;
        };
    };
};

export type AppClipDefaultExperience = {
    type: 'appClipDefaultExperiences';
    id: string;
    attributes?: {
        action?: AppClipAction;
    };
    relationships?: {
        appClip?: {
            data?: {
                type: 'appClips';
                id: string;
            };
        };
        releaseWithAppStoreVersion?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
        appClipDefaultExperienceLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appClipDefaultExperienceLocalizations';
                id: string;
            }>;
        };
        appClipAppStoreReviewDetail?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appClipAppStoreReviewDetails';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type20 = 'appClipDefaultExperiences';

export type AppClipDefaultExperiencesResponse = {
    data: Array<AppClipDefaultExperience>;
    included?: Array<(AppClip | AppStoreVersion | AppClipDefaultExperienceLocalization | AppClipAppStoreReviewDetail)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppClipDefaultExperienceResponse = {
    data: AppClipDefaultExperience;
    included?: Array<(AppClip | AppStoreVersion | AppClipDefaultExperienceLocalization | AppClipAppStoreReviewDetail)>;
    links: DocumentLinks;
};

export type AppClipDefaultExperienceCreateRequest = {
    data: {
        type: 'appClipDefaultExperiences';
        attributes?: {
            action?: AppClipAction;
        };
        relationships: {
            appClip: {
                data: {
                    type: 'appClips';
                    id: string;
                };
            };
            releaseWithAppStoreVersion?: {
                data?: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
            appClipDefaultExperienceTemplate?: {
                data?: {
                    type: 'appClipDefaultExperiences';
                    id: string;
                };
            };
        };
    };
};

export type AppClipDefaultExperienceUpdateRequest = {
    data: {
        type: 'appClipDefaultExperiences';
        id: string;
        attributes?: {
            action?: AppClipAction;
        };
        relationships?: {
            releaseWithAppStoreVersion?: {
                data?: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

export type AppClipDomainStatus = {
    type: 'appClipDomainStatuses';
    id: string;
    attributes?: {
        domains?: Array<{
            domain?: string;
            isValid?: boolean;
            lastUpdatedDate?: string;
            errorCode?: 'BAD_HTTP_RESPONSE' | 'BAD_JSON_CONTENT' | 'BAD_PKCS7_SIGNATURE' | 'CANNOT_REACH_AASA_FILE' | 'DNS_ERROR' | 'INSECURE_REDIRECTS_FORBIDDEN' | 'INVALID_ENTITLEMENT_MISSING_SECTION' | 'INVALID_ENTITLEMENT_SYNTAX_ERROR' | 'INVALID_ENTITLEMENT_UNHANDLED_SECTION' | 'INVALID_ENTITLEMENT_UNKNOWN_ID' | 'NETWORK_ERROR' | 'NETWORK_ERROR_TEMPORARY' | 'OTHER_ERROR' | 'TIMEOUT' | 'TLS_ERROR' | 'UNEXPECTED_ERROR';
        }>;
        lastUpdatedDate?: string;
    };
    links?: ResourceLinks;
};

export type type21 = 'appClipDomainStatuses';

export type AppClipDomainStatusResponse = {
    data: AppClipDomainStatus;
    links: DocumentLinks;
};

export type AppClipHeaderImage = {
    type: 'appClipHeaderImages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        imageAsset?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        appClipDefaultExperienceLocalization?: {
            data?: {
                type: 'appClipDefaultExperienceLocalizations';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type22 = 'appClipHeaderImages';

export type AppClipHeaderImageResponse = {
    data: AppClipHeaderImage;
    included?: Array<AppClipDefaultExperienceLocalization>;
    links: DocumentLinks;
};

export type AppClipHeaderImageCreateRequest = {
    data: {
        type: 'appClipHeaderImages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            appClipDefaultExperienceLocalization: {
                data: {
                    type: 'appClipDefaultExperienceLocalizations';
                    id: string;
                };
            };
        };
    };
};

export type AppClipHeaderImageUpdateRequest = {
    data: {
        type: 'appClipHeaderImages';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type AppClip = {
    type: 'appClips';
    id: string;
    attributes?: {
        bundleId?: string;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        appClipDefaultExperiences?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appClipDefaultExperiences';
                id: string;
            }>;
        };
        appClipAdvancedExperiences?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type type23 = 'appClips';

export type AppClipsResponse = {
    data: Array<AppClip>;
    included?: Array<(App | AppClipDefaultExperience)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppClipResponse = {
    data: AppClip;
    included?: Array<(App | AppClipDefaultExperience)>;
    links: DocumentLinks;
};

export type AppCustomProductPageLocalization = {
    type: 'appCustomProductPageLocalizations';
    id: string;
    attributes?: {
        locale?: string;
        promotionalText?: string;
    };
    relationships?: {
        appCustomProductPageVersion?: {
            data?: {
                type: 'appCustomProductPageVersions';
                id: string;
            };
        };
        appScreenshotSets?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appScreenshotSets';
                id: string;
            }>;
        };
        appPreviewSets?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appPreviewSets';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type24 = 'appCustomProductPageLocalizations';

export type AppCustomProductPageLocalizationInlineCreate = {
    type: 'appCustomProductPageLocalizations';
    id?: string;
    attributes: {
        locale: string;
        promotionalText?: string;
    };
    relationships?: {
        appCustomProductPageVersion?: {
            data?: {
                type: 'appCustomProductPageVersions';
                id: string;
            };
        };
    };
};

export type AppCustomProductPageLocalizationsResponse = {
    data: Array<AppCustomProductPageLocalization>;
    included?: Array<(AppCustomProductPageVersion | AppScreenshotSet | AppPreviewSet)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppCustomProductPageLocalizationResponse = {
    data: AppCustomProductPageLocalization;
    included?: Array<(AppCustomProductPageVersion | AppScreenshotSet | AppPreviewSet)>;
    links: DocumentLinks;
};

export type AppCustomProductPageLocalizationCreateRequest = {
    data: {
        type: 'appCustomProductPageLocalizations';
        attributes: {
            locale: string;
            promotionalText?: string;
        };
        relationships: {
            appCustomProductPageVersion: {
                data: {
                    type: 'appCustomProductPageVersions';
                    id: string;
                };
            };
        };
    };
};

export type AppCustomProductPageLocalizationUpdateRequest = {
    data: {
        type: 'appCustomProductPageLocalizations';
        id: string;
        attributes?: {
            promotionalText?: string;
        };
    };
};

export type AppCustomProductPageVersion = {
    type: 'appCustomProductPageVersions';
    id: string;
    attributes?: {
        version?: string;
        state?: 'PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REPLACED_WITH_NEW_VERSION' | 'REJECTED';
        deepLink?: string;
    };
    relationships?: {
        appCustomProductPage?: {
            data?: {
                type: 'appCustomProductPages';
                id: string;
            };
        };
        appCustomProductPageLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appCustomProductPageLocalizations';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type25 = 'appCustomProductPageVersions';

export type state2 = 'PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REPLACED_WITH_NEW_VERSION' | 'REJECTED';

export type AppCustomProductPageVersionInlineCreate = {
    type: 'appCustomProductPageVersions';
    id?: string;
    attributes?: {
        deepLink?: string;
    };
    relationships?: {
        appCustomProductPage?: {
            data?: {
                type: 'appCustomProductPages';
                id: string;
            };
        };
        appCustomProductPageLocalizations?: {
            data?: Array<{
                type: 'appCustomProductPageLocalizations';
                id: string;
            }>;
        };
    };
};

export type AppCustomProductPageVersionsResponse = {
    data: Array<AppCustomProductPageVersion>;
    included?: Array<(AppCustomProductPage | AppCustomProductPageLocalization)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppCustomProductPageVersionResponse = {
    data: AppCustomProductPageVersion;
    included?: Array<(AppCustomProductPage | AppCustomProductPageLocalization)>;
    links: DocumentLinks;
};

export type AppCustomProductPageVersionCreateRequest = {
    data: {
        type: 'appCustomProductPageVersions';
        attributes?: {
            deepLink?: string;
        };
        relationships: {
            appCustomProductPage: {
                data: {
                    type: 'appCustomProductPages';
                    id: string;
                };
            };
            appCustomProductPageLocalizations?: {
                data?: Array<{
                    type: 'appCustomProductPageLocalizations';
                    id: string;
                }>;
            };
        };
    };
};

export type AppCustomProductPageVersionUpdateRequest = {
    data: {
        type: 'appCustomProductPageVersions';
        id: string;
        attributes?: {
            deepLink?: string;
        };
    };
};

export type AppCustomProductPage = {
    type: 'appCustomProductPages';
    id: string;
    attributes?: {
        name?: string;
        url?: string;
        visible?: boolean;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        appCustomProductPageVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appCustomProductPageVersions';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type26 = 'appCustomProductPages';

export type AppCustomProductPagesResponse = {
    data: Array<AppCustomProductPage>;
    included?: Array<(App | AppCustomProductPageVersion)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppCustomProductPageResponse = {
    data: AppCustomProductPage;
    included?: Array<(App | AppCustomProductPageVersion)>;
    links: DocumentLinks;
};

export type AppCustomProductPageCreateRequest = {
    data: {
        type: 'appCustomProductPages';
        attributes: {
            name: string;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
            appCustomProductPageVersions?: {
                data?: Array<{
                    type: 'appCustomProductPageVersions';
                    id: string;
                }>;
            };
            appStoreVersionTemplate?: {
                data?: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
            customProductPageTemplate?: {
                data?: {
                    type: 'appCustomProductPages';
                    id: string;
                };
            };
        };
    };
    included?: Array<(AppCustomProductPageLocalizationInlineCreate | AppCustomProductPageVersionInlineCreate)>;
};

export type AppCustomProductPageUpdateRequest = {
    data: {
        type: 'appCustomProductPages';
        id: string;
        attributes?: {
            name?: string;
            visible?: boolean;
        };
    };
};

export type AppEncryptionDeclarationDocument = {
    type: 'appEncryptionDeclarationDocuments';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        assetToken?: string;
        downloadUrl?: string;
        sourceFileChecksum?: string;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    links?: ResourceLinks;
};

export type type27 = 'appEncryptionDeclarationDocuments';

export type AppEncryptionDeclarationDocumentResponse = {
    data: AppEncryptionDeclarationDocument;
    links: DocumentLinks;
};

export type AppEncryptionDeclarationDocumentCreateRequest = {
    data: {
        type: 'appEncryptionDeclarationDocuments';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            appEncryptionDeclaration: {
                data: {
                    type: 'appEncryptionDeclarations';
                    id: string;
                };
            };
        };
    };
};

export type AppEncryptionDeclarationDocumentUpdateRequest = {
    data: {
        type: 'appEncryptionDeclarationDocuments';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type AppEncryptionDeclaration = {
    type: 'appEncryptionDeclarations';
    id: string;
    attributes?: {
        appDescription?: string;
        createdDate?: string;
        /**
         * @deprecated
         */
        usesEncryption?: boolean;
        exempt?: boolean;
        containsProprietaryCryptography?: boolean;
        containsThirdPartyCryptography?: boolean;
        availableOnFrenchStore?: boolean;
        /**
         * @deprecated
         */
        platform?: Platform;
        /**
         * @deprecated
         */
        uploadedDate?: string;
        /**
         * @deprecated
         */
        documentUrl?: string;
        /**
         * @deprecated
         */
        documentName?: string;
        /**
         * @deprecated
         */
        documentType?: string;
        appEncryptionDeclarationState?: AppEncryptionDeclarationState;
        codeValue?: string;
    };
    relationships?: {
        /**
         * @deprecated
         */
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
        /**
         * @deprecated
         */
        builds?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'builds';
                id: string;
            }>;
        };
        appEncryptionDeclarationDocument?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appEncryptionDeclarationDocuments';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type28 = 'appEncryptionDeclarations';

export type AppEncryptionDeclarationsResponse = {
    data: Array<AppEncryptionDeclaration>;
    included?: Array<(App | Build | AppEncryptionDeclarationDocument)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppEncryptionDeclarationResponse = {
    data: AppEncryptionDeclaration;
    included?: Array<(App | Build | AppEncryptionDeclarationDocument)>;
    links: DocumentLinks;
};

export type AppEncryptionDeclarationCreateRequest = {
    data: {
        type: 'appEncryptionDeclarations';
        attributes: {
            appDescription: string;
            containsProprietaryCryptography: boolean;
            containsThirdPartyCryptography: boolean;
            availableOnFrenchStore: boolean;
        };
        relationships: {
            /**
             * @deprecated
             */
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type AppEventLocalization = {
    type: 'appEventLocalizations';
    id: string;
    attributes?: {
        locale?: string;
        name?: string;
        shortDescription?: string;
        longDescription?: string;
    };
    relationships?: {
        appEvent?: {
            data?: {
                type: 'appEvents';
                id: string;
            };
        };
        appEventScreenshots?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appEventScreenshots';
                id: string;
            }>;
        };
        appEventVideoClips?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appEventVideoClips';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type29 = 'appEventLocalizations';

export type AppEventLocalizationsResponse = {
    data: Array<AppEventLocalization>;
    included?: Array<(AppEvent | AppEventScreenshot | AppEventVideoClip)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppEventLocalizationResponse = {
    data: AppEventLocalization;
    included?: Array<(AppEvent | AppEventScreenshot | AppEventVideoClip)>;
    links: DocumentLinks;
};

export type AppEventLocalizationCreateRequest = {
    data: {
        type: 'appEventLocalizations';
        attributes: {
            locale: string;
            name?: string;
            shortDescription?: string;
            longDescription?: string;
        };
        relationships: {
            appEvent: {
                data: {
                    type: 'appEvents';
                    id: string;
                };
            };
        };
    };
};

export type AppEventLocalizationUpdateRequest = {
    data: {
        type: 'appEventLocalizations';
        id: string;
        attributes?: {
            name?: string;
            shortDescription?: string;
            longDescription?: string;
        };
    };
};

export type AppEventScreenshot = {
    type: 'appEventScreenshots';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        imageAsset?: ImageAsset;
        assetToken?: string;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
        appEventAssetType?: AppEventAssetType;
    };
    relationships?: {
        appEventLocalization?: {
            data?: {
                type: 'appEventLocalizations';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type30 = 'appEventScreenshots';

export type AppEventScreenshotsResponse = {
    data: Array<AppEventScreenshot>;
    included?: Array<AppEventLocalization>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppEventScreenshotResponse = {
    data: AppEventScreenshot;
    included?: Array<AppEventLocalization>;
    links: DocumentLinks;
};

export type AppEventScreenshotCreateRequest = {
    data: {
        type: 'appEventScreenshots';
        attributes: {
            fileSize: number;
            fileName: string;
            appEventAssetType: AppEventAssetType;
        };
        relationships: {
            appEventLocalization: {
                data: {
                    type: 'appEventLocalizations';
                    id: string;
                };
            };
        };
    };
};

export type AppEventScreenshotUpdateRequest = {
    data: {
        type: 'appEventScreenshots';
        id: string;
        attributes?: {
            uploaded?: boolean;
        };
    };
};

export type AppEventVideoClip = {
    type: 'appEventVideoClips';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        previewFrameTimeCode?: string;
        videoUrl?: string;
        previewImage?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
        appEventAssetType?: AppEventAssetType;
    };
    relationships?: {
        appEventLocalization?: {
            data?: {
                type: 'appEventLocalizations';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type31 = 'appEventVideoClips';

export type AppEventVideoClipsResponse = {
    data: Array<AppEventVideoClip>;
    included?: Array<AppEventLocalization>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppEventVideoClipResponse = {
    data: AppEventVideoClip;
    included?: Array<AppEventLocalization>;
    links: DocumentLinks;
};

export type AppEventVideoClipCreateRequest = {
    data: {
        type: 'appEventVideoClips';
        attributes: {
            fileSize: number;
            fileName: string;
            previewFrameTimeCode?: string;
            appEventAssetType: AppEventAssetType;
        };
        relationships: {
            appEventLocalization: {
                data: {
                    type: 'appEventLocalizations';
                    id: string;
                };
            };
        };
    };
};

export type AppEventVideoClipUpdateRequest = {
    data: {
        type: 'appEventVideoClips';
        id: string;
        attributes?: {
            previewFrameTimeCode?: string;
            uploaded?: boolean;
        };
    };
};

export type AppEvent = {
    type: 'appEvents';
    id: string;
    attributes?: {
        referenceName?: string;
        badge?: 'LIVE_EVENT' | 'PREMIERE' | 'CHALLENGE' | 'COMPETITION' | 'NEW_SEASON' | 'MAJOR_UPDATE' | 'SPECIAL_EVENT';
        eventState?: 'DRAFT' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'ACCEPTED' | 'APPROVED' | 'PUBLISHED' | 'PAST' | 'ARCHIVED';
        deepLink?: string;
        purchaseRequirement?: string;
        primaryLocale?: string;
        priority?: 'HIGH' | 'NORMAL';
        purpose?: 'APPROPRIATE_FOR_ALL_USERS' | 'ATTRACT_NEW_USERS' | 'KEEP_ACTIVE_USERS_INFORMED' | 'BRING_BACK_LAPSED_USERS';
        territorySchedules?: Array<{
            territories?: Array<(string)>;
            publishStart?: string;
            eventStart?: string;
            eventEnd?: string;
        }>;
        archivedTerritorySchedules?: Array<{
            territories?: Array<(string)>;
            publishStart?: string;
            eventStart?: string;
            eventEnd?: string;
        }>;
    };
    relationships?: {
        localizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appEventLocalizations';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type32 = 'appEvents';

export type badge = 'LIVE_EVENT' | 'PREMIERE' | 'CHALLENGE' | 'COMPETITION' | 'NEW_SEASON' | 'MAJOR_UPDATE' | 'SPECIAL_EVENT';

export type eventState = 'DRAFT' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'ACCEPTED' | 'APPROVED' | 'PUBLISHED' | 'PAST' | 'ARCHIVED';

export type priority = 'HIGH' | 'NORMAL';

export type purpose = 'APPROPRIATE_FOR_ALL_USERS' | 'ATTRACT_NEW_USERS' | 'KEEP_ACTIVE_USERS_INFORMED' | 'BRING_BACK_LAPSED_USERS';

export type AppEventsResponse = {
    data: Array<AppEvent>;
    included?: Array<AppEventLocalization>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppEventResponse = {
    data: AppEvent;
    included?: Array<AppEventLocalization>;
    links: DocumentLinks;
};

export type AppEventCreateRequest = {
    data: {
        type: 'appEvents';
        attributes: {
            referenceName: string;
            badge?: 'LIVE_EVENT' | 'PREMIERE' | 'CHALLENGE' | 'COMPETITION' | 'NEW_SEASON' | 'MAJOR_UPDATE' | 'SPECIAL_EVENT';
            deepLink?: string;
            purchaseRequirement?: string;
            primaryLocale?: string;
            priority?: 'HIGH' | 'NORMAL';
            purpose?: 'APPROPRIATE_FOR_ALL_USERS' | 'ATTRACT_NEW_USERS' | 'KEEP_ACTIVE_USERS_INFORMED' | 'BRING_BACK_LAPSED_USERS';
            territorySchedules?: Array<{
                territories?: Array<(string)>;
                publishStart?: string;
                eventStart?: string;
                eventEnd?: string;
            }>;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type AppEventUpdateRequest = {
    data: {
        type: 'appEvents';
        id: string;
        attributes?: {
            referenceName?: string;
            badge?: 'LIVE_EVENT' | 'PREMIERE' | 'CHALLENGE' | 'COMPETITION' | 'NEW_SEASON' | 'MAJOR_UPDATE' | 'SPECIAL_EVENT';
            deepLink?: string;
            purchaseRequirement?: string;
            primaryLocale?: string;
            priority?: 'HIGH' | 'NORMAL';
            purpose?: 'APPROPRIATE_FOR_ALL_USERS' | 'ATTRACT_NEW_USERS' | 'KEEP_ACTIVE_USERS_INFORMED' | 'BRING_BACK_LAPSED_USERS';
            territorySchedules?: Array<{
                territories?: Array<(string)>;
                publishStart?: string;
                eventStart?: string;
                eventEnd?: string;
            }>;
        };
    };
};

export type AppInfoLocalization = {
    type: 'appInfoLocalizations';
    id: string;
    attributes?: {
        locale?: string;
        name?: string;
        subtitle?: string;
        privacyPolicyUrl?: string;
        privacyChoicesUrl?: string;
        privacyPolicyText?: string;
    };
    relationships?: {
        appInfo?: {
            data?: {
                type: 'appInfos';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type33 = 'appInfoLocalizations';

export type AppInfoLocalizationsResponse = {
    data: Array<AppInfoLocalization>;
    included?: Array<AppInfo>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppInfoLocalizationResponse = {
    data: AppInfoLocalization;
    included?: Array<AppInfo>;
    links: DocumentLinks;
};

export type AppInfoLocalizationCreateRequest = {
    data: {
        type: 'appInfoLocalizations';
        attributes: {
            locale: string;
            name?: string;
            subtitle?: string;
            privacyPolicyUrl?: string;
            privacyChoicesUrl?: string;
            privacyPolicyText?: string;
        };
        relationships: {
            appInfo: {
                data: {
                    type: 'appInfos';
                    id: string;
                };
            };
        };
    };
};

export type AppInfoLocalizationUpdateRequest = {
    data: {
        type: 'appInfoLocalizations';
        id: string;
        attributes?: {
            name?: string;
            subtitle?: string;
            privacyPolicyUrl?: string;
            privacyChoicesUrl?: string;
            privacyPolicyText?: string;
        };
    };
};

export type AppInfo = {
    type: 'appInfos';
    id: string;
    attributes?: {
        /**
         * @deprecated
         */
        appStoreState?: AppStoreVersionState;
        state?: 'ACCEPTED' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'PENDING_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'READY_FOR_DISTRIBUTION' | 'READY_FOR_REVIEW' | 'REJECTED' | 'REPLACED_WITH_NEW_INFO' | 'WAITING_FOR_REVIEW';
        appStoreAgeRating?: AppStoreAgeRating;
        australiaAgeRating?: 'FIFTEEN' | 'EIGHTEEN';
        /**
         * @deprecated
         */
        brazilAgeRating?: BrazilAgeRating;
        brazilAgeRatingV2?: 'SELF_RATED_L' | 'SELF_RATED_TEN' | 'SELF_RATED_TWELVE' | 'SELF_RATED_FOURTEEN' | 'SELF_RATED_SIXTEEN' | 'SELF_RATED_EIGHTEEN' | 'OFFICIAL_L' | 'OFFICIAL_TEN' | 'OFFICIAL_TWELVE' | 'OFFICIAL_FOURTEEN' | 'OFFICIAL_SIXTEEN' | 'OFFICIAL_EIGHTEEN';
        koreaAgeRating?: 'ALL' | 'TWELVE' | 'FIFTEEN' | 'NINETEEN' | 'NOT_APPLICABLE';
        kidsAgeBand?: KidsAgeBand;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        ageRatingDeclaration?: {
            links?: RelationshipLinks;
            data?: {
                type: 'ageRatingDeclarations';
                id: string;
            };
        };
        appInfoLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appInfoLocalizations';
                id: string;
            }>;
        };
        primaryCategory?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appCategories';
                id: string;
            };
        };
        primarySubcategoryOne?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appCategories';
                id: string;
            };
        };
        primarySubcategoryTwo?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appCategories';
                id: string;
            };
        };
        secondaryCategory?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appCategories';
                id: string;
            };
        };
        secondarySubcategoryOne?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appCategories';
                id: string;
            };
        };
        secondarySubcategoryTwo?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appCategories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type34 = 'appInfos';

export type state3 = 'ACCEPTED' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'PENDING_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'READY_FOR_DISTRIBUTION' | 'READY_FOR_REVIEW' | 'REJECTED' | 'REPLACED_WITH_NEW_INFO' | 'WAITING_FOR_REVIEW';

export type australiaAgeRating = 'FIFTEEN' | 'EIGHTEEN';

export type brazilAgeRatingV2 = 'SELF_RATED_L' | 'SELF_RATED_TEN' | 'SELF_RATED_TWELVE' | 'SELF_RATED_FOURTEEN' | 'SELF_RATED_SIXTEEN' | 'SELF_RATED_EIGHTEEN' | 'OFFICIAL_L' | 'OFFICIAL_TEN' | 'OFFICIAL_TWELVE' | 'OFFICIAL_FOURTEEN' | 'OFFICIAL_SIXTEEN' | 'OFFICIAL_EIGHTEEN';

export type koreaAgeRating = 'ALL' | 'TWELVE' | 'FIFTEEN' | 'NINETEEN' | 'NOT_APPLICABLE';

export type AppInfosResponse = {
    data: Array<AppInfo>;
    included?: Array<(App | AgeRatingDeclaration | AppInfoLocalization | AppCategory)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppInfoResponse = {
    data: AppInfo;
    included?: Array<(App | AgeRatingDeclaration | AppInfoLocalization | AppCategory)>;
    links: DocumentLinks;
};

export type AppInfoUpdateRequest = {
    data: {
        type: 'appInfos';
        id: string;
        relationships?: {
            primaryCategory?: {
                data?: {
                    type: 'appCategories';
                    id: string;
                };
            };
            primarySubcategoryOne?: {
                data?: {
                    type: 'appCategories';
                    id: string;
                };
            };
            primarySubcategoryTwo?: {
                data?: {
                    type: 'appCategories';
                    id: string;
                };
            };
            secondaryCategory?: {
                data?: {
                    type: 'appCategories';
                    id: string;
                };
            };
            secondarySubcategoryOne?: {
                data?: {
                    type: 'appCategories';
                    id: string;
                };
            };
            secondarySubcategoryTwo?: {
                data?: {
                    type: 'appCategories';
                    id: string;
                };
            };
        };
    };
};

/**
 * @deprecated
 */
export type AppPreOrder = {
    type: 'appPreOrders';
    id: string;
    attributes?: {
        preOrderAvailableDate?: string;
        appReleaseDate?: string;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type35 = 'appPreOrders';

/**
 * @deprecated
 */
export type AppPreOrderResponse = {
    data: AppPreOrder;
    included?: Array<App>;
    links: DocumentLinks;
};

/**
 * @deprecated
 */
export type AppPreOrderCreateRequest = {
    data: {
        type: 'appPreOrders';
        attributes?: {
            appReleaseDate?: string;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

/**
 * @deprecated
 */
export type AppPreOrderUpdateRequest = {
    data: {
        type: 'appPreOrders';
        id: string;
        attributes?: {
            appReleaseDate?: string;
        };
    };
};

export type AppPreviewSet = {
    type: 'appPreviewSets';
    id: string;
    attributes?: {
        previewType?: PreviewType;
    };
    relationships?: {
        appStoreVersionLocalization?: {
            data?: {
                type: 'appStoreVersionLocalizations';
                id: string;
            };
        };
        appCustomProductPageLocalization?: {
            data?: {
                type: 'appCustomProductPageLocalizations';
                id: string;
            };
        };
        appStoreVersionExperimentTreatmentLocalization?: {
            data?: {
                type: 'appStoreVersionExperimentTreatmentLocalizations';
                id: string;
            };
        };
        appPreviews?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appPreviews';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type36 = 'appPreviewSets';

export type AppPreviewSetsResponse = {
    data: Array<AppPreviewSet>;
    included?: Array<(AppStoreVersionLocalization | AppCustomProductPageLocalization | AppStoreVersionExperimentTreatmentLocalization | AppPreview)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppPreviewSetResponse = {
    data: AppPreviewSet;
    included?: Array<(AppStoreVersionLocalization | AppCustomProductPageLocalization | AppStoreVersionExperimentTreatmentLocalization | AppPreview)>;
    links: DocumentLinks;
};

export type AppPreviewSetCreateRequest = {
    data: {
        type: 'appPreviewSets';
        attributes: {
            previewType: PreviewType;
        };
        relationships?: {
            appStoreVersionLocalization?: {
                data?: {
                    type: 'appStoreVersionLocalizations';
                    id: string;
                };
            };
            appCustomProductPageLocalization?: {
                data?: {
                    type: 'appCustomProductPageLocalizations';
                    id: string;
                };
            };
            appStoreVersionExperimentTreatmentLocalization?: {
                data?: {
                    type: 'appStoreVersionExperimentTreatmentLocalizations';
                    id: string;
                };
            };
        };
    };
};

export type AppPreview = {
    type: 'appPreviews';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        previewFrameTimeCode?: string;
        mimeType?: string;
        videoUrl?: string;
        previewImage?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        appPreviewSet?: {
            data?: {
                type: 'appPreviewSets';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type37 = 'appPreviews';

export type AppPreviewsResponse = {
    data: Array<AppPreview>;
    included?: Array<AppPreviewSet>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppPreviewResponse = {
    data: AppPreview;
    included?: Array<AppPreviewSet>;
    links: DocumentLinks;
};

export type AppPreviewCreateRequest = {
    data: {
        type: 'appPreviews';
        attributes: {
            fileSize: number;
            fileName: string;
            previewFrameTimeCode?: string;
            mimeType?: string;
        };
        relationships: {
            appPreviewSet: {
                data: {
                    type: 'appPreviewSets';
                    id: string;
                };
            };
        };
    };
};

export type AppPreviewUpdateRequest = {
    data: {
        type: 'appPreviews';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            previewFrameTimeCode?: string;
            uploaded?: boolean;
        };
    };
};

export type AppPricePointV3 = {
    type: 'appPricePoints';
    id: string;
    attributes?: {
        customerPrice?: string;
        proceeds?: string;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        equalizations?: {
            links?: RelationshipLinks;
        };
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type38 = 'appPricePoints';

export type AppPricePointsV3Response = {
    data: Array<AppPricePointV3>;
    included?: Array<(App | Territory)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppPricePointV3Response = {
    data: AppPricePointV3;
    included?: Array<(App | Territory)>;
    links: DocumentLinks;
};

export type AppPriceSchedule = {
    type: 'appPriceSchedules';
    id: string;
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        baseTerritory?: {
            links?: RelationshipLinks;
            data?: {
                type: 'territories';
                id: string;
            };
        };
        manualPrices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appPrices';
                id: string;
            }>;
        };
        automaticPrices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appPrices';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type39 = 'appPriceSchedules';

export type AppPriceScheduleResponse = {
    data: AppPriceSchedule;
    included?: Array<(App | Territory | AppPriceV2)>;
    links: DocumentLinks;
};

export type AppPriceScheduleCreateRequest = {
    data: {
        type: 'appPriceSchedules';
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
            baseTerritory: {
                data: {
                    type: 'territories';
                    id: string;
                };
            };
            manualPrices: {
                data: Array<{
                    type: 'appPrices';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<(AppPriceV2InlineCreate | TerritoryInlineCreate)>;
};

export type AppPriceV2 = {
    type: 'appPrices';
    id: string;
    attributes?: {
        manual?: boolean;
        startDate?: string;
        endDate?: string;
    };
    relationships?: {
        appPricePoint?: {
            data?: {
                type: 'appPricePoints';
                id: string;
            };
        };
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type40 = 'appPrices';

export type AppPriceV2InlineCreate = {
    type: 'appPrices';
    id?: string;
};

export type AppPricesV2Response = {
    data: Array<AppPriceV2>;
    included?: Array<(AppPricePointV3 | Territory)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppScreenshotSet = {
    type: 'appScreenshotSets';
    id: string;
    attributes?: {
        screenshotDisplayType?: ScreenshotDisplayType;
    };
    relationships?: {
        appStoreVersionLocalization?: {
            data?: {
                type: 'appStoreVersionLocalizations';
                id: string;
            };
        };
        appCustomProductPageLocalization?: {
            data?: {
                type: 'appCustomProductPageLocalizations';
                id: string;
            };
        };
        appStoreVersionExperimentTreatmentLocalization?: {
            data?: {
                type: 'appStoreVersionExperimentTreatmentLocalizations';
                id: string;
            };
        };
        appScreenshots?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appScreenshots';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type41 = 'appScreenshotSets';

export type AppScreenshotSetsResponse = {
    data: Array<AppScreenshotSet>;
    included?: Array<(AppStoreVersionLocalization | AppCustomProductPageLocalization | AppStoreVersionExperimentTreatmentLocalization | AppScreenshot)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppScreenshotSetResponse = {
    data: AppScreenshotSet;
    included?: Array<(AppStoreVersionLocalization | AppCustomProductPageLocalization | AppStoreVersionExperimentTreatmentLocalization | AppScreenshot)>;
    links: DocumentLinks;
};

export type AppScreenshotSetCreateRequest = {
    data: {
        type: 'appScreenshotSets';
        attributes: {
            screenshotDisplayType: ScreenshotDisplayType;
        };
        relationships?: {
            appStoreVersionLocalization?: {
                data?: {
                    type: 'appStoreVersionLocalizations';
                    id: string;
                };
            };
            appCustomProductPageLocalization?: {
                data?: {
                    type: 'appCustomProductPageLocalizations';
                    id: string;
                };
            };
            appStoreVersionExperimentTreatmentLocalization?: {
                data?: {
                    type: 'appStoreVersionExperimentTreatmentLocalizations';
                    id: string;
                };
            };
        };
    };
};

export type AppScreenshot = {
    type: 'appScreenshots';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        imageAsset?: ImageAsset;
        assetToken?: string;
        assetType?: string;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        appScreenshotSet?: {
            data?: {
                type: 'appScreenshotSets';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type42 = 'appScreenshots';

export type AppScreenshotsResponse = {
    data: Array<AppScreenshot>;
    included?: Array<AppScreenshotSet>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppScreenshotResponse = {
    data: AppScreenshot;
    included?: Array<AppScreenshotSet>;
    links: DocumentLinks;
};

export type AppScreenshotCreateRequest = {
    data: {
        type: 'appScreenshots';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            appScreenshotSet: {
                data: {
                    type: 'appScreenshotSets';
                    id: string;
                };
            };
        };
    };
};

export type AppScreenshotUpdateRequest = {
    data: {
        type: 'appScreenshots';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type AppStoreReviewAttachment = {
    type: 'appStoreReviewAttachments';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        appStoreReviewDetail?: {
            data?: {
                type: 'appStoreReviewDetails';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type43 = 'appStoreReviewAttachments';

export type AppStoreReviewAttachmentsResponse = {
    data: Array<AppStoreReviewAttachment>;
    included?: Array<AppStoreReviewDetail>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppStoreReviewAttachmentResponse = {
    data: AppStoreReviewAttachment;
    included?: Array<AppStoreReviewDetail>;
    links: DocumentLinks;
};

export type AppStoreReviewAttachmentCreateRequest = {
    data: {
        type: 'appStoreReviewAttachments';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            appStoreReviewDetail: {
                data: {
                    type: 'appStoreReviewDetails';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreReviewAttachmentUpdateRequest = {
    data: {
        type: 'appStoreReviewAttachments';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type AppStoreReviewDetail = {
    type: 'appStoreReviewDetails';
    id: string;
    attributes?: {
        contactFirstName?: string;
        contactLastName?: string;
        contactPhone?: string;
        contactEmail?: string;
        demoAccountName?: string;
        demoAccountPassword?: string;
        demoAccountRequired?: boolean;
        notes?: string;
    };
    relationships?: {
        appStoreVersion?: {
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
        appStoreReviewAttachments?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreReviewAttachments';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type44 = 'appStoreReviewDetails';

export type AppStoreReviewDetailResponse = {
    data: AppStoreReviewDetail;
    included?: Array<(AppStoreVersion | AppStoreReviewAttachment)>;
    links: DocumentLinks;
};

export type AppStoreReviewDetailCreateRequest = {
    data: {
        type: 'appStoreReviewDetails';
        attributes?: {
            contactFirstName?: string;
            contactLastName?: string;
            contactPhone?: string;
            contactEmail?: string;
            demoAccountName?: string;
            demoAccountPassword?: string;
            demoAccountRequired?: boolean;
            notes?: string;
        };
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreReviewDetailUpdateRequest = {
    data: {
        type: 'appStoreReviewDetails';
        id: string;
        attributes?: {
            contactFirstName?: string;
            contactLastName?: string;
            contactPhone?: string;
            contactEmail?: string;
            demoAccountName?: string;
            demoAccountPassword?: string;
            demoAccountRequired?: boolean;
            notes?: string;
        };
    };
};

export type AppStoreVersionExperimentTreatmentLocalization = {
    type: 'appStoreVersionExperimentTreatmentLocalizations';
    id: string;
    attributes?: {
        locale?: string;
    };
    relationships?: {
        appStoreVersionExperimentTreatment?: {
            data?: {
                type: 'appStoreVersionExperimentTreatments';
                id: string;
            };
        };
        appScreenshotSets?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appScreenshotSets';
                id: string;
            }>;
        };
        appPreviewSets?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appPreviewSets';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type45 = 'appStoreVersionExperimentTreatmentLocalizations';

export type AppStoreVersionExperimentTreatmentLocalizationsResponse = {
    data: Array<AppStoreVersionExperimentTreatmentLocalization>;
    included?: Array<(AppStoreVersionExperimentTreatment | AppScreenshotSet | AppPreviewSet)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppStoreVersionExperimentTreatmentLocalizationResponse = {
    data: AppStoreVersionExperimentTreatmentLocalization;
    included?: Array<(AppStoreVersionExperimentTreatment | AppScreenshotSet | AppPreviewSet)>;
    links: DocumentLinks;
};

export type AppStoreVersionExperimentTreatmentLocalizationCreateRequest = {
    data: {
        type: 'appStoreVersionExperimentTreatmentLocalizations';
        attributes: {
            locale: string;
        };
        relationships: {
            appStoreVersionExperimentTreatment: {
                data: {
                    type: 'appStoreVersionExperimentTreatments';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreVersionExperimentTreatment = {
    type: 'appStoreVersionExperimentTreatments';
    id: string;
    attributes?: {
        name?: string;
        appIcon?: ImageAsset;
        appIconName?: string;
        promotedDate?: string;
    };
    relationships?: {
        appStoreVersionExperiment?: {
            data?: {
                type: 'appStoreVersionExperiments';
                id: string;
            };
        };
        appStoreVersionExperimentV2?: {
            data?: {
                type: 'appStoreVersionExperiments';
                id: string;
            };
        };
        appStoreVersionExperimentTreatmentLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersionExperimentTreatmentLocalizations';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type46 = 'appStoreVersionExperimentTreatments';

export type AppStoreVersionExperimentTreatmentsResponse = {
    data: Array<AppStoreVersionExperimentTreatment>;
    included?: Array<(AppStoreVersionExperiment | AppStoreVersionExperimentV2 | AppStoreVersionExperimentTreatmentLocalization)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppStoreVersionExperimentTreatmentResponse = {
    data: AppStoreVersionExperimentTreatment;
    included?: Array<(AppStoreVersionExperiment | AppStoreVersionExperimentV2 | AppStoreVersionExperimentTreatmentLocalization)>;
    links: DocumentLinks;
};

export type AppStoreVersionExperimentTreatmentCreateRequest = {
    data: {
        type: 'appStoreVersionExperimentTreatments';
        attributes: {
            name: string;
            appIconName?: string;
        };
        relationships?: {
            appStoreVersionExperiment?: {
                data?: {
                    type: 'appStoreVersionExperiments';
                    id: string;
                };
            };
            appStoreVersionExperimentV2?: {
                data?: {
                    type: 'appStoreVersionExperiments';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreVersionExperimentTreatmentUpdateRequest = {
    data: {
        type: 'appStoreVersionExperimentTreatments';
        id: string;
        attributes?: {
            name?: string;
            appIconName?: string;
        };
    };
};

export type AppStoreVersionExperimentV2 = {
    type: 'appStoreVersionExperiments';
    id: string;
    attributes?: {
        name?: string;
        platform?: Platform;
        trafficProportion?: number;
        state?: 'PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REJECTED' | 'COMPLETED' | 'STOPPED';
        reviewRequired?: boolean;
        startDate?: string;
        endDate?: string;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        latestControlVersion?: {
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
        controlVersions?: {
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersions';
                id: string;
            }>;
        };
        appStoreVersionExperimentTreatments?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersionExperimentTreatments';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type47 = 'appStoreVersionExperiments';

export type state4 = 'PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REJECTED' | 'COMPLETED' | 'STOPPED';

export type AppStoreVersionExperimentsV2Response = {
    data: Array<AppStoreVersionExperimentV2>;
    included?: Array<(App | AppStoreVersion | AppStoreVersionExperimentTreatment)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppStoreVersionExperimentV2Response = {
    data: AppStoreVersionExperimentV2;
    included?: Array<(App | AppStoreVersion | AppStoreVersionExperimentTreatment)>;
    links: DocumentLinks;
};

export type AppStoreVersionExperimentV2CreateRequest = {
    data: {
        type: 'appStoreVersionExperiments';
        attributes: {
            name: string;
            platform: Platform;
            trafficProportion: number;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreVersionExperimentV2UpdateRequest = {
    data: {
        type: 'appStoreVersionExperiments';
        id: string;
        attributes?: {
            name?: string;
            trafficProportion?: number;
            started?: boolean;
        };
    };
};

/**
 * @deprecated
 */
export type AppStoreVersionExperiment = {
    type: 'appStoreVersionExperiments';
    id: string;
    attributes?: {
        name?: string;
        trafficProportion?: number;
        state?: 'PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REJECTED' | 'COMPLETED' | 'STOPPED';
        reviewRequired?: boolean;
        startDate?: string;
        endDate?: string;
    };
    relationships?: {
        appStoreVersion?: {
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
        appStoreVersionExperimentTreatments?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersionExperimentTreatments';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

/**
 * @deprecated
 */
export type AppStoreVersionExperimentsResponse = {
    data: Array<AppStoreVersionExperiment>;
    included?: Array<(AppStoreVersion | AppStoreVersionExperimentTreatment)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

/**
 * @deprecated
 */
export type AppStoreVersionExperimentResponse = {
    data: AppStoreVersionExperiment;
    included?: Array<(AppStoreVersion | AppStoreVersionExperimentTreatment)>;
    links: DocumentLinks;
};

/**
 * @deprecated
 */
export type AppStoreVersionExperimentCreateRequest = {
    data: {
        type: 'appStoreVersionExperiments';
        attributes: {
            name: string;
            trafficProportion: number;
        };
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

/**
 * @deprecated
 */
export type AppStoreVersionExperimentUpdateRequest = {
    data: {
        type: 'appStoreVersionExperiments';
        id: string;
        attributes?: {
            name?: string;
            trafficProportion?: number;
            started?: boolean;
        };
    };
};

export type AppStoreVersionLocalization = {
    type: 'appStoreVersionLocalizations';
    id: string;
    attributes?: {
        description?: string;
        locale?: string;
        keywords?: string;
        marketingUrl?: string;
        promotionalText?: string;
        supportUrl?: string;
        whatsNew?: string;
    };
    relationships?: {
        appStoreVersion?: {
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
        appScreenshotSets?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appScreenshotSets';
                id: string;
            }>;
        };
        appPreviewSets?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appPreviewSets';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type48 = 'appStoreVersionLocalizations';

export type AppStoreVersionLocalizationsResponse = {
    data: Array<AppStoreVersionLocalization>;
    included?: Array<(AppStoreVersion | AppScreenshotSet | AppPreviewSet)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppStoreVersionLocalizationResponse = {
    data: AppStoreVersionLocalization;
    included?: Array<(AppStoreVersion | AppScreenshotSet | AppPreviewSet)>;
    links: DocumentLinks;
};

export type AppStoreVersionLocalizationCreateRequest = {
    data: {
        type: 'appStoreVersionLocalizations';
        attributes: {
            description?: string;
            locale: string;
            keywords?: string;
            marketingUrl?: string;
            promotionalText?: string;
            supportUrl?: string;
            whatsNew?: string;
        };
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreVersionLocalizationUpdateRequest = {
    data: {
        type: 'appStoreVersionLocalizations';
        id: string;
        attributes?: {
            description?: string;
            keywords?: string;
            marketingUrl?: string;
            promotionalText?: string;
            supportUrl?: string;
            whatsNew?: string;
        };
    };
};

export type AppStoreVersionPhasedRelease = {
    type: 'appStoreVersionPhasedReleases';
    id: string;
    attributes?: {
        phasedReleaseState?: PhasedReleaseState;
        startDate?: string;
        totalPauseDuration?: number;
        currentDayNumber?: number;
    };
    links?: ResourceLinks;
};

export type type49 = 'appStoreVersionPhasedReleases';

export type AppStoreVersionPhasedReleaseResponse = {
    data: AppStoreVersionPhasedRelease;
    links: DocumentLinks;
};

export type AppStoreVersionPhasedReleaseCreateRequest = {
    data: {
        type: 'appStoreVersionPhasedReleases';
        attributes?: {
            phasedReleaseState?: PhasedReleaseState;
        };
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreVersionPhasedReleaseUpdateRequest = {
    data: {
        type: 'appStoreVersionPhasedReleases';
        id: string;
        attributes?: {
            phasedReleaseState?: PhasedReleaseState;
        };
    };
};

export type AppStoreVersionPromotion = {
    type: 'appStoreVersionPromotions';
    id: string;
    links?: ResourceLinks;
};

export type type50 = 'appStoreVersionPromotions';

export type AppStoreVersionPromotionResponse = {
    data: AppStoreVersionPromotion;
    links: DocumentLinks;
};

export type AppStoreVersionPromotionCreateRequest = {
    data: {
        type: 'appStoreVersionPromotions';
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
            appStoreVersionExperimentTreatment: {
                data: {
                    type: 'appStoreVersionExperimentTreatments';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreVersionReleaseRequest = {
    type: 'appStoreVersionReleaseRequests';
    id: string;
    links?: ResourceLinks;
};

export type type51 = 'appStoreVersionReleaseRequests';

export type AppStoreVersionReleaseRequestResponse = {
    data: AppStoreVersionReleaseRequest;
    links: DocumentLinks;
};

export type AppStoreVersionReleaseRequestCreateRequest = {
    data: {
        type: 'appStoreVersionReleaseRequests';
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

/**
 * @deprecated
 */
export type AppStoreVersionSubmission = {
    type: 'appStoreVersionSubmissions';
    id: string;
    relationships?: {
        appStoreVersion?: {
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type52 = 'appStoreVersionSubmissions';

/**
 * @deprecated
 */
export type AppStoreVersionSubmissionResponse = {
    data: AppStoreVersionSubmission;
    included?: Array<AppStoreVersion>;
    links: DocumentLinks;
};

/**
 * @deprecated
 */
export type AppStoreVersionSubmissionCreateRequest = {
    data: {
        type: 'appStoreVersionSubmissions';
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreVersion = {
    type: 'appStoreVersions';
    id: string;
    attributes?: {
        platform?: Platform;
        versionString?: string;
        /**
         * @deprecated
         */
        appStoreState?: AppStoreVersionState;
        appVersionState?: AppVersionState;
        copyright?: string;
        reviewType?: 'APP_STORE' | 'NOTARIZATION';
        releaseType?: 'MANUAL' | 'AFTER_APPROVAL' | 'SCHEDULED';
        earliestReleaseDate?: string;
        downloadable?: boolean;
        createdDate?: string;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        /**
         * @deprecated
         */
        ageRatingDeclaration?: {
            links?: RelationshipLinks;
            data?: {
                type: 'ageRatingDeclarations';
                id: string;
            };
        };
        appStoreVersionLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersionLocalizations';
                id: string;
            }>;
        };
        build?: {
            links?: RelationshipLinks;
            data?: {
                type: 'builds';
                id: string;
            };
        };
        appStoreVersionPhasedRelease?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appStoreVersionPhasedReleases';
                id: string;
            };
        };
        gameCenterAppVersion?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterAppVersions';
                id: string;
            };
        };
        routingAppCoverage?: {
            links?: RelationshipLinks;
            data?: {
                type: 'routingAppCoverages';
                id: string;
            };
        };
        appStoreReviewDetail?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appStoreReviewDetails';
                id: string;
            };
        };
        appStoreVersionSubmission?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appStoreVersionSubmissions';
                id: string;
            };
        };
        appClipDefaultExperience?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appClipDefaultExperiences';
                id: string;
            };
        };
        appStoreVersionExperiments?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersionExperiments';
                id: string;
            }>;
        };
        appStoreVersionExperimentsV2?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersionExperiments';
                id: string;
            }>;
        };
        customerReviews?: {
            links?: RelationshipLinks;
        };
        alternativeDistributionPackage?: {
            links?: RelationshipLinks;
            data?: {
                type: 'alternativeDistributionPackages';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type53 = 'appStoreVersions';

export type reviewType = 'APP_STORE' | 'NOTARIZATION';

export type releaseType = 'MANUAL' | 'AFTER_APPROVAL' | 'SCHEDULED';

export type AppStoreVersionsResponse = {
    data: Array<AppStoreVersion>;
    included?: Array<(App | AgeRatingDeclaration | AppStoreVersionLocalization | Build | AppStoreVersionPhasedRelease | GameCenterAppVersion | RoutingAppCoverage | AppStoreReviewDetail | AppStoreVersionSubmission | AppClipDefaultExperience | AppStoreVersionExperiment | AppStoreVersionExperimentV2 | AlternativeDistributionPackage)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppStoreVersionResponse = {
    data: AppStoreVersion;
    included?: Array<(App | AgeRatingDeclaration | AppStoreVersionLocalization | Build | AppStoreVersionPhasedRelease | GameCenterAppVersion | RoutingAppCoverage | AppStoreReviewDetail | AppStoreVersionSubmission | AppClipDefaultExperience | AppStoreVersionExperiment | AppStoreVersionExperimentV2 | AlternativeDistributionPackage)>;
    links: DocumentLinks;
};

export type AppStoreVersionCreateRequest = {
    data: {
        type: 'appStoreVersions';
        attributes: {
            platform: Platform;
            versionString: string;
            copyright?: string;
            reviewType?: 'APP_STORE' | 'NOTARIZATION';
            releaseType?: 'MANUAL' | 'AFTER_APPROVAL' | 'SCHEDULED';
            earliestReleaseDate?: string;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
            appStoreVersionLocalizations?: {
                data?: Array<{
                    type: 'appStoreVersionLocalizations';
                    id: string;
                }>;
            };
            build?: {
                data?: {
                    type: 'builds';
                    id: string;
                };
            };
        };
    };
};

export type AppStoreVersionUpdateRequest = {
    data: {
        type: 'appStoreVersions';
        id: string;
        attributes?: {
            versionString?: string;
            copyright?: string;
            reviewType?: 'APP_STORE' | 'NOTARIZATION';
            releaseType?: 'MANUAL' | 'AFTER_APPROVAL' | 'SCHEDULED';
            earliestReleaseDate?: string;
            downloadable?: boolean;
        };
        relationships?: {
            build?: {
                data?: {
                    type: 'builds';
                    id: string;
                };
            };
            appClipDefaultExperience?: {
                data?: {
                    type: 'appClipDefaultExperiences';
                    id: string;
                };
            };
        };
    };
};

export type App = {
    type: 'apps';
    id: string;
    attributes?: {
        name?: string;
        bundleId?: string;
        sku?: string;
        primaryLocale?: string;
        isOrEverWasMadeForKids?: boolean;
        subscriptionStatusUrl?: string;
        subscriptionStatusUrlVersion?: SubscriptionStatusUrlVersion;
        subscriptionStatusUrlForSandbox?: string;
        subscriptionStatusUrlVersionForSandbox?: SubscriptionStatusUrlVersion;
        contentRightsDeclaration?: 'DOES_NOT_USE_THIRD_PARTY_CONTENT' | 'USES_THIRD_PARTY_CONTENT';
        streamlinedPurchasingEnabled?: boolean;
    };
    relationships?: {
        appEncryptionDeclarations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appEncryptionDeclarations';
                id: string;
            }>;
        };
        ciProduct?: {
            links?: RelationshipLinks;
            data?: {
                type: 'ciProducts';
                id: string;
            };
        };
        betaTesters?: {
            links?: RelationshipLinks;
        };
        betaGroups?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaGroups';
                id: string;
            }>;
        };
        appStoreVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersions';
                id: string;
            }>;
        };
        preReleaseVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'preReleaseVersions';
                id: string;
            }>;
        };
        betaAppLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaAppLocalizations';
                id: string;
            }>;
        };
        builds?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'builds';
                id: string;
            }>;
        };
        betaLicenseAgreement?: {
            links?: RelationshipLinks;
            data?: {
                type: 'betaLicenseAgreements';
                id: string;
            };
        };
        betaAppReviewDetail?: {
            links?: RelationshipLinks;
            data?: {
                type: 'betaAppReviewDetails';
                id: string;
            };
        };
        appInfos?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appInfos';
                id: string;
            }>;
        };
        appClips?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appClips';
                id: string;
            }>;
        };
        appPricePoints?: {
            links?: RelationshipLinks;
        };
        endUserLicenseAgreement?: {
            links?: RelationshipLinks;
            data?: {
                type: 'endUserLicenseAgreements';
                id: string;
            };
        };
        preOrder?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appPreOrders';
                id: string;
            };
        };
        appPriceSchedule?: {
            links?: RelationshipLinks;
        };
        appAvailability?: {
            links?: RelationshipLinks;
        };
        appAvailabilityV2?: {
            links?: RelationshipLinks;
        };
        /**
         * @deprecated
         */
        inAppPurchases?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'inAppPurchases';
                id: string;
            }>;
        };
        subscriptionGroups?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionGroups';
                id: string;
            }>;
        };
        gameCenterEnabledVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterEnabledVersions';
                id: string;
            }>;
        };
        perfPowerMetrics?: {
            links?: RelationshipLinks;
        };
        appCustomProductPages?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appCustomProductPages';
                id: string;
            }>;
        };
        inAppPurchasesV2?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'inAppPurchases';
                id: string;
            }>;
        };
        promotedPurchases?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'promotedPurchases';
                id: string;
            }>;
        };
        appEvents?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appEvents';
                id: string;
            }>;
        };
        reviewSubmissions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'reviewSubmissions';
                id: string;
            }>;
        };
        subscriptionGracePeriod?: {
            links?: RelationshipLinks;
            data?: {
                type: 'subscriptionGracePeriods';
                id: string;
            };
        };
        customerReviews?: {
            links?: RelationshipLinks;
        };
        gameCenterDetail?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterDetails';
                id: string;
            };
        };
        appStoreVersionExperimentsV2?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'appStoreVersionExperiments';
                id: string;
            }>;
        };
        alternativeDistributionKey?: {
            links?: RelationshipLinks;
        };
        analyticsReportRequests?: {
            links?: RelationshipLinks;
        };
        marketplaceSearchDetail?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type type54 = 'apps';

export type contentRightsDeclaration = 'DOES_NOT_USE_THIRD_PARTY_CONTENT' | 'USES_THIRD_PARTY_CONTENT';

export type AppsResponse = {
    data: Array<App>;
    included?: Array<(AppEncryptionDeclaration | CiProduct | BetaGroup | AppStoreVersion | PrereleaseVersion | BetaAppLocalization | Build | BetaLicenseAgreement | BetaAppReviewDetail | AppInfo | AppClip | EndUserLicenseAgreement | AppPreOrder | InAppPurchase | SubscriptionGroup | GameCenterEnabledVersion | AppCustomProductPage | InAppPurchaseV2 | PromotedPurchase | AppEvent | ReviewSubmission | SubscriptionGracePeriod | GameCenterDetail | AppStoreVersionExperimentV2)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppResponse = {
    data: App;
    included?: Array<(AppEncryptionDeclaration | CiProduct | BetaGroup | AppStoreVersion | PrereleaseVersion | BetaAppLocalization | Build | BetaLicenseAgreement | BetaAppReviewDetail | AppInfo | AppClip | EndUserLicenseAgreement | AppPreOrder | InAppPurchase | SubscriptionGroup | GameCenterEnabledVersion | AppCustomProductPage | InAppPurchaseV2 | PromotedPurchase | AppEvent | ReviewSubmission | SubscriptionGracePeriod | GameCenterDetail | AppStoreVersionExperimentV2)>;
    links: DocumentLinks;
};

export type AppUpdateRequest = {
    data: {
        type: 'apps';
        id: string;
        attributes?: {
            bundleId?: string;
            primaryLocale?: string;
            subscriptionStatusUrl?: string;
            subscriptionStatusUrlVersion?: SubscriptionStatusUrlVersion;
            subscriptionStatusUrlForSandbox?: string;
            subscriptionStatusUrlVersionForSandbox?: SubscriptionStatusUrlVersion;
            contentRightsDeclaration?: 'DOES_NOT_USE_THIRD_PARTY_CONTENT' | 'USES_THIRD_PARTY_CONTENT';
            streamlinedPurchasingEnabled?: boolean;
        };
    };
};

export type BetaAppClipInvocationLocalization = {
    type: 'betaAppClipInvocationLocalizations';
    id: string;
    attributes?: {
        title?: string;
        locale?: string;
    };
    links?: ResourceLinks;
};

export type type55 = 'betaAppClipInvocationLocalizations';

export type BetaAppClipInvocationLocalizationInlineCreate = {
    type: 'betaAppClipInvocationLocalizations';
    id?: string;
    attributes: {
        title: string;
        locale: string;
    };
    relationships?: {
        betaAppClipInvocation?: {
            data?: {
                type: 'betaAppClipInvocations';
                id: string;
            };
        };
    };
};

export type BetaAppClipInvocationLocalizationResponse = {
    data: BetaAppClipInvocationLocalization;
    links: DocumentLinks;
};

export type BetaAppClipInvocationLocalizationCreateRequest = {
    data: {
        type: 'betaAppClipInvocationLocalizations';
        attributes: {
            title: string;
            locale: string;
        };
        relationships: {
            betaAppClipInvocation: {
                data: {
                    type: 'betaAppClipInvocations';
                    id: string;
                };
            };
        };
    };
};

export type BetaAppClipInvocationLocalizationUpdateRequest = {
    data: {
        type: 'betaAppClipInvocationLocalizations';
        id: string;
        attributes?: {
            title?: string;
        };
    };
};

export type BetaAppClipInvocation = {
    type: 'betaAppClipInvocations';
    id: string;
    attributes?: {
        url?: string;
    };
    relationships?: {
        betaAppClipInvocationLocalizations?: {
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaAppClipInvocationLocalizations';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type56 = 'betaAppClipInvocations';

export type BetaAppClipInvocationsResponse = {
    data: Array<BetaAppClipInvocation>;
    included?: Array<BetaAppClipInvocationLocalization>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaAppClipInvocationResponse = {
    data: BetaAppClipInvocation;
    included?: Array<BetaAppClipInvocationLocalization>;
    links: DocumentLinks;
};

export type BetaAppClipInvocationCreateRequest = {
    data: {
        type: 'betaAppClipInvocations';
        attributes: {
            url: string;
        };
        relationships: {
            buildBundle: {
                data: {
                    type: 'buildBundles';
                    id: string;
                };
            };
            betaAppClipInvocationLocalizations: {
                data: Array<{
                    type: 'betaAppClipInvocationLocalizations';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<BetaAppClipInvocationLocalizationInlineCreate>;
};

export type BetaAppClipInvocationUpdateRequest = {
    data: {
        type: 'betaAppClipInvocations';
        id: string;
        attributes?: {
            url?: string;
        };
    };
};

export type BetaAppLocalization = {
    type: 'betaAppLocalizations';
    id: string;
    attributes?: {
        feedbackEmail?: string;
        marketingUrl?: string;
        privacyPolicyUrl?: string;
        tvOsPrivacyPolicy?: string;
        description?: string;
        locale?: string;
    };
    relationships?: {
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type57 = 'betaAppLocalizations';

export type BetaAppLocalizationsResponse = {
    data: Array<BetaAppLocalization>;
    included?: Array<App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaAppLocalizationResponse = {
    data: BetaAppLocalization;
    included?: Array<App>;
    links: DocumentLinks;
};

export type BetaAppLocalizationCreateRequest = {
    data: {
        type: 'betaAppLocalizations';
        attributes: {
            feedbackEmail?: string;
            marketingUrl?: string;
            privacyPolicyUrl?: string;
            tvOsPrivacyPolicy?: string;
            description?: string;
            locale: string;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type BetaAppLocalizationUpdateRequest = {
    data: {
        type: 'betaAppLocalizations';
        id: string;
        attributes?: {
            feedbackEmail?: string;
            marketingUrl?: string;
            privacyPolicyUrl?: string;
            tvOsPrivacyPolicy?: string;
            description?: string;
        };
    };
};

export type BetaAppReviewDetail = {
    type: 'betaAppReviewDetails';
    id: string;
    attributes?: {
        contactFirstName?: string;
        contactLastName?: string;
        contactPhone?: string;
        contactEmail?: string;
        demoAccountName?: string;
        demoAccountPassword?: string;
        demoAccountRequired?: boolean;
        notes?: string;
    };
    relationships?: {
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type58 = 'betaAppReviewDetails';

export type BetaAppReviewDetailsResponse = {
    data: Array<BetaAppReviewDetail>;
    included?: Array<App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaAppReviewDetailResponse = {
    data: BetaAppReviewDetail;
    included?: Array<App>;
    links: DocumentLinks;
};

export type BetaAppReviewDetailUpdateRequest = {
    data: {
        type: 'betaAppReviewDetails';
        id: string;
        attributes?: {
            contactFirstName?: string;
            contactLastName?: string;
            contactPhone?: string;
            contactEmail?: string;
            demoAccountName?: string;
            demoAccountPassword?: string;
            demoAccountRequired?: boolean;
            notes?: string;
        };
    };
};

export type BetaAppReviewSubmission = {
    type: 'betaAppReviewSubmissions';
    id: string;
    attributes?: {
        betaReviewState?: BetaReviewState;
        submittedDate?: string;
    };
    relationships?: {
        build?: {
            links?: RelationshipLinks;
            data?: {
                type: 'builds';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type59 = 'betaAppReviewSubmissions';

export type BetaAppReviewSubmissionsResponse = {
    data: Array<BetaAppReviewSubmission>;
    included?: Array<Build>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaAppReviewSubmissionResponse = {
    data: BetaAppReviewSubmission;
    included?: Array<Build>;
    links: DocumentLinks;
};

export type BetaAppReviewSubmissionCreateRequest = {
    data: {
        type: 'betaAppReviewSubmissions';
        relationships: {
            build: {
                data: {
                    type: 'builds';
                    id: string;
                };
            };
        };
    };
};

export type BetaBuildLocalization = {
    type: 'betaBuildLocalizations';
    id: string;
    attributes?: {
        whatsNew?: string;
        locale?: string;
    };
    relationships?: {
        build?: {
            links?: RelationshipLinks;
            data?: {
                type: 'builds';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type60 = 'betaBuildLocalizations';

export type BetaBuildLocalizationsResponse = {
    data: Array<BetaBuildLocalization>;
    included?: Array<Build>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaBuildLocalizationResponse = {
    data: BetaBuildLocalization;
    included?: Array<Build>;
    links: DocumentLinks;
};

export type BetaBuildLocalizationCreateRequest = {
    data: {
        type: 'betaBuildLocalizations';
        attributes: {
            whatsNew?: string;
            locale: string;
        };
        relationships: {
            build: {
                data: {
                    type: 'builds';
                    id: string;
                };
            };
        };
    };
};

export type BetaBuildLocalizationUpdateRequest = {
    data: {
        type: 'betaBuildLocalizations';
        id: string;
        attributes?: {
            whatsNew?: string;
        };
    };
};

export type BetaGroup = {
    type: 'betaGroups';
    id: string;
    attributes?: {
        name?: string;
        createdDate?: string;
        isInternalGroup?: boolean;
        hasAccessToAllBuilds?: boolean;
        publicLinkEnabled?: boolean;
        publicLinkId?: string;
        publicLinkLimitEnabled?: boolean;
        publicLinkLimit?: number;
        publicLink?: string;
        feedbackEnabled?: boolean;
        iosBuildsAvailableForAppleSiliconMac?: boolean;
    };
    relationships?: {
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
        builds?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'builds';
                id: string;
            }>;
        };
        betaTesters?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaTesters';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type61 = 'betaGroups';

export type BetaGroupsResponse = {
    data: Array<BetaGroup>;
    included?: Array<(App | Build | BetaTester)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaGroupResponse = {
    data: BetaGroup;
    included?: Array<(App | Build | BetaTester)>;
    links: DocumentLinks;
};

export type BetaGroupCreateRequest = {
    data: {
        type: 'betaGroups';
        attributes: {
            name: string;
            isInternalGroup?: boolean;
            hasAccessToAllBuilds?: boolean;
            publicLinkEnabled?: boolean;
            publicLinkLimitEnabled?: boolean;
            publicLinkLimit?: number;
            feedbackEnabled?: boolean;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
            builds?: {
                data?: Array<{
                    type: 'builds';
                    id: string;
                }>;
            };
            betaTesters?: {
                data?: Array<{
                    type: 'betaTesters';
                    id: string;
                }>;
            };
        };
    };
};

export type BetaGroupUpdateRequest = {
    data: {
        type: 'betaGroups';
        id: string;
        attributes?: {
            name?: string;
            publicLinkEnabled?: boolean;
            publicLinkLimitEnabled?: boolean;
            publicLinkLimit?: number;
            feedbackEnabled?: boolean;
            iosBuildsAvailableForAppleSiliconMac?: boolean;
        };
    };
};

export type BetaLicenseAgreement = {
    type: 'betaLicenseAgreements';
    id: string;
    attributes?: {
        agreementText?: string;
    };
    relationships?: {
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type62 = 'betaLicenseAgreements';

export type BetaLicenseAgreementsResponse = {
    data: Array<BetaLicenseAgreement>;
    included?: Array<App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaLicenseAgreementResponse = {
    data: BetaLicenseAgreement;
    included?: Array<App>;
    links: DocumentLinks;
};

export type BetaLicenseAgreementUpdateRequest = {
    data: {
        type: 'betaLicenseAgreements';
        id: string;
        attributes?: {
            agreementText?: string;
        };
    };
};

export type BetaTesterInvitation = {
    type: 'betaTesterInvitations';
    id: string;
    links?: ResourceLinks;
};

export type type63 = 'betaTesterInvitations';

export type BetaTesterInvitationResponse = {
    data: BetaTesterInvitation;
    links: DocumentLinks;
};

export type BetaTesterInvitationCreateRequest = {
    data: {
        type: 'betaTesterInvitations';
        relationships: {
            betaTester: {
                data: {
                    type: 'betaTesters';
                    id: string;
                };
            };
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type BetaTester = {
    type: 'betaTesters';
    id: string;
    attributes?: {
        firstName?: string;
        lastName?: string;
        email?: string;
        inviteType?: BetaInviteType;
        state?: BetaTesterState;
    };
    relationships?: {
        apps?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'apps';
                id: string;
            }>;
        };
        betaGroups?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaGroups';
                id: string;
            }>;
        };
        builds?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'builds';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type64 = 'betaTesters';

export type BetaTestersResponse = {
    data: Array<BetaTester>;
    included?: Array<(App | BetaGroup | Build)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaTesterResponse = {
    data: BetaTester;
    included?: Array<(App | BetaGroup | Build)>;
    links: DocumentLinks;
};

export type BetaTesterCreateRequest = {
    data: {
        type: 'betaTesters';
        attributes: {
            firstName?: string;
            lastName?: string;
            email: string;
        };
        relationships?: {
            betaGroups?: {
                data?: Array<{
                    type: 'betaGroups';
                    id: string;
                }>;
            };
            builds?: {
                data?: Array<{
                    type: 'builds';
                    id: string;
                }>;
            };
        };
    };
};

export type BuildBetaDetail = {
    type: 'buildBetaDetails';
    id: string;
    attributes?: {
        autoNotifyEnabled?: boolean;
        internalBuildState?: InternalBetaState;
        externalBuildState?: ExternalBetaState;
    };
    relationships?: {
        build?: {
            links?: RelationshipLinks;
            data?: {
                type: 'builds';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type65 = 'buildBetaDetails';

export type BuildBetaDetailsResponse = {
    data: Array<BuildBetaDetail>;
    included?: Array<Build>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BuildBetaDetailResponse = {
    data: BuildBetaDetail;
    included?: Array<Build>;
    links: DocumentLinks;
};

export type BuildBetaDetailUpdateRequest = {
    data: {
        type: 'buildBetaDetails';
        id: string;
        attributes?: {
            autoNotifyEnabled?: boolean;
        };
    };
};

export type BuildBetaNotification = {
    type: 'buildBetaNotifications';
    id: string;
    links?: ResourceLinks;
};

export type type66 = 'buildBetaNotifications';

export type BuildBetaNotificationResponse = {
    data: BuildBetaNotification;
    links: DocumentLinks;
};

export type BuildBetaNotificationCreateRequest = {
    data: {
        type: 'buildBetaNotifications';
        relationships: {
            build: {
                data: {
                    type: 'builds';
                    id: string;
                };
            };
        };
    };
};

export type BuildBundleFileSize = {
    type: 'buildBundleFileSizes';
    id: string;
    attributes?: {
        deviceModel?: string;
        osVersion?: string;
        downloadBytes?: number;
        installBytes?: number;
    };
    links?: ResourceLinks;
};

export type type67 = 'buildBundleFileSizes';

export type BuildBundleFileSizesResponse = {
    data: Array<BuildBundleFileSize>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BuildBundle = {
    type: 'buildBundles';
    id: string;
    attributes?: {
        bundleId?: string;
        bundleType?: 'APP' | 'APP_CLIP';
        sdkBuild?: string;
        platformBuild?: string;
        fileName?: string;
        hasSirikit?: boolean;
        hasOnDemandResources?: boolean;
        hasPrerenderedIcon?: boolean;
        usesLocationServices?: boolean;
        isIosBuildMacAppStoreCompatible?: boolean;
        includesSymbols?: boolean;
        dSYMUrl?: string;
        supportedArchitectures?: Array<(string)>;
        requiredCapabilities?: Array<(string)>;
        deviceProtocols?: Array<(string)>;
        locales?: Array<(string)>;
        entitlements?: {
            [key: string]: {
                [key: string]: (string);
            };
        };
    };
    relationships?: {
        appClipDomainCacheStatus?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appClipDomainStatuses';
                id: string;
            };
        };
        appClipDomainDebugStatus?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appClipDomainStatuses';
                id: string;
            };
        };
        betaAppClipInvocations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaAppClipInvocations';
                id: string;
            }>;
        };
        buildBundleFileSizes?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'buildBundleFileSizes';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type68 = 'buildBundles';

export type bundleType = 'APP' | 'APP_CLIP';

export type BuildIcon = {
    type: 'buildIcons';
    id: string;
    attributes?: {
        name?: string;
        iconAsset?: ImageAsset;
        iconType?: IconAssetType;
    };
    links?: ResourceLinks;
};

export type type69 = 'buildIcons';

export type BuildIconsResponse = {
    data: Array<BuildIcon>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type Build = {
    type: 'builds';
    id: string;
    attributes?: {
        version?: string;
        uploadedDate?: string;
        expirationDate?: string;
        expired?: boolean;
        minOsVersion?: string;
        lsMinimumSystemVersion?: string;
        computedMinMacOsVersion?: string;
        iconAssetToken?: ImageAsset;
        processingState?: 'PROCESSING' | 'FAILED' | 'INVALID' | 'VALID';
        buildAudienceType?: BuildAudienceType;
        usesNonExemptEncryption?: boolean;
    };
    relationships?: {
        preReleaseVersion?: {
            links?: RelationshipLinks;
            data?: {
                type: 'preReleaseVersions';
                id: string;
            };
        };
        individualTesters?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaTesters';
                id: string;
            }>;
        };
        betaGroups?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaGroups';
                id: string;
            }>;
        };
        betaBuildLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'betaBuildLocalizations';
                id: string;
            }>;
        };
        appEncryptionDeclaration?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appEncryptionDeclarations';
                id: string;
            };
        };
        betaAppReviewSubmission?: {
            links?: RelationshipLinks;
            data?: {
                type: 'betaAppReviewSubmissions';
                id: string;
            };
        };
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
        buildBetaDetail?: {
            links?: RelationshipLinks;
            data?: {
                type: 'buildBetaDetails';
                id: string;
            };
        };
        appStoreVersion?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
        icons?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'buildIcons';
                id: string;
            }>;
        };
        buildBundles?: {
            meta?: PagingInformation;
            data?: Array<{
                type: 'buildBundles';
                id: string;
            }>;
        };
        perfPowerMetrics?: {
            links?: RelationshipLinks;
        };
        diagnosticSignatures?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type type70 = 'builds';

export type processingState = 'PROCESSING' | 'FAILED' | 'INVALID' | 'VALID';

export type BuildsResponse = {
    data: Array<Build>;
    included?: Array<(PrereleaseVersion | BetaTester | BetaGroup | BetaBuildLocalization | AppEncryptionDeclaration | BetaAppReviewSubmission | App | BuildBetaDetail | AppStoreVersion | BuildIcon | BuildBundle)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BuildResponse = {
    data: Build;
    included?: Array<(PrereleaseVersion | BetaTester | BetaGroup | BetaBuildLocalization | AppEncryptionDeclaration | BetaAppReviewSubmission | App | BuildBetaDetail | AppStoreVersion | BuildIcon | BuildBundle)>;
    links: DocumentLinks;
};

export type BuildUpdateRequest = {
    data: {
        type: 'builds';
        id: string;
        attributes?: {
            expired?: boolean;
            usesNonExemptEncryption?: boolean;
        };
        relationships?: {
            appEncryptionDeclaration?: {
                data?: {
                    type: 'appEncryptionDeclarations';
                    id: string;
                };
            };
        };
    };
};

export type BundleIdCapability = {
    type: 'bundleIdCapabilities';
    id: string;
    attributes?: {
        capabilityType?: CapabilityType;
        settings?: Array<CapabilitySetting>;
    };
    links?: ResourceLinks;
};

export type type71 = 'bundleIdCapabilities';

export type BundleIdCapabilitiesResponse = {
    data: Array<BundleIdCapability>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BundleIdCapabilityResponse = {
    data: BundleIdCapability;
    links: DocumentLinks;
};

export type BundleIdCapabilityCreateRequest = {
    data: {
        type: 'bundleIdCapabilities';
        attributes: {
            capabilityType: CapabilityType;
            settings?: Array<CapabilitySetting>;
        };
        relationships: {
            bundleId: {
                data: {
                    type: 'bundleIds';
                    id: string;
                };
            };
        };
    };
};

export type BundleIdCapabilityUpdateRequest = {
    data: {
        type: 'bundleIdCapabilities';
        id: string;
        attributes?: {
            capabilityType?: CapabilityType;
            settings?: Array<CapabilitySetting>;
        };
    };
};

export type BundleId = {
    type: 'bundleIds';
    id: string;
    attributes?: {
        name?: string;
        platform?: BundleIdPlatform;
        identifier?: string;
        seedId?: string;
    };
    relationships?: {
        profiles?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'profiles';
                id: string;
            }>;
        };
        bundleIdCapabilities?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'bundleIdCapabilities';
                id: string;
            }>;
        };
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type72 = 'bundleIds';

export type BundleIdsResponse = {
    data: Array<BundleId>;
    included?: Array<(Profile | BundleIdCapability | App)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BundleIdResponse = {
    data: BundleId;
    included?: Array<(Profile | BundleIdCapability | App)>;
    links: DocumentLinks;
};

export type BundleIdCreateRequest = {
    data: {
        type: 'bundleIds';
        attributes: {
            name: string;
            platform: BundleIdPlatform;
            identifier: string;
            seedId?: string;
        };
    };
};

export type BundleIdUpdateRequest = {
    data: {
        type: 'bundleIds';
        id: string;
        attributes?: {
            name?: string;
        };
    };
};

export type Certificate = {
    type: 'certificates';
    id: string;
    attributes?: {
        name?: string;
        certificateType?: CertificateType;
        displayName?: string;
        serialNumber?: string;
        platform?: BundleIdPlatform;
        expirationDate?: string;
        certificateContent?: string;
    };
    links?: ResourceLinks;
};

export type type73 = 'certificates';

export type CertificatesResponse = {
    data: Array<Certificate>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CertificateResponse = {
    data: Certificate;
    links: DocumentLinks;
};

export type CertificateCreateRequest = {
    data: {
        type: 'certificates';
        attributes: {
            csrContent: string;
            certificateType: CertificateType;
        };
    };
};

export type CiArtifact = {
    type: 'ciArtifacts';
    id: string;
    attributes?: {
        fileType?: 'ARCHIVE' | 'ARCHIVE_EXPORT' | 'LOG_BUNDLE' | 'RESULT_BUNDLE' | 'TEST_PRODUCTS' | 'XCODEBUILD_PRODUCTS' | 'STAPLED_NOTARIZED_ARCHIVE';
        fileName?: string;
        fileSize?: number;
        downloadUrl?: string;
    };
    links?: ResourceLinks;
};

export type type74 = 'ciArtifacts';

export type fileType = 'ARCHIVE' | 'ARCHIVE_EXPORT' | 'LOG_BUNDLE' | 'RESULT_BUNDLE' | 'TEST_PRODUCTS' | 'XCODEBUILD_PRODUCTS' | 'STAPLED_NOTARIZED_ARCHIVE';

export type CiArtifactsResponse = {
    data: Array<CiArtifact>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiArtifactResponse = {
    data: CiArtifact;
    links: DocumentLinks;
};

export type CiBuildAction = {
    type: 'ciBuildActions';
    id: string;
    attributes?: {
        name?: string;
        actionType?: CiActionType;
        startedDate?: string;
        finishedDate?: string;
        issueCounts?: CiIssueCounts;
        executionProgress?: CiExecutionProgress;
        completionStatus?: CiCompletionStatus;
        isRequiredToPass?: boolean;
    };
    relationships?: {
        buildRun?: {
            links?: RelationshipLinks;
            data?: {
                type: 'ciBuildRuns';
                id: string;
            };
        };
        artifacts?: {
            links?: RelationshipLinks;
        };
        issues?: {
            links?: RelationshipLinks;
        };
        testResults?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type type75 = 'ciBuildActions';

export type CiBuildActionsResponse = {
    data: Array<CiBuildAction>;
    included?: Array<CiBuildRun>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiBuildActionResponse = {
    data: CiBuildAction;
    included?: Array<CiBuildRun>;
    links: DocumentLinks;
};

export type CiBuildRun = {
    type: 'ciBuildRuns';
    id: string;
    attributes?: {
        number?: number;
        createdDate?: string;
        startedDate?: string;
        finishedDate?: string;
        sourceCommit?: {
            commitSha?: string;
            message?: string;
            author?: CiGitUser;
            committer?: CiGitUser;
            webUrl?: string;
        };
        destinationCommit?: {
            commitSha?: string;
            message?: string;
            author?: CiGitUser;
            committer?: CiGitUser;
            webUrl?: string;
        };
        isPullRequestBuild?: boolean;
        issueCounts?: CiIssueCounts;
        executionProgress?: CiExecutionProgress;
        completionStatus?: CiCompletionStatus;
        startReason?: 'GIT_REF_CHANGE' | 'MANUAL' | 'MANUAL_REBUILD' | 'PULL_REQUEST_OPEN' | 'PULL_REQUEST_UPDATE' | 'SCHEDULE';
        cancelReason?: 'AUTOMATICALLY_BY_NEWER_BUILD' | 'MANUALLY_BY_USER';
    };
    relationships?: {
        builds?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'builds';
                id: string;
            }>;
        };
        workflow?: {
            data?: {
                type: 'ciWorkflows';
                id: string;
            };
        };
        product?: {
            data?: {
                type: 'ciProducts';
                id: string;
            };
        };
        sourceBranchOrTag?: {
            data?: {
                type: 'scmGitReferences';
                id: string;
            };
        };
        destinationBranch?: {
            data?: {
                type: 'scmGitReferences';
                id: string;
            };
        };
        actions?: {
            links?: RelationshipLinks;
        };
        pullRequest?: {
            data?: {
                type: 'scmPullRequests';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type76 = 'ciBuildRuns';

export type startReason = 'GIT_REF_CHANGE' | 'MANUAL' | 'MANUAL_REBUILD' | 'PULL_REQUEST_OPEN' | 'PULL_REQUEST_UPDATE' | 'SCHEDULE';

export type cancelReason = 'AUTOMATICALLY_BY_NEWER_BUILD' | 'MANUALLY_BY_USER';

export type CiBuildRunsResponse = {
    data: Array<CiBuildRun>;
    included?: Array<(Build | CiWorkflow | CiProduct | ScmGitReference | ScmPullRequest)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiBuildRunResponse = {
    data: CiBuildRun;
    included?: Array<(Build | CiWorkflow | CiProduct | ScmGitReference | ScmPullRequest)>;
    links: DocumentLinks;
};

export type CiBuildRunCreateRequest = {
    data: {
        type: 'ciBuildRuns';
        attributes?: {
            clean?: boolean;
        };
        relationships?: {
            buildRun?: {
                data?: {
                    type: 'ciBuildRuns';
                    id: string;
                };
            };
            workflow?: {
                data?: {
                    type: 'ciWorkflows';
                    id: string;
                };
            };
            sourceBranchOrTag?: {
                data?: {
                    type: 'scmGitReferences';
                    id: string;
                };
            };
            pullRequest?: {
                data?: {
                    type: 'scmPullRequests';
                    id: string;
                };
            };
        };
    };
};

export type CiIssue = {
    type: 'ciIssues';
    id: string;
    attributes?: {
        issueType?: 'ANALYZER_WARNING' | 'ERROR' | 'TEST_FAILURE' | 'WARNING';
        message?: string;
        fileSource?: FileLocation;
        category?: string;
    };
    links?: ResourceLinks;
};

export type type77 = 'ciIssues';

export type issueType = 'ANALYZER_WARNING' | 'ERROR' | 'TEST_FAILURE' | 'WARNING';

export type CiIssuesResponse = {
    data: Array<CiIssue>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiIssueResponse = {
    data: CiIssue;
    links: DocumentLinks;
};

export type CiMacOsVersion = {
    type: 'ciMacOsVersions';
    id: string;
    attributes?: {
        version?: string;
        name?: string;
    };
    relationships?: {
        xcodeVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'ciXcodeVersions';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type78 = 'ciMacOsVersions';

export type CiMacOsVersionsResponse = {
    data: Array<CiMacOsVersion>;
    included?: Array<CiXcodeVersion>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiMacOsVersionResponse = {
    data: CiMacOsVersion;
    included?: Array<CiXcodeVersion>;
    links: DocumentLinks;
};

export type CiProduct = {
    type: 'ciProducts';
    id: string;
    attributes?: {
        name?: string;
        createdDate?: string;
        productType?: 'APP' | 'FRAMEWORK';
    };
    relationships?: {
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
        bundleId?: {
            data?: {
                type: 'bundleIds';
                id: string;
            };
        };
        workflows?: {
            links?: RelationshipLinks;
        };
        primaryRepositories?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'scmRepositories';
                id: string;
            }>;
        };
        additionalRepositories?: {
            links?: RelationshipLinks;
        };
        buildRuns?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type type79 = 'ciProducts';

export type productType = 'APP' | 'FRAMEWORK';

export type CiProductsResponse = {
    data: Array<CiProduct>;
    included?: Array<(App | BundleId | ScmRepository)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiProductResponse = {
    data: CiProduct;
    included?: Array<(App | BundleId | ScmRepository)>;
    links: DocumentLinks;
};

export type CiTestResult = {
    type: 'ciTestResults';
    id: string;
    attributes?: {
        className?: string;
        name?: string;
        status?: CiTestStatus;
        fileSource?: FileLocation;
        message?: string;
        destinationTestResults?: Array<{
            uuid?: string;
            deviceName?: string;
            osVersion?: string;
            status?: CiTestStatus;
            duration?: number;
        }>;
    };
    links?: ResourceLinks;
};

export type type80 = 'ciTestResults';

export type CiTestResultsResponse = {
    data: Array<CiTestResult>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiTestResultResponse = {
    data: CiTestResult;
    links: DocumentLinks;
};

export type CiWorkflow = {
    type: 'ciWorkflows';
    id: string;
    attributes?: {
        name?: string;
        description?: string;
        branchStartCondition?: CiBranchStartCondition;
        tagStartCondition?: CiTagStartCondition;
        pullRequestStartCondition?: CiPullRequestStartCondition;
        scheduledStartCondition?: CiScheduledStartCondition;
        manualBranchStartCondition?: CiManualBranchStartCondition;
        manualTagStartCondition?: CiManualTagStartCondition;
        manualPullRequestStartCondition?: CiManualPullRequestStartCondition;
        actions?: Array<CiAction>;
        isEnabled?: boolean;
        isLockedForEditing?: boolean;
        clean?: boolean;
        containerFilePath?: string;
        lastModifiedDate?: string;
    };
    relationships?: {
        product?: {
            data?: {
                type: 'ciProducts';
                id: string;
            };
        };
        repository?: {
            links?: RelationshipLinks;
            data?: {
                type: 'scmRepositories';
                id: string;
            };
        };
        xcodeVersion?: {
            data?: {
                type: 'ciXcodeVersions';
                id: string;
            };
        };
        macOsVersion?: {
            data?: {
                type: 'ciMacOsVersions';
                id: string;
            };
        };
        buildRuns?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type type81 = 'ciWorkflows';

export type CiWorkflowsResponse = {
    data: Array<CiWorkflow>;
    included?: Array<(CiProduct | ScmRepository | CiXcodeVersion | CiMacOsVersion)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiWorkflowResponse = {
    data: CiWorkflow;
    included?: Array<(CiProduct | ScmRepository | CiXcodeVersion | CiMacOsVersion)>;
    links: DocumentLinks;
};

export type CiWorkflowCreateRequest = {
    data: {
        type: 'ciWorkflows';
        attributes: {
            name: string;
            description: string;
            branchStartCondition?: CiBranchStartCondition;
            tagStartCondition?: CiTagStartCondition;
            pullRequestStartCondition?: CiPullRequestStartCondition;
            scheduledStartCondition?: CiScheduledStartCondition;
            manualBranchStartCondition?: CiManualBranchStartCondition;
            manualTagStartCondition?: CiManualTagStartCondition;
            manualPullRequestStartCondition?: CiManualPullRequestStartCondition;
            actions: Array<CiAction>;
            isEnabled: boolean;
            isLockedForEditing?: boolean;
            clean: boolean;
            containerFilePath: string;
        };
        relationships: {
            product: {
                data: {
                    type: 'ciProducts';
                    id: string;
                };
            };
            repository: {
                data: {
                    type: 'scmRepositories';
                    id: string;
                };
            };
            xcodeVersion: {
                data: {
                    type: 'ciXcodeVersions';
                    id: string;
                };
            };
            macOsVersion: {
                data: {
                    type: 'ciMacOsVersions';
                    id: string;
                };
            };
        };
    };
};

export type CiWorkflowUpdateRequest = {
    data: {
        type: 'ciWorkflows';
        id: string;
        attributes?: {
            name?: string;
            description?: string;
            branchStartCondition?: CiBranchStartCondition;
            tagStartCondition?: CiTagStartCondition;
            pullRequestStartCondition?: CiPullRequestStartCondition;
            scheduledStartCondition?: CiScheduledStartCondition;
            manualBranchStartCondition?: CiManualBranchStartCondition;
            manualTagStartCondition?: CiManualTagStartCondition;
            manualPullRequestStartCondition?: CiManualPullRequestStartCondition;
            actions?: Array<CiAction>;
            isEnabled?: boolean;
            isLockedForEditing?: boolean;
            clean?: boolean;
            containerFilePath?: string;
        };
        relationships?: {
            xcodeVersion?: {
                data?: {
                    type: 'ciXcodeVersions';
                    id: string;
                };
            };
            macOsVersion?: {
                data?: {
                    type: 'ciMacOsVersions';
                    id: string;
                };
            };
        };
    };
};

export type CiXcodeVersion = {
    type: 'ciXcodeVersions';
    id: string;
    attributes?: {
        version?: string;
        name?: string;
        testDestinations?: Array<{
            deviceTypeName?: string;
            deviceTypeIdentifier?: string;
            availableRuntimes?: Array<{
                runtimeName?: string;
                runtimeIdentifier?: string;
            }>;
            kind?: CiTestDestinationKind;
        }>;
    };
    relationships?: {
        macOsVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'ciMacOsVersions';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type82 = 'ciXcodeVersions';

export type CiXcodeVersionsResponse = {
    data: Array<CiXcodeVersion>;
    included?: Array<CiMacOsVersion>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CiXcodeVersionResponse = {
    data: CiXcodeVersion;
    included?: Array<CiMacOsVersion>;
    links: DocumentLinks;
};

export type CustomerReviewResponseV1 = {
    type: 'customerReviewResponses';
    id: string;
    attributes?: {
        responseBody?: string;
        lastModifiedDate?: string;
        state?: 'PUBLISHED' | 'PENDING_PUBLISH';
    };
    relationships?: {
        review?: {
            data?: {
                type: 'customerReviews';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type83 = 'customerReviewResponses';

export type state5 = 'PUBLISHED' | 'PENDING_PUBLISH';

export type CustomerReviewResponseV1Response = {
    data: CustomerReviewResponseV1;
    included?: Array<CustomerReview>;
    links: DocumentLinks;
};

export type CustomerReviewResponseV1CreateRequest = {
    data: {
        type: 'customerReviewResponses';
        attributes: {
            responseBody: string;
        };
        relationships: {
            review: {
                data: {
                    type: 'customerReviews';
                    id: string;
                };
            };
        };
    };
};

export type CustomerReview = {
    type: 'customerReviews';
    id: string;
    attributes?: {
        rating?: number;
        title?: string;
        body?: string;
        reviewerNickname?: string;
        createdDate?: string;
        territory?: TerritoryCode;
    };
    relationships?: {
        response?: {
            links?: RelationshipLinks;
            data?: {
                type: 'customerReviewResponses';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type84 = 'customerReviews';

export type CustomerReviewsResponse = {
    data: Array<CustomerReview>;
    included?: Array<CustomerReviewResponseV1>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type CustomerReviewResponse = {
    data: CustomerReview;
    included?: Array<CustomerReviewResponseV1>;
    links: DocumentLinks;
};

export type Device = {
    type: 'devices';
    id: string;
    attributes?: {
        name?: string;
        platform?: BundleIdPlatform;
        udid?: string;
        deviceClass?: 'APPLE_WATCH' | 'IPAD' | 'IPHONE' | 'IPOD' | 'APPLE_TV' | 'MAC';
        status?: 'ENABLED' | 'DISABLED';
        model?: string;
        addedDate?: string;
    };
    links?: ResourceLinks;
};

export type type85 = 'devices';

export type deviceClass = 'APPLE_WATCH' | 'IPAD' | 'IPHONE' | 'IPOD' | 'APPLE_TV' | 'MAC';

export type status2 = 'ENABLED' | 'DISABLED';

export type DevicesResponse = {
    data: Array<Device>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type DeviceResponse = {
    data: Device;
    links: DocumentLinks;
};

export type DeviceCreateRequest = {
    data: {
        type: 'devices';
        attributes: {
            name: string;
            platform: BundleIdPlatform;
            udid: string;
        };
    };
};

export type DeviceUpdateRequest = {
    data: {
        type: 'devices';
        id: string;
        attributes?: {
            name?: string;
            status?: 'ENABLED' | 'DISABLED';
        };
    };
};

export type DiagnosticLog = {
    type: 'diagnosticLogs';
    id: string;
    links?: ResourceLinks;
};

export type type86 = 'diagnosticLogs';

export type DiagnosticSignature = {
    type: 'diagnosticSignatures';
    id: string;
    attributes?: {
        diagnosticType?: 'DISK_WRITES' | 'HANGS' | 'LAUNCHES';
        signature?: string;
        weight?: number;
        insight?: DiagnosticInsight;
    };
    relationships?: {
        logs?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type type87 = 'diagnosticSignatures';

export type diagnosticType = 'DISK_WRITES' | 'HANGS' | 'LAUNCHES';

export type DiagnosticSignaturesResponse = {
    data: Array<DiagnosticSignature>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type EndAppAvailabilityPreOrder = {
    type: 'endAppAvailabilityPreOrders';
    id: string;
    links?: ResourceLinks;
};

export type type88 = 'endAppAvailabilityPreOrders';

export type EndAppAvailabilityPreOrderResponse = {
    data: EndAppAvailabilityPreOrder;
    links: DocumentLinks;
};

export type EndAppAvailabilityPreOrderCreateRequest = {
    data: {
        type: 'endAppAvailabilityPreOrders';
        relationships: {
            territoryAvailabilities: {
                data: Array<{
                    type: 'territoryAvailabilities';
                    id: string;
                }>;
            };
        };
    };
};

export type EndUserLicenseAgreement = {
    type: 'endUserLicenseAgreements';
    id: string;
    attributes?: {
        agreementText?: string;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        territories?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'territories';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type89 = 'endUserLicenseAgreements';

export type EndUserLicenseAgreementResponse = {
    data: EndUserLicenseAgreement;
    included?: Array<(App | Territory)>;
    links: DocumentLinks;
};

export type EndUserLicenseAgreementCreateRequest = {
    data: {
        type: 'endUserLicenseAgreements';
        attributes: {
            agreementText: string;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
            territories: {
                data: Array<{
                    type: 'territories';
                    id: string;
                }>;
            };
        };
    };
};

export type EndUserLicenseAgreementUpdateRequest = {
    data: {
        type: 'endUserLicenseAgreements';
        id: string;
        attributes?: {
            agreementText?: string;
        };
        relationships?: {
            territories?: {
                data?: Array<{
                    type: 'territories';
                    id: string;
                }>;
            };
        };
    };
};

export type GameCenterAchievementImage = {
    type: 'gameCenterAchievementImages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        imageAsset?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        gameCenterAchievementLocalization?: {
            data?: {
                type: 'gameCenterAchievementLocalizations';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type90 = 'gameCenterAchievementImages';

export type GameCenterAchievementImageResponse = {
    data: GameCenterAchievementImage;
    included?: Array<GameCenterAchievementLocalization>;
    links: DocumentLinks;
};

export type GameCenterAchievementImageCreateRequest = {
    data: {
        type: 'gameCenterAchievementImages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            gameCenterAchievementLocalization: {
                data: {
                    type: 'gameCenterAchievementLocalizations';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterAchievementImageUpdateRequest = {
    data: {
        type: 'gameCenterAchievementImages';
        id: string;
        attributes?: {
            uploaded?: boolean;
        };
    };
};

export type GameCenterAchievementLocalization = {
    type: 'gameCenterAchievementLocalizations';
    id: string;
    attributes?: {
        locale?: string;
        name?: string;
        beforeEarnedDescription?: string;
        afterEarnedDescription?: string;
    };
    relationships?: {
        gameCenterAchievement?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterAchievements';
                id: string;
            };
        };
        gameCenterAchievementImage?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterAchievementImages';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type91 = 'gameCenterAchievementLocalizations';

export type GameCenterAchievementLocalizationsResponse = {
    data: Array<GameCenterAchievementLocalization>;
    included?: Array<(GameCenterAchievement | GameCenterAchievementImage)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterAchievementLocalizationResponse = {
    data: GameCenterAchievementLocalization;
    included?: Array<(GameCenterAchievement | GameCenterAchievementImage)>;
    links: DocumentLinks;
};

export type GameCenterAchievementLocalizationCreateRequest = {
    data: {
        type: 'gameCenterAchievementLocalizations';
        attributes: {
            locale: string;
            name: string;
            beforeEarnedDescription: string;
            afterEarnedDescription: string;
        };
        relationships: {
            gameCenterAchievement: {
                data: {
                    type: 'gameCenterAchievements';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterAchievementLocalizationUpdateRequest = {
    data: {
        type: 'gameCenterAchievementLocalizations';
        id: string;
        attributes?: {
            name?: string;
            beforeEarnedDescription?: string;
            afterEarnedDescription?: string;
        };
    };
};

export type GameCenterAchievementRelease = {
    type: 'gameCenterAchievementReleases';
    id: string;
    attributes?: {
        live?: boolean;
    };
    relationships?: {
        gameCenterDetail?: {
            data?: {
                type: 'gameCenterDetails';
                id: string;
            };
        };
        gameCenterAchievement?: {
            data?: {
                type: 'gameCenterAchievements';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type92 = 'gameCenterAchievementReleases';

export type GameCenterAchievementReleasesResponse = {
    data: Array<GameCenterAchievementRelease>;
    included?: Array<(GameCenterDetail | GameCenterAchievement)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterAchievementReleaseResponse = {
    data: GameCenterAchievementRelease;
    included?: Array<(GameCenterDetail | GameCenterAchievement)>;
    links: DocumentLinks;
};

export type GameCenterAchievementReleaseCreateRequest = {
    data: {
        type: 'gameCenterAchievementReleases';
        relationships: {
            gameCenterDetail: {
                data: {
                    type: 'gameCenterDetails';
                    id: string;
                };
            };
            gameCenterAchievement: {
                data: {
                    type: 'gameCenterAchievements';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterAchievement = {
    type: 'gameCenterAchievements';
    id: string;
    attributes?: {
        referenceName?: string;
        vendorIdentifier?: string;
        points?: number;
        showBeforeEarned?: boolean;
        repeatable?: boolean;
        archived?: boolean;
    };
    relationships?: {
        gameCenterDetail?: {
            data?: {
                type: 'gameCenterDetails';
                id: string;
            };
        };
        gameCenterGroup?: {
            data?: {
                type: 'gameCenterGroups';
                id: string;
            };
        };
        groupAchievement?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterAchievements';
                id: string;
            };
        };
        localizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterAchievementLocalizations';
                id: string;
            }>;
        };
        releases?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterAchievementReleases';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type93 = 'gameCenterAchievements';

export type GameCenterAchievementsResponse = {
    data: Array<GameCenterAchievement>;
    included?: Array<(GameCenterDetail | GameCenterGroup | GameCenterAchievement | GameCenterAchievementLocalization | GameCenterAchievementRelease)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterAchievementResponse = {
    data: GameCenterAchievement;
    included?: Array<(GameCenterDetail | GameCenterGroup | GameCenterAchievement | GameCenterAchievementLocalization | GameCenterAchievementRelease)>;
    links: DocumentLinks;
};

export type GameCenterAchievementCreateRequest = {
    data: {
        type: 'gameCenterAchievements';
        attributes: {
            referenceName: string;
            vendorIdentifier: string;
            points: number;
            showBeforeEarned: boolean;
            repeatable: boolean;
        };
        relationships?: {
            gameCenterDetail?: {
                data?: {
                    type: 'gameCenterDetails';
                    id: string;
                };
            };
            gameCenterGroup?: {
                data?: {
                    type: 'gameCenterGroups';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterAchievementUpdateRequest = {
    data: {
        type: 'gameCenterAchievements';
        id: string;
        attributes?: {
            referenceName?: string;
            points?: number;
            showBeforeEarned?: boolean;
            repeatable?: boolean;
            archived?: boolean;
        };
    };
};

export type GameCenterAppVersion = {
    type: 'gameCenterAppVersions';
    id: string;
    attributes?: {
        enabled?: boolean;
    };
    relationships?: {
        compatibilityVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterAppVersions';
                id: string;
            }>;
        };
        appStoreVersion?: {
            links?: RelationshipLinks;
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type94 = 'gameCenterAppVersions';

export type GameCenterAppVersionsResponse = {
    data: Array<GameCenterAppVersion>;
    included?: Array<(GameCenterAppVersion | AppStoreVersion)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterAppVersionResponse = {
    data: GameCenterAppVersion;
    included?: Array<(GameCenterAppVersion | AppStoreVersion)>;
    links: DocumentLinks;
};

export type GameCenterAppVersionCreateRequest = {
    data: {
        type: 'gameCenterAppVersions';
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterAppVersionUpdateRequest = {
    data: {
        type: 'gameCenterAppVersions';
        id: string;
        attributes?: {
            enabled?: boolean;
        };
    };
};

export type GameCenterDetail = {
    type: 'gameCenterDetails';
    id: string;
    attributes?: {
        arcadeEnabled?: boolean;
        challengeEnabled?: boolean;
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        gameCenterAppVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterAppVersions';
                id: string;
            }>;
        };
        gameCenterGroup?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterGroups';
                id: string;
            };
        };
        gameCenterLeaderboards?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboards';
                id: string;
            }>;
        };
        gameCenterLeaderboardSets?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardSets';
                id: string;
            }>;
        };
        gameCenterAchievements?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterAchievements';
                id: string;
            }>;
        };
        defaultLeaderboard?: {
            data?: {
                type: 'gameCenterLeaderboards';
                id: string;
            };
        };
        defaultGroupLeaderboard?: {
            data?: {
                type: 'gameCenterLeaderboards';
                id: string;
            };
        };
        achievementReleases?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterAchievementReleases';
                id: string;
            }>;
        };
        leaderboardReleases?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardReleases';
                id: string;
            }>;
        };
        leaderboardSetReleases?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardSetReleases';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type95 = 'gameCenterDetails';

export type GameCenterDetailsResponse = {
    data: Array<GameCenterDetail>;
    included?: Array<(App | GameCenterAppVersion | GameCenterGroup | GameCenterLeaderboard | GameCenterLeaderboardSet | GameCenterAchievement | GameCenterAchievementRelease | GameCenterLeaderboardRelease | GameCenterLeaderboardSetRelease)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterDetailResponse = {
    data: GameCenterDetail;
    included?: Array<(App | GameCenterAppVersion | GameCenterGroup | GameCenterLeaderboard | GameCenterLeaderboardSet | GameCenterAchievement | GameCenterAchievementRelease | GameCenterLeaderboardRelease | GameCenterLeaderboardSetRelease)>;
    links: DocumentLinks;
};

export type GameCenterDetailCreateRequest = {
    data: {
        type: 'gameCenterDetails';
        attributes?: {
            challengeEnabled?: boolean;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterDetailUpdateRequest = {
    data: {
        type: 'gameCenterDetails';
        id: string;
        attributes?: {
            challengeEnabled?: boolean;
        };
        relationships?: {
            gameCenterGroup?: {
                data?: {
                    type: 'gameCenterGroups';
                    id: string;
                };
            };
            defaultLeaderboard?: {
                data?: {
                    type: 'gameCenterLeaderboards';
                    id: string;
                };
            };
            defaultGroupLeaderboard?: {
                data?: {
                    type: 'gameCenterLeaderboards';
                    id: string;
                };
            };
        };
    };
};

/**
 * @deprecated
 */
export type GameCenterEnabledVersion = {
    type: 'gameCenterEnabledVersions';
    id: string;
    attributes?: {
        platform?: Platform;
        versionString?: string;
        iconAsset?: ImageAsset;
    };
    relationships?: {
        compatibleVersions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterEnabledVersions';
                id: string;
            }>;
        };
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type96 = 'gameCenterEnabledVersions';

/**
 * @deprecated
 */
export type GameCenterEnabledVersionsResponse = {
    data: Array<GameCenterEnabledVersion>;
    included?: Array<(GameCenterEnabledVersion | App)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterGroup = {
    type: 'gameCenterGroups';
    id: string;
    attributes?: {
        referenceName?: string;
    };
    relationships?: {
        gameCenterDetails?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterDetails';
                id: string;
            }>;
        };
        gameCenterLeaderboards?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboards';
                id: string;
            }>;
        };
        gameCenterLeaderboardSets?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardSets';
                id: string;
            }>;
        };
        gameCenterAchievements?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterAchievements';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type97 = 'gameCenterGroups';

export type GameCenterGroupsResponse = {
    data: Array<GameCenterGroup>;
    included?: Array<(GameCenterDetail | GameCenterLeaderboard | GameCenterLeaderboardSet | GameCenterAchievement)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterGroupResponse = {
    data: GameCenterGroup;
    included?: Array<(GameCenterDetail | GameCenterLeaderboard | GameCenterLeaderboardSet | GameCenterAchievement)>;
    links: DocumentLinks;
};

export type GameCenterGroupCreateRequest = {
    data: {
        type: 'gameCenterGroups';
        attributes?: {
            referenceName?: string;
        };
    };
};

export type GameCenterGroupUpdateRequest = {
    data: {
        type: 'gameCenterGroups';
        id: string;
        attributes?: {
            referenceName?: string;
        };
    };
};

export type GameCenterLeaderboardEntrySubmission = {
    type: 'gameCenterLeaderboardEntrySubmissions';
    id: string;
    attributes?: {
        bundleId?: string;
        challengeIds?: Array<(string)>;
        context?: string;
        scopedPlayerId?: string;
        score?: string;
        submittedDate?: string;
        vendorIdentifier?: string;
    };
    links?: ResourceLinks;
};

export type type98 = 'gameCenterLeaderboardEntrySubmissions';

export type GameCenterLeaderboardEntrySubmissionResponse = {
    data: GameCenterLeaderboardEntrySubmission;
    links: DocumentLinks;
};

export type GameCenterLeaderboardEntrySubmissionCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardEntrySubmissions';
        attributes: {
            bundleId: string;
            challengeIds?: Array<(string)>;
            context?: string;
            scopedPlayerId: string;
            score: string;
            submittedDate?: string;
            vendorIdentifier: string;
        };
    };
};

export type GameCenterLeaderboardImage = {
    type: 'gameCenterLeaderboardImages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        imageAsset?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        gameCenterLeaderboardLocalization?: {
            data?: {
                type: 'gameCenterLeaderboardLocalizations';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type99 = 'gameCenterLeaderboardImages';

export type GameCenterLeaderboardImageResponse = {
    data: GameCenterLeaderboardImage;
    included?: Array<GameCenterLeaderboardLocalization>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardImageCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardImages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            gameCenterLeaderboardLocalization: {
                data: {
                    type: 'gameCenterLeaderboardLocalizations';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterLeaderboardImageUpdateRequest = {
    data: {
        type: 'gameCenterLeaderboardImages';
        id: string;
        attributes?: {
            uploaded?: boolean;
        };
    };
};

export type GameCenterLeaderboardLocalization = {
    type: 'gameCenterLeaderboardLocalizations';
    id: string;
    attributes?: {
        locale?: string;
        name?: string;
        formatterOverride?: GameCenterLeaderboardFormatter;
        formatterSuffix?: string;
        formatterSuffixSingular?: string;
    };
    relationships?: {
        gameCenterLeaderboard?: {
            data?: {
                type: 'gameCenterLeaderboards';
                id: string;
            };
        };
        gameCenterLeaderboardImage?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterLeaderboardImages';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type100 = 'gameCenterLeaderboardLocalizations';

export type GameCenterLeaderboardLocalizationsResponse = {
    data: Array<GameCenterLeaderboardLocalization>;
    included?: Array<(GameCenterLeaderboard | GameCenterLeaderboardImage)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterLeaderboardLocalizationResponse = {
    data: GameCenterLeaderboardLocalization;
    included?: Array<(GameCenterLeaderboard | GameCenterLeaderboardImage)>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardLocalizationCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardLocalizations';
        attributes: {
            locale: string;
            name: string;
            formatterOverride?: GameCenterLeaderboardFormatter;
            formatterSuffix?: string;
            formatterSuffixSingular?: string;
        };
        relationships: {
            gameCenterLeaderboard: {
                data: {
                    type: 'gameCenterLeaderboards';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterLeaderboardLocalizationUpdateRequest = {
    data: {
        type: 'gameCenterLeaderboardLocalizations';
        id: string;
        attributes?: {
            name?: string;
            formatterOverride?: GameCenterLeaderboardFormatter;
            formatterSuffix?: string;
            formatterSuffixSingular?: string;
        };
    };
};

export type GameCenterLeaderboardRelease = {
    type: 'gameCenterLeaderboardReleases';
    id: string;
    attributes?: {
        live?: boolean;
    };
    relationships?: {
        gameCenterDetail?: {
            data?: {
                type: 'gameCenterDetails';
                id: string;
            };
        };
        gameCenterLeaderboard?: {
            data?: {
                type: 'gameCenterLeaderboards';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type101 = 'gameCenterLeaderboardReleases';

export type GameCenterLeaderboardReleasesResponse = {
    data: Array<GameCenterLeaderboardRelease>;
    included?: Array<(GameCenterDetail | GameCenterLeaderboard)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterLeaderboardReleaseResponse = {
    data: GameCenterLeaderboardRelease;
    included?: Array<(GameCenterDetail | GameCenterLeaderboard)>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardReleaseCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardReleases';
        relationships: {
            gameCenterDetail: {
                data: {
                    type: 'gameCenterDetails';
                    id: string;
                };
            };
            gameCenterLeaderboard: {
                data: {
                    type: 'gameCenterLeaderboards';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterLeaderboardSetImage = {
    type: 'gameCenterLeaderboardSetImages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        imageAsset?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        gameCenterLeaderboardSetLocalization?: {
            data?: {
                type: 'gameCenterLeaderboardSetLocalizations';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type102 = 'gameCenterLeaderboardSetImages';

export type GameCenterLeaderboardSetImageResponse = {
    data: GameCenterLeaderboardSetImage;
    included?: Array<GameCenterLeaderboardSetLocalization>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardSetImageCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardSetImages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            gameCenterLeaderboardSetLocalization: {
                data: {
                    type: 'gameCenterLeaderboardSetLocalizations';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterLeaderboardSetImageUpdateRequest = {
    data: {
        type: 'gameCenterLeaderboardSetImages';
        id: string;
        attributes?: {
            uploaded?: boolean;
        };
    };
};

export type GameCenterLeaderboardSetLocalization = {
    type: 'gameCenterLeaderboardSetLocalizations';
    id: string;
    attributes?: {
        locale?: string;
        name?: string;
    };
    relationships?: {
        gameCenterLeaderboardSet?: {
            data?: {
                type: 'gameCenterLeaderboardSets';
                id: string;
            };
        };
        gameCenterLeaderboardSetImage?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterLeaderboardSetImages';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type103 = 'gameCenterLeaderboardSetLocalizations';

export type GameCenterLeaderboardSetLocalizationsResponse = {
    data: Array<GameCenterLeaderboardSetLocalization>;
    included?: Array<(GameCenterLeaderboardSet | GameCenterLeaderboardSetImage)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterLeaderboardSetLocalizationResponse = {
    data: GameCenterLeaderboardSetLocalization;
    included?: Array<(GameCenterLeaderboardSet | GameCenterLeaderboardSetImage)>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardSetLocalizationCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardSetLocalizations';
        attributes: {
            locale: string;
            name: string;
        };
        relationships: {
            gameCenterLeaderboardSet: {
                data: {
                    type: 'gameCenterLeaderboardSets';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterLeaderboardSetLocalizationUpdateRequest = {
    data: {
        type: 'gameCenterLeaderboardSetLocalizations';
        id: string;
        attributes?: {
            name?: string;
        };
    };
};

export type GameCenterLeaderboardSetMemberLocalization = {
    type: 'gameCenterLeaderboardSetMemberLocalizations';
    id: string;
    attributes?: {
        name?: string;
        locale?: string;
    };
    relationships?: {
        gameCenterLeaderboardSet?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterLeaderboardSets';
                id: string;
            };
        };
        gameCenterLeaderboard?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterLeaderboards';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type104 = 'gameCenterLeaderboardSetMemberLocalizations';

export type GameCenterLeaderboardSetMemberLocalizationsResponse = {
    data: Array<GameCenterLeaderboardSetMemberLocalization>;
    included?: Array<(GameCenterLeaderboardSet | GameCenterLeaderboard)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterLeaderboardSetMemberLocalizationResponse = {
    data: GameCenterLeaderboardSetMemberLocalization;
    included?: Array<(GameCenterLeaderboardSet | GameCenterLeaderboard)>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardSetMemberLocalizationCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardSetMemberLocalizations';
        attributes?: {
            name?: string;
            locale?: string;
        };
        relationships: {
            gameCenterLeaderboardSet: {
                data: {
                    type: 'gameCenterLeaderboardSets';
                    id: string;
                };
            };
            gameCenterLeaderboard: {
                data: {
                    type: 'gameCenterLeaderboards';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterLeaderboardSetMemberLocalizationUpdateRequest = {
    data: {
        type: 'gameCenterLeaderboardSetMemberLocalizations';
        id: string;
        attributes?: {
            name?: string;
        };
    };
};

export type GameCenterLeaderboardSetRelease = {
    type: 'gameCenterLeaderboardSetReleases';
    id: string;
    attributes?: {
        live?: boolean;
    };
    relationships?: {
        gameCenterDetail?: {
            data?: {
                type: 'gameCenterDetails';
                id: string;
            };
        };
        gameCenterLeaderboardSet?: {
            data?: {
                type: 'gameCenterLeaderboardSets';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type105 = 'gameCenterLeaderboardSetReleases';

export type GameCenterLeaderboardSetReleasesResponse = {
    data: Array<GameCenterLeaderboardSetRelease>;
    included?: Array<(GameCenterDetail | GameCenterLeaderboardSet)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterLeaderboardSetReleaseResponse = {
    data: GameCenterLeaderboardSetRelease;
    included?: Array<(GameCenterDetail | GameCenterLeaderboardSet)>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardSetReleaseCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardSetReleases';
        relationships: {
            gameCenterDetail: {
                data: {
                    type: 'gameCenterDetails';
                    id: string;
                };
            };
            gameCenterLeaderboardSet: {
                data: {
                    type: 'gameCenterLeaderboardSets';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterLeaderboardSet = {
    type: 'gameCenterLeaderboardSets';
    id: string;
    attributes?: {
        referenceName?: string;
        vendorIdentifier?: string;
    };
    relationships?: {
        gameCenterDetail?: {
            data?: {
                type: 'gameCenterDetails';
                id: string;
            };
        };
        gameCenterGroup?: {
            data?: {
                type: 'gameCenterGroups';
                id: string;
            };
        };
        groupLeaderboardSet?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterLeaderboardSets';
                id: string;
            };
        };
        localizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardSetLocalizations';
                id: string;
            }>;
        };
        gameCenterLeaderboards?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboards';
                id: string;
            }>;
        };
        releases?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardSetReleases';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type106 = 'gameCenterLeaderboardSets';

export type GameCenterLeaderboardSetsResponse = {
    data: Array<GameCenterLeaderboardSet>;
    included?: Array<(GameCenterDetail | GameCenterGroup | GameCenterLeaderboardSet | GameCenterLeaderboardSetLocalization | GameCenterLeaderboard | GameCenterLeaderboardSetRelease)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterLeaderboardSetResponse = {
    data: GameCenterLeaderboardSet;
    included?: Array<(GameCenterDetail | GameCenterGroup | GameCenterLeaderboardSet | GameCenterLeaderboardSetLocalization | GameCenterLeaderboard | GameCenterLeaderboardSetRelease)>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardSetCreateRequest = {
    data: {
        type: 'gameCenterLeaderboardSets';
        attributes: {
            referenceName: string;
            vendorIdentifier: string;
        };
        relationships?: {
            gameCenterDetail?: {
                data?: {
                    type: 'gameCenterDetails';
                    id: string;
                };
            };
            gameCenterGroup?: {
                data?: {
                    type: 'gameCenterGroups';
                    id: string;
                };
            };
            gameCenterLeaderboards?: {
                data?: Array<{
                    type: 'gameCenterLeaderboards';
                    id: string;
                }>;
            };
        };
    };
};

export type GameCenterLeaderboardSetUpdateRequest = {
    data: {
        type: 'gameCenterLeaderboardSets';
        id: string;
        attributes?: {
            referenceName?: string;
        };
    };
};

export type GameCenterLeaderboard = {
    type: 'gameCenterLeaderboards';
    id: string;
    attributes?: {
        defaultFormatter?: GameCenterLeaderboardFormatter;
        referenceName?: string;
        vendorIdentifier?: string;
        submissionType?: 'BEST_SCORE' | 'MOST_RECENT_SCORE';
        scoreSortType?: 'ASC' | 'DESC';
        scoreRangeStart?: string;
        scoreRangeEnd?: string;
        recurrenceStartDate?: string;
        recurrenceDuration?: string;
        recurrenceRule?: string;
        archived?: boolean;
    };
    relationships?: {
        gameCenterDetail?: {
            data?: {
                type: 'gameCenterDetails';
                id: string;
            };
        };
        gameCenterGroup?: {
            data?: {
                type: 'gameCenterGroups';
                id: string;
            };
        };
        groupLeaderboard?: {
            links?: RelationshipLinks;
            data?: {
                type: 'gameCenterLeaderboards';
                id: string;
            };
        };
        gameCenterLeaderboardSets?: {
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardSets';
                id: string;
            }>;
        };
        localizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardLocalizations';
                id: string;
            }>;
        };
        releases?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterLeaderboardReleases';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type107 = 'gameCenterLeaderboards';

export type submissionType = 'BEST_SCORE' | 'MOST_RECENT_SCORE';

export type scoreSortType = 'ASC' | 'DESC';

export type GameCenterLeaderboardsResponse = {
    data: Array<GameCenterLeaderboard>;
    included?: Array<(GameCenterDetail | GameCenterGroup | GameCenterLeaderboard | GameCenterLeaderboardSet | GameCenterLeaderboardLocalization | GameCenterLeaderboardRelease)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterLeaderboardResponse = {
    data: GameCenterLeaderboard;
    included?: Array<(GameCenterDetail | GameCenterGroup | GameCenterLeaderboard | GameCenterLeaderboardSet | GameCenterLeaderboardLocalization | GameCenterLeaderboardRelease)>;
    links: DocumentLinks;
};

export type GameCenterLeaderboardCreateRequest = {
    data: {
        type: 'gameCenterLeaderboards';
        attributes: {
            defaultFormatter: GameCenterLeaderboardFormatter;
            referenceName: string;
            vendorIdentifier: string;
            submissionType: 'BEST_SCORE' | 'MOST_RECENT_SCORE';
            scoreSortType: 'ASC' | 'DESC';
            scoreRangeStart?: string;
            scoreRangeEnd?: string;
            recurrenceStartDate?: string;
            recurrenceDuration?: string;
            recurrenceRule?: string;
        };
        relationships?: {
            gameCenterDetail?: {
                data?: {
                    type: 'gameCenterDetails';
                    id: string;
                };
            };
            gameCenterGroup?: {
                data?: {
                    type: 'gameCenterGroups';
                    id: string;
                };
            };
            gameCenterLeaderboardSets?: {
                data?: Array<{
                    type: 'gameCenterLeaderboardSets';
                    id: string;
                }>;
            };
        };
    };
};

export type GameCenterLeaderboardUpdateRequest = {
    data: {
        type: 'gameCenterLeaderboards';
        id: string;
        attributes?: {
            defaultFormatter?: GameCenterLeaderboardFormatter;
            referenceName?: string;
            submissionType?: 'BEST_SCORE' | 'MOST_RECENT_SCORE';
            scoreSortType?: 'ASC' | 'DESC';
            scoreRangeStart?: string;
            scoreRangeEnd?: string;
            recurrenceStartDate?: string;
            recurrenceDuration?: string;
            recurrenceRule?: string;
            archived?: boolean;
        };
    };
};

export type GameCenterMatchmakingQueue = {
    type: 'gameCenterMatchmakingQueues';
    id: string;
    attributes?: {
        referenceName?: string;
        classicMatchmakingBundleIds?: Array<(string)>;
    };
    relationships?: {
        ruleSet?: {
            data?: {
                type: 'gameCenterMatchmakingRuleSets';
                id: string;
            };
        };
        experimentRuleSet?: {
            data?: {
                type: 'gameCenterMatchmakingRuleSets';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type108 = 'gameCenterMatchmakingQueues';

export type GameCenterMatchmakingQueuesResponse = {
    data: Array<GameCenterMatchmakingQueue>;
    included?: Array<GameCenterMatchmakingRuleSet>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingQueueResponse = {
    data: GameCenterMatchmakingQueue;
    included?: Array<GameCenterMatchmakingRuleSet>;
    links: DocumentLinks;
};

export type GameCenterMatchmakingQueueCreateRequest = {
    data: {
        type: 'gameCenterMatchmakingQueues';
        attributes: {
            referenceName: string;
            classicMatchmakingBundleIds?: Array<(string)>;
        };
        relationships: {
            ruleSet: {
                data: {
                    type: 'gameCenterMatchmakingRuleSets';
                    id: string;
                };
            };
            experimentRuleSet?: {
                data?: {
                    type: 'gameCenterMatchmakingRuleSets';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterMatchmakingQueueUpdateRequest = {
    data: {
        type: 'gameCenterMatchmakingQueues';
        id: string;
        attributes?: {
            classicMatchmakingBundleIds?: Array<(string)>;
        };
        relationships?: {
            ruleSet?: {
                data?: {
                    type: 'gameCenterMatchmakingRuleSets';
                    id: string;
                };
            };
            experimentRuleSet?: {
                data?: {
                    type: 'gameCenterMatchmakingRuleSets';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterMatchmakingRuleSetTest = {
    type: 'gameCenterMatchmakingRuleSetTests';
    id: string;
    attributes?: {
        matchmakingResults?: Array<Array<{
            requestName?: string;
            teamAssignments?: Array<GameCenterMatchmakingTeamAssignment>;
        }>>;
    };
    links?: ResourceLinks;
};

export type type109 = 'gameCenterMatchmakingRuleSetTests';

export type GameCenterMatchmakingRuleSetTestResponse = {
    data: GameCenterMatchmakingRuleSetTest;
    links: DocumentLinks;
};

export type GameCenterMatchmakingRuleSetTestCreateRequest = {
    data: {
        type: 'gameCenterMatchmakingRuleSetTests';
        relationships: {
            matchmakingRuleSet: {
                data: {
                    type: 'gameCenterMatchmakingRuleSets';
                    id: string;
                };
            };
            matchmakingRequests: {
                data: Array<{
                    type: 'gameCenterMatchmakingTestRequests';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<(GameCenterMatchmakingTestPlayerPropertyInlineCreate | GameCenterMatchmakingTestRequestInlineCreate)>;
};

export type GameCenterMatchmakingRuleSet = {
    type: 'gameCenterMatchmakingRuleSets';
    id: string;
    attributes?: {
        referenceName?: string;
        ruleLanguageVersion?: number;
        minPlayers?: number;
        maxPlayers?: number;
    };
    relationships?: {
        teams?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterMatchmakingTeams';
                id: string;
            }>;
        };
        rules?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterMatchmakingRules';
                id: string;
            }>;
        };
        matchmakingQueues?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'gameCenterMatchmakingQueues';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type110 = 'gameCenterMatchmakingRuleSets';

export type GameCenterMatchmakingRuleSetsResponse = {
    data: Array<GameCenterMatchmakingRuleSet>;
    included?: Array<(GameCenterMatchmakingTeam | GameCenterMatchmakingRule | GameCenterMatchmakingQueue)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingRuleSetResponse = {
    data: GameCenterMatchmakingRuleSet;
    included?: Array<(GameCenterMatchmakingTeam | GameCenterMatchmakingRule | GameCenterMatchmakingQueue)>;
    links: DocumentLinks;
};

export type GameCenterMatchmakingRuleSetCreateRequest = {
    data: {
        type: 'gameCenterMatchmakingRuleSets';
        attributes: {
            referenceName: string;
            ruleLanguageVersion: number;
            minPlayers: number;
            maxPlayers: number;
        };
    };
};

export type GameCenterMatchmakingRuleSetUpdateRequest = {
    data: {
        type: 'gameCenterMatchmakingRuleSets';
        id: string;
        attributes?: {
            minPlayers?: number;
            maxPlayers?: number;
        };
    };
};

export type GameCenterMatchmakingRule = {
    type: 'gameCenterMatchmakingRules';
    id: string;
    attributes?: {
        referenceName?: string;
        description?: string;
        type?: 'COMPATIBLE' | 'DISTANCE' | 'MATCH' | 'TEAM';
        expression?: string;
        weight?: number;
    };
    links?: ResourceLinks;
};

export type type111 = 'gameCenterMatchmakingRules';

export type GameCenterMatchmakingRulesResponse = {
    data: Array<GameCenterMatchmakingRule>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingRuleResponse = {
    data: GameCenterMatchmakingRule;
    links: DocumentLinks;
};

export type GameCenterMatchmakingRuleCreateRequest = {
    data: {
        type: 'gameCenterMatchmakingRules';
        attributes: {
            referenceName: string;
            description: string;
            type: 'COMPATIBLE' | 'DISTANCE' | 'MATCH' | 'TEAM';
            expression: string;
            weight?: number;
        };
        relationships: {
            ruleSet: {
                data: {
                    type: 'gameCenterMatchmakingRuleSets';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterMatchmakingRuleUpdateRequest = {
    data: {
        type: 'gameCenterMatchmakingRules';
        id: string;
        attributes?: {
            description?: string;
            expression?: string;
            weight?: number;
        };
    };
};

export type GameCenterMatchmakingTeam = {
    type: 'gameCenterMatchmakingTeams';
    id: string;
    attributes?: {
        referenceName?: string;
        minPlayers?: number;
        maxPlayers?: number;
    };
    links?: ResourceLinks;
};

export type type112 = 'gameCenterMatchmakingTeams';

export type GameCenterMatchmakingTeamsResponse = {
    data: Array<GameCenterMatchmakingTeam>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingTeamResponse = {
    data: GameCenterMatchmakingTeam;
    links: DocumentLinks;
};

export type GameCenterMatchmakingTeamCreateRequest = {
    data: {
        type: 'gameCenterMatchmakingTeams';
        attributes: {
            referenceName: string;
            minPlayers: number;
            maxPlayers: number;
        };
        relationships: {
            ruleSet: {
                data: {
                    type: 'gameCenterMatchmakingRuleSets';
                    id: string;
                };
            };
        };
    };
};

export type GameCenterMatchmakingTeamUpdateRequest = {
    data: {
        type: 'gameCenterMatchmakingTeams';
        id: string;
        attributes?: {
            minPlayers?: number;
            maxPlayers?: number;
        };
    };
};

export type GameCenterMatchmakingTestPlayerPropertyInlineCreate = {
    type: 'gameCenterMatchmakingTestPlayerProperties';
    id?: string;
    attributes: {
        playerId: string;
        properties?: Array<Property>;
    };
};

export type type113 = 'gameCenterMatchmakingTestPlayerProperties';

export type GameCenterMatchmakingTestRequestInlineCreate = {
    type: 'gameCenterMatchmakingTestRequests';
    id?: string;
    attributes: {
        requestName: string;
        secondsInQueue: number;
        locale?: 'AR-SA' | 'CA-ES' | 'CS-CZ' | 'DA-DK' | 'DE-DE' | 'EL-GR' | 'EN-AU' | 'EN-GB' | 'EN-US' | 'EN-KY' | 'ES-ES' | 'ES-MX' | 'FI-FI' | 'FR-CA' | 'FR-FR' | 'HI-IN' | 'HR-HR' | 'HU-HU' | 'ID-ID' | 'IT-IT' | 'IW-IL' | 'JA-JP' | 'KO-KR' | 'MS-MY' | 'NL-NL' | 'NO-NO' | 'PL-PL' | 'PT-BR' | 'PT-PT' | 'RO-RO' | 'RU-RU' | 'SK-SK' | 'SV-SE' | 'TH-TH' | 'TR-TR' | 'UK-UA' | 'ZH-CN' | 'ZH-TW' | 'ZH-HK';
        location?: Location;
        minPlayers?: number;
        maxPlayers?: number;
        playerCount?: number;
        bundleId: string;
        platform: Platform;
        appVersion: string;
    };
    relationships?: {
        matchmakingPlayerProperties?: {
            data?: Array<{
                type: 'gameCenterMatchmakingTestPlayerProperties';
                id: string;
            }>;
        };
    };
};

export type type114 = 'gameCenterMatchmakingTestRequests';

export type locale = 'AR-SA' | 'CA-ES' | 'CS-CZ' | 'DA-DK' | 'DE-DE' | 'EL-GR' | 'EN-AU' | 'EN-GB' | 'EN-US' | 'EN-KY' | 'ES-ES' | 'ES-MX' | 'FI-FI' | 'FR-CA' | 'FR-FR' | 'HI-IN' | 'HR-HR' | 'HU-HU' | 'ID-ID' | 'IT-IT' | 'IW-IL' | 'JA-JP' | 'KO-KR' | 'MS-MY' | 'NL-NL' | 'NO-NO' | 'PL-PL' | 'PT-BR' | 'PT-PT' | 'RO-RO' | 'RU-RU' | 'SK-SK' | 'SV-SE' | 'TH-TH' | 'TR-TR' | 'UK-UA' | 'ZH-CN' | 'ZH-TW' | 'ZH-HK';

export type GameCenterPlayerAchievementSubmission = {
    type: 'gameCenterPlayerAchievementSubmissions';
    id: string;
    attributes?: {
        bundleId?: string;
        challengeIds?: Array<(string)>;
        percentageAchieved?: number;
        scopedPlayerId?: string;
        submittedDate?: string;
        vendorIdentifier?: string;
    };
    links?: ResourceLinks;
};

export type type115 = 'gameCenterPlayerAchievementSubmissions';

export type GameCenterPlayerAchievementSubmissionResponse = {
    data: GameCenterPlayerAchievementSubmission;
    links: DocumentLinks;
};

export type GameCenterPlayerAchievementSubmissionCreateRequest = {
    data: {
        type: 'gameCenterPlayerAchievementSubmissions';
        attributes: {
            bundleId: string;
            challengeIds?: Array<(string)>;
            percentageAchieved: number;
            scopedPlayerId: string;
            submittedDate?: string;
            vendorIdentifier: string;
        };
    };
};

export type InAppPurchaseAppStoreReviewScreenshot = {
    type: 'inAppPurchaseAppStoreReviewScreenshots';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        imageAsset?: ImageAsset;
        assetToken?: string;
        assetType?: string;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        inAppPurchaseV2?: {
            data?: {
                type: 'inAppPurchases';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type116 = 'inAppPurchaseAppStoreReviewScreenshots';

export type InAppPurchaseAppStoreReviewScreenshotResponse = {
    data: InAppPurchaseAppStoreReviewScreenshot;
    included?: Array<InAppPurchaseV2>;
    links: DocumentLinks;
};

export type InAppPurchaseAppStoreReviewScreenshotCreateRequest = {
    data: {
        type: 'inAppPurchaseAppStoreReviewScreenshots';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            inAppPurchaseV2: {
                data: {
                    type: 'inAppPurchases';
                    id: string;
                };
            };
        };
    };
};

export type InAppPurchaseAppStoreReviewScreenshotUpdateRequest = {
    data: {
        type: 'inAppPurchaseAppStoreReviewScreenshots';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type InAppPurchaseAvailability = {
    type: 'inAppPurchaseAvailabilities';
    id: string;
    attributes?: {
        availableInNewTerritories?: boolean;
    };
    relationships?: {
        availableTerritories?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'territories';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type117 = 'inAppPurchaseAvailabilities';

export type InAppPurchaseAvailabilityResponse = {
    data: InAppPurchaseAvailability;
    included?: Array<Territory>;
    links: DocumentLinks;
};

export type InAppPurchaseAvailabilityCreateRequest = {
    data: {
        type: 'inAppPurchaseAvailabilities';
        attributes: {
            availableInNewTerritories: boolean;
        };
        relationships: {
            inAppPurchase: {
                data: {
                    type: 'inAppPurchases';
                    id: string;
                };
            };
            availableTerritories: {
                data: Array<{
                    type: 'territories';
                    id: string;
                }>;
            };
        };
    };
};

export type InAppPurchaseContent = {
    type: 'inAppPurchaseContents';
    id: string;
    attributes?: {
        fileName?: string;
        fileSize?: number;
        url?: string;
        lastModifiedDate?: string;
    };
    relationships?: {
        inAppPurchaseV2?: {
            data?: {
                type: 'inAppPurchases';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type118 = 'inAppPurchaseContents';

export type InAppPurchaseContentResponse = {
    data: InAppPurchaseContent;
    included?: Array<InAppPurchaseV2>;
    links: DocumentLinks;
};

export type InAppPurchaseImage = {
    type: 'inAppPurchaseImages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        assetToken?: string;
        imageAsset?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        state?: 'AWAITING_UPLOAD' | 'UPLOAD_COMPLETE' | 'FAILED' | 'PREPARE_FOR_SUBMISSION' | 'WAITING_FOR_REVIEW' | 'APPROVED' | 'REJECTED';
    };
    relationships?: {
        inAppPurchase?: {
            data?: {
                type: 'inAppPurchases';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type119 = 'inAppPurchaseImages';

export type state6 = 'AWAITING_UPLOAD' | 'UPLOAD_COMPLETE' | 'FAILED' | 'PREPARE_FOR_SUBMISSION' | 'WAITING_FOR_REVIEW' | 'APPROVED' | 'REJECTED';

export type InAppPurchaseImagesResponse = {
    data: Array<InAppPurchaseImage>;
    included?: Array<InAppPurchaseV2>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type InAppPurchaseImageResponse = {
    data: InAppPurchaseImage;
    included?: Array<InAppPurchaseV2>;
    links: DocumentLinks;
};

export type InAppPurchaseImageCreateRequest = {
    data: {
        type: 'inAppPurchaseImages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            inAppPurchase: {
                data: {
                    type: 'inAppPurchases';
                    id: string;
                };
            };
        };
    };
};

export type InAppPurchaseImageUpdateRequest = {
    data: {
        type: 'inAppPurchaseImages';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type InAppPurchaseLocalization = {
    type: 'inAppPurchaseLocalizations';
    id: string;
    attributes?: {
        name?: string;
        locale?: string;
        description?: string;
        state?: 'PREPARE_FOR_SUBMISSION' | 'WAITING_FOR_REVIEW' | 'APPROVED' | 'REJECTED';
    };
    relationships?: {
        inAppPurchaseV2?: {
            data?: {
                type: 'inAppPurchases';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type120 = 'inAppPurchaseLocalizations';

export type state7 = 'PREPARE_FOR_SUBMISSION' | 'WAITING_FOR_REVIEW' | 'APPROVED' | 'REJECTED';

export type InAppPurchaseLocalizationsResponse = {
    data: Array<InAppPurchaseLocalization>;
    included?: Array<InAppPurchaseV2>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type InAppPurchaseLocalizationResponse = {
    data: InAppPurchaseLocalization;
    included?: Array<InAppPurchaseV2>;
    links: DocumentLinks;
};

export type InAppPurchaseLocalizationCreateRequest = {
    data: {
        type: 'inAppPurchaseLocalizations';
        attributes: {
            name: string;
            locale: string;
            description?: string;
        };
        relationships: {
            inAppPurchaseV2: {
                data: {
                    type: 'inAppPurchases';
                    id: string;
                };
            };
        };
    };
};

export type InAppPurchaseLocalizationUpdateRequest = {
    data: {
        type: 'inAppPurchaseLocalizations';
        id: string;
        attributes?: {
            name?: string;
            description?: string;
        };
    };
};

export type InAppPurchasePricePoint = {
    type: 'inAppPurchasePricePoints';
    id: string;
    attributes?: {
        customerPrice?: string;
        proceeds?: string;
    };
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type121 = 'inAppPurchasePricePoints';

export type InAppPurchasePricePointsResponse = {
    data: Array<InAppPurchasePricePoint>;
    included?: Array<Territory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type InAppPurchasePriceSchedule = {
    type: 'inAppPurchasePriceSchedules';
    id: string;
    relationships?: {
        inAppPurchase?: {
            data?: {
                type: 'inAppPurchases';
                id: string;
            };
        };
        baseTerritory?: {
            links?: RelationshipLinks;
            data?: {
                type: 'territories';
                id: string;
            };
        };
        manualPrices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'inAppPurchasePrices';
                id: string;
            }>;
        };
        automaticPrices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'inAppPurchasePrices';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type122 = 'inAppPurchasePriceSchedules';

export type InAppPurchasePriceScheduleResponse = {
    data: InAppPurchasePriceSchedule;
    included?: Array<(InAppPurchaseV2 | Territory | InAppPurchasePrice)>;
    links: DocumentLinks;
};

export type InAppPurchasePriceScheduleCreateRequest = {
    data: {
        type: 'inAppPurchasePriceSchedules';
        relationships: {
            inAppPurchase: {
                data: {
                    type: 'inAppPurchases';
                    id: string;
                };
            };
            baseTerritory: {
                data: {
                    type: 'territories';
                    id: string;
                };
            };
            manualPrices: {
                data: Array<{
                    type: 'inAppPurchasePrices';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<(InAppPurchasePriceInlineCreate | TerritoryInlineCreate)>;
};

export type InAppPurchasePrice = {
    type: 'inAppPurchasePrices';
    id: string;
    attributes?: {
        startDate?: string;
        endDate?: string;
        manual?: boolean;
    };
    relationships?: {
        inAppPurchasePricePoint?: {
            data?: {
                type: 'inAppPurchasePricePoints';
                id: string;
            };
        };
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type123 = 'inAppPurchasePrices';

export type InAppPurchasePriceInlineCreate = {
    type: 'inAppPurchasePrices';
    id?: string;
    attributes?: {
        startDate?: string;
        endDate?: string;
    };
    relationships?: {
        inAppPurchaseV2?: {
            data?: {
                type: 'inAppPurchases';
                id: string;
            };
        };
        inAppPurchasePricePoint?: {
            data?: {
                type: 'inAppPurchasePricePoints';
                id: string;
            };
        };
    };
};

export type InAppPurchasePricesResponse = {
    data: Array<InAppPurchasePrice>;
    included?: Array<(InAppPurchasePricePoint | Territory)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type InAppPurchaseSubmission = {
    type: 'inAppPurchaseSubmissions';
    id: string;
    relationships?: {
        inAppPurchaseV2?: {
            data?: {
                type: 'inAppPurchases';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type124 = 'inAppPurchaseSubmissions';

export type InAppPurchaseSubmissionResponse = {
    data: InAppPurchaseSubmission;
    included?: Array<InAppPurchaseV2>;
    links: DocumentLinks;
};

export type InAppPurchaseSubmissionCreateRequest = {
    data: {
        type: 'inAppPurchaseSubmissions';
        relationships: {
            inAppPurchaseV2: {
                data: {
                    type: 'inAppPurchases';
                    id: string;
                };
            };
        };
    };
};

/**
 * @deprecated
 */
export type InAppPurchase = {
    type: 'inAppPurchases';
    id: string;
    attributes?: {
        referenceName?: string;
        productId?: string;
        inAppPurchaseType?: 'AUTOMATICALLY_RENEWABLE_SUBSCRIPTION' | 'NON_CONSUMABLE' | 'CONSUMABLE' | 'NON_RENEWING_SUBSCRIPTION' | 'FREE_SUBSCRIPTION';
        state?: 'CREATED' | 'DEVELOPER_SIGNED_OFF' | 'DEVELOPER_ACTION_NEEDED' | 'DELETION_IN_PROGRESS' | 'APPROVED' | 'DELETED' | 'REMOVED_FROM_SALE' | 'DEVELOPER_REMOVED_FROM_SALE' | 'WAITING_FOR_UPLOAD' | 'PROCESSING_CONTENT' | 'REPLACED' | 'REJECTED' | 'WAITING_FOR_SCREENSHOT' | 'PREPARE_FOR_SUBMISSION' | 'MISSING_METADATA' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'PENDING_DEVELOPER_RELEASE';
    };
    relationships?: {
        apps?: {
            meta?: PagingInformation;
            data?: Array<{
                type: 'apps';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type125 = 'inAppPurchases';

export type inAppPurchaseType = 'AUTOMATICALLY_RENEWABLE_SUBSCRIPTION' | 'NON_CONSUMABLE' | 'CONSUMABLE' | 'NON_RENEWING_SUBSCRIPTION' | 'FREE_SUBSCRIPTION';

export type state8 = 'CREATED' | 'DEVELOPER_SIGNED_OFF' | 'DEVELOPER_ACTION_NEEDED' | 'DELETION_IN_PROGRESS' | 'APPROVED' | 'DELETED' | 'REMOVED_FROM_SALE' | 'DEVELOPER_REMOVED_FROM_SALE' | 'WAITING_FOR_UPLOAD' | 'PROCESSING_CONTENT' | 'REPLACED' | 'REJECTED' | 'WAITING_FOR_SCREENSHOT' | 'PREPARE_FOR_SUBMISSION' | 'MISSING_METADATA' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'PENDING_DEVELOPER_RELEASE';

/**
 * @deprecated
 */
export type InAppPurchasesResponse = {
    data: Array<InAppPurchase>;
    included?: Array<App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

/**
 * @deprecated
 */
export type InAppPurchaseResponse = {
    data: InAppPurchase;
    included?: Array<App>;
    links: DocumentLinks;
};

export type InAppPurchaseV2 = {
    type: 'inAppPurchases';
    id: string;
    attributes?: {
        name?: string;
        productId?: string;
        inAppPurchaseType?: InAppPurchaseType;
        state?: InAppPurchaseState;
        reviewNote?: string;
        familySharable?: boolean;
        contentHosting?: boolean;
    };
    relationships?: {
        inAppPurchaseLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'inAppPurchaseLocalizations';
                id: string;
            }>;
        };
        pricePoints?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'inAppPurchasePricePoints';
                id: string;
            }>;
        };
        content?: {
            links?: RelationshipLinks;
            data?: {
                type: 'inAppPurchaseContents';
                id: string;
            };
        };
        appStoreReviewScreenshot?: {
            links?: RelationshipLinks;
            data?: {
                type: 'inAppPurchaseAppStoreReviewScreenshots';
                id: string;
            };
        };
        promotedPurchase?: {
            links?: RelationshipLinks;
            data?: {
                type: 'promotedPurchases';
                id: string;
            };
        };
        iapPriceSchedule?: {
            links?: RelationshipLinks;
            data?: {
                type: 'inAppPurchasePriceSchedules';
                id: string;
            };
        };
        inAppPurchaseAvailability?: {
            links?: RelationshipLinks;
            data?: {
                type: 'inAppPurchaseAvailabilities';
                id: string;
            };
        };
        images?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'inAppPurchaseImages';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type InAppPurchasesV2Response = {
    data: Array<InAppPurchaseV2>;
    included?: Array<(InAppPurchaseLocalization | InAppPurchasePricePoint | InAppPurchaseContent | InAppPurchaseAppStoreReviewScreenshot | PromotedPurchase | InAppPurchasePriceSchedule | InAppPurchaseAvailability | InAppPurchaseImage)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type InAppPurchaseV2Response = {
    data: InAppPurchaseV2;
    included?: Array<(InAppPurchaseLocalization | InAppPurchasePricePoint | InAppPurchaseContent | InAppPurchaseAppStoreReviewScreenshot | PromotedPurchase | InAppPurchasePriceSchedule | InAppPurchaseAvailability | InAppPurchaseImage)>;
    links: DocumentLinks;
};

export type InAppPurchaseV2CreateRequest = {
    data: {
        type: 'inAppPurchases';
        attributes: {
            name: string;
            productId: string;
            inAppPurchaseType: InAppPurchaseType;
            reviewNote?: string;
            familySharable?: boolean;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type InAppPurchaseV2UpdateRequest = {
    data: {
        type: 'inAppPurchases';
        id: string;
        attributes?: {
            name?: string;
            reviewNote?: string;
            familySharable?: boolean;
        };
    };
};

/**
 * @deprecated
 */
export type MarketplaceDomain = {
    type: 'marketplaceDomains';
    id: string;
    attributes?: {
        domain?: string;
        referenceName?: string;
        createdDate?: string;
    };
    links?: ResourceLinks;
};

export type type126 = 'marketplaceDomains';

/**
 * @deprecated
 */
export type MarketplaceDomainsResponse = {
    data: Array<MarketplaceDomain>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

/**
 * @deprecated
 */
export type MarketplaceDomainResponse = {
    data: MarketplaceDomain;
    links: DocumentLinks;
};

/**
 * @deprecated
 */
export type MarketplaceDomainCreateRequest = {
    data: {
        type: 'marketplaceDomains';
        attributes: {
            domain: string;
            referenceName: string;
        };
    };
};

export type MarketplaceSearchDetail = {
    type: 'marketplaceSearchDetails';
    id: string;
    attributes?: {
        catalogUrl?: string;
    };
    links?: ResourceLinks;
};

export type type127 = 'marketplaceSearchDetails';

export type MarketplaceSearchDetailResponse = {
    data: MarketplaceSearchDetail;
    links: DocumentLinks;
};

export type MarketplaceSearchDetailCreateRequest = {
    data: {
        type: 'marketplaceSearchDetails';
        attributes: {
            catalogUrl: string;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type MarketplaceSearchDetailUpdateRequest = {
    data: {
        type: 'marketplaceSearchDetails';
        id: string;
        attributes?: {
            catalogUrl?: string;
        };
    };
};

export type MarketplaceWebhook = {
    type: 'marketplaceWebhooks';
    id: string;
    attributes?: {
        endpointUrl?: string;
    };
    links?: ResourceLinks;
};

export type type128 = 'marketplaceWebhooks';

export type MarketplaceWebhooksResponse = {
    data: Array<MarketplaceWebhook>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type MarketplaceWebhookResponse = {
    data: MarketplaceWebhook;
    links: DocumentLinks;
};

export type MarketplaceWebhookCreateRequest = {
    data: {
        type: 'marketplaceWebhooks';
        attributes: {
            endpointUrl: string;
            secret: string;
        };
    };
};

export type MarketplaceWebhookUpdateRequest = {
    data: {
        type: 'marketplaceWebhooks';
        id: string;
        attributes?: {
            endpointUrl?: string;
            secret?: string;
        };
    };
};

export type PerfPowerMetric = {
    type: 'perfPowerMetrics';
    id: string;
    attributes?: {
        platform?: 'IOS';
        metricType?: 'DISK' | 'HANG' | 'BATTERY' | 'LAUNCH' | 'MEMORY' | 'ANIMATION' | 'TERMINATION';
        deviceType?: string;
    };
    links?: ResourceLinks;
};

export type type129 = 'perfPowerMetrics';

export type platform = 'IOS';

export type metricType = 'DISK' | 'HANG' | 'BATTERY' | 'LAUNCH' | 'MEMORY' | 'ANIMATION' | 'TERMINATION';

export type PrereleaseVersion = {
    type: 'preReleaseVersions';
    id: string;
    attributes?: {
        version?: string;
        platform?: Platform;
    };
    relationships?: {
        builds?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'builds';
                id: string;
            }>;
        };
        app?: {
            links?: RelationshipLinks;
            data?: {
                type: 'apps';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type130 = 'preReleaseVersions';

export type PreReleaseVersionsResponse = {
    data: Array<PrereleaseVersion>;
    included?: Array<(Build | App)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type PrereleaseVersionResponse = {
    data: PrereleaseVersion;
    included?: Array<(Build | App)>;
    links: DocumentLinks;
};

export type Profile = {
    type: 'profiles';
    id: string;
    attributes?: {
        name?: string;
        platform?: BundleIdPlatform;
        profileType?: 'IOS_APP_DEVELOPMENT' | 'IOS_APP_STORE' | 'IOS_APP_ADHOC' | 'IOS_APP_INHOUSE' | 'MAC_APP_DEVELOPMENT' | 'MAC_APP_STORE' | 'MAC_APP_DIRECT' | 'TVOS_APP_DEVELOPMENT' | 'TVOS_APP_STORE' | 'TVOS_APP_ADHOC' | 'TVOS_APP_INHOUSE' | 'MAC_CATALYST_APP_DEVELOPMENT' | 'MAC_CATALYST_APP_STORE' | 'MAC_CATALYST_APP_DIRECT';
        profileState?: 'ACTIVE' | 'INVALID';
        profileContent?: string;
        uuid?: string;
        createdDate?: string;
        expirationDate?: string;
    };
    relationships?: {
        bundleId?: {
            links?: RelationshipLinks;
            data?: {
                type: 'bundleIds';
                id: string;
            };
        };
        devices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'devices';
                id: string;
            }>;
        };
        certificates?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'certificates';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type131 = 'profiles';

export type profileType = 'IOS_APP_DEVELOPMENT' | 'IOS_APP_STORE' | 'IOS_APP_ADHOC' | 'IOS_APP_INHOUSE' | 'MAC_APP_DEVELOPMENT' | 'MAC_APP_STORE' | 'MAC_APP_DIRECT' | 'TVOS_APP_DEVELOPMENT' | 'TVOS_APP_STORE' | 'TVOS_APP_ADHOC' | 'TVOS_APP_INHOUSE' | 'MAC_CATALYST_APP_DEVELOPMENT' | 'MAC_CATALYST_APP_STORE' | 'MAC_CATALYST_APP_DIRECT';

export type profileState = 'ACTIVE' | 'INVALID';

export type ProfilesResponse = {
    data: Array<Profile>;
    included?: Array<(BundleId | Device | Certificate)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ProfileResponse = {
    data: Profile;
    included?: Array<(BundleId | Device | Certificate)>;
    links: DocumentLinks;
};

export type ProfileCreateRequest = {
    data: {
        type: 'profiles';
        attributes: {
            name: string;
            profileType: 'IOS_APP_DEVELOPMENT' | 'IOS_APP_STORE' | 'IOS_APP_ADHOC' | 'IOS_APP_INHOUSE' | 'MAC_APP_DEVELOPMENT' | 'MAC_APP_STORE' | 'MAC_APP_DIRECT' | 'TVOS_APP_DEVELOPMENT' | 'TVOS_APP_STORE' | 'TVOS_APP_ADHOC' | 'TVOS_APP_INHOUSE' | 'MAC_CATALYST_APP_DEVELOPMENT' | 'MAC_CATALYST_APP_STORE' | 'MAC_CATALYST_APP_DIRECT';
        };
        relationships: {
            bundleId: {
                data: {
                    type: 'bundleIds';
                    id: string;
                };
            };
            devices?: {
                data?: Array<{
                    type: 'devices';
                    id: string;
                }>;
            };
            certificates: {
                data: Array<{
                    type: 'certificates';
                    id: string;
                }>;
            };
        };
    };
};

/**
 * @deprecated
 */
export type PromotedPurchaseImage = {
    type: 'promotedPurchaseImages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        assetToken?: string;
        imageAsset?: ImageAsset;
        assetType?: string;
        uploadOperations?: Array<UploadOperation>;
        state?: 'AWAITING_UPLOAD' | 'UPLOAD_COMPLETE' | 'FAILED' | 'PREPARE_FOR_SUBMISSION' | 'WAITING_FOR_REVIEW' | 'APPROVED' | 'REJECTED';
    };
    relationships?: {
        promotedPurchase?: {
            data?: {
                type: 'promotedPurchases';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type132 = 'promotedPurchaseImages';

/**
 * @deprecated
 */
export type PromotedPurchaseImagesResponse = {
    data: Array<PromotedPurchaseImage>;
    included?: Array<PromotedPurchase>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

/**
 * @deprecated
 */
export type PromotedPurchaseImageResponse = {
    data: PromotedPurchaseImage;
    included?: Array<PromotedPurchase>;
    links: DocumentLinks;
};

/**
 * @deprecated
 */
export type PromotedPurchaseImageCreateRequest = {
    data: {
        type: 'promotedPurchaseImages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            promotedPurchase: {
                data: {
                    type: 'promotedPurchases';
                    id: string;
                };
            };
        };
    };
};

/**
 * @deprecated
 */
export type PromotedPurchaseImageUpdateRequest = {
    data: {
        type: 'promotedPurchaseImages';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type PromotedPurchase = {
    type: 'promotedPurchases';
    id: string;
    attributes?: {
        visibleForAllUsers?: boolean;
        enabled?: boolean;
        state?: 'APPROVED' | 'IN_REVIEW' | 'PREPARE_FOR_SUBMISSION' | 'REJECTED';
    };
    relationships?: {
        inAppPurchaseV2?: {
            data?: {
                type: 'inAppPurchases';
                id: string;
            };
        };
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
        /**
         * @deprecated
         */
        promotionImages?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'promotedPurchaseImages';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type133 = 'promotedPurchases';

export type state9 = 'APPROVED' | 'IN_REVIEW' | 'PREPARE_FOR_SUBMISSION' | 'REJECTED';

export type PromotedPurchasesResponse = {
    data: Array<PromotedPurchase>;
    included?: Array<(InAppPurchaseV2 | Subscription | PromotedPurchaseImage)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type PromotedPurchaseResponse = {
    data: PromotedPurchase;
    included?: Array<(InAppPurchaseV2 | Subscription | PromotedPurchaseImage)>;
    links: DocumentLinks;
};

export type PromotedPurchaseCreateRequest = {
    data: {
        type: 'promotedPurchases';
        attributes: {
            visibleForAllUsers: boolean;
            enabled?: boolean;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
            inAppPurchaseV2?: {
                data?: {
                    type: 'inAppPurchases';
                    id: string;
                };
            };
            subscription?: {
                data?: {
                    type: 'subscriptions';
                    id: string;
                };
            };
        };
    };
};

export type PromotedPurchaseUpdateRequest = {
    data: {
        type: 'promotedPurchases';
        id: string;
        attributes?: {
            visibleForAllUsers?: boolean;
            enabled?: boolean;
        };
    };
};

export type ReviewSubmissionItem = {
    type: 'reviewSubmissionItems';
    id: string;
    attributes?: {
        state?: 'READY_FOR_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REJECTED' | 'REMOVED';
    };
    relationships?: {
        appStoreVersion?: {
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
        appCustomProductPageVersion?: {
            data?: {
                type: 'appCustomProductPageVersions';
                id: string;
            };
        };
        appStoreVersionExperiment?: {
            data?: {
                type: 'appStoreVersionExperiments';
                id: string;
            };
        };
        appStoreVersionExperimentV2?: {
            data?: {
                type: 'appStoreVersionExperiments';
                id: string;
            };
        };
        appEvent?: {
            data?: {
                type: 'appEvents';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type134 = 'reviewSubmissionItems';

export type state10 = 'READY_FOR_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REJECTED' | 'REMOVED';

export type ReviewSubmissionItemsResponse = {
    data: Array<ReviewSubmissionItem>;
    included?: Array<(AppStoreVersion | AppCustomProductPageVersion | AppStoreVersionExperiment | AppStoreVersionExperimentV2 | AppEvent)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ReviewSubmissionItemResponse = {
    data: ReviewSubmissionItem;
    included?: Array<(AppStoreVersion | AppCustomProductPageVersion | AppStoreVersionExperiment | AppStoreVersionExperimentV2 | AppEvent)>;
    links: DocumentLinks;
};

export type ReviewSubmissionItemCreateRequest = {
    data: {
        type: 'reviewSubmissionItems';
        relationships: {
            reviewSubmission: {
                data: {
                    type: 'reviewSubmissions';
                    id: string;
                };
            };
            appStoreVersion?: {
                data?: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
            appCustomProductPageVersion?: {
                data?: {
                    type: 'appCustomProductPageVersions';
                    id: string;
                };
            };
            appStoreVersionExperiment?: {
                data?: {
                    type: 'appStoreVersionExperiments';
                    id: string;
                };
            };
            appStoreVersionExperimentV2?: {
                data?: {
                    type: 'appStoreVersionExperiments';
                    id: string;
                };
            };
            appEvent?: {
                data?: {
                    type: 'appEvents';
                    id: string;
                };
            };
        };
    };
};

export type ReviewSubmissionItemUpdateRequest = {
    data: {
        type: 'reviewSubmissionItems';
        id: string;
        attributes?: {
            resolved?: boolean;
            removed?: boolean;
        };
    };
};

export type ReviewSubmission = {
    type: 'reviewSubmissions';
    id: string;
    attributes?: {
        platform?: Platform;
        submittedDate?: string;
        state?: 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'UNRESOLVED_ISSUES' | 'CANCELING' | 'COMPLETING' | 'COMPLETE';
    };
    relationships?: {
        app?: {
            data?: {
                type: 'apps';
                id: string;
            };
        };
        items?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'reviewSubmissionItems';
                id: string;
            }>;
        };
        appStoreVersionForReview?: {
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
        submittedByActor?: {
            data?: {
                type: 'actors';
                id: string;
            };
        };
        lastUpdatedByActor?: {
            data?: {
                type: 'actors';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type135 = 'reviewSubmissions';

export type state11 = 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'UNRESOLVED_ISSUES' | 'CANCELING' | 'COMPLETING' | 'COMPLETE';

export type ReviewSubmissionsResponse = {
    data: Array<ReviewSubmission>;
    included?: Array<(App | ReviewSubmissionItem | AppStoreVersion | Actor)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ReviewSubmissionResponse = {
    data: ReviewSubmission;
    included?: Array<(App | ReviewSubmissionItem | AppStoreVersion | Actor)>;
    links: DocumentLinks;
};

export type ReviewSubmissionCreateRequest = {
    data: {
        type: 'reviewSubmissions';
        attributes: {
            platform: Platform;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type ReviewSubmissionUpdateRequest = {
    data: {
        type: 'reviewSubmissions';
        id: string;
        attributes?: {
            submitted?: boolean;
            canceled?: boolean;
        };
    };
};

export type RoutingAppCoverage = {
    type: 'routingAppCoverages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        appStoreVersion?: {
            data?: {
                type: 'appStoreVersions';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type136 = 'routingAppCoverages';

export type RoutingAppCoverageResponse = {
    data: RoutingAppCoverage;
    included?: Array<AppStoreVersion>;
    links: DocumentLinks;
};

export type RoutingAppCoverageCreateRequest = {
    data: {
        type: 'routingAppCoverages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            appStoreVersion: {
                data: {
                    type: 'appStoreVersions';
                    id: string;
                };
            };
        };
    };
};

export type RoutingAppCoverageUpdateRequest = {
    data: {
        type: 'routingAppCoverages';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type SandboxTesterV2 = {
    type: 'sandboxTesters';
    id: string;
    attributes?: {
        firstName?: string;
        lastName?: string;
        acAccountName?: string;
        territory?: TerritoryCode;
        applePayCompatible?: boolean;
        interruptPurchases?: boolean;
        subscriptionRenewalRate?: 'MONTHLY_RENEWAL_EVERY_ONE_HOUR' | 'MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES' | 'MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES' | 'MONTHLY_RENEWAL_EVERY_FIVE_MINUTES' | 'MONTHLY_RENEWAL_EVERY_THREE_MINUTES';
    };
    links?: ResourceLinks;
};

export type type137 = 'sandboxTesters';

export type subscriptionRenewalRate = 'MONTHLY_RENEWAL_EVERY_ONE_HOUR' | 'MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES' | 'MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES' | 'MONTHLY_RENEWAL_EVERY_FIVE_MINUTES' | 'MONTHLY_RENEWAL_EVERY_THREE_MINUTES';

export type SandboxTestersV2Response = {
    data: Array<SandboxTesterV2>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SandboxTesterV2Response = {
    data: SandboxTesterV2;
    links: DocumentLinks;
};

export type SandboxTesterV2UpdateRequest = {
    data: {
        type: 'sandboxTesters';
        id: string;
        attributes?: {
            territory?: TerritoryCode;
            interruptPurchases?: boolean;
            subscriptionRenewalRate?: 'MONTHLY_RENEWAL_EVERY_ONE_HOUR' | 'MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES' | 'MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES' | 'MONTHLY_RENEWAL_EVERY_FIVE_MINUTES' | 'MONTHLY_RENEWAL_EVERY_THREE_MINUTES';
        };
    };
};

export type SandboxTestersClearPurchaseHistoryRequestV2 = {
    type: 'sandboxTestersClearPurchaseHistoryRequest';
    id: string;
    links?: ResourceLinks;
};

export type type138 = 'sandboxTestersClearPurchaseHistoryRequest';

export type SandboxTestersClearPurchaseHistoryRequestV2Response = {
    data: SandboxTestersClearPurchaseHistoryRequestV2;
    links: DocumentLinks;
};

export type SandboxTestersClearPurchaseHistoryRequestV2CreateRequest = {
    data: {
        type: 'sandboxTestersClearPurchaseHistoryRequest';
        relationships: {
            sandboxTesters: {
                data: Array<{
                    type: 'sandboxTesters';
                    id: string;
                }>;
            };
        };
    };
};

export type ScmGitReference = {
    type: 'scmGitReferences';
    id: string;
    attributes?: {
        name?: string;
        canonicalName?: string;
        isDeleted?: boolean;
        kind?: CiGitRefKind;
    };
    relationships?: {
        repository?: {
            data?: {
                type: 'scmRepositories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type139 = 'scmGitReferences';

export type ScmGitReferencesResponse = {
    data: Array<ScmGitReference>;
    included?: Array<ScmRepository>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ScmGitReferenceResponse = {
    data: ScmGitReference;
    included?: Array<ScmRepository>;
    links: DocumentLinks;
};

export type ScmProvider = {
    type: 'scmProviders';
    id: string;
    attributes?: {
        scmProviderType?: ScmProviderType;
        url?: string;
    };
    relationships?: {
        repositories?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type type140 = 'scmProviders';

export type ScmProvidersResponse = {
    data: Array<ScmProvider>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ScmProviderResponse = {
    data: ScmProvider;
    links: DocumentLinks;
};

export type ScmPullRequest = {
    type: 'scmPullRequests';
    id: string;
    attributes?: {
        title?: string;
        number?: number;
        webUrl?: string;
        sourceRepositoryOwner?: string;
        sourceRepositoryName?: string;
        sourceBranchName?: string;
        destinationRepositoryOwner?: string;
        destinationRepositoryName?: string;
        destinationBranchName?: string;
        isClosed?: boolean;
        isCrossRepository?: boolean;
    };
    relationships?: {
        repository?: {
            data?: {
                type: 'scmRepositories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type141 = 'scmPullRequests';

export type ScmPullRequestsResponse = {
    data: Array<ScmPullRequest>;
    included?: Array<ScmRepository>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ScmPullRequestResponse = {
    data: ScmPullRequest;
    included?: Array<ScmRepository>;
    links: DocumentLinks;
};

export type ScmRepository = {
    type: 'scmRepositories';
    id: string;
    attributes?: {
        lastAccessedDate?: string;
        httpCloneUrl?: string;
        sshCloneUrl?: string;
        ownerName?: string;
        repositoryName?: string;
    };
    relationships?: {
        scmProvider?: {
            data?: {
                type: 'scmProviders';
                id: string;
            };
        };
        defaultBranch?: {
            data?: {
                type: 'scmGitReferences';
                id: string;
            };
        };
        gitReferences?: {
            links?: RelationshipLinks;
        };
        pullRequests?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type type142 = 'scmRepositories';

export type ScmRepositoriesResponse = {
    data: Array<ScmRepository>;
    included?: Array<(ScmProvider | ScmGitReference)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ScmRepositoryResponse = {
    data: ScmRepository;
    included?: Array<(ScmProvider | ScmGitReference)>;
    links: DocumentLinks;
};

export type SubscriptionAppStoreReviewScreenshot = {
    type: 'subscriptionAppStoreReviewScreenshots';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        imageAsset?: ImageAsset;
        assetToken?: string;
        assetType?: string;
        uploadOperations?: Array<UploadOperation>;
        assetDeliveryState?: AppMediaAssetState;
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type143 = 'subscriptionAppStoreReviewScreenshots';

export type SubscriptionAppStoreReviewScreenshotResponse = {
    data: SubscriptionAppStoreReviewScreenshot;
    included?: Array<Subscription>;
    links: DocumentLinks;
};

export type SubscriptionAppStoreReviewScreenshotCreateRequest = {
    data: {
        type: 'subscriptionAppStoreReviewScreenshots';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionAppStoreReviewScreenshotUpdateRequest = {
    data: {
        type: 'subscriptionAppStoreReviewScreenshots';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type SubscriptionAvailability = {
    type: 'subscriptionAvailabilities';
    id: string;
    attributes?: {
        availableInNewTerritories?: boolean;
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
        availableTerritories?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'territories';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type144 = 'subscriptionAvailabilities';

export type SubscriptionAvailabilityResponse = {
    data: SubscriptionAvailability;
    included?: Array<(Subscription | Territory)>;
    links: DocumentLinks;
};

export type SubscriptionAvailabilityCreateRequest = {
    data: {
        type: 'subscriptionAvailabilities';
        attributes: {
            availableInNewTerritories: boolean;
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
            availableTerritories: {
                data: Array<{
                    type: 'territories';
                    id: string;
                }>;
            };
        };
    };
};

export type SubscriptionGracePeriod = {
    type: 'subscriptionGracePeriods';
    id: string;
    attributes?: {
        optIn?: boolean;
        sandboxOptIn?: boolean;
        duration?: SubscriptionGracePeriodDuration;
        renewalType?: 'ALL_RENEWALS' | 'PAID_TO_PAID_ONLY';
    };
    links?: ResourceLinks;
};

export type type145 = 'subscriptionGracePeriods';

export type renewalType = 'ALL_RENEWALS' | 'PAID_TO_PAID_ONLY';

export type SubscriptionGracePeriodResponse = {
    data: SubscriptionGracePeriod;
    links: DocumentLinks;
};

export type SubscriptionGracePeriodUpdateRequest = {
    data: {
        type: 'subscriptionGracePeriods';
        id: string;
        attributes?: {
            optIn?: boolean;
            sandboxOptIn?: boolean;
            duration?: SubscriptionGracePeriodDuration;
            renewalType?: 'ALL_RENEWALS' | 'PAID_TO_PAID_ONLY';
        };
    };
};

export type SubscriptionGroupLocalization = {
    type: 'subscriptionGroupLocalizations';
    id: string;
    attributes?: {
        name?: string;
        customAppName?: string;
        locale?: string;
        state?: 'PREPARE_FOR_SUBMISSION' | 'WAITING_FOR_REVIEW' | 'APPROVED' | 'REJECTED';
    };
    relationships?: {
        subscriptionGroup?: {
            data?: {
                type: 'subscriptionGroups';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type146 = 'subscriptionGroupLocalizations';

export type SubscriptionGroupLocalizationsResponse = {
    data: Array<SubscriptionGroupLocalization>;
    included?: Array<SubscriptionGroup>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionGroupLocalizationResponse = {
    data: SubscriptionGroupLocalization;
    included?: Array<SubscriptionGroup>;
    links: DocumentLinks;
};

export type SubscriptionGroupLocalizationCreateRequest = {
    data: {
        type: 'subscriptionGroupLocalizations';
        attributes: {
            name: string;
            customAppName?: string;
            locale: string;
        };
        relationships: {
            subscriptionGroup: {
                data: {
                    type: 'subscriptionGroups';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionGroupLocalizationUpdateRequest = {
    data: {
        type: 'subscriptionGroupLocalizations';
        id: string;
        attributes?: {
            name?: string;
            customAppName?: string;
        };
    };
};

export type SubscriptionGroupSubmission = {
    type: 'subscriptionGroupSubmissions';
    id: string;
    links?: ResourceLinks;
};

export type type147 = 'subscriptionGroupSubmissions';

export type SubscriptionGroupSubmissionResponse = {
    data: SubscriptionGroupSubmission;
    links: DocumentLinks;
};

export type SubscriptionGroupSubmissionCreateRequest = {
    data: {
        type: 'subscriptionGroupSubmissions';
        relationships: {
            subscriptionGroup: {
                data: {
                    type: 'subscriptionGroups';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionGroup = {
    type: 'subscriptionGroups';
    id: string;
    attributes?: {
        referenceName?: string;
    };
    relationships?: {
        subscriptions?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptions';
                id: string;
            }>;
        };
        subscriptionGroupLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionGroupLocalizations';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type148 = 'subscriptionGroups';

export type SubscriptionGroupsResponse = {
    data: Array<SubscriptionGroup>;
    included?: Array<(Subscription | SubscriptionGroupLocalization)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionGroupResponse = {
    data: SubscriptionGroup;
    included?: Array<(Subscription | SubscriptionGroupLocalization)>;
    links: DocumentLinks;
};

export type SubscriptionGroupCreateRequest = {
    data: {
        type: 'subscriptionGroups';
        attributes: {
            referenceName: string;
        };
        relationships: {
            app: {
                data: {
                    type: 'apps';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionGroupUpdateRequest = {
    data: {
        type: 'subscriptionGroups';
        id: string;
        attributes?: {
            referenceName?: string;
        };
    };
};

export type SubscriptionImage = {
    type: 'subscriptionImages';
    id: string;
    attributes?: {
        fileSize?: number;
        fileName?: string;
        sourceFileChecksum?: string;
        assetToken?: string;
        imageAsset?: ImageAsset;
        uploadOperations?: Array<UploadOperation>;
        state?: 'AWAITING_UPLOAD' | 'UPLOAD_COMPLETE' | 'FAILED' | 'PREPARE_FOR_SUBMISSION' | 'WAITING_FOR_REVIEW' | 'APPROVED' | 'REJECTED';
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type149 = 'subscriptionImages';

export type SubscriptionImagesResponse = {
    data: Array<SubscriptionImage>;
    included?: Array<Subscription>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionImageResponse = {
    data: SubscriptionImage;
    included?: Array<Subscription>;
    links: DocumentLinks;
};

export type SubscriptionImageCreateRequest = {
    data: {
        type: 'subscriptionImages';
        attributes: {
            fileSize: number;
            fileName: string;
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionImageUpdateRequest = {
    data: {
        type: 'subscriptionImages';
        id: string;
        attributes?: {
            sourceFileChecksum?: string;
            uploaded?: boolean;
        };
    };
};

export type SubscriptionIntroductoryOffer = {
    type: 'subscriptionIntroductoryOffers';
    id: string;
    attributes?: {
        startDate?: string;
        endDate?: string;
        duration?: SubscriptionOfferDuration;
        offerMode?: SubscriptionOfferMode;
        numberOfPeriods?: number;
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type150 = 'subscriptionIntroductoryOffers';

export type SubscriptionIntroductoryOfferInlineCreate = {
    type: 'subscriptionIntroductoryOffers';
    id?: string;
    attributes: {
        startDate?: string;
        endDate?: string;
        duration: SubscriptionOfferDuration;
        offerMode: SubscriptionOfferMode;
        numberOfPeriods: number;
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
};

export type SubscriptionIntroductoryOffersResponse = {
    data: Array<SubscriptionIntroductoryOffer>;
    included?: Array<(Subscription | Territory | SubscriptionPricePoint)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionIntroductoryOfferResponse = {
    data: SubscriptionIntroductoryOffer;
    included?: Array<(Subscription | Territory | SubscriptionPricePoint)>;
    links: DocumentLinks;
};

export type SubscriptionIntroductoryOfferCreateRequest = {
    data: {
        type: 'subscriptionIntroductoryOffers';
        attributes: {
            startDate?: string;
            endDate?: string;
            duration: SubscriptionOfferDuration;
            offerMode: SubscriptionOfferMode;
            numberOfPeriods: number;
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
            territory?: {
                data?: {
                    type: 'territories';
                    id: string;
                };
            };
            subscriptionPricePoint?: {
                data?: {
                    type: 'subscriptionPricePoints';
                    id: string;
                };
            };
        };
    };
    included?: Array<SubscriptionPricePointInlineCreate>;
};

export type SubscriptionIntroductoryOfferUpdateRequest = {
    data: {
        type: 'subscriptionIntroductoryOffers';
        id: string;
        attributes?: {
            endDate?: string;
        };
    };
};

export type SubscriptionLocalization = {
    type: 'subscriptionLocalizations';
    id: string;
    attributes?: {
        name?: string;
        locale?: string;
        description?: string;
        state?: 'PREPARE_FOR_SUBMISSION' | 'WAITING_FOR_REVIEW' | 'APPROVED' | 'REJECTED';
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type151 = 'subscriptionLocalizations';

export type SubscriptionLocalizationsResponse = {
    data: Array<SubscriptionLocalization>;
    included?: Array<Subscription>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionLocalizationResponse = {
    data: SubscriptionLocalization;
    included?: Array<Subscription>;
    links: DocumentLinks;
};

export type SubscriptionLocalizationCreateRequest = {
    data: {
        type: 'subscriptionLocalizations';
        attributes: {
            name: string;
            locale: string;
            description?: string;
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionLocalizationUpdateRequest = {
    data: {
        type: 'subscriptionLocalizations';
        id: string;
        attributes?: {
            name?: string;
            description?: string;
        };
    };
};

export type SubscriptionOfferCodeCustomCode = {
    type: 'subscriptionOfferCodeCustomCodes';
    id: string;
    attributes?: {
        customCode?: string;
        numberOfCodes?: number;
        createdDate?: string;
        expirationDate?: string;
        active?: boolean;
    };
    relationships?: {
        offerCode?: {
            data?: {
                type: 'subscriptionOfferCodes';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type152 = 'subscriptionOfferCodeCustomCodes';

export type SubscriptionOfferCodeCustomCodesResponse = {
    data: Array<SubscriptionOfferCodeCustomCode>;
    included?: Array<SubscriptionOfferCode>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionOfferCodeCustomCodeResponse = {
    data: SubscriptionOfferCodeCustomCode;
    included?: Array<SubscriptionOfferCode>;
    links: DocumentLinks;
};

export type SubscriptionOfferCodeCustomCodeCreateRequest = {
    data: {
        type: 'subscriptionOfferCodeCustomCodes';
        attributes: {
            customCode: string;
            numberOfCodes: number;
            expirationDate?: string;
        };
        relationships: {
            offerCode: {
                data: {
                    type: 'subscriptionOfferCodes';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionOfferCodeCustomCodeUpdateRequest = {
    data: {
        type: 'subscriptionOfferCodeCustomCodes';
        id: string;
        attributes?: {
            active?: boolean;
        };
    };
};

export type SubscriptionOfferCodeOneTimeUseCodeValue = {
    type: 'subscriptionOfferCodeOneTimeUseCodeValues';
    id: string;
    links?: ResourceLinks;
};

export type type153 = 'subscriptionOfferCodeOneTimeUseCodeValues';

export type SubscriptionOfferCodeOneTimeUseCode = {
    type: 'subscriptionOfferCodeOneTimeUseCodes';
    id: string;
    attributes?: {
        numberOfCodes?: number;
        createdDate?: string;
        expirationDate?: string;
        active?: boolean;
    };
    relationships?: {
        offerCode?: {
            data?: {
                type: 'subscriptionOfferCodes';
                id: string;
            };
        };
        values?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type type154 = 'subscriptionOfferCodeOneTimeUseCodes';

export type SubscriptionOfferCodeOneTimeUseCodesResponse = {
    data: Array<SubscriptionOfferCodeOneTimeUseCode>;
    included?: Array<SubscriptionOfferCode>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionOfferCodeOneTimeUseCodeResponse = {
    data: SubscriptionOfferCodeOneTimeUseCode;
    included?: Array<SubscriptionOfferCode>;
    links: DocumentLinks;
};

export type SubscriptionOfferCodeOneTimeUseCodeCreateRequest = {
    data: {
        type: 'subscriptionOfferCodeOneTimeUseCodes';
        attributes: {
            numberOfCodes: number;
            expirationDate: string;
        };
        relationships: {
            offerCode: {
                data: {
                    type: 'subscriptionOfferCodes';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionOfferCodeOneTimeUseCodeUpdateRequest = {
    data: {
        type: 'subscriptionOfferCodeOneTimeUseCodes';
        id: string;
        attributes?: {
            active?: boolean;
        };
    };
};

export type SubscriptionOfferCodePrice = {
    type: 'subscriptionOfferCodePrices';
    id: string;
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type155 = 'subscriptionOfferCodePrices';

export type SubscriptionOfferCodePriceInlineCreate = {
    type: 'subscriptionOfferCodePrices';
    id?: string;
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
};

export type SubscriptionOfferCodePricesResponse = {
    data: Array<SubscriptionOfferCodePrice>;
    included?: Array<(Territory | SubscriptionPricePoint)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionOfferCode = {
    type: 'subscriptionOfferCodes';
    id: string;
    attributes?: {
        name?: string;
        customerEligibilities?: Array<SubscriptionCustomerEligibility>;
        offerEligibility?: SubscriptionOfferEligibility;
        duration?: SubscriptionOfferDuration;
        offerMode?: SubscriptionOfferMode;
        numberOfPeriods?: number;
        totalNumberOfCodes?: number;
        active?: boolean;
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
        oneTimeUseCodes?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionOfferCodeOneTimeUseCodes';
                id: string;
            }>;
        };
        customCodes?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionOfferCodeCustomCodes';
                id: string;
            }>;
        };
        prices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionOfferCodePrices';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type156 = 'subscriptionOfferCodes';

export type SubscriptionOfferCodesResponse = {
    data: Array<SubscriptionOfferCode>;
    included?: Array<(Subscription | SubscriptionOfferCodeOneTimeUseCode | SubscriptionOfferCodeCustomCode | SubscriptionOfferCodePrice)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionOfferCodeResponse = {
    data: SubscriptionOfferCode;
    included?: Array<(Subscription | SubscriptionOfferCodeOneTimeUseCode | SubscriptionOfferCodeCustomCode | SubscriptionOfferCodePrice)>;
    links: DocumentLinks;
};

export type SubscriptionOfferCodeCreateRequest = {
    data: {
        type: 'subscriptionOfferCodes';
        attributes: {
            name: string;
            customerEligibilities: Array<SubscriptionCustomerEligibility>;
            offerEligibility: SubscriptionOfferEligibility;
            duration: SubscriptionOfferDuration;
            offerMode: SubscriptionOfferMode;
            numberOfPeriods: number;
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
            prices: {
                data: Array<{
                    type: 'subscriptionOfferCodePrices';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<SubscriptionOfferCodePriceInlineCreate>;
};

export type SubscriptionOfferCodeUpdateRequest = {
    data: {
        type: 'subscriptionOfferCodes';
        id: string;
        attributes?: {
            active?: boolean;
        };
    };
};

export type SubscriptionPricePoint = {
    type: 'subscriptionPricePoints';
    id: string;
    attributes?: {
        customerPrice?: string;
        proceeds?: string;
        proceedsYear2?: string;
    };
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        equalizations?: {
            links?: RelationshipLinks;
        };
    };
    links?: ResourceLinks;
};

export type type157 = 'subscriptionPricePoints';

export type SubscriptionPricePointInlineCreate = {
    type: 'subscriptionPricePoints';
    id?: string;
};

export type SubscriptionPricePointsResponse = {
    data: Array<SubscriptionPricePoint>;
    included?: Array<Territory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionPricePointResponse = {
    data: SubscriptionPricePoint;
    included?: Array<Territory>;
    links: DocumentLinks;
};

export type SubscriptionPrice = {
    type: 'subscriptionPrices';
    id: string;
    attributes?: {
        startDate?: string;
        preserved?: boolean;
    };
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type158 = 'subscriptionPrices';

export type SubscriptionPriceInlineCreate = {
    type: 'subscriptionPrices';
    id?: string;
    attributes?: {
        startDate?: string;
        preserveCurrentPrice?: boolean;
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
};

export type SubscriptionPricesResponse = {
    data: Array<SubscriptionPrice>;
    included?: Array<(Territory | SubscriptionPricePoint)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionPriceResponse = {
    data: SubscriptionPrice;
    included?: Array<(Territory | SubscriptionPricePoint)>;
    links: DocumentLinks;
};

export type SubscriptionPriceCreateRequest = {
    data: {
        type: 'subscriptionPrices';
        attributes?: {
            startDate?: string;
            preserveCurrentPrice?: boolean;
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
            territory?: {
                data?: {
                    type: 'territories';
                    id: string;
                };
            };
            subscriptionPricePoint: {
                data: {
                    type: 'subscriptionPricePoints';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionPromotionalOfferPrice = {
    type: 'subscriptionPromotionalOfferPrices';
    id: string;
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type159 = 'subscriptionPromotionalOfferPrices';

export type SubscriptionPromotionalOfferPriceInlineCreate = {
    type: 'subscriptionPromotionalOfferPrices';
    id?: string;
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
};

export type SubscriptionPromotionalOfferPricesResponse = {
    data: Array<SubscriptionPromotionalOfferPrice>;
    included?: Array<(Territory | SubscriptionPricePoint)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionPromotionalOffer = {
    type: 'subscriptionPromotionalOffers';
    id: string;
    attributes?: {
        name?: string;
        offerCode?: string;
        duration?: SubscriptionOfferDuration;
        offerMode?: SubscriptionOfferMode;
        numberOfPeriods?: number;
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
        prices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionPromotionalOfferPrices';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type160 = 'subscriptionPromotionalOffers';

export type SubscriptionPromotionalOfferInlineCreate = {
    type: 'subscriptionPromotionalOffers';
    id?: string;
    attributes: {
        name: string;
        offerCode: string;
        duration: SubscriptionOfferDuration;
        offerMode: SubscriptionOfferMode;
        numberOfPeriods: number;
    };
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
        prices?: {
            data?: Array<{
                type: 'subscriptionPromotionalOfferPrices';
                id: string;
            }>;
        };
    };
};

export type SubscriptionPromotionalOffersResponse = {
    data: Array<SubscriptionPromotionalOffer>;
    included?: Array<(Subscription | SubscriptionPromotionalOfferPrice)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionPromotionalOfferResponse = {
    data: SubscriptionPromotionalOffer;
    included?: Array<(Subscription | SubscriptionPromotionalOfferPrice)>;
    links: DocumentLinks;
};

export type SubscriptionPromotionalOfferCreateRequest = {
    data: {
        type: 'subscriptionPromotionalOffers';
        attributes: {
            name: string;
            offerCode: string;
            duration: SubscriptionOfferDuration;
            offerMode: SubscriptionOfferMode;
            numberOfPeriods: number;
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
            prices: {
                data: Array<{
                    type: 'subscriptionPromotionalOfferPrices';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<SubscriptionPromotionalOfferPriceInlineCreate>;
};

export type SubscriptionPromotionalOfferUpdateRequest = {
    data: {
        type: 'subscriptionPromotionalOffers';
        id: string;
        relationships?: {
            prices?: {
                data?: Array<{
                    type: 'subscriptionPromotionalOfferPrices';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<SubscriptionPromotionalOfferPriceInlineCreate>;
};

export type SubscriptionSubmission = {
    type: 'subscriptionSubmissions';
    id: string;
    relationships?: {
        subscription?: {
            data?: {
                type: 'subscriptions';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type161 = 'subscriptionSubmissions';

export type SubscriptionSubmissionResponse = {
    data: SubscriptionSubmission;
    included?: Array<Subscription>;
    links: DocumentLinks;
};

export type SubscriptionSubmissionCreateRequest = {
    data: {
        type: 'subscriptionSubmissions';
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
        };
    };
};

export type Subscription = {
    type: 'subscriptions';
    id: string;
    attributes?: {
        name?: string;
        productId?: string;
        familySharable?: boolean;
        state?: 'MISSING_METADATA' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'DEVELOPER_ACTION_NEEDED' | 'PENDING_BINARY_APPROVAL' | 'APPROVED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'REMOVED_FROM_SALE' | 'REJECTED';
        subscriptionPeriod?: 'ONE_WEEK' | 'ONE_MONTH' | 'TWO_MONTHS' | 'THREE_MONTHS' | 'SIX_MONTHS' | 'ONE_YEAR';
        reviewNote?: string;
        groupLevel?: number;
    };
    relationships?: {
        subscriptionLocalizations?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionLocalizations';
                id: string;
            }>;
        };
        appStoreReviewScreenshot?: {
            links?: RelationshipLinks;
            data?: {
                type: 'subscriptionAppStoreReviewScreenshots';
                id: string;
            };
        };
        group?: {
            data?: {
                type: 'subscriptionGroups';
                id: string;
            };
        };
        introductoryOffers?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionIntroductoryOffers';
                id: string;
            }>;
        };
        promotionalOffers?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionPromotionalOffers';
                id: string;
            }>;
        };
        offerCodes?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionOfferCodes';
                id: string;
            }>;
        };
        prices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionPrices';
                id: string;
            }>;
        };
        pricePoints?: {
            links?: RelationshipLinks;
        };
        promotedPurchase?: {
            links?: RelationshipLinks;
            data?: {
                type: 'promotedPurchases';
                id: string;
            };
        };
        subscriptionAvailability?: {
            links?: RelationshipLinks;
            data?: {
                type: 'subscriptionAvailabilities';
                id: string;
            };
        };
        winBackOffers?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'winBackOffers';
                id: string;
            }>;
        };
        images?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'subscriptionImages';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type162 = 'subscriptions';

export type state12 = 'MISSING_METADATA' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'DEVELOPER_ACTION_NEEDED' | 'PENDING_BINARY_APPROVAL' | 'APPROVED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'REMOVED_FROM_SALE' | 'REJECTED';

export type subscriptionPeriod = 'ONE_WEEK' | 'ONE_MONTH' | 'TWO_MONTHS' | 'THREE_MONTHS' | 'SIX_MONTHS' | 'ONE_YEAR';

export type SubscriptionsResponse = {
    data: Array<Subscription>;
    included?: Array<(SubscriptionLocalization | SubscriptionAppStoreReviewScreenshot | SubscriptionGroup | SubscriptionIntroductoryOffer | SubscriptionPromotionalOffer | SubscriptionOfferCode | SubscriptionPrice | PromotedPurchase | SubscriptionAvailability | WinBackOffer | SubscriptionImage)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionResponse = {
    data: Subscription;
    included?: Array<(SubscriptionLocalization | SubscriptionAppStoreReviewScreenshot | SubscriptionGroup | SubscriptionIntroductoryOffer | SubscriptionPromotionalOffer | SubscriptionOfferCode | SubscriptionPrice | PromotedPurchase | SubscriptionAvailability | WinBackOffer | SubscriptionImage)>;
    links: DocumentLinks;
};

export type SubscriptionCreateRequest = {
    data: {
        type: 'subscriptions';
        attributes: {
            name: string;
            productId: string;
            familySharable?: boolean;
            subscriptionPeriod?: 'ONE_WEEK' | 'ONE_MONTH' | 'TWO_MONTHS' | 'THREE_MONTHS' | 'SIX_MONTHS' | 'ONE_YEAR';
            reviewNote?: string;
            groupLevel?: number;
        };
        relationships: {
            group: {
                data: {
                    type: 'subscriptionGroups';
                    id: string;
                };
            };
        };
    };
};

export type SubscriptionUpdateRequest = {
    data: {
        type: 'subscriptions';
        id: string;
        attributes?: {
            name?: string;
            familySharable?: boolean;
            subscriptionPeriod?: 'ONE_WEEK' | 'ONE_MONTH' | 'TWO_MONTHS' | 'THREE_MONTHS' | 'SIX_MONTHS' | 'ONE_YEAR';
            reviewNote?: string;
            groupLevel?: number;
        };
        relationships?: {
            introductoryOffers?: {
                data?: Array<{
                    type: 'subscriptionIntroductoryOffers';
                    id: string;
                }>;
            };
            promotionalOffers?: {
                data?: Array<{
                    type: 'subscriptionPromotionalOffers';
                    id: string;
                }>;
            };
            prices?: {
                data?: Array<{
                    type: 'subscriptionPrices';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<(SubscriptionPromotionalOfferInlineCreate | SubscriptionPriceInlineCreate | SubscriptionIntroductoryOfferInlineCreate)>;
};

export type Territory = {
    type: 'territories';
    id: string;
    attributes?: {
        currency?: string;
    };
    links?: ResourceLinks;
};

export type type163 = 'territories';

export type TerritoryInlineCreate = {
    type: 'territories';
    id?: string;
};

export type TerritoriesResponse = {
    data: Array<Territory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type TerritoryResponse = {
    data: Territory;
    links: DocumentLinks;
};

export type TerritoryAvailability = {
    type: 'territoryAvailabilities';
    id: string;
    attributes?: {
        available?: boolean;
        releaseDate?: string;
        preOrderEnabled?: boolean;
        preOrderPublishDate?: string;
        contentStatuses?: Array<('AVAILABLE' | 'AVAILABLE_FOR_PREORDER_ON_DATE' | 'PROCESSING_TO_NOT_AVAILABLE' | 'PROCESSING_TO_AVAILABLE' | 'PROCESSING_TO_PRE_ORDER' | 'AVAILABLE_FOR_SALE_UNRELEASED_APP' | 'PREORDER_ON_UNRELEASED_APP' | 'AVAILABLE_FOR_PREORDER' | 'MISSING_RATING' | 'CANNOT_SELL_RESTRICTED_RATING' | 'BRAZIL_REQUIRED_TAX_ID' | 'MISSING_GRN' | 'UNVERIFIED_GRN' | 'ICP_NUMBER_INVALID' | 'ICP_NUMBER_MISSING' | 'CANNOT_SELL_SEVENTEEN_PLUS_APPS' | 'CANNOT_SELL_SEXUALLY_EXPLICIT' | 'CANNOT_SELL_NON_IOS_GAMES' | 'CANNOT_SELL_SEVENTEEN_PLUS_GAMES' | 'CANNOT_SELL_FREQUENT_INTENSE_GAMBLING' | 'CANNOT_SELL_CASINO' | 'CANNOT_SELL_CASINO_WITHOUT_GRAC' | 'CANNOT_SELL_CASINO_WITHOUT_AGE_VERIFICATION' | 'CANNOT_SELL_FREQUENT_INTENSE_ALCOHOL_TOBACCO_DRUGS' | 'CANNOT_SELL_FREQUENT_INTENSE_VIOLENCE' | 'CANNOT_SELL_FREQUENT_INTENSE_SEXUAL_CONTENT_NUDITY' | 'CANNOT_SELL_INFREQUENT_MILD_ALCOHOL_TOBACCO_DRUGS' | 'CANNOT_SELL_INFREQUENT_MILD_SEXUAL_CONTENT_NUDITY' | 'CANNOT_SELL_ADULT_ONLY' | 'CANNOT_SELL_FREQUENT_INTENSE' | 'CANNOT_SELL_FREQUENT_INTENSE_WITHOUT_GRAC' | 'CANNOT_SELL_GAMBLING_CONTESTS' | 'CANNOT_SELL_GAMBLING' | 'CANNOT_SELL_CONTESTS' | 'CANNOT_SELL')>;
    };
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type164 = 'territoryAvailabilities';

export type TerritoryAvailabilityInlineCreate = {
    type: 'territoryAvailabilities';
    id?: string;
};

export type TerritoryAvailabilitiesResponse = {
    data: Array<TerritoryAvailability>;
    included?: Array<Territory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type TerritoryAvailabilityResponse = {
    data: TerritoryAvailability;
    included?: Array<Territory>;
    links: DocumentLinks;
};

export type TerritoryAvailabilityUpdateRequest = {
    data: {
        type: 'territoryAvailabilities';
        id: string;
        attributes?: {
            available?: boolean;
            releaseDate?: string;
            preOrderEnabled?: boolean;
        };
    };
};

export type UserInvitation = {
    type: 'userInvitations';
    id: string;
    attributes?: {
        email?: string;
        firstName?: string;
        lastName?: string;
        expirationDate?: string;
        roles?: Array<UserRole>;
        allAppsVisible?: boolean;
        provisioningAllowed?: boolean;
    };
    relationships?: {
        visibleApps?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'apps';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type165 = 'userInvitations';

export type UserInvitationsResponse = {
    data: Array<UserInvitation>;
    included?: Array<App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type UserInvitationResponse = {
    data: UserInvitation;
    included?: Array<App>;
    links: DocumentLinks;
};

export type UserInvitationCreateRequest = {
    data: {
        type: 'userInvitations';
        attributes: {
            email: string;
            firstName: string;
            lastName: string;
            roles: Array<UserRole>;
            allAppsVisible?: boolean;
            provisioningAllowed?: boolean;
        };
        relationships?: {
            visibleApps?: {
                data?: Array<{
                    type: 'apps';
                    id: string;
                }>;
            };
        };
    };
};

export type User = {
    type: 'users';
    id: string;
    attributes?: {
        username?: string;
        firstName?: string;
        lastName?: string;
        roles?: Array<UserRole>;
        allAppsVisible?: boolean;
        provisioningAllowed?: boolean;
    };
    relationships?: {
        visibleApps?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'apps';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type166 = 'users';

export type UsersResponse = {
    data: Array<User>;
    included?: Array<App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type UserResponse = {
    data: User;
    included?: Array<App>;
    links: DocumentLinks;
};

export type UserUpdateRequest = {
    data: {
        type: 'users';
        id: string;
        attributes?: {
            roles?: Array<UserRole>;
            allAppsVisible?: boolean;
            provisioningAllowed?: boolean;
        };
        relationships?: {
            visibleApps?: {
                data?: Array<{
                    type: 'apps';
                    id: string;
                }>;
            };
        };
    };
};

export type WinBackOfferPrice = {
    type: 'winBackOfferPrices';
    id: string;
    relationships?: {
        territory?: {
            data?: {
                type: 'territories';
                id: string;
            };
        };
        subscriptionPricePoint?: {
            data?: {
                type: 'subscriptionPricePoints';
                id: string;
            };
        };
    };
    links?: ResourceLinks;
};

export type type167 = 'winBackOfferPrices';

export type WinBackOfferPriceInlineCreate = {
    type: 'winBackOfferPrices';
    id?: string;
};

export type WinBackOfferPricesResponse = {
    data: Array<WinBackOfferPrice>;
    included?: Array<(Territory | SubscriptionPricePoint)>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type WinBackOffer = {
    type: 'winBackOffers';
    id: string;
    attributes?: {
        referenceName?: string;
        offerId?: string;
        duration?: SubscriptionOfferDuration;
        offerMode?: SubscriptionOfferMode;
        periodCount?: number;
        customerEligibilityPaidSubscriptionDurationInMonths?: number;
        customerEligibilityTimeSinceLastSubscribedInMonths?: IntegerRange;
        customerEligibilityWaitBetweenOffersInMonths?: number;
        startDate?: string;
        endDate?: string;
        priority?: 'HIGH' | 'NORMAL';
        promotionIntent?: 'NOT_PROMOTED' | 'USE_AUTO_GENERATED_ASSETS';
    };
    relationships?: {
        prices?: {
            links?: RelationshipLinks;
            meta?: PagingInformation;
            data?: Array<{
                type: 'winBackOfferPrices';
                id: string;
            }>;
        };
    };
    links?: ResourceLinks;
};

export type type168 = 'winBackOffers';

export type promotionIntent = 'NOT_PROMOTED' | 'USE_AUTO_GENERATED_ASSETS';

export type WinBackOffersResponse = {
    data: Array<WinBackOffer>;
    included?: Array<WinBackOfferPrice>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type WinBackOfferResponse = {
    data: WinBackOffer;
    included?: Array<WinBackOfferPrice>;
    links: DocumentLinks;
};

export type WinBackOfferCreateRequest = {
    data: {
        type: 'winBackOffers';
        attributes: {
            referenceName: string;
            offerId: string;
            duration: SubscriptionOfferDuration;
            offerMode: SubscriptionOfferMode;
            periodCount: number;
            customerEligibilityPaidSubscriptionDurationInMonths: number;
            customerEligibilityTimeSinceLastSubscribedInMonths: IntegerRange;
            customerEligibilityWaitBetweenOffersInMonths?: number;
            startDate: string;
            endDate?: string;
            priority: 'HIGH' | 'NORMAL';
            promotionIntent?: 'NOT_PROMOTED' | 'USE_AUTO_GENERATED_ASSETS';
        };
        relationships: {
            subscription: {
                data: {
                    type: 'subscriptions';
                    id: string;
                };
            };
            prices: {
                data: Array<{
                    type: 'winBackOfferPrices';
                    id: string;
                }>;
            };
        };
    };
    included?: Array<WinBackOfferPriceInlineCreate>;
};

export type WinBackOfferUpdateRequest = {
    data: {
        type: 'winBackOffers';
        id: string;
        attributes?: {
            customerEligibilityPaidSubscriptionDurationInMonths?: number;
            customerEligibilityTimeSinceLastSubscribedInMonths?: IntegerRange;
            customerEligibilityWaitBetweenOffersInMonths?: number;
            startDate?: string;
            endDate?: string;
            priority?: 'HIGH' | 'NORMAL';
            promotionIntent?: 'NOT_PROMOTED' | 'USE_AUTO_GENERATED_ASSETS';
        };
    };
};

export type AppCategoryWithoutIncludesResponse = {
    data: AppCategory;
    links: DocumentLinks;
};

export type AppCategoriesWithoutIncludesResponse = {
    data: Array<AppCategory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse = {
    data: {
        type: 'appStoreVersions';
        id: string;
    };
    links: DocumentLinks;
};

export type AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest = {
    data: {
        type: 'appStoreVersions';
        id: string;
    };
};

export type AppWithoutIncludesResponse = {
    data: App;
    links: DocumentLinks;
};

/**
 * @deprecated
 */
export type AppEncryptionDeclarationBuildsLinkagesRequest = {
    data: Array<{
        type: 'builds';
        id: string;
    }>;
};

export type AppPreviewSetAppPreviewsLinkagesResponse = {
    data: Array<{
        type: 'appPreviews';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppPreviewSetAppPreviewsLinkagesRequest = {
    data: Array<{
        type: 'appPreviews';
        id: string;
    }>;
};

export type AppScreenshotSetAppScreenshotsLinkagesResponse = {
    data: Array<{
        type: 'appScreenshots';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppScreenshotSetAppScreenshotsLinkagesRequest = {
    data: Array<{
        type: 'appScreenshots';
        id: string;
    }>;
};

export type AgeRatingDeclarationWithoutIncludesResponse = {
    data: AgeRatingDeclaration;
    links: DocumentLinks;
};

export type AppStoreVersionAppClipDefaultExperienceLinkageResponse = {
    data: {
        type: 'appClipDefaultExperiences';
        id: string;
    };
    links: DocumentLinks;
};

export type AppStoreVersionAppClipDefaultExperienceLinkageRequest = {
    data: {
        type: 'appClipDefaultExperiences';
        id: string;
    };
};

export type AppStoreVersionPhasedReleaseWithoutIncludesResponse = {
    data: AppStoreVersionPhasedRelease;
    links: DocumentLinks;
};

export type BuildWithoutIncludesResponse = {
    data: Build;
    links: DocumentLinks;
};

export type AppStoreVersionBuildLinkageResponse = {
    data: {
        type: 'builds';
        id: string;
    };
    links: DocumentLinks;
};

export type AppStoreVersionBuildLinkageRequest = {
    data: {
        type: 'builds';
        id: string;
    };
};

export type RoutingAppCoverageWithoutIncludesResponse = {
    data: RoutingAppCoverage;
    links: DocumentLinks;
};

export type BetaAppLocalizationsWithoutIncludesResponse = {
    data: Array<BetaAppLocalization>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaAppReviewDetailWithoutIncludesResponse = {
    data: BetaAppReviewDetail;
    links: DocumentLinks;
};

export type BetaGroupsWithoutIncludesResponse = {
    data: Array<BetaGroup>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaLicenseAgreementWithoutIncludesResponse = {
    data: BetaLicenseAgreement;
    links: DocumentLinks;
};

export type AppBetaTestersLinkagesRequest = {
    data: Array<{
        type: 'betaTesters';
        id: string;
    }>;
};

export type BuildsWithoutIncludesResponse = {
    data: Array<Build>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type EndUserLicenseAgreementWithoutIncludesResponse = {
    data: EndUserLicenseAgreement;
    links: DocumentLinks;
};

export type AppPreOrderWithoutIncludesResponse = {
    data: AppPreOrder;
    links: DocumentLinks;
};

export type PreReleaseVersionsWithoutIncludesResponse = {
    data: Array<PrereleaseVersion>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppPromotedPurchasesLinkagesResponse = {
    data: Array<{
        type: 'promotedPurchases';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type AppPromotedPurchasesLinkagesRequest = {
    data: Array<{
        type: 'promotedPurchases';
        id: string;
    }>;
};

export type BetaTestersWithoutIncludesResponse = {
    data: Array<BetaTester>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaGroupBetaTestersLinkagesResponse = {
    data: Array<{
        type: 'betaTesters';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaGroupBetaTestersLinkagesRequest = {
    data: Array<{
        type: 'betaTesters';
        id: string;
    }>;
};

export type BetaGroupBuildsLinkagesResponse = {
    data: Array<{
        type: 'builds';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaGroupBuildsLinkagesRequest = {
    data: Array<{
        type: 'builds';
        id: string;
    }>;
};

export type AppsWithoutIncludesResponse = {
    data: Array<App>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaTesterAppsLinkagesResponse = {
    data: Array<{
        type: 'apps';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaTesterAppsLinkagesRequest = {
    data: Array<{
        type: 'apps';
        id: string;
    }>;
};

export type BetaTesterBetaGroupsLinkagesResponse = {
    data: Array<{
        type: 'betaGroups';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaTesterBetaGroupsLinkagesRequest = {
    data: Array<{
        type: 'betaGroups';
        id: string;
    }>;
};

export type BetaTesterBuildsLinkagesResponse = {
    data: Array<{
        type: 'builds';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaTesterBuildsLinkagesRequest = {
    data: Array<{
        type: 'builds';
        id: string;
    }>;
};

export type AppEncryptionDeclarationWithoutIncludesResponse = {
    data: AppEncryptionDeclaration;
    links: DocumentLinks;
};

export type BuildAppEncryptionDeclarationLinkageResponse = {
    data: {
        type: 'appEncryptionDeclarations';
        id: string;
    };
    links: DocumentLinks;
};

export type BuildAppEncryptionDeclarationLinkageRequest = {
    data: {
        type: 'appEncryptionDeclarations';
        id: string;
    };
};

export type BetaAppReviewSubmissionWithoutIncludesResponse = {
    data: BetaAppReviewSubmission;
    links: DocumentLinks;
};

export type BetaBuildLocalizationsWithoutIncludesResponse = {
    data: Array<BetaBuildLocalization>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BuildBetaGroupsLinkagesRequest = {
    data: Array<{
        type: 'betaGroups';
        id: string;
    }>;
};

export type BuildIconsWithoutIncludesResponse = {
    data: Array<BuildIcon>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BuildIndividualTestersLinkagesResponse = {
    data: Array<{
        type: 'betaTesters';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BuildIndividualTestersLinkagesRequest = {
    data: Array<{
        type: 'betaTesters';
        id: string;
    }>;
};

export type PrereleaseVersionWithoutIncludesResponse = {
    data: PrereleaseVersion;
    links: DocumentLinks;
};

export type BundleIdCapabilitiesWithoutIncludesResponse = {
    data: Array<BundleIdCapability>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ProfilesWithoutIncludesResponse = {
    data: Array<Profile>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type TerritoriesWithoutIncludesResponse = {
    data: Array<Territory>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterAchievementGroupAchievementLinkageResponse = {
    data: {
        type: 'gameCenterAchievements';
        id: string;
    };
    links: DocumentLinks;
};

export type GameCenterAchievementGroupAchievementLinkageRequest = {
    data: {
        type: 'gameCenterAchievements';
        id: string;
    };
};

export type GameCenterAppVersionCompatibilityVersionsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterAppVersions';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterAppVersionCompatibilityVersionsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterAppVersions';
        id: string;
    }>;
};

export type GameCenterDetailGameCenterAchievementsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterAchievements';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterDetailGameCenterAchievementsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterAchievements';
        id: string;
    }>;
};

export type GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterLeaderboardSets';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterLeaderboardSets';
        id: string;
    }>;
};

export type GameCenterDetailGameCenterLeaderboardsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterLeaderboards';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterDetailGameCenterLeaderboardsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterLeaderboards';
        id: string;
    }>;
};

/**
 * @deprecated
 */
export type GameCenterEnabledVersionCompatibleVersionsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterEnabledVersions';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

/**
 * @deprecated
 */
export type GameCenterEnabledVersionCompatibleVersionsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterEnabledVersions';
        id: string;
    }>;
};

export type GameCenterGroupGameCenterAchievementsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterAchievements';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterGroupGameCenterAchievementsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterAchievements';
        id: string;
    }>;
};

export type GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterLeaderboardSets';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterLeaderboardSets';
        id: string;
    }>;
};

export type GameCenterGroupGameCenterLeaderboardsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterLeaderboards';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterGroupGameCenterLeaderboardsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterLeaderboards';
        id: string;
    }>;
};

export type GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse = {
    data: Array<{
        type: 'gameCenterLeaderboards';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest = {
    data: Array<{
        type: 'gameCenterLeaderboards';
        id: string;
    }>;
};

export type GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse = {
    data: {
        type: 'gameCenterLeaderboardSets';
        id: string;
    };
    links: DocumentLinks;
};

export type GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest = {
    data: {
        type: 'gameCenterLeaderboardSets';
        id: string;
    };
};

export type GameCenterLeaderboardGroupLeaderboardLinkageResponse = {
    data: {
        type: 'gameCenterLeaderboards';
        id: string;
    };
    links: DocumentLinks;
};

export type GameCenterLeaderboardGroupLeaderboardLinkageRequest = {
    data: {
        type: 'gameCenterLeaderboards';
        id: string;
    };
};

export type BundleIdWithoutIncludesResponse = {
    data: BundleId;
    links: DocumentLinks;
};

export type CertificatesWithoutIncludesResponse = {
    data: Array<Certificate>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type DevicesWithoutIncludesResponse = {
    data: Array<Device>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionIntroductoryOffersLinkagesResponse = {
    data: Array<{
        type: 'subscriptionIntroductoryOffers';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionIntroductoryOffersLinkagesRequest = {
    data: Array<{
        type: 'subscriptionIntroductoryOffers';
        id: string;
    }>;
};

export type SubscriptionPricesLinkagesResponse = {
    data: Array<{
        type: 'subscriptionPrices';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type SubscriptionPricesLinkagesRequest = {
    data: Array<{
        type: 'subscriptionPrices';
        id: string;
    }>;
};

export type UserVisibleAppsLinkagesResponse = {
    data: Array<{
        type: 'apps';
        id: string;
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type UserVisibleAppsLinkagesRequest = {
    data: Array<{
        type: 'apps';
        id: string;
    }>;
};

export type AppsBetaTesterUsagesV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                crashCount?: number;
                sessionCount?: number;
                feedbackCount?: number;
            };
        };
        dimensions?: {
            betaTesters?: {
                links?: {
                    groupBy?: string;
                    related?: string;
                };
                data?: string;
            };
        };
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
    included?: Array<BetaTester>;
};

export type BetaTesterUsagesV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                crashCount?: number;
                sessionCount?: number;
                feedbackCount?: number;
            };
        };
        dimensions?: {
            apps?: {
                links?: {
                    groupBy?: string;
                    related?: string;
                };
                data?: string;
            };
        };
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type BetaBuildUsagesV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                crashCount?: number;
                installCount?: number;
                sessionCount?: number;
                feedbackCount?: number;
                inviteCount?: number;
            };
        };
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingAppRequestsV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                count?: number;
                averageSecondsInQueue?: number;
                p50SecondsInQueue?: number;
                p95SecondsInQueue?: number;
            };
        };
        dimensions?: {
            result?: {
                links?: {
                    groupBy?: string;
                };
                data?: 'MATCHED' | 'CANCELED' | 'EXPIRED';
            };
        };
        granularity?: 'P1D' | 'PT1H' | 'PT15M';
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingQueueSizesV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                count?: number;
                averageNumberOfRequests?: number;
                p50NumberOfRequests?: number;
                p95NumberOfRequests?: number;
            };
        };
        granularity?: 'P1D' | 'PT1H' | 'PT15M';
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingQueueRequestsV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                count?: number;
                averageSecondsInQueue?: number;
                p50SecondsInQueue?: number;
                p95SecondsInQueue?: number;
            };
        };
        dimensions?: {
            result?: {
                links?: {
                    groupBy?: string;
                };
                data?: 'MATCHED' | 'CANCELED' | 'EXPIRED';
            };
            gameCenterDetail?: {
                links?: {
                    groupBy?: string;
                    related?: string;
                };
                data?: string;
            };
        };
        granularity?: 'P1D' | 'PT1H' | 'PT15M';
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingSessionsV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                count?: number;
                averagePlayerCount?: number;
                p50PlayerCount?: number;
                p95PlayerCount?: number;
            };
        };
        granularity?: 'P1D' | 'PT1H' | 'PT15M';
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingBooleanRuleResultsV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                count?: number;
            };
        };
        dimensions?: {
            result?: {
                links?: {
                    groupBy?: string;
                };
                data?: string;
            };
            gameCenterMatchmakingQueue?: {
                links?: {
                    groupBy?: string;
                    related?: string;
                };
                data?: string;
            };
        };
        granularity?: 'P1D' | 'PT1H' | 'PT15M';
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingNumberRuleResultsV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                count?: number;
                averageResult?: number;
                p50Result?: number;
                p95Result?: number;
            };
        };
        dimensions?: {
            gameCenterMatchmakingQueue?: {
                links?: {
                    groupBy?: string;
                    related?: string;
                };
                data?: string;
            };
        };
        granularity?: 'P1D' | 'PT1H' | 'PT15M';
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type GameCenterMatchmakingRuleErrorsV1MetricResponse = {
    data: Array<{
        dataPoints?: {
            start?: string;
            end?: string;
            values?: {
                count?: number;
            };
        };
        dimensions?: {
            gameCenterMatchmakingQueue?: {
                links?: {
                    groupBy?: string;
                    related?: string;
                };
                data?: string;
            };
        };
        granularity?: 'P1D' | 'PT1H' | 'PT15M';
    }>;
    links: PagedDocumentLinks;
    meta?: PagingInformation;
};

export type ErrorResponse = {
    errors?: Array<{
        id?: string;
        status: string;
        code: string;
        title: string;
        detail: string;
        source?: (ErrorSourcePointer | ErrorSourceParameter);
        links?: ErrorLinks;
        meta?: {
            [key: string]: unknown;
        };
    }>;
};

export type ErrorSourceParameter = {
    parameter: string;
};

export type ErrorSourcePointer = {
    pointer: string;
};

export type ErrorLinks = {
    about?: string;
    associated?: (string | {
    href?: string;
    meta?: {
        source?: string;
    };
});
};

export type PagedDocumentLinks = {
    self: string;
    first?: string;
    next?: string;
};

export type PagingInformation = {
    paging: {
        total?: number;
        limit: number;
    };
};

export type DocumentLinks = {
    self: string;
};

export type ResourceLinks = {
    self?: string;
};

export type RelationshipLinks = {
    self?: string;
    related?: string;
};

export type AppClipAction = 'OPEN' | 'VIEW' | 'PLAY';

export type AppClipAdvancedExperienceLanguage = 'AR' | 'CA' | 'CS' | 'DA' | 'DE' | 'EL' | 'EN' | 'ES' | 'FI' | 'FR' | 'HE' | 'HI' | 'HR' | 'HU' | 'ID' | 'IT' | 'JA' | 'KO' | 'MS' | 'NL' | 'NO' | 'PL' | 'PT' | 'RO' | 'RU' | 'SK' | 'SV' | 'TH' | 'TR' | 'UK' | 'VI' | 'ZH';

export type AppEncryptionDeclarationState = 'CREATED' | 'IN_REVIEW' | 'APPROVED' | 'REJECTED' | 'INVALID' | 'EXPIRED';

export type AppEventAssetType = 'EVENT_CARD' | 'EVENT_DETAILS_PAGE';

export type AppMediaAssetState = {
    errors?: Array<AppMediaStateError>;
    warnings?: Array<AppMediaStateError>;
    state?: 'AWAITING_UPLOAD' | 'UPLOAD_COMPLETE' | 'COMPLETE' | 'FAILED';
};

export type state13 = 'AWAITING_UPLOAD' | 'UPLOAD_COMPLETE' | 'COMPLETE' | 'FAILED';

export type AppMediaStateError = {
    code?: string;
    description?: string;
};

export type AppStoreAgeRating = 'FOUR_PLUS' | 'NINE_PLUS' | 'TWELVE_PLUS' | 'SEVENTEEN_PLUS' | 'UNRATED';

export type AppStoreVersionState = 'ACCEPTED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'INVALID_BINARY' | 'METADATA_REJECTED' | 'PENDING_APPLE_RELEASE' | 'PENDING_CONTRACT' | 'PENDING_DEVELOPER_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'PREORDER_READY_FOR_SALE' | 'PROCESSING_FOR_APP_STORE' | 'READY_FOR_REVIEW' | 'READY_FOR_SALE' | 'REJECTED' | 'REMOVED_FROM_SALE' | 'WAITING_FOR_EXPORT_COMPLIANCE' | 'WAITING_FOR_REVIEW' | 'REPLACED_WITH_NEW_VERSION' | 'NOT_APPLICABLE';

export type AppVersionState = 'ACCEPTED' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'INVALID_BINARY' | 'METADATA_REJECTED' | 'PENDING_APPLE_RELEASE' | 'PENDING_DEVELOPER_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'PROCESSING_FOR_DISTRIBUTION' | 'READY_FOR_DISTRIBUTION' | 'READY_FOR_REVIEW' | 'REJECTED' | 'REPLACED_WITH_NEW_VERSION' | 'WAITING_FOR_EXPORT_COMPLIANCE' | 'WAITING_FOR_REVIEW';

export type BetaInviteType = 'EMAIL' | 'PUBLIC_LINK';

export type BetaReviewState = 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'APPROVED';

export type BetaTesterState = 'NOT_INVITED' | 'INVITED' | 'ACCEPTED' | 'INSTALLED' | 'REVOKED';

export type BrazilAgeRating = 'L' | 'TEN' | 'TWELVE' | 'FOURTEEN' | 'SIXTEEN' | 'EIGHTEEN';

export type BuildAudienceType = 'INTERNAL_ONLY' | 'APP_STORE_ELIGIBLE';

export type BundleIdPlatform = 'IOS' | 'MAC_OS';

export type CapabilityOption = {
    key?: 'XCODE_5' | 'XCODE_6' | 'COMPLETE_PROTECTION' | 'PROTECTED_UNLESS_OPEN' | 'PROTECTED_UNTIL_FIRST_USER_AUTH' | 'PRIMARY_APP_CONSENT';
    name?: string;
    description?: string;
    enabledByDefault?: boolean;
    enabled?: boolean;
    supportsWildcard?: boolean;
};

export type key = 'XCODE_5' | 'XCODE_6' | 'COMPLETE_PROTECTION' | 'PROTECTED_UNLESS_OPEN' | 'PROTECTED_UNTIL_FIRST_USER_AUTH' | 'PRIMARY_APP_CONSENT';

export type CapabilitySetting = {
    key?: 'ICLOUD_VERSION' | 'DATA_PROTECTION_PERMISSION_LEVEL' | 'APPLE_ID_AUTH_APP_CONSENT';
    name?: string;
    description?: string;
    enabledByDefault?: boolean;
    visible?: boolean;
    allowedInstances?: 'ENTRY' | 'SINGLE' | 'MULTIPLE';
    minInstances?: number;
    options?: Array<CapabilityOption>;
};

export type key2 = 'ICLOUD_VERSION' | 'DATA_PROTECTION_PERMISSION_LEVEL' | 'APPLE_ID_AUTH_APP_CONSENT';

export type allowedInstances = 'ENTRY' | 'SINGLE' | 'MULTIPLE';

export type CapabilityType = 'ICLOUD' | 'IN_APP_PURCHASE' | 'GAME_CENTER' | 'PUSH_NOTIFICATIONS' | 'WALLET' | 'INTER_APP_AUDIO' | 'MAPS' | 'ASSOCIATED_DOMAINS' | 'PERSONAL_VPN' | 'APP_GROUPS' | 'HEALTHKIT' | 'HOMEKIT' | 'WIRELESS_ACCESSORY_CONFIGURATION' | 'APPLE_PAY' | 'DATA_PROTECTION' | 'SIRIKIT' | 'NETWORK_EXTENSIONS' | 'MULTIPATH' | 'HOT_SPOT' | 'NFC_TAG_READING' | 'CLASSKIT' | 'AUTOFILL_CREDENTIAL_PROVIDER' | 'ACCESS_WIFI_INFORMATION' | 'NETWORK_CUSTOM_PROTOCOL' | 'COREMEDIA_HLS_LOW_LATENCY' | 'SYSTEM_EXTENSION_INSTALL' | 'USER_MANAGEMENT' | 'APPLE_ID_AUTH';

export type CertificateType = 'IOS_DEVELOPMENT' | 'IOS_DISTRIBUTION' | 'MAC_APP_DISTRIBUTION' | 'MAC_INSTALLER_DISTRIBUTION' | 'MAC_APP_DEVELOPMENT' | 'DEVELOPER_ID_KEXT' | 'DEVELOPER_ID_APPLICATION' | 'DEVELOPMENT' | 'DISTRIBUTION' | 'PASS_TYPE_ID' | 'PASS_TYPE_ID_WITH_NFC';

export type CiAction = {
    name?: string;
    actionType?: CiActionType;
    destination?: 'ANY_IOS_DEVICE' | 'ANY_IOS_SIMULATOR' | 'ANY_TVOS_DEVICE' | 'ANY_TVOS_SIMULATOR' | 'ANY_WATCHOS_DEVICE' | 'ANY_WATCHOS_SIMULATOR' | 'ANY_MAC' | 'ANY_MAC_CATALYST' | 'ANY_VISIONOS_DEVICE' | 'ANY_VISIONOS_SIMULATOR';
    buildDistributionAudience?: BuildAudienceType;
    testConfiguration?: {
        kind?: 'USE_SCHEME_SETTINGS' | 'SPECIFIC_TEST_PLANS';
        testPlanName?: string;
        testDestinations?: Array<CiTestDestination>;
    };
    scheme?: string;
    platform?: 'MACOS' | 'IOS' | 'TVOS' | 'WATCHOS' | 'VISIONOS';
    isRequiredToPass?: boolean;
};

export type destination = 'ANY_IOS_DEVICE' | 'ANY_IOS_SIMULATOR' | 'ANY_TVOS_DEVICE' | 'ANY_TVOS_SIMULATOR' | 'ANY_WATCHOS_DEVICE' | 'ANY_WATCHOS_SIMULATOR' | 'ANY_MAC' | 'ANY_MAC_CATALYST' | 'ANY_VISIONOS_DEVICE' | 'ANY_VISIONOS_SIMULATOR';

export type kind = 'USE_SCHEME_SETTINGS' | 'SPECIFIC_TEST_PLANS';

export type platform2 = 'MACOS' | 'IOS' | 'TVOS' | 'WATCHOS' | 'VISIONOS';

export type CiActionType = 'BUILD' | 'ANALYZE' | 'TEST' | 'ARCHIVE';

export type CiBranchPatterns = {
    isAllMatch?: boolean;
    patterns?: Array<{
        pattern?: string;
        isPrefix?: boolean;
    }>;
};

export type CiBranchStartCondition = {
    source?: CiBranchPatterns;
    filesAndFoldersRule?: CiFilesAndFoldersRule;
    autoCancel?: boolean;
};

export type CiCompletionStatus = 'SUCCEEDED' | 'FAILED' | 'ERRORED' | 'CANCELED' | 'SKIPPED';

export type CiExecutionProgress = 'PENDING' | 'RUNNING' | 'COMPLETE';

export type CiFilesAndFoldersRule = {
    mode?: 'START_IF_ANY_FILE_MATCHES' | 'DO_NOT_START_IF_ALL_FILES_MATCH';
    matchers?: Array<CiStartConditionFileMatcher>;
};

export type mode = 'START_IF_ANY_FILE_MATCHES' | 'DO_NOT_START_IF_ALL_FILES_MATCH';

export type CiGitRefKind = 'BRANCH' | 'TAG';

export type CiGitUser = {
    displayName?: string;
    avatarUrl?: string;
};

export type CiIssueCounts = {
    analyzerWarnings?: number;
    errors?: number;
    testFailures?: number;
    warnings?: number;
};

export type CiManualBranchStartCondition = {
    source?: CiBranchPatterns;
};

export type CiManualPullRequestStartCondition = {
    source?: CiBranchPatterns;
    destination?: CiBranchPatterns;
};

export type CiManualTagStartCondition = {
    source?: CiTagPatterns;
};

export type CiPullRequestStartCondition = {
    source?: CiBranchPatterns;
    destination?: CiBranchPatterns;
    filesAndFoldersRule?: CiFilesAndFoldersRule;
    autoCancel?: boolean;
};

export type CiScheduledStartCondition = {
    source?: CiBranchPatterns;
    schedule?: {
        frequency?: 'WEEKLY' | 'DAILY' | 'HOURLY';
        days?: Array<('SUNDAY' | 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY')>;
        hour?: number;
        minute?: number;
        timezone?: string;
    };
};

export type frequency = 'WEEKLY' | 'DAILY' | 'HOURLY';

export type CiStartConditionFileMatcher = {
    directory?: string;
    fileExtension?: string;
    fileName?: string;
};

export type CiTagPatterns = {
    isAllMatch?: boolean;
    patterns?: Array<{
        pattern?: string;
        isPrefix?: boolean;
    }>;
};

export type CiTagStartCondition = {
    source?: CiTagPatterns;
    filesAndFoldersRule?: CiFilesAndFoldersRule;
    autoCancel?: boolean;
};

export type CiTestDestination = {
    deviceTypeName?: string;
    deviceTypeIdentifier?: string;
    runtimeName?: string;
    runtimeIdentifier?: string;
    kind?: CiTestDestinationKind;
};

export type CiTestDestinationKind = 'SIMULATOR' | 'MAC';

export type CiTestStatus = 'SUCCESS' | 'FAILURE' | 'MIXED' | 'SKIPPED' | 'EXPECTED_FAILURE';

export type DiagnosticInsight = {
    insightType?: DiagnosticInsightType;
    direction?: DiagnosticInsightDirection;
    referenceVersions?: Array<{
        version?: string;
        value?: number;
    }>;
};

export type DiagnosticInsightDirection = 'UP' | 'DOWN' | 'UNDEFINED';

export type DiagnosticInsightType = 'TREND';

export type DiagnosticLogCallStackNode = {
    sampleCount?: number;
    isBlameFrame?: boolean;
    symbolName?: string;
    insightsCategory?: string;
    offsetIntoSymbol?: string;
    binaryName?: string;
    fileName?: string;
    binaryUUID?: string;
    lineNumber?: string;
    address?: string;
    offsetIntoBinaryTextSegment?: string;
    rawFrame?: string;
    subFrames?: Array<DiagnosticLogCallStackNode>;
};

export type ExternalBetaState = 'PROCESSING' | 'PROCESSING_EXCEPTION' | 'MISSING_EXPORT_COMPLIANCE' | 'READY_FOR_BETA_TESTING' | 'IN_BETA_TESTING' | 'EXPIRED' | 'READY_FOR_BETA_SUBMISSION' | 'IN_EXPORT_COMPLIANCE_REVIEW' | 'WAITING_FOR_BETA_REVIEW' | 'IN_BETA_REVIEW' | 'BETA_REJECTED' | 'BETA_APPROVED';

export type FileLocation = {
    path?: string;
    lineNumber?: number;
};

export type GameCenterLeaderboardFormatter = 'INTEGER' | 'DECIMAL_POINT_1_PLACE' | 'DECIMAL_POINT_2_PLACE' | 'DECIMAL_POINT_3_PLACE' | 'ELAPSED_TIME_MILLISECOND' | 'ELAPSED_TIME_CENTISECOND' | 'ELAPSED_TIME_MINUTE' | 'ELAPSED_TIME_SECOND' | 'MONEY_POUND_DECIMAL' | 'MONEY_POUND' | 'MONEY_DOLLAR_DECIMAL' | 'MONEY_DOLLAR' | 'MONEY_EURO_DECIMAL' | 'MONEY_EURO' | 'MONEY_FRANC_DECIMAL' | 'MONEY_FRANC' | 'MONEY_KRONER_DECIMAL' | 'MONEY_KRONER' | 'MONEY_YEN';

export type GameCenterMatchmakingTeamAssignment = {
    playerId?: string;
    team?: string;
};

export type HttpHeader = {
    name?: string;
    value?: string;
};

export type IconAssetType = 'APP_STORE' | 'MESSAGES_APP_STORE' | 'WATCH_APP_STORE' | 'TV_OS_HOME_SCREEN' | 'TV_OS_TOP_SHELF' | 'ALTERNATE_EXPERIMENT';

export type ImageAsset = {
    templateUrl?: string;
    width?: number;
    height?: number;
};

export type InAppPurchaseState = 'MISSING_METADATA' | 'WAITING_FOR_UPLOAD' | 'PROCESSING_CONTENT' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'DEVELOPER_ACTION_NEEDED' | 'PENDING_BINARY_APPROVAL' | 'APPROVED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'REMOVED_FROM_SALE' | 'REJECTED';

export type InAppPurchaseType = 'CONSUMABLE' | 'NON_CONSUMABLE' | 'NON_RENEWING_SUBSCRIPTION';

export type IntegerRange = {
    minimum?: number;
    maximum?: number;
};

export type InternalBetaState = 'PROCESSING' | 'PROCESSING_EXCEPTION' | 'MISSING_EXPORT_COMPLIANCE' | 'READY_FOR_BETA_TESTING' | 'IN_BETA_TESTING' | 'EXPIRED' | 'IN_EXPORT_COMPLIANCE_REVIEW';

export type KidsAgeBand = 'FIVE_AND_UNDER' | 'SIX_TO_EIGHT' | 'NINE_TO_ELEVEN';

export type Location = {
    latitude?: number;
    longitude?: number;
};

export type MetricCategory = 'HANG' | 'LAUNCH' | 'MEMORY' | 'DISK' | 'BATTERY' | 'TERMINATION' | 'ANIMATION';

export type MetricsInsight = {
    metricCategory?: MetricCategory;
    latestVersion?: string;
    metric?: string;
    summaryString?: string;
    referenceVersions?: string;
    maxLatestVersionValue?: number;
    subSystemLabel?: string;
    highImpact?: boolean;
    populations?: Array<{
        deltaPercentage?: number;
        percentile?: string;
        summaryString?: string;
        referenceAverageValue?: number;
        latestVersionValue?: number;
        device?: string;
    }>;
};

export type PhasedReleaseState = 'INACTIVE' | 'ACTIVE' | 'PAUSED' | 'COMPLETE';

export type Platform = 'IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS';

export type PreviewType = 'IPHONE_67' | 'IPHONE_61' | 'IPHONE_65' | 'IPHONE_58' | 'IPHONE_55' | 'IPHONE_47' | 'IPHONE_40' | 'IPHONE_35' | 'IPAD_PRO_3GEN_129' | 'IPAD_PRO_3GEN_11' | 'IPAD_PRO_129' | 'IPAD_105' | 'IPAD_97' | 'DESKTOP' | 'APPLE_TV' | 'APPLE_VISION_PRO';

export type Property = {
    key?: string;
    value?: string;
};

export type ScmProviderType = {
    kind?: 'BITBUCKET_CLOUD' | 'BITBUCKET_SERVER' | 'GITHUB_CLOUD' | 'GITHUB_ENTERPRISE' | 'GITLAB_CLOUD' | 'GITLAB_SELF_MANAGED';
    displayName?: string;
    isOnPremise?: boolean;
};

export type kind2 = 'BITBUCKET_CLOUD' | 'BITBUCKET_SERVER' | 'GITHUB_CLOUD' | 'GITHUB_ENTERPRISE' | 'GITLAB_CLOUD' | 'GITLAB_SELF_MANAGED';

export type ScreenshotDisplayType = 'APP_IPHONE_67' | 'APP_IPHONE_61' | 'APP_IPHONE_65' | 'APP_IPHONE_58' | 'APP_IPHONE_55' | 'APP_IPHONE_47' | 'APP_IPHONE_40' | 'APP_IPHONE_35' | 'APP_IPAD_PRO_3GEN_129' | 'APP_IPAD_PRO_3GEN_11' | 'APP_IPAD_PRO_129' | 'APP_IPAD_105' | 'APP_IPAD_97' | 'APP_DESKTOP' | 'APP_WATCH_ULTRA' | 'APP_WATCH_SERIES_10' | 'APP_WATCH_SERIES_7' | 'APP_WATCH_SERIES_4' | 'APP_WATCH_SERIES_3' | 'APP_APPLE_TV' | 'APP_APPLE_VISION_PRO' | 'IMESSAGE_APP_IPHONE_67' | 'IMESSAGE_APP_IPHONE_61' | 'IMESSAGE_APP_IPHONE_65' | 'IMESSAGE_APP_IPHONE_58' | 'IMESSAGE_APP_IPHONE_55' | 'IMESSAGE_APP_IPHONE_47' | 'IMESSAGE_APP_IPHONE_40' | 'IMESSAGE_APP_IPAD_PRO_3GEN_129' | 'IMESSAGE_APP_IPAD_PRO_3GEN_11' | 'IMESSAGE_APP_IPAD_PRO_129' | 'IMESSAGE_APP_IPAD_105' | 'IMESSAGE_APP_IPAD_97';

export type SubscriptionCustomerEligibility = 'NEW' | 'EXISTING' | 'EXPIRED';

export type SubscriptionGracePeriodDuration = 'THREE_DAYS' | 'SIXTEEN_DAYS' | 'TWENTY_EIGHT_DAYS';

export type SubscriptionOfferDuration = 'THREE_DAYS' | 'ONE_WEEK' | 'TWO_WEEKS' | 'ONE_MONTH' | 'TWO_MONTHS' | 'THREE_MONTHS' | 'SIX_MONTHS' | 'ONE_YEAR';

export type SubscriptionOfferEligibility = 'STACK_WITH_INTRO_OFFERS' | 'REPLACE_INTRO_OFFERS';

export type SubscriptionOfferMode = 'PAY_AS_YOU_GO' | 'PAY_UP_FRONT' | 'FREE_TRIAL';

export type SubscriptionStatusUrlVersion = 'V1' | 'V2';

export type TerritoryCode = 'ABW' | 'AFG' | 'AGO' | 'AIA' | 'ALB' | 'AND' | 'ANT' | 'ARE' | 'ARG' | 'ARM' | 'ASM' | 'ATG' | 'AUS' | 'AUT' | 'AZE' | 'BDI' | 'BEL' | 'BEN' | 'BES' | 'BFA' | 'BGD' | 'BGR' | 'BHR' | 'BHS' | 'BIH' | 'BLR' | 'BLZ' | 'BMU' | 'BOL' | 'BRA' | 'BRB' | 'BRN' | 'BTN' | 'BWA' | 'CAF' | 'CAN' | 'CHE' | 'CHL' | 'CHN' | 'CIV' | 'CMR' | 'COD' | 'COG' | 'COK' | 'COL' | 'COM' | 'CPV' | 'CRI' | 'CUB' | 'CUW' | 'CXR' | 'CYM' | 'CYP' | 'CZE' | 'DEU' | 'DJI' | 'DMA' | 'DNK' | 'DOM' | 'DZA' | 'ECU' | 'EGY' | 'ERI' | 'ESP' | 'EST' | 'ETH' | 'FIN' | 'FJI' | 'FLK' | 'FRA' | 'FRO' | 'FSM' | 'GAB' | 'GBR' | 'GEO' | 'GGY' | 'GHA' | 'GIB' | 'GIN' | 'GLP' | 'GMB' | 'GNB' | 'GNQ' | 'GRC' | 'GRD' | 'GRL' | 'GTM' | 'GUF' | 'GUM' | 'GUY' | 'HKG' | 'HND' | 'HRV' | 'HTI' | 'HUN' | 'IDN' | 'IMN' | 'IND' | 'IRL' | 'IRQ' | 'ISL' | 'ISR' | 'ITA' | 'JAM' | 'JEY' | 'JOR' | 'JPN' | 'KAZ' | 'KEN' | 'KGZ' | 'KHM' | 'KIR' | 'KNA' | 'KOR' | 'KWT' | 'LAO' | 'LBN' | 'LBR' | 'LBY' | 'LCA' | 'LIE' | 'LKA' | 'LSO' | 'LTU' | 'LUX' | 'LVA' | 'MAC' | 'MAR' | 'MCO' | 'MDA' | 'MDG' | 'MDV' | 'MEX' | 'MHL' | 'MKD' | 'MLI' | 'MLT' | 'MMR' | 'MNE' | 'MNG' | 'MNP' | 'MOZ' | 'MRT' | 'MSR' | 'MTQ' | 'MUS' | 'MWI' | 'MYS' | 'MYT' | 'NAM' | 'NCL' | 'NER' | 'NFK' | 'NGA' | 'NIC' | 'NIU' | 'NLD' | 'NOR' | 'NPL' | 'NRU' | 'NZL' | 'OMN' | 'PAK' | 'PAN' | 'PER' | 'PHL' | 'PLW' | 'PNG' | 'POL' | 'PRI' | 'PRT' | 'PRY' | 'PSE' | 'PYF' | 'QAT' | 'REU' | 'ROU' | 'RUS' | 'RWA' | 'SAU' | 'SEN' | 'SGP' | 'SHN' | 'SLB' | 'SLE' | 'SLV' | 'SMR' | 'SOM' | 'SPM' | 'SRB' | 'SSD' | 'STP' | 'SUR' | 'SVK' | 'SVN' | 'SWE' | 'SWZ' | 'SXM' | 'SYC' | 'TCA' | 'TCD' | 'TGO' | 'THA' | 'TJK' | 'TKM' | 'TLS' | 'TON' | 'TTO' | 'TUN' | 'TUR' | 'TUV' | 'TWN' | 'TZA' | 'UGA' | 'UKR' | 'UMI' | 'URY' | 'USA' | 'UZB' | 'VAT' | 'VCT' | 'VEN' | 'VGB' | 'VIR' | 'VNM' | 'VUT' | 'WLF' | 'WSM' | 'YEM' | 'ZAF' | 'ZMB' | 'ZWE';

export type UploadOperation = {
    method?: string;
    url?: string;
    length?: number;
    offset?: number;
    requestHeaders?: Array<HttpHeader>;
};

export type UserRole = 'ADMIN' | 'FINANCE' | 'ACCOUNT_HOLDER' | 'SALES' | 'MARKETING' | 'APP_MANAGER' | 'DEVELOPER' | 'ACCESS_TO_REPORTS' | 'CUSTOMER_SUPPORT' | 'CREATE_APPS' | 'CLOUD_MANAGED_DEVELOPER_ID' | 'CLOUD_MANAGED_APP_DISTRIBUTION' | 'GENERATE_INDIVIDUAL_KEYS';

export type csv = string;

export type diagnosticLogs = {
    productData?: Array<{
        signatureId?: string;
        diagnosticInsights?: Array<{
            insightsURL?: string;
            insightsCategory?: string;
            insightsString?: string;
        }>;
        diagnosticLogs?: Array<{
            callStackTree?: Array<{
                callStackPerThread?: boolean;
                callStacks?: Array<{
                    callStackRootFrames?: Array<DiagnosticLogCallStackNode>;
                }>;
            }>;
            diagnosticMetaData?: {
                bundleId?: string;
                event?: string;
                osVersion?: string;
                appVersion?: string;
                writesCaused?: string;
                deviceType?: string;
                platformArchitecture?: string;
                eventDetail?: string;
                buildVersion?: string;
            };
        }>;
    }>;
    version?: string;
};

export type gzip = (Blob | File);

export type xcodeMetrics = {
    version?: string;
    insights?: {
        trendingUp?: Array<MetricsInsight>;
        regressions?: Array<MetricsInsight>;
    };
    productData?: Array<{
        platform?: string;
        metricCategories?: Array<{
            identifier?: MetricCategory;
            metrics?: Array<{
                identifier?: string;
                goalKeys?: Array<{
                    goalKey?: string;
                    lowerBound?: number;
                    upperBound?: number;
                }>;
                unit?: {
                    identifier?: string;
                    displayName?: string;
                };
                datasets?: Array<{
                    filterCriteria?: {
                        percentile?: string;
                        device?: string;
                        deviceMarketingName?: string;
                    };
                    points?: Array<{
                        version?: string;
                        value?: number;
                        errorMargin?: number;
                        percentageBreakdown?: {
                            value?: number;
                            subSystemLabel?: string;
                        };
                        goal?: string;
                    }>;
                }>;
            }>;
        }>;
    }>;
};

export type ActorsGetCollectionData = {
    query: {
        /**
         * the fields to include for returned resources of type actors
         */
        'fields[actors]'?: Array<('actorType' | 'userFirstName' | 'userLastName' | 'userEmail' | 'apiKeyId')>;
        /**
         * filter by id(s)
         */
        'filter[id]': Array<(string)>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type ActorsGetCollectionResponse = (ActorsResponse);

export type ActorsGetCollectionError = (ErrorResponse);

export type ActorsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type actors
         */
        'fields[actors]'?: Array<('actorType' | 'userFirstName' | 'userLastName' | 'userEmail' | 'apiKeyId')>;
    };
};

export type ActorsGetInstanceResponse = (ActorResponse);

export type ActorsGetInstanceError = (ErrorResponse);

export type AgeRatingDeclarationsUpdateInstanceData = {
    /**
     * AgeRatingDeclaration representation
     */
    body: AgeRatingDeclarationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AgeRatingDeclarationsUpdateInstanceResponse = (AgeRatingDeclarationResponse);

export type AgeRatingDeclarationsUpdateInstanceError = (ErrorResponse);

export type AlternativeDistributionDomainsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionDomains
         */
        'fields[alternativeDistributionDomains]'?: Array<('domain' | 'referenceName' | 'createdDate')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AlternativeDistributionDomainsGetCollectionResponse = (AlternativeDistributionDomainsResponse);

export type AlternativeDistributionDomainsGetCollectionError = (ErrorResponse);

export type AlternativeDistributionDomainsCreateInstanceData = {
    /**
     * AlternativeDistributionDomain representation
     */
    body: AlternativeDistributionDomainCreateRequest;
};

export type AlternativeDistributionDomainsCreateInstanceResponse = (AlternativeDistributionDomainResponse);

export type AlternativeDistributionDomainsCreateInstanceError = (ErrorResponse);

export type AlternativeDistributionDomainsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionDomains
         */
        'fields[alternativeDistributionDomains]'?: Array<('domain' | 'referenceName' | 'createdDate')>;
    };
};

export type AlternativeDistributionDomainsGetInstanceResponse = (AlternativeDistributionDomainResponse);

export type AlternativeDistributionDomainsGetInstanceError = (ErrorResponse);

export type AlternativeDistributionDomainsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AlternativeDistributionDomainsDeleteInstanceResponse = (void);

export type AlternativeDistributionDomainsDeleteInstanceError = (ErrorResponse);

export type AlternativeDistributionKeysGetCollectionData = {
    query?: {
        /**
         * filter by existence or non-existence of related 'app'
         */
        'exists[app]'?: boolean;
        /**
         * the fields to include for returned resources of type alternativeDistributionKeys
         */
        'fields[alternativeDistributionKeys]'?: Array<('publicKey' | 'app')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AlternativeDistributionKeysGetCollectionResponse = (AlternativeDistributionKeysResponse);

export type AlternativeDistributionKeysGetCollectionError = (ErrorResponse);

export type AlternativeDistributionKeysCreateInstanceData = {
    /**
     * AlternativeDistributionKey representation
     */
    body: AlternativeDistributionKeyCreateRequest;
};

export type AlternativeDistributionKeysCreateInstanceResponse = (AlternativeDistributionKeyResponse);

export type AlternativeDistributionKeysCreateInstanceError = (ErrorResponse);

export type AlternativeDistributionKeysGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionKeys
         */
        'fields[alternativeDistributionKeys]'?: Array<('publicKey' | 'app')>;
    };
};

export type AlternativeDistributionKeysGetInstanceResponse = (AlternativeDistributionKeyResponse);

export type AlternativeDistributionKeysGetInstanceError = (ErrorResponse);

export type AlternativeDistributionKeysDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AlternativeDistributionKeysDeleteInstanceResponse = (void);

export type AlternativeDistributionKeysDeleteInstanceError = (ErrorResponse);

export type AlternativeDistributionPackageDeltasGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageDeltas
         */
        'fields[alternativeDistributionPackageDeltas]'?: Array<('url' | 'urlExpirationDate' | 'alternativeDistributionKeyBlob' | 'fileChecksum')>;
    };
};

export type AlternativeDistributionPackageDeltasGetInstanceResponse = (AlternativeDistributionPackageDeltaResponse);

export type AlternativeDistributionPackageDeltasGetInstanceError = (ErrorResponse);

export type AlternativeDistributionPackageVariantsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageVariants
         */
        'fields[alternativeDistributionPackageVariants]'?: Array<('url' | 'urlExpirationDate' | 'alternativeDistributionKeyBlob' | 'fileChecksum')>;
    };
};

export type AlternativeDistributionPackageVariantsGetInstanceResponse = (AlternativeDistributionPackageVariantResponse);

export type AlternativeDistributionPackageVariantsGetInstanceError = (ErrorResponse);

export type AlternativeDistributionPackageVersionsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageDeltas
         */
        'fields[alternativeDistributionPackageDeltas]'?: Array<('url' | 'urlExpirationDate' | 'alternativeDistributionKeyBlob' | 'fileChecksum')>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageVariants
         */
        'fields[alternativeDistributionPackageVariants]'?: Array<('url' | 'urlExpirationDate' | 'alternativeDistributionKeyBlob' | 'fileChecksum')>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageVersions
         */
        'fields[alternativeDistributionPackageVersions]'?: Array<('url' | 'urlExpirationDate' | 'version' | 'fileChecksum' | 'state' | 'variants' | 'deltas' | 'alternativeDistributionPackage')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('variants' | 'deltas' | 'alternativeDistributionPackage')>;
        /**
         * maximum number of related deltas returned (when they are included)
         */
        'limit[deltas]'?: number;
        /**
         * maximum number of related variants returned (when they are included)
         */
        'limit[variants]'?: number;
    };
};

export type AlternativeDistributionPackageVersionsGetInstanceResponse = (AlternativeDistributionPackageVersionResponse);

export type AlternativeDistributionPackageVersionsGetInstanceError = (ErrorResponse);

export type AlternativeDistributionPackagesCreateInstanceData = {
    /**
     * AlternativeDistributionPackage representation
     */
    body: AlternativeDistributionPackageCreateRequest;
};

export type AlternativeDistributionPackagesCreateInstanceResponse = (AlternativeDistributionPackageResponse);

export type AlternativeDistributionPackagesCreateInstanceError = (ErrorResponse);

export type AlternativeDistributionPackagesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionPackages
         */
        'fields[alternativeDistributionPackages]'?: Array<('appStoreVersion' | 'versions')>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageVersions
         */
        'fields[alternativeDistributionPackageVersions]'?: Array<('url' | 'urlExpirationDate' | 'version' | 'fileChecksum' | 'state' | 'variants' | 'deltas' | 'alternativeDistributionPackage')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('versions')>;
        /**
         * maximum number of related versions returned (when they are included)
         */
        'limit[versions]'?: number;
    };
};

export type AlternativeDistributionPackagesGetInstanceResponse = (AlternativeDistributionPackageResponse);

export type AlternativeDistributionPackagesGetInstanceError = (ErrorResponse);

export type AnalyticsReportInstancesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type analyticsReportInstances
         */
        'fields[analyticsReportInstances]'?: Array<('granularity' | 'processingDate' | 'segments')>;
    };
};

export type AnalyticsReportInstancesGetInstanceResponse = (AnalyticsReportInstanceResponse);

export type AnalyticsReportInstancesGetInstanceError = (ErrorResponse);

export type AnalyticsReportRequestsCreateInstanceData = {
    /**
     * AnalyticsReportRequest representation
     */
    body: AnalyticsReportRequestCreateRequest;
};

export type AnalyticsReportRequestsCreateInstanceResponse = (AnalyticsReportRequestResponse);

export type AnalyticsReportRequestsCreateInstanceError = (ErrorResponse);

export type AnalyticsReportRequestsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type analyticsReportRequests
         */
        'fields[analyticsReportRequests]'?: Array<('accessType' | 'stoppedDueToInactivity' | 'app' | 'reports')>;
        /**
         * the fields to include for returned resources of type analyticsReports
         */
        'fields[analyticsReports]'?: Array<('name' | 'category' | 'instances')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('reports')>;
        /**
         * maximum number of related reports returned (when they are included)
         */
        'limit[reports]'?: number;
    };
};

export type AnalyticsReportRequestsGetInstanceResponse = (AnalyticsReportRequestResponse);

export type AnalyticsReportRequestsGetInstanceError = (ErrorResponse);

export type AnalyticsReportRequestsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AnalyticsReportRequestsDeleteInstanceResponse = (void);

export type AnalyticsReportRequestsDeleteInstanceError = (ErrorResponse);

export type AnalyticsReportSegmentsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type analyticsReportSegments
         */
        'fields[analyticsReportSegments]'?: Array<('checksum' | 'sizeInBytes' | 'url')>;
    };
};

export type AnalyticsReportSegmentsGetInstanceResponse = (AnalyticsReportSegmentResponse);

export type AnalyticsReportSegmentsGetInstanceError = (ErrorResponse);

export type AnalyticsReportsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type analyticsReports
         */
        'fields[analyticsReports]'?: Array<('name' | 'category' | 'instances')>;
    };
};

export type AnalyticsReportsGetInstanceResponse = (AnalyticsReportResponse);

export type AnalyticsReportsGetInstanceError = (ErrorResponse);

export type AppAvailabilitiesV2CreateInstanceData = {
    /**
     * AppAvailability representation
     */
    body: AppAvailabilityV2CreateRequest;
};

export type AppAvailabilitiesV2CreateInstanceResponse = (AppAvailabilityV2Response);

export type AppAvailabilitiesV2CreateInstanceError = (ErrorResponse);

export type AppAvailabilitiesV2GetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appAvailabilities
         */
        'fields[appAvailabilities]'?: Array<('availableInNewTerritories' | 'app' | 'territoryAvailabilities')>;
        /**
         * the fields to include for returned resources of type territoryAvailabilities
         */
        'fields[territoryAvailabilities]'?: Array<('available' | 'releaseDate' | 'preOrderEnabled' | 'preOrderPublishDate' | 'contentStatuses' | 'territory')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('territoryAvailabilities')>;
        /**
         * maximum number of related territoryAvailabilities returned (when they are included)
         */
        'limit[territoryAvailabilities]'?: number;
    };
};

export type AppAvailabilitiesV2GetInstanceResponse = (AppAvailabilityV2Response);

export type AppAvailabilitiesV2GetInstanceError = (ErrorResponse);

export type AppAvailabilitiesCreateInstanceData = {
    /**
     * AppAvailability representation
     */
    body: AppAvailabilityCreateRequest;
};

export type AppAvailabilitiesCreateInstanceResponse = (AppAvailabilityResponse);

export type AppAvailabilitiesCreateInstanceError = (ErrorResponse);

export type AppAvailabilitiesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appAvailabilities
         */
        'fields[appAvailabilities]'?: Array<('availableInNewTerritories' | 'app' | 'availableTerritories')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'availableTerritories')>;
        /**
         * maximum number of related availableTerritories returned (when they are included)
         */
        'limit[availableTerritories]'?: number;
    };
};

export type AppAvailabilitiesGetInstanceResponse = (AppAvailabilityResponse);

export type AppAvailabilitiesGetInstanceError = (ErrorResponse);

export type AppCategoriesGetCollectionData = {
    query?: {
        /**
         * filter by existence or non-existence of related 'parent'
         */
        'exists[parent]'?: boolean;
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<('platforms' | 'subcategories' | 'parent')>;
        /**
         * filter by attribute 'platforms'
         */
        'filter[platforms]'?: Array<('IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subcategories' | 'parent')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related subcategories returned (when they are included)
         */
        'limit[subcategories]'?: number;
    };
};

export type AppCategoriesGetCollectionResponse = (AppCategoriesResponse);

export type AppCategoriesGetCollectionError = (ErrorResponse);

export type AppCategoriesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<('platforms' | 'subcategories' | 'parent')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subcategories' | 'parent')>;
        /**
         * maximum number of related subcategories returned (when they are included)
         */
        'limit[subcategories]'?: number;
    };
};

export type AppCategoriesGetInstanceResponse = (AppCategoryResponse);

export type AppCategoriesGetInstanceError = (ErrorResponse);

export type AppClipAdvancedExperienceImagesCreateInstanceData = {
    /**
     * AppClipAdvancedExperienceImage representation
     */
    body: AppClipAdvancedExperienceImageCreateRequest;
};

export type AppClipAdvancedExperienceImagesCreateInstanceResponse = (AppClipAdvancedExperienceImageResponse);

export type AppClipAdvancedExperienceImagesCreateInstanceError = (ErrorResponse);

export type AppClipAdvancedExperienceImagesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipAdvancedExperienceImages
         */
        'fields[appClipAdvancedExperienceImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded')>;
    };
};

export type AppClipAdvancedExperienceImagesGetInstanceResponse = (AppClipAdvancedExperienceImageResponse);

export type AppClipAdvancedExperienceImagesGetInstanceError = (ErrorResponse);

export type AppClipAdvancedExperienceImagesUpdateInstanceData = {
    /**
     * AppClipAdvancedExperienceImage representation
     */
    body: AppClipAdvancedExperienceImageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppClipAdvancedExperienceImagesUpdateInstanceResponse = (AppClipAdvancedExperienceImageResponse);

export type AppClipAdvancedExperienceImagesUpdateInstanceError = (ErrorResponse);

export type AppClipAdvancedExperiencesCreateInstanceData = {
    /**
     * AppClipAdvancedExperience representation
     */
    body: AppClipAdvancedExperienceCreateRequest;
};

export type AppClipAdvancedExperiencesCreateInstanceResponse = (AppClipAdvancedExperienceResponse);

export type AppClipAdvancedExperiencesCreateInstanceError = (ErrorResponse);

export type AppClipAdvancedExperiencesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipAdvancedExperiences
         */
        'fields[appClipAdvancedExperiences]'?: Array<('link' | 'version' | 'status' | 'action' | 'isPoweredBy' | 'place' | 'placeStatus' | 'businessCategory' | 'defaultLanguage' | 'removed' | 'appClip' | 'headerImage' | 'localizations')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appClip' | 'headerImage' | 'localizations')>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
    };
};

export type AppClipAdvancedExperiencesGetInstanceResponse = (AppClipAdvancedExperienceResponse);

export type AppClipAdvancedExperiencesGetInstanceError = (ErrorResponse);

export type AppClipAdvancedExperiencesUpdateInstanceData = {
    /**
     * AppClipAdvancedExperience representation
     */
    body: AppClipAdvancedExperienceUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppClipAdvancedExperiencesUpdateInstanceResponse = (AppClipAdvancedExperienceResponse);

export type AppClipAdvancedExperiencesUpdateInstanceError = (ErrorResponse);

export type AppClipAppStoreReviewDetailsCreateInstanceData = {
    /**
     * AppClipAppStoreReviewDetail representation
     */
    body: AppClipAppStoreReviewDetailCreateRequest;
};

export type AppClipAppStoreReviewDetailsCreateInstanceResponse = (AppClipAppStoreReviewDetailResponse);

export type AppClipAppStoreReviewDetailsCreateInstanceError = (ErrorResponse);

export type AppClipAppStoreReviewDetailsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipAppStoreReviewDetails
         */
        'fields[appClipAppStoreReviewDetails]'?: Array<('invocationUrls' | 'appClipDefaultExperience')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appClipDefaultExperience')>;
    };
};

export type AppClipAppStoreReviewDetailsGetInstanceResponse = (AppClipAppStoreReviewDetailResponse);

export type AppClipAppStoreReviewDetailsGetInstanceError = (ErrorResponse);

export type AppClipAppStoreReviewDetailsUpdateInstanceData = {
    /**
     * AppClipAppStoreReviewDetail representation
     */
    body: AppClipAppStoreReviewDetailUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppClipAppStoreReviewDetailsUpdateInstanceResponse = (AppClipAppStoreReviewDetailResponse);

export type AppClipAppStoreReviewDetailsUpdateInstanceError = (ErrorResponse);

export type AppClipDefaultExperienceLocalizationsCreateInstanceData = {
    /**
     * AppClipDefaultExperienceLocalization representation
     */
    body: AppClipDefaultExperienceLocalizationCreateRequest;
};

export type AppClipDefaultExperienceLocalizationsCreateInstanceResponse = (AppClipDefaultExperienceLocalizationResponse);

export type AppClipDefaultExperienceLocalizationsCreateInstanceError = (ErrorResponse);

export type AppClipDefaultExperienceLocalizationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipDefaultExperienceLocalizations
         */
        'fields[appClipDefaultExperienceLocalizations]'?: Array<('locale' | 'subtitle' | 'appClipDefaultExperience' | 'appClipHeaderImage')>;
        /**
         * the fields to include for returned resources of type appClipHeaderImages
         */
        'fields[appClipHeaderImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appClipDefaultExperienceLocalization')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appClipDefaultExperience' | 'appClipHeaderImage')>;
    };
};

export type AppClipDefaultExperienceLocalizationsGetInstanceResponse = (AppClipDefaultExperienceLocalizationResponse);

export type AppClipDefaultExperienceLocalizationsGetInstanceError = (ErrorResponse);

export type AppClipDefaultExperienceLocalizationsUpdateInstanceData = {
    /**
     * AppClipDefaultExperienceLocalization representation
     */
    body: AppClipDefaultExperienceLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppClipDefaultExperienceLocalizationsUpdateInstanceResponse = (AppClipDefaultExperienceLocalizationResponse);

export type AppClipDefaultExperienceLocalizationsUpdateInstanceError = (ErrorResponse);

export type AppClipDefaultExperienceLocalizationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppClipDefaultExperienceLocalizationsDeleteInstanceResponse = (void);

export type AppClipDefaultExperienceLocalizationsDeleteInstanceError = (ErrorResponse);

export type AppClipDefaultExperiencesCreateInstanceData = {
    /**
     * AppClipDefaultExperience representation
     */
    body: AppClipDefaultExperienceCreateRequest;
};

export type AppClipDefaultExperiencesCreateInstanceResponse = (AppClipDefaultExperienceResponse);

export type AppClipDefaultExperiencesCreateInstanceError = (ErrorResponse);

export type AppClipDefaultExperiencesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipAppStoreReviewDetails
         */
        'fields[appClipAppStoreReviewDetails]'?: Array<('invocationUrls' | 'appClipDefaultExperience')>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperienceLocalizations
         */
        'fields[appClipDefaultExperienceLocalizations]'?: Array<('locale' | 'subtitle' | 'appClipDefaultExperience' | 'appClipHeaderImage')>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<('action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceTemplate')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail')>;
        /**
         * maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)
         */
        'limit[appClipDefaultExperienceLocalizations]'?: number;
    };
};

export type AppClipDefaultExperiencesGetInstanceResponse = (AppClipDefaultExperienceResponse);

export type AppClipDefaultExperiencesGetInstanceError = (ErrorResponse);

export type AppClipDefaultExperiencesUpdateInstanceData = {
    /**
     * AppClipDefaultExperience representation
     */
    body: AppClipDefaultExperienceUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppClipDefaultExperiencesUpdateInstanceResponse = (AppClipDefaultExperienceResponse);

export type AppClipDefaultExperiencesUpdateInstanceError = (ErrorResponse);

export type AppClipDefaultExperiencesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppClipDefaultExperiencesDeleteInstanceResponse = (void);

export type AppClipDefaultExperiencesDeleteInstanceError = (ErrorResponse);

export type AppClipHeaderImagesCreateInstanceData = {
    /**
     * AppClipHeaderImage representation
     */
    body: AppClipHeaderImageCreateRequest;
};

export type AppClipHeaderImagesCreateInstanceResponse = (AppClipHeaderImageResponse);

export type AppClipHeaderImagesCreateInstanceError = (ErrorResponse);

export type AppClipHeaderImagesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipHeaderImages
         */
        'fields[appClipHeaderImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appClipDefaultExperienceLocalization')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appClipDefaultExperienceLocalization')>;
    };
};

export type AppClipHeaderImagesGetInstanceResponse = (AppClipHeaderImageResponse);

export type AppClipHeaderImagesGetInstanceError = (ErrorResponse);

export type AppClipHeaderImagesUpdateInstanceData = {
    /**
     * AppClipHeaderImage representation
     */
    body: AppClipHeaderImageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppClipHeaderImagesUpdateInstanceResponse = (AppClipHeaderImageResponse);

export type AppClipHeaderImagesUpdateInstanceError = (ErrorResponse);

export type AppClipHeaderImagesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppClipHeaderImagesDeleteInstanceResponse = (void);

export type AppClipHeaderImagesDeleteInstanceError = (ErrorResponse);

export type AppClipsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<('action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceTemplate')>;
        /**
         * the fields to include for returned resources of type appClips
         */
        'fields[appClips]'?: Array<('bundleId' | 'app' | 'appClipDefaultExperiences' | 'appClipAdvancedExperiences')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'appClipDefaultExperiences')>;
        /**
         * maximum number of related appClipDefaultExperiences returned (when they are included)
         */
        'limit[appClipDefaultExperiences]'?: number;
    };
};

export type AppClipsGetInstanceResponse = (AppClipResponse);

export type AppClipsGetInstanceError = (ErrorResponse);

export type AppCustomProductPageLocalizationsCreateInstanceData = {
    /**
     * AppCustomProductPageLocalization representation
     */
    body: AppCustomProductPageLocalizationCreateRequest;
};

export type AppCustomProductPageLocalizationsCreateInstanceResponse = (AppCustomProductPageLocalizationResponse);

export type AppCustomProductPageLocalizationsCreateInstanceError = (ErrorResponse);

export type AppCustomProductPageLocalizationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<('locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<('previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews')>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<('screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * maximum number of related appPreviewSets returned (when they are included)
         */
        'limit[appPreviewSets]'?: number;
        /**
         * maximum number of related appScreenshotSets returned (when they are included)
         */
        'limit[appScreenshotSets]'?: number;
    };
};

export type AppCustomProductPageLocalizationsGetInstanceResponse = (AppCustomProductPageLocalizationResponse);

export type AppCustomProductPageLocalizationsGetInstanceError = (ErrorResponse);

export type AppCustomProductPageLocalizationsUpdateInstanceData = {
    /**
     * AppCustomProductPageLocalization representation
     */
    body: AppCustomProductPageLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppCustomProductPageLocalizationsUpdateInstanceResponse = (AppCustomProductPageLocalizationResponse);

export type AppCustomProductPageLocalizationsUpdateInstanceError = (ErrorResponse);

export type AppCustomProductPageLocalizationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppCustomProductPageLocalizationsDeleteInstanceResponse = (void);

export type AppCustomProductPageLocalizationsDeleteInstanceError = (ErrorResponse);

export type AppCustomProductPageVersionsCreateInstanceData = {
    /**
     * AppCustomProductPageVersion representation
     */
    body: AppCustomProductPageVersionCreateRequest;
};

export type AppCustomProductPageVersionsCreateInstanceResponse = (AppCustomProductPageVersionResponse);

export type AppCustomProductPageVersionsCreateInstanceError = (ErrorResponse);

export type AppCustomProductPageVersionsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<('locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appCustomProductPageVersions
         */
        'fields[appCustomProductPageVersions]'?: Array<('version' | 'state' | 'deepLink' | 'appCustomProductPage' | 'appCustomProductPageLocalizations')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appCustomProductPage' | 'appCustomProductPageLocalizations')>;
        /**
         * maximum number of related appCustomProductPageLocalizations returned (when they are included)
         */
        'limit[appCustomProductPageLocalizations]'?: number;
    };
};

export type AppCustomProductPageVersionsGetInstanceResponse = (AppCustomProductPageVersionResponse);

export type AppCustomProductPageVersionsGetInstanceError = (ErrorResponse);

export type AppCustomProductPageVersionsUpdateInstanceData = {
    /**
     * AppCustomProductPageVersion representation
     */
    body: AppCustomProductPageVersionUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppCustomProductPageVersionsUpdateInstanceResponse = (AppCustomProductPageVersionResponse);

export type AppCustomProductPageVersionsUpdateInstanceError = (ErrorResponse);

export type AppCustomProductPagesCreateInstanceData = {
    /**
     * AppCustomProductPage representation
     */
    body: AppCustomProductPageCreateRequest;
};

export type AppCustomProductPagesCreateInstanceResponse = (AppCustomProductPageResponse);

export type AppCustomProductPagesCreateInstanceError = (ErrorResponse);

export type AppCustomProductPagesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCustomProductPages
         */
        'fields[appCustomProductPages]'?: Array<('name' | 'url' | 'visible' | 'app' | 'appCustomProductPageVersions' | 'appStoreVersionTemplate' | 'customProductPageTemplate')>;
        /**
         * the fields to include for returned resources of type appCustomProductPageVersions
         */
        'fields[appCustomProductPageVersions]'?: Array<('version' | 'state' | 'deepLink' | 'appCustomProductPage' | 'appCustomProductPageLocalizations')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'appCustomProductPageVersions')>;
        /**
         * maximum number of related appCustomProductPageVersions returned (when they are included)
         */
        'limit[appCustomProductPageVersions]'?: number;
    };
};

export type AppCustomProductPagesGetInstanceResponse = (AppCustomProductPageResponse);

export type AppCustomProductPagesGetInstanceError = (ErrorResponse);

export type AppCustomProductPagesUpdateInstanceData = {
    /**
     * AppCustomProductPage representation
     */
    body: AppCustomProductPageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppCustomProductPagesUpdateInstanceResponse = (AppCustomProductPageResponse);

export type AppCustomProductPagesUpdateInstanceError = (ErrorResponse);

export type AppCustomProductPagesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppCustomProductPagesDeleteInstanceResponse = (void);

export type AppCustomProductPagesDeleteInstanceError = (ErrorResponse);

export type AppEncryptionDeclarationDocumentsCreateInstanceData = {
    /**
     * AppEncryptionDeclarationDocument representation
     */
    body: AppEncryptionDeclarationDocumentCreateRequest;
};

export type AppEncryptionDeclarationDocumentsCreateInstanceResponse = (AppEncryptionDeclarationDocumentResponse);

export type AppEncryptionDeclarationDocumentsCreateInstanceError = (ErrorResponse);

export type AppEncryptionDeclarationDocumentsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEncryptionDeclarationDocuments
         */
        'fields[appEncryptionDeclarationDocuments]'?: Array<('fileSize' | 'fileName' | 'assetToken' | 'downloadUrl' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appEncryptionDeclaration')>;
    };
};

export type AppEncryptionDeclarationDocumentsGetInstanceResponse = (AppEncryptionDeclarationDocumentResponse);

export type AppEncryptionDeclarationDocumentsGetInstanceError = (ErrorResponse);

export type AppEncryptionDeclarationDocumentsUpdateInstanceData = {
    /**
     * AppEncryptionDeclarationDocument representation
     */
    body: AppEncryptionDeclarationDocumentUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppEncryptionDeclarationDocumentsUpdateInstanceResponse = (AppEncryptionDeclarationDocumentResponse);

export type AppEncryptionDeclarationDocumentsUpdateInstanceError = (ErrorResponse);

export type AppEncryptionDeclarationsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type appEncryptionDeclarationDocuments
         */
        'fields[appEncryptionDeclarationDocuments]'?: Array<('fileSize' | 'fileName' | 'assetToken' | 'downloadUrl' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appEncryptionDeclaration')>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<('appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument')>;
        /**
         * the fields to include for returned resources of type apps
         * @deprecated
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'builds'
         */
        'filter[builds]'?: Array<(string)>;
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<('IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'builds' | 'appEncryptionDeclarationDocument')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
};

export type AppEncryptionDeclarationsGetCollectionResponse = (AppEncryptionDeclarationsResponse);

export type AppEncryptionDeclarationsGetCollectionError = (ErrorResponse);

export type AppEncryptionDeclarationsCreateInstanceData = {
    /**
     * AppEncryptionDeclaration representation
     */
    body: AppEncryptionDeclarationCreateRequest;
};

export type AppEncryptionDeclarationsCreateInstanceResponse = (AppEncryptionDeclarationResponse);

export type AppEncryptionDeclarationsCreateInstanceError = (ErrorResponse);

export type AppEncryptionDeclarationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEncryptionDeclarationDocuments
         */
        'fields[appEncryptionDeclarationDocuments]'?: Array<('fileSize' | 'fileName' | 'assetToken' | 'downloadUrl' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appEncryptionDeclaration')>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<('appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument')>;
        /**
         * the fields to include for returned resources of type apps
         * @deprecated
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'builds' | 'appEncryptionDeclarationDocument')>;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
};

export type AppEncryptionDeclarationsGetInstanceResponse = (AppEncryptionDeclarationResponse);

export type AppEncryptionDeclarationsGetInstanceError = (ErrorResponse);

export type AppEventLocalizationsCreateInstanceData = {
    /**
     * AppEventLocalization representation
     */
    body: AppEventLocalizationCreateRequest;
};

export type AppEventLocalizationsCreateInstanceResponse = (AppEventLocalizationResponse);

export type AppEventLocalizationsCreateInstanceError = (ErrorResponse);

export type AppEventLocalizationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEventLocalizations
         */
        'fields[appEventLocalizations]'?: Array<('locale' | 'name' | 'shortDescription' | 'longDescription' | 'appEvent' | 'appEventScreenshots' | 'appEventVideoClips')>;
        /**
         * the fields to include for returned resources of type appEventScreenshots
         */
        'fields[appEventScreenshots]'?: Array<('fileSize' | 'fileName' | 'imageAsset' | 'assetToken' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appEventAssetType' | 'appEventLocalization')>;
        /**
         * the fields to include for returned resources of type appEventVideoClips
         */
        'fields[appEventVideoClips]'?: Array<('fileSize' | 'fileName' | 'previewFrameTimeCode' | 'videoUrl' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appEventAssetType' | 'appEventLocalization')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appEvent' | 'appEventScreenshots' | 'appEventVideoClips')>;
        /**
         * maximum number of related appEventScreenshots returned (when they are included)
         */
        'limit[appEventScreenshots]'?: number;
        /**
         * maximum number of related appEventVideoClips returned (when they are included)
         */
        'limit[appEventVideoClips]'?: number;
    };
};

export type AppEventLocalizationsGetInstanceResponse = (AppEventLocalizationResponse);

export type AppEventLocalizationsGetInstanceError = (ErrorResponse);

export type AppEventLocalizationsUpdateInstanceData = {
    /**
     * AppEventLocalization representation
     */
    body: AppEventLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppEventLocalizationsUpdateInstanceResponse = (AppEventLocalizationResponse);

export type AppEventLocalizationsUpdateInstanceError = (ErrorResponse);

export type AppEventLocalizationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppEventLocalizationsDeleteInstanceResponse = (void);

export type AppEventLocalizationsDeleteInstanceError = (ErrorResponse);

export type AppEventScreenshotsCreateInstanceData = {
    /**
     * AppEventScreenshot representation
     */
    body: AppEventScreenshotCreateRequest;
};

export type AppEventScreenshotsCreateInstanceResponse = (AppEventScreenshotResponse);

export type AppEventScreenshotsCreateInstanceError = (ErrorResponse);

export type AppEventScreenshotsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEventScreenshots
         */
        'fields[appEventScreenshots]'?: Array<('fileSize' | 'fileName' | 'imageAsset' | 'assetToken' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appEventAssetType' | 'appEventLocalization')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appEventLocalization')>;
    };
};

export type AppEventScreenshotsGetInstanceResponse = (AppEventScreenshotResponse);

export type AppEventScreenshotsGetInstanceError = (ErrorResponse);

export type AppEventScreenshotsUpdateInstanceData = {
    /**
     * AppEventScreenshot representation
     */
    body: AppEventScreenshotUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppEventScreenshotsUpdateInstanceResponse = (AppEventScreenshotResponse);

export type AppEventScreenshotsUpdateInstanceError = (ErrorResponse);

export type AppEventScreenshotsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppEventScreenshotsDeleteInstanceResponse = (void);

export type AppEventScreenshotsDeleteInstanceError = (ErrorResponse);

export type AppEventVideoClipsCreateInstanceData = {
    /**
     * AppEventVideoClip representation
     */
    body: AppEventVideoClipCreateRequest;
};

export type AppEventVideoClipsCreateInstanceResponse = (AppEventVideoClipResponse);

export type AppEventVideoClipsCreateInstanceError = (ErrorResponse);

export type AppEventVideoClipsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEventVideoClips
         */
        'fields[appEventVideoClips]'?: Array<('fileSize' | 'fileName' | 'previewFrameTimeCode' | 'videoUrl' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appEventAssetType' | 'appEventLocalization')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appEventLocalization')>;
    };
};

export type AppEventVideoClipsGetInstanceResponse = (AppEventVideoClipResponse);

export type AppEventVideoClipsGetInstanceError = (ErrorResponse);

export type AppEventVideoClipsUpdateInstanceData = {
    /**
     * AppEventVideoClip representation
     */
    body: AppEventVideoClipUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppEventVideoClipsUpdateInstanceResponse = (AppEventVideoClipResponse);

export type AppEventVideoClipsUpdateInstanceError = (ErrorResponse);

export type AppEventVideoClipsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppEventVideoClipsDeleteInstanceResponse = (void);

export type AppEventVideoClipsDeleteInstanceError = (ErrorResponse);

export type AppEventsCreateInstanceData = {
    /**
     * AppEvent representation
     */
    body: AppEventCreateRequest;
};

export type AppEventsCreateInstanceResponse = (AppEventResponse);

export type AppEventsCreateInstanceError = (ErrorResponse);

export type AppEventsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEventLocalizations
         */
        'fields[appEventLocalizations]'?: Array<('locale' | 'name' | 'shortDescription' | 'longDescription' | 'appEvent' | 'appEventScreenshots' | 'appEventVideoClips')>;
        /**
         * the fields to include for returned resources of type appEvents
         */
        'fields[appEvents]'?: Array<('referenceName' | 'badge' | 'eventState' | 'deepLink' | 'purchaseRequirement' | 'primaryLocale' | 'priority' | 'purpose' | 'territorySchedules' | 'archivedTerritorySchedules' | 'app' | 'localizations')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('localizations')>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
    };
};

export type AppEventsGetInstanceResponse = (AppEventResponse);

export type AppEventsGetInstanceError = (ErrorResponse);

export type AppEventsUpdateInstanceData = {
    /**
     * AppEvent representation
     */
    body: AppEventUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppEventsUpdateInstanceResponse = (AppEventResponse);

export type AppEventsUpdateInstanceError = (ErrorResponse);

export type AppEventsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppEventsDeleteInstanceResponse = (void);

export type AppEventsDeleteInstanceError = (ErrorResponse);

export type AppInfoLocalizationsCreateInstanceData = {
    /**
     * AppInfoLocalization representation
     */
    body: AppInfoLocalizationCreateRequest;
};

export type AppInfoLocalizationsCreateInstanceResponse = (AppInfoLocalizationResponse);

export type AppInfoLocalizationsCreateInstanceError = (ErrorResponse);

export type AppInfoLocalizationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appInfoLocalizations
         */
        'fields[appInfoLocalizations]'?: Array<('locale' | 'name' | 'subtitle' | 'privacyPolicyUrl' | 'privacyChoicesUrl' | 'privacyPolicyText' | 'appInfo')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appInfo')>;
    };
};

export type AppInfoLocalizationsGetInstanceResponse = (AppInfoLocalizationResponse);

export type AppInfoLocalizationsGetInstanceError = (ErrorResponse);

export type AppInfoLocalizationsUpdateInstanceData = {
    /**
     * AppInfoLocalization representation
     */
    body: AppInfoLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppInfoLocalizationsUpdateInstanceResponse = (AppInfoLocalizationResponse);

export type AppInfoLocalizationsUpdateInstanceError = (ErrorResponse);

export type AppInfoLocalizationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppInfoLocalizationsDeleteInstanceResponse = (void);

export type AppInfoLocalizationsDeleteInstanceError = (ErrorResponse);

export type AppInfosGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         */
        'fields[ageRatingDeclarations]'?: Array<('alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus')>;
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<('platforms' | 'subcategories' | 'parent')>;
        /**
         * the fields to include for returned resources of type appInfoLocalizations
         */
        'fields[appInfoLocalizations]'?: Array<('locale' | 'name' | 'subtitle' | 'privacyPolicyUrl' | 'privacyChoicesUrl' | 'privacyPolicyText' | 'appInfo')>;
        /**
         * the fields to include for returned resources of type appInfos
         */
        'fields[appInfos]'?: Array<('appStoreState' | 'state' | 'appStoreAgeRating' | 'australiaAgeRating' | 'brazilAgeRating' | 'brazilAgeRatingV2' | 'koreaAgeRating' | 'kidsAgeBand' | 'app' | 'ageRatingDeclaration' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'ageRatingDeclaration' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo')>;
        /**
         * maximum number of related appInfoLocalizations returned (when they are included)
         */
        'limit[appInfoLocalizations]'?: number;
    };
};

export type AppInfosGetInstanceResponse = (AppInfoResponse);

export type AppInfosGetInstanceError = (ErrorResponse);

export type AppInfosUpdateInstanceData = {
    /**
     * AppInfo representation
     */
    body: AppInfoUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppInfosUpdateInstanceResponse = (AppInfoResponse);

export type AppInfosUpdateInstanceError = (ErrorResponse);

export type AppPreOrdersCreateInstanceData = {
    /**
     * AppPreOrder representation
     */
    body: AppPreOrderCreateRequest;
};

export type AppPreOrdersCreateInstanceResponse = (AppPreOrderResponse);

export type AppPreOrdersCreateInstanceError = (ErrorResponse);

export type AppPreOrdersGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPreOrders
         */
        'fields[appPreOrders]'?: Array<('preOrderAvailableDate' | 'appReleaseDate' | 'app')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app')>;
    };
};

export type AppPreOrdersGetInstanceResponse = (AppPreOrderResponse);

export type AppPreOrdersGetInstanceError = (ErrorResponse);

export type AppPreOrdersUpdateInstanceData = {
    /**
     * AppPreOrder representation
     */
    body: AppPreOrderUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppPreOrdersUpdateInstanceResponse = (AppPreOrderResponse);

export type AppPreOrdersUpdateInstanceError = (ErrorResponse);

export type AppPreOrdersDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppPreOrdersDeleteInstanceResponse = (void);

export type AppPreOrdersDeleteInstanceError = (ErrorResponse);

export type AppPreviewSetsCreateInstanceData = {
    /**
     * AppPreviewSet representation
     */
    body: AppPreviewSetCreateRequest;
};

export type AppPreviewSetsCreateInstanceResponse = (AppPreviewSetResponse);

export type AppPreviewSetsCreateInstanceError = (ErrorResponse);

export type AppPreviewSetsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPreviews
         */
        'fields[appPreviews]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'previewFrameTimeCode' | 'mimeType' | 'videoUrl' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appPreviewSet')>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<('previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews')>;
        /**
         * maximum number of related appPreviews returned (when they are included)
         */
        'limit[appPreviews]'?: number;
    };
};

export type AppPreviewSetsGetInstanceResponse = (AppPreviewSetResponse);

export type AppPreviewSetsGetInstanceError = (ErrorResponse);

export type AppPreviewSetsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppPreviewSetsDeleteInstanceResponse = (void);

export type AppPreviewSetsDeleteInstanceError = (ErrorResponse);

export type AppPreviewsCreateInstanceData = {
    /**
     * AppPreview representation
     */
    body: AppPreviewCreateRequest;
};

export type AppPreviewsCreateInstanceResponse = (AppPreviewResponse);

export type AppPreviewsCreateInstanceError = (ErrorResponse);

export type AppPreviewsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPreviews
         */
        'fields[appPreviews]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'previewFrameTimeCode' | 'mimeType' | 'videoUrl' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appPreviewSet')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appPreviewSet')>;
    };
};

export type AppPreviewsGetInstanceResponse = (AppPreviewResponse);

export type AppPreviewsGetInstanceError = (ErrorResponse);

export type AppPreviewsUpdateInstanceData = {
    /**
     * AppPreview representation
     */
    body: AppPreviewUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppPreviewsUpdateInstanceResponse = (AppPreviewResponse);

export type AppPreviewsUpdateInstanceError = (ErrorResponse);

export type AppPreviewsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppPreviewsDeleteInstanceResponse = (void);

export type AppPreviewsDeleteInstanceError = (ErrorResponse);

export type AppPricePointsV3GetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPricePoints
         */
        'fields[appPricePoints]'?: Array<('customerPrice' | 'proceeds' | 'app' | 'equalizations' | 'territory')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'territory')>;
    };
};

export type AppPricePointsV3GetInstanceResponse = (AppPricePointV3Response);

export type AppPricePointsV3GetInstanceError = (ErrorResponse);

export type AppPriceSchedulesCreateInstanceData = {
    /**
     * AppPriceSchedule representation
     */
    body: AppPriceScheduleCreateRequest;
};

export type AppPriceSchedulesCreateInstanceResponse = (AppPriceScheduleResponse);

export type AppPriceSchedulesCreateInstanceError = (ErrorResponse);

export type AppPriceSchedulesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPrices
         */
        'fields[appPrices]'?: Array<('manual' | 'startDate' | 'endDate' | 'appPricePoint' | 'territory')>;
        /**
         * the fields to include for returned resources of type appPriceSchedules
         */
        'fields[appPriceSchedules]'?: Array<('app' | 'baseTerritory' | 'manualPrices' | 'automaticPrices')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'baseTerritory' | 'manualPrices' | 'automaticPrices')>;
        /**
         * maximum number of related automaticPrices returned (when they are included)
         */
        'limit[automaticPrices]'?: number;
        /**
         * maximum number of related manualPrices returned (when they are included)
         */
        'limit[manualPrices]'?: number;
    };
};

export type AppPriceSchedulesGetInstanceResponse = (AppPriceScheduleResponse);

export type AppPriceSchedulesGetInstanceError = (ErrorResponse);

export type AppScreenshotSetsCreateInstanceData = {
    /**
     * AppScreenshotSet representation
     */
    body: AppScreenshotSetCreateRequest;
};

export type AppScreenshotSetsCreateInstanceResponse = (AppScreenshotSetResponse);

export type AppScreenshotSetsCreateInstanceError = (ErrorResponse);

export type AppScreenshotSetsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appScreenshots
         */
        'fields[appScreenshots]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appScreenshotSet')>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<('screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots')>;
        /**
         * maximum number of related appScreenshots returned (when they are included)
         */
        'limit[appScreenshots]'?: number;
    };
};

export type AppScreenshotSetsGetInstanceResponse = (AppScreenshotSetResponse);

export type AppScreenshotSetsGetInstanceError = (ErrorResponse);

export type AppScreenshotSetsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppScreenshotSetsDeleteInstanceResponse = (void);

export type AppScreenshotSetsDeleteInstanceError = (ErrorResponse);

export type AppScreenshotsCreateInstanceData = {
    /**
     * AppScreenshot representation
     */
    body: AppScreenshotCreateRequest;
};

export type AppScreenshotsCreateInstanceResponse = (AppScreenshotResponse);

export type AppScreenshotsCreateInstanceError = (ErrorResponse);

export type AppScreenshotsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appScreenshots
         */
        'fields[appScreenshots]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appScreenshotSet')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appScreenshotSet')>;
    };
};

export type AppScreenshotsGetInstanceResponse = (AppScreenshotResponse);

export type AppScreenshotsGetInstanceError = (ErrorResponse);

export type AppScreenshotsUpdateInstanceData = {
    /**
     * AppScreenshot representation
     */
    body: AppScreenshotUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppScreenshotsUpdateInstanceResponse = (AppScreenshotResponse);

export type AppScreenshotsUpdateInstanceError = (ErrorResponse);

export type AppScreenshotsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppScreenshotsDeleteInstanceResponse = (void);

export type AppScreenshotsDeleteInstanceError = (ErrorResponse);

export type AppStoreReviewAttachmentsCreateInstanceData = {
    /**
     * AppStoreReviewAttachment representation
     */
    body: AppStoreReviewAttachmentCreateRequest;
};

export type AppStoreReviewAttachmentsCreateInstanceResponse = (AppStoreReviewAttachmentResponse);

export type AppStoreReviewAttachmentsCreateInstanceError = (ErrorResponse);

export type AppStoreReviewAttachmentsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreReviewAttachments
         */
        'fields[appStoreReviewAttachments]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appStoreReviewDetail')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreReviewDetail')>;
    };
};

export type AppStoreReviewAttachmentsGetInstanceResponse = (AppStoreReviewAttachmentResponse);

export type AppStoreReviewAttachmentsGetInstanceError = (ErrorResponse);

export type AppStoreReviewAttachmentsUpdateInstanceData = {
    /**
     * AppStoreReviewAttachment representation
     */
    body: AppStoreReviewAttachmentUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreReviewAttachmentsUpdateInstanceResponse = (AppStoreReviewAttachmentResponse);

export type AppStoreReviewAttachmentsUpdateInstanceError = (ErrorResponse);

export type AppStoreReviewAttachmentsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreReviewAttachmentsDeleteInstanceResponse = (void);

export type AppStoreReviewAttachmentsDeleteInstanceError = (ErrorResponse);

export type AppStoreReviewDetailsCreateInstanceData = {
    /**
     * AppStoreReviewDetail representation
     */
    body: AppStoreReviewDetailCreateRequest;
};

export type AppStoreReviewDetailsCreateInstanceResponse = (AppStoreReviewDetailResponse);

export type AppStoreReviewDetailsCreateInstanceError = (ErrorResponse);

export type AppStoreReviewDetailsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreReviewAttachments
         */
        'fields[appStoreReviewAttachments]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appStoreReviewDetail')>;
        /**
         * the fields to include for returned resources of type appStoreReviewDetails
         */
        'fields[appStoreReviewDetails]'?: Array<('contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'appStoreVersion' | 'appStoreReviewAttachments')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersion' | 'appStoreReviewAttachments')>;
        /**
         * maximum number of related appStoreReviewAttachments returned (when they are included)
         */
        'limit[appStoreReviewAttachments]'?: number;
    };
};

export type AppStoreReviewDetailsGetInstanceResponse = (AppStoreReviewDetailResponse);

export type AppStoreReviewDetailsGetInstanceError = (ErrorResponse);

export type AppStoreReviewDetailsUpdateInstanceData = {
    /**
     * AppStoreReviewDetail representation
     */
    body: AppStoreReviewDetailUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreReviewDetailsUpdateInstanceResponse = (AppStoreReviewDetailResponse);

export type AppStoreReviewDetailsUpdateInstanceError = (ErrorResponse);

export type AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceData = {
    /**
     * AppStoreVersionExperimentTreatmentLocalization representation
     */
    body: AppStoreVersionExperimentTreatmentLocalizationCreateRequest;
};

export type AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceResponse = (AppStoreVersionExperimentTreatmentLocalizationResponse);

export type AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceError = (ErrorResponse);

export type AppStoreVersionExperimentTreatmentLocalizationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<('previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews')>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<('screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<('locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * maximum number of related appPreviewSets returned (when they are included)
         */
        'limit[appPreviewSets]'?: number;
        /**
         * maximum number of related appScreenshotSets returned (when they are included)
         */
        'limit[appScreenshotSets]'?: number;
    };
};

export type AppStoreVersionExperimentTreatmentLocalizationsGetInstanceResponse = (AppStoreVersionExperimentTreatmentLocalizationResponse);

export type AppStoreVersionExperimentTreatmentLocalizationsGetInstanceError = (ErrorResponse);

export type AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceResponse = (void);

export type AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceError = (ErrorResponse);

export type AppStoreVersionExperimentTreatmentsCreateInstanceData = {
    /**
     * AppStoreVersionExperimentTreatment representation
     */
    body: AppStoreVersionExperimentTreatmentCreateRequest;
};

export type AppStoreVersionExperimentTreatmentsCreateInstanceResponse = (AppStoreVersionExperimentTreatmentResponse);

export type AppStoreVersionExperimentTreatmentsCreateInstanceError = (ErrorResponse);

export type AppStoreVersionExperimentTreatmentsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<('locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<('name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations')>;
        /**
         * maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included)
         */
        'limit[appStoreVersionExperimentTreatmentLocalizations]'?: number;
    };
};

export type AppStoreVersionExperimentTreatmentsGetInstanceResponse = (AppStoreVersionExperimentTreatmentResponse);

export type AppStoreVersionExperimentTreatmentsGetInstanceError = (ErrorResponse);

export type AppStoreVersionExperimentTreatmentsUpdateInstanceData = {
    /**
     * AppStoreVersionExperimentTreatment representation
     */
    body: AppStoreVersionExperimentTreatmentUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionExperimentTreatmentsUpdateInstanceResponse = (AppStoreVersionExperimentTreatmentResponse);

export type AppStoreVersionExperimentTreatmentsUpdateInstanceError = (ErrorResponse);

export type AppStoreVersionExperimentTreatmentsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionExperimentTreatmentsDeleteInstanceResponse = (void);

export type AppStoreVersionExperimentTreatmentsDeleteInstanceError = (ErrorResponse);

export type AppStoreVersionExperimentsV2CreateInstanceData = {
    /**
     * AppStoreVersionExperiment representation
     */
    body: AppStoreVersionExperimentV2CreateRequest;
};

export type AppStoreVersionExperimentsV2CreateInstanceResponse = (AppStoreVersionExperimentV2Response);

export type AppStoreVersionExperimentsV2CreateInstanceError = (ErrorResponse);

export type AppStoreVersionExperimentsV2GetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<('name' | 'platform' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'started' | 'app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<('name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments')>;
        /**
         * maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
         */
        'limit[appStoreVersionExperimentTreatments]'?: number;
        /**
         * maximum number of related controlVersions returned (when they are included)
         */
        'limit[controlVersions]'?: number;
    };
};

export type AppStoreVersionExperimentsV2GetInstanceResponse = (AppStoreVersionExperimentV2Response);

export type AppStoreVersionExperimentsV2GetInstanceError = (ErrorResponse);

export type AppStoreVersionExperimentsV2UpdateInstanceData = {
    /**
     * AppStoreVersionExperiment representation
     */
    body: AppStoreVersionExperimentV2UpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionExperimentsV2UpdateInstanceResponse = (AppStoreVersionExperimentV2Response);

export type AppStoreVersionExperimentsV2UpdateInstanceError = (ErrorResponse);

export type AppStoreVersionExperimentsV2DeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionExperimentsV2DeleteInstanceResponse = (void);

export type AppStoreVersionExperimentsV2DeleteInstanceError = (ErrorResponse);

export type AppStoreVersionExperimentsCreateInstanceData = {
    /**
     * AppStoreVersionExperiment representation
     */
    body: AppStoreVersionExperimentCreateRequest;
};

export type AppStoreVersionExperimentsCreateInstanceResponse = (AppStoreVersionExperimentResponse);

export type AppStoreVersionExperimentsCreateInstanceError = (ErrorResponse);

export type AppStoreVersionExperimentsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<('name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'started' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<('name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersion' | 'appStoreVersionExperimentTreatments')>;
        /**
         * maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
         */
        'limit[appStoreVersionExperimentTreatments]'?: number;
    };
};

export type AppStoreVersionExperimentsGetInstanceResponse = (AppStoreVersionExperimentResponse);

export type AppStoreVersionExperimentsGetInstanceError = (ErrorResponse);

export type AppStoreVersionExperimentsUpdateInstanceData = {
    /**
     * AppStoreVersionExperiment representation
     */
    body: AppStoreVersionExperimentUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionExperimentsUpdateInstanceResponse = (AppStoreVersionExperimentResponse);

export type AppStoreVersionExperimentsUpdateInstanceError = (ErrorResponse);

export type AppStoreVersionExperimentsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionExperimentsDeleteInstanceResponse = (void);

export type AppStoreVersionExperimentsDeleteInstanceError = (ErrorResponse);

export type AppStoreVersionLocalizationsCreateInstanceData = {
    /**
     * AppStoreVersionLocalization representation
     */
    body: AppStoreVersionLocalizationCreateRequest;
};

export type AppStoreVersionLocalizationsCreateInstanceResponse = (AppStoreVersionLocalizationResponse);

export type AppStoreVersionLocalizationsCreateInstanceError = (ErrorResponse);

export type AppStoreVersionLocalizationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<('previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews')>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<('screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots')>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<('description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * maximum number of related appPreviewSets returned (when they are included)
         */
        'limit[appPreviewSets]'?: number;
        /**
         * maximum number of related appScreenshotSets returned (when they are included)
         */
        'limit[appScreenshotSets]'?: number;
    };
};

export type AppStoreVersionLocalizationsGetInstanceResponse = (AppStoreVersionLocalizationResponse);

export type AppStoreVersionLocalizationsGetInstanceError = (ErrorResponse);

export type AppStoreVersionLocalizationsUpdateInstanceData = {
    /**
     * AppStoreVersionLocalization representation
     */
    body: AppStoreVersionLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionLocalizationsUpdateInstanceResponse = (AppStoreVersionLocalizationResponse);

export type AppStoreVersionLocalizationsUpdateInstanceError = (ErrorResponse);

export type AppStoreVersionLocalizationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionLocalizationsDeleteInstanceResponse = (void);

export type AppStoreVersionLocalizationsDeleteInstanceError = (ErrorResponse);

export type AppStoreVersionPhasedReleasesCreateInstanceData = {
    /**
     * AppStoreVersionPhasedRelease representation
     */
    body: AppStoreVersionPhasedReleaseCreateRequest;
};

export type AppStoreVersionPhasedReleasesCreateInstanceResponse = (AppStoreVersionPhasedReleaseResponse);

export type AppStoreVersionPhasedReleasesCreateInstanceError = (ErrorResponse);

export type AppStoreVersionPhasedReleasesUpdateInstanceData = {
    /**
     * AppStoreVersionPhasedRelease representation
     */
    body: AppStoreVersionPhasedReleaseUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionPhasedReleasesUpdateInstanceResponse = (AppStoreVersionPhasedReleaseResponse);

export type AppStoreVersionPhasedReleasesUpdateInstanceError = (ErrorResponse);

export type AppStoreVersionPhasedReleasesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionPhasedReleasesDeleteInstanceResponse = (void);

export type AppStoreVersionPhasedReleasesDeleteInstanceError = (ErrorResponse);

export type AppStoreVersionPromotionsCreateInstanceData = {
    /**
     * AppStoreVersionPromotion representation
     */
    body: AppStoreVersionPromotionCreateRequest;
};

export type AppStoreVersionPromotionsCreateInstanceResponse = (AppStoreVersionPromotionResponse);

export type AppStoreVersionPromotionsCreateInstanceError = (ErrorResponse);

export type AppStoreVersionReleaseRequestsCreateInstanceData = {
    /**
     * AppStoreVersionReleaseRequest representation
     */
    body: AppStoreVersionReleaseRequestCreateRequest;
};

export type AppStoreVersionReleaseRequestsCreateInstanceResponse = (AppStoreVersionReleaseRequestResponse);

export type AppStoreVersionReleaseRequestsCreateInstanceError = (ErrorResponse);

export type AppStoreVersionSubmissionsCreateInstanceData = {
    /**
     * AppStoreVersionSubmission representation
     */
    body: AppStoreVersionSubmissionCreateRequest;
};

export type AppStoreVersionSubmissionsCreateInstanceResponse = (AppStoreVersionSubmissionResponse);

export type AppStoreVersionSubmissionsCreateInstanceError = (ErrorResponse);

export type AppStoreVersionSubmissionsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionSubmissionsDeleteInstanceResponse = (void);

export type AppStoreVersionSubmissionsDeleteInstanceError = (ErrorResponse);

export type AppStoreVersionsCreateInstanceData = {
    /**
     * AppStoreVersion representation
     */
    body: AppStoreVersionCreateRequest;
};

export type AppStoreVersionsCreateInstanceResponse = (AppStoreVersionResponse);

export type AppStoreVersionsCreateInstanceError = (ErrorResponse);

export type AppStoreVersionsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         * @deprecated
         */
        'fields[ageRatingDeclarations]'?: Array<('alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus')>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackages
         */
        'fields[alternativeDistributionPackages]'?: Array<('appStoreVersion' | 'versions')>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<('action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceTemplate')>;
        /**
         * the fields to include for returned resources of type appStoreReviewDetails
         */
        'fields[appStoreReviewDetails]'?: Array<('contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'appStoreVersion' | 'appStoreReviewAttachments')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<('name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'started' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'platform' | 'app' | 'latestControlVersion' | 'controlVersions')>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<('description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appStoreVersionPhasedReleases
         */
        'fields[appStoreVersionPhasedReleases]'?: Array<('phasedReleaseState' | 'startDate' | 'totalPauseDuration' | 'currentDayNumber' | 'appStoreVersion')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type appStoreVersionSubmissions
         * @deprecated
         */
        'fields[appStoreVersionSubmissions]'?: Array<('appStoreVersion')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<('enabled' | 'compatibilityVersions' | 'appStoreVersion')>;
        /**
         * the fields to include for returned resources of type routingAppCoverages
         */
        'fields[routingAppCoverages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appStoreVersion')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionPackage')>;
        /**
         * maximum number of related appStoreVersionExperiments returned (when they are included)
         * @deprecated
         */
        'limit[appStoreVersionExperiments]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
         */
        'limit[appStoreVersionExperimentsV2]'?: number;
        /**
         * maximum number of related appStoreVersionLocalizations returned (when they are included)
         */
        'limit[appStoreVersionLocalizations]'?: number;
    };
};

export type AppStoreVersionsGetInstanceResponse = (AppStoreVersionResponse);

export type AppStoreVersionsGetInstanceError = (ErrorResponse);

export type AppStoreVersionsUpdateInstanceData = {
    /**
     * AppStoreVersion representation
     */
    body: AppStoreVersionUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionsUpdateInstanceResponse = (AppStoreVersionResponse);

export type AppStoreVersionsUpdateInstanceError = (ErrorResponse);

export type AppStoreVersionsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionsDeleteInstanceResponse = (void);

export type AppStoreVersionsDeleteInstanceError = (ErrorResponse);

export type AppsGetCollectionData = {
    query?: {
        /**
         * filter by existence or non-existence of related 'gameCenterEnabledVersions'
         * @deprecated
         */
        'exists[gameCenterEnabledVersions]'?: boolean;
        /**
         * the fields to include for returned resources of type appClips
         */
        'fields[appClips]'?: Array<('bundleId' | 'app' | 'appClipDefaultExperiences' | 'appClipAdvancedExperiences')>;
        /**
         * the fields to include for returned resources of type appCustomProductPages
         */
        'fields[appCustomProductPages]'?: Array<('name' | 'url' | 'visible' | 'app' | 'appCustomProductPageVersions' | 'appStoreVersionTemplate' | 'customProductPageTemplate')>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<('appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument')>;
        /**
         * the fields to include for returned resources of type appEvents
         */
        'fields[appEvents]'?: Array<('referenceName' | 'badge' | 'eventState' | 'deepLink' | 'purchaseRequirement' | 'primaryLocale' | 'priority' | 'purpose' | 'territorySchedules' | 'archivedTerritorySchedules' | 'app' | 'localizations')>;
        /**
         * the fields to include for returned resources of type appInfos
         */
        'fields[appInfos]'?: Array<('appStoreState' | 'state' | 'appStoreAgeRating' | 'australiaAgeRating' | 'brazilAgeRating' | 'brazilAgeRatingV2' | 'koreaAgeRating' | 'kidsAgeBand' | 'app' | 'ageRatingDeclaration' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo')>;
        /**
         * the fields to include for returned resources of type appPreOrders
         * @deprecated
         */
        'fields[appPreOrders]'?: Array<('preOrderAvailableDate' | 'appReleaseDate' | 'app')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<('name' | 'platform' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'started' | 'app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type betaAppLocalizations
         */
        'fields[betaAppLocalizations]'?: Array<('feedbackEmail' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy' | 'description' | 'locale' | 'app')>;
        /**
         * the fields to include for returned resources of type betaAppReviewDetails
         */
        'fields[betaAppReviewDetails]'?: Array<('contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'app')>;
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<('name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'app' | 'builds' | 'betaTesters')>;
        /**
         * the fields to include for returned resources of type betaLicenseAgreements
         */
        'fields[betaLicenseAgreements]'?: Array<('agreementText' | 'app')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<('name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns')>;
        /**
         * the fields to include for returned resources of type endUserLicenseAgreements
         */
        'fields[endUserLicenseAgreements]'?: Array<('agreementText' | 'app' | 'territories')>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterEnabledVersions
         * @deprecated
         */
        'fields[gameCenterEnabledVersions]'?: Array<('platform' | 'versionString' | 'iconAsset' | 'compatibleVersions' | 'app')>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<('referenceName' | 'productId' | 'inAppPurchaseType' | 'state' | 'apps' | 'name' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'app' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images')>;
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<('version' | 'platform' | 'builds' | 'app')>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<('visibleForAllUsers' | 'enabled' | 'state' | 'app' | 'inAppPurchaseV2' | 'subscription' | 'promotionImages')>;
        /**
         * the fields to include for returned resources of type reviewSubmissions
         */
        'fields[reviewSubmissions]'?: Array<('platform' | 'submittedDate' | 'state' | 'submitted' | 'canceled' | 'app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor')>;
        /**
         * the fields to include for returned resources of type subscriptionGracePeriods
         */
        'fields[subscriptionGracePeriods]'?: Array<('optIn' | 'sandboxOptIn' | 'duration' | 'renewalType')>;
        /**
         * the fields to include for returned resources of type subscriptionGroups
         */
        'fields[subscriptionGroups]'?: Array<('referenceName' | 'app' | 'subscriptions' | 'subscriptionGroupLocalizations')>;
        /**
         * filter by attribute 'appStoreVersions.appStoreState'
         */
        'filter[appStoreVersions.appStoreState]'?: Array<('ACCEPTED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'INVALID_BINARY' | 'METADATA_REJECTED' | 'PENDING_APPLE_RELEASE' | 'PENDING_CONTRACT' | 'PENDING_DEVELOPER_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'PREORDER_READY_FOR_SALE' | 'PROCESSING_FOR_APP_STORE' | 'READY_FOR_REVIEW' | 'READY_FOR_SALE' | 'REJECTED' | 'REMOVED_FROM_SALE' | 'WAITING_FOR_EXPORT_COMPLIANCE' | 'WAITING_FOR_REVIEW' | 'REPLACED_WITH_NEW_VERSION' | 'NOT_APPLICABLE')>;
        /**
         * filter by attribute 'appStoreVersions.appVersionState'
         */
        'filter[appStoreVersions.appVersionState]'?: Array<('ACCEPTED' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'INVALID_BINARY' | 'METADATA_REJECTED' | 'PENDING_APPLE_RELEASE' | 'PENDING_DEVELOPER_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'PROCESSING_FOR_DISTRIBUTION' | 'READY_FOR_DISTRIBUTION' | 'READY_FOR_REVIEW' | 'REJECTED' | 'REPLACED_WITH_NEW_VERSION' | 'WAITING_FOR_EXPORT_COMPLIANCE' | 'WAITING_FOR_REVIEW')>;
        /**
         * filter by attribute 'appStoreVersions.platform'
         */
        'filter[appStoreVersions.platform]'?: Array<('IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS')>;
        /**
         * filter by id(s) of related 'appStoreVersions'
         */
        'filter[appStoreVersions]'?: Array<(string)>;
        /**
         * filter by attribute 'bundleId'
         */
        'filter[bundleId]'?: Array<(string)>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<(string)>;
        /**
         * filter by attribute 'reviewSubmissions.platform'
         */
        'filter[reviewSubmissions.platform]'?: Array<('IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS')>;
        /**
         * filter by attribute 'reviewSubmissions.state'
         */
        'filter[reviewSubmissions.state]'?: Array<('READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'UNRESOLVED_ISSUES' | 'CANCELING' | 'COMPLETING' | 'COMPLETE')>;
        /**
         * filter by attribute 'sku'
         */
        'filter[sku]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appEncryptionDeclarations' | 'ciProduct' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'endUserLicenseAgreement' | 'preOrder' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appClips returned (when they are included)
         */
        'limit[appClips]'?: number;
        /**
         * maximum number of related appCustomProductPages returned (when they are included)
         */
        'limit[appCustomProductPages]'?: number;
        /**
         * maximum number of related appEncryptionDeclarations returned (when they are included)
         */
        'limit[appEncryptionDeclarations]'?: number;
        /**
         * maximum number of related appEvents returned (when they are included)
         */
        'limit[appEvents]'?: number;
        /**
         * maximum number of related appInfos returned (when they are included)
         */
        'limit[appInfos]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
         */
        'limit[appStoreVersionExperimentsV2]'?: number;
        /**
         * maximum number of related appStoreVersions returned (when they are included)
         */
        'limit[appStoreVersions]'?: number;
        /**
         * maximum number of related betaAppLocalizations returned (when they are included)
         */
        'limit[betaAppLocalizations]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
        /**
         * maximum number of related gameCenterEnabledVersions returned (when they are included)
         * @deprecated
         */
        'limit[gameCenterEnabledVersions]'?: number;
        /**
         * maximum number of related inAppPurchases returned (when they are included)
         * @deprecated
         */
        'limit[inAppPurchases]'?: number;
        /**
         * maximum number of related inAppPurchasesV2 returned (when they are included)
         */
        'limit[inAppPurchasesV2]'?: number;
        /**
         * maximum number of related preReleaseVersions returned (when they are included)
         */
        'limit[preReleaseVersions]'?: number;
        /**
         * maximum number of related promotedPurchases returned (when they are included)
         */
        'limit[promotedPurchases]'?: number;
        /**
         * maximum number of related reviewSubmissions returned (when they are included)
         */
        'limit[reviewSubmissions]'?: number;
        /**
         * maximum number of related subscriptionGroups returned (when they are included)
         */
        'limit[subscriptionGroups]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('name' | '-name' | 'bundleId' | '-bundleId' | 'sku' | '-sku')>;
    };
};

export type AppsGetCollectionResponse = (AppsResponse);

export type AppsGetCollectionError = (ErrorResponse);

export type AppsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClips
         */
        'fields[appClips]'?: Array<('bundleId' | 'app' | 'appClipDefaultExperiences' | 'appClipAdvancedExperiences')>;
        /**
         * the fields to include for returned resources of type appCustomProductPages
         */
        'fields[appCustomProductPages]'?: Array<('name' | 'url' | 'visible' | 'app' | 'appCustomProductPageVersions' | 'appStoreVersionTemplate' | 'customProductPageTemplate')>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<('appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument')>;
        /**
         * the fields to include for returned resources of type appEvents
         */
        'fields[appEvents]'?: Array<('referenceName' | 'badge' | 'eventState' | 'deepLink' | 'purchaseRequirement' | 'primaryLocale' | 'priority' | 'purpose' | 'territorySchedules' | 'archivedTerritorySchedules' | 'app' | 'localizations')>;
        /**
         * the fields to include for returned resources of type appInfos
         */
        'fields[appInfos]'?: Array<('appStoreState' | 'state' | 'appStoreAgeRating' | 'australiaAgeRating' | 'brazilAgeRating' | 'brazilAgeRatingV2' | 'koreaAgeRating' | 'kidsAgeBand' | 'app' | 'ageRatingDeclaration' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo')>;
        /**
         * the fields to include for returned resources of type appPreOrders
         * @deprecated
         */
        'fields[appPreOrders]'?: Array<('preOrderAvailableDate' | 'appReleaseDate' | 'app')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<('name' | 'platform' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'started' | 'app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type betaAppLocalizations
         */
        'fields[betaAppLocalizations]'?: Array<('feedbackEmail' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy' | 'description' | 'locale' | 'app')>;
        /**
         * the fields to include for returned resources of type betaAppReviewDetails
         */
        'fields[betaAppReviewDetails]'?: Array<('contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'app')>;
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<('name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'app' | 'builds' | 'betaTesters')>;
        /**
         * the fields to include for returned resources of type betaLicenseAgreements
         */
        'fields[betaLicenseAgreements]'?: Array<('agreementText' | 'app')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<('name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns')>;
        /**
         * the fields to include for returned resources of type endUserLicenseAgreements
         */
        'fields[endUserLicenseAgreements]'?: Array<('agreementText' | 'app' | 'territories')>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterEnabledVersions
         * @deprecated
         */
        'fields[gameCenterEnabledVersions]'?: Array<('platform' | 'versionString' | 'iconAsset' | 'compatibleVersions' | 'app')>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<('referenceName' | 'productId' | 'inAppPurchaseType' | 'state' | 'apps' | 'name' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'app' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images')>;
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<('version' | 'platform' | 'builds' | 'app')>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<('visibleForAllUsers' | 'enabled' | 'state' | 'app' | 'inAppPurchaseV2' | 'subscription' | 'promotionImages')>;
        /**
         * the fields to include for returned resources of type reviewSubmissions
         */
        'fields[reviewSubmissions]'?: Array<('platform' | 'submittedDate' | 'state' | 'submitted' | 'canceled' | 'app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor')>;
        /**
         * the fields to include for returned resources of type subscriptionGracePeriods
         */
        'fields[subscriptionGracePeriods]'?: Array<('optIn' | 'sandboxOptIn' | 'duration' | 'renewalType')>;
        /**
         * the fields to include for returned resources of type subscriptionGroups
         */
        'fields[subscriptionGroups]'?: Array<('referenceName' | 'app' | 'subscriptions' | 'subscriptionGroupLocalizations')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appEncryptionDeclarations' | 'ciProduct' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'endUserLicenseAgreement' | 'preOrder' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2')>;
        /**
         * maximum number of related appClips returned (when they are included)
         */
        'limit[appClips]'?: number;
        /**
         * maximum number of related appCustomProductPages returned (when they are included)
         */
        'limit[appCustomProductPages]'?: number;
        /**
         * maximum number of related appEncryptionDeclarations returned (when they are included)
         */
        'limit[appEncryptionDeclarations]'?: number;
        /**
         * maximum number of related appEvents returned (when they are included)
         */
        'limit[appEvents]'?: number;
        /**
         * maximum number of related appInfos returned (when they are included)
         */
        'limit[appInfos]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
         */
        'limit[appStoreVersionExperimentsV2]'?: number;
        /**
         * maximum number of related appStoreVersions returned (when they are included)
         */
        'limit[appStoreVersions]'?: number;
        /**
         * maximum number of related betaAppLocalizations returned (when they are included)
         */
        'limit[betaAppLocalizations]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
        /**
         * maximum number of related gameCenterEnabledVersions returned (when they are included)
         * @deprecated
         */
        'limit[gameCenterEnabledVersions]'?: number;
        /**
         * maximum number of related inAppPurchases returned (when they are included)
         * @deprecated
         */
        'limit[inAppPurchases]'?: number;
        /**
         * maximum number of related inAppPurchasesV2 returned (when they are included)
         */
        'limit[inAppPurchasesV2]'?: number;
        /**
         * maximum number of related preReleaseVersions returned (when they are included)
         */
        'limit[preReleaseVersions]'?: number;
        /**
         * maximum number of related promotedPurchases returned (when they are included)
         */
        'limit[promotedPurchases]'?: number;
        /**
         * maximum number of related reviewSubmissions returned (when they are included)
         */
        'limit[reviewSubmissions]'?: number;
        /**
         * maximum number of related subscriptionGroups returned (when they are included)
         */
        'limit[subscriptionGroups]'?: number;
    };
};

export type AppsGetInstanceResponse = (AppResponse);

export type AppsGetInstanceError = (ErrorResponse);

export type AppsUpdateInstanceData = {
    /**
     * App representation
     */
    body: AppUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppsUpdateInstanceResponse = (AppResponse);

export type AppsUpdateInstanceError = (ErrorResponse);

export type BetaAppClipInvocationLocalizationsCreateInstanceData = {
    /**
     * BetaAppClipInvocationLocalization representation
     */
    body: BetaAppClipInvocationLocalizationCreateRequest;
};

export type BetaAppClipInvocationLocalizationsCreateInstanceResponse = (BetaAppClipInvocationLocalizationResponse);

export type BetaAppClipInvocationLocalizationsCreateInstanceError = (ErrorResponse);

export type BetaAppClipInvocationLocalizationsUpdateInstanceData = {
    /**
     * BetaAppClipInvocationLocalization representation
     */
    body: BetaAppClipInvocationLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaAppClipInvocationLocalizationsUpdateInstanceResponse = (BetaAppClipInvocationLocalizationResponse);

export type BetaAppClipInvocationLocalizationsUpdateInstanceError = (ErrorResponse);

export type BetaAppClipInvocationLocalizationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaAppClipInvocationLocalizationsDeleteInstanceResponse = (void);

export type BetaAppClipInvocationLocalizationsDeleteInstanceError = (ErrorResponse);

export type BetaAppClipInvocationsCreateInstanceData = {
    /**
     * BetaAppClipInvocation representation
     */
    body: BetaAppClipInvocationCreateRequest;
};

export type BetaAppClipInvocationsCreateInstanceResponse = (BetaAppClipInvocationResponse);

export type BetaAppClipInvocationsCreateInstanceError = (ErrorResponse);

export type BetaAppClipInvocationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaAppClipInvocations
         */
        'fields[betaAppClipInvocations]'?: Array<('url' | 'buildBundle' | 'betaAppClipInvocationLocalizations')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('betaAppClipInvocationLocalizations')>;
        /**
         * maximum number of related betaAppClipInvocationLocalizations returned (when they are included)
         */
        'limit[betaAppClipInvocationLocalizations]'?: number;
    };
};

export type BetaAppClipInvocationsGetInstanceResponse = (BetaAppClipInvocationResponse);

export type BetaAppClipInvocationsGetInstanceError = (ErrorResponse);

export type BetaAppClipInvocationsUpdateInstanceData = {
    /**
     * BetaAppClipInvocation representation
     */
    body: BetaAppClipInvocationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaAppClipInvocationsUpdateInstanceResponse = (BetaAppClipInvocationResponse);

export type BetaAppClipInvocationsUpdateInstanceError = (ErrorResponse);

export type BetaAppClipInvocationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaAppClipInvocationsDeleteInstanceResponse = (void);

export type BetaAppClipInvocationsDeleteInstanceError = (ErrorResponse);

export type BetaAppLocalizationsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type betaAppLocalizations
         */
        'fields[betaAppLocalizations]'?: Array<('feedbackEmail' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy' | 'description' | 'locale' | 'app')>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<(string)>;
        /**
         * filter by attribute 'locale'
         */
        'filter[locale]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BetaAppLocalizationsGetCollectionResponse = (BetaAppLocalizationsResponse);

export type BetaAppLocalizationsGetCollectionError = (ErrorResponse);

export type BetaAppLocalizationsCreateInstanceData = {
    /**
     * BetaAppLocalization representation
     */
    body: BetaAppLocalizationCreateRequest;
};

export type BetaAppLocalizationsCreateInstanceResponse = (BetaAppLocalizationResponse);

export type BetaAppLocalizationsCreateInstanceError = (ErrorResponse);

export type BetaAppLocalizationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type betaAppLocalizations
         */
        'fields[betaAppLocalizations]'?: Array<('feedbackEmail' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy' | 'description' | 'locale' | 'app')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app')>;
    };
};

export type BetaAppLocalizationsGetInstanceResponse = (BetaAppLocalizationResponse);

export type BetaAppLocalizationsGetInstanceError = (ErrorResponse);

export type BetaAppLocalizationsUpdateInstanceData = {
    /**
     * BetaAppLocalization representation
     */
    body: BetaAppLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaAppLocalizationsUpdateInstanceResponse = (BetaAppLocalizationResponse);

export type BetaAppLocalizationsUpdateInstanceError = (ErrorResponse);

export type BetaAppLocalizationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaAppLocalizationsDeleteInstanceResponse = (void);

export type BetaAppLocalizationsDeleteInstanceError = (ErrorResponse);

export type BetaAppReviewDetailsGetCollectionData = {
    query: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type betaAppReviewDetails
         */
        'fields[betaAppReviewDetails]'?: Array<('contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'app')>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]': Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BetaAppReviewDetailsGetCollectionResponse = (BetaAppReviewDetailsResponse);

export type BetaAppReviewDetailsGetCollectionError = (ErrorResponse);

export type BetaAppReviewDetailsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type betaAppReviewDetails
         */
        'fields[betaAppReviewDetails]'?: Array<('contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'app')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app')>;
    };
};

export type BetaAppReviewDetailsGetInstanceResponse = (BetaAppReviewDetailResponse);

export type BetaAppReviewDetailsGetInstanceError = (ErrorResponse);

export type BetaAppReviewDetailsUpdateInstanceData = {
    /**
     * BetaAppReviewDetail representation
     */
    body: BetaAppReviewDetailUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaAppReviewDetailsUpdateInstanceResponse = (BetaAppReviewDetailResponse);

export type BetaAppReviewDetailsUpdateInstanceError = (ErrorResponse);

export type BetaAppReviewSubmissionsGetCollectionData = {
    query: {
        /**
         * the fields to include for returned resources of type betaAppReviewSubmissions
         */
        'fields[betaAppReviewSubmissions]'?: Array<('betaReviewState' | 'submittedDate' | 'build')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * filter by attribute 'betaReviewState'
         */
        'filter[betaReviewState]'?: Array<('WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'APPROVED')>;
        /**
         * filter by id(s) of related 'build'
         */
        'filter[build]': Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('build')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BetaAppReviewSubmissionsGetCollectionResponse = (BetaAppReviewSubmissionsResponse);

export type BetaAppReviewSubmissionsGetCollectionError = (ErrorResponse);

export type BetaAppReviewSubmissionsCreateInstanceData = {
    /**
     * BetaAppReviewSubmission representation
     */
    body: BetaAppReviewSubmissionCreateRequest;
};

export type BetaAppReviewSubmissionsCreateInstanceResponse = (BetaAppReviewSubmissionResponse);

export type BetaAppReviewSubmissionsCreateInstanceError = (ErrorResponse);

export type BetaAppReviewSubmissionsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaAppReviewSubmissions
         */
        'fields[betaAppReviewSubmissions]'?: Array<('betaReviewState' | 'submittedDate' | 'build')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('build')>;
    };
};

export type BetaAppReviewSubmissionsGetInstanceResponse = (BetaAppReviewSubmissionResponse);

export type BetaAppReviewSubmissionsGetInstanceError = (ErrorResponse);

export type BetaBuildLocalizationsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type betaBuildLocalizations
         */
        'fields[betaBuildLocalizations]'?: Array<('whatsNew' | 'locale' | 'build')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * filter by id(s) of related 'build'
         */
        'filter[build]'?: Array<(string)>;
        /**
         * filter by attribute 'locale'
         */
        'filter[locale]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('build')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BetaBuildLocalizationsGetCollectionResponse = (BetaBuildLocalizationsResponse);

export type BetaBuildLocalizationsGetCollectionError = (ErrorResponse);

export type BetaBuildLocalizationsCreateInstanceData = {
    /**
     * BetaBuildLocalization representation
     */
    body: BetaBuildLocalizationCreateRequest;
};

export type BetaBuildLocalizationsCreateInstanceResponse = (BetaBuildLocalizationResponse);

export type BetaBuildLocalizationsCreateInstanceError = (ErrorResponse);

export type BetaBuildLocalizationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaBuildLocalizations
         */
        'fields[betaBuildLocalizations]'?: Array<('whatsNew' | 'locale' | 'build')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('build')>;
    };
};

export type BetaBuildLocalizationsGetInstanceResponse = (BetaBuildLocalizationResponse);

export type BetaBuildLocalizationsGetInstanceError = (ErrorResponse);

export type BetaBuildLocalizationsUpdateInstanceData = {
    /**
     * BetaBuildLocalization representation
     */
    body: BetaBuildLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaBuildLocalizationsUpdateInstanceResponse = (BetaBuildLocalizationResponse);

export type BetaBuildLocalizationsUpdateInstanceError = (ErrorResponse);

export type BetaBuildLocalizationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaBuildLocalizationsDeleteInstanceResponse = (void);

export type BetaBuildLocalizationsDeleteInstanceError = (ErrorResponse);

export type BetaGroupsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<('name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'app' | 'builds' | 'betaTesters')>;
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<('firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'builds'
         */
        'filter[builds]'?: Array<(string)>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'isInternalGroup'
         */
        'filter[isInternalGroup]'?: Array<(string)>;
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<(string)>;
        /**
         * filter by attribute 'publicLink'
         */
        'filter[publicLink]'?: Array<(string)>;
        /**
         * filter by attribute 'publicLinkEnabled'
         */
        'filter[publicLinkEnabled]'?: Array<(string)>;
        /**
         * filter by attribute 'publicLinkLimitEnabled'
         */
        'filter[publicLinkLimitEnabled]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'builds' | 'betaTesters')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related betaTesters returned (when they are included)
         */
        'limit[betaTesters]'?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('name' | '-name' | 'createdDate' | '-createdDate' | 'publicLinkEnabled' | '-publicLinkEnabled' | 'publicLinkLimit' | '-publicLinkLimit')>;
    };
};

export type BetaGroupsGetCollectionResponse = (BetaGroupsResponse);

export type BetaGroupsGetCollectionError = (ErrorResponse);

export type BetaGroupsCreateInstanceData = {
    /**
     * BetaGroup representation
     */
    body: BetaGroupCreateRequest;
};

export type BetaGroupsCreateInstanceResponse = (BetaGroupResponse);

export type BetaGroupsCreateInstanceError = (ErrorResponse);

export type BetaGroupsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<('name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'app' | 'builds' | 'betaTesters')>;
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<('firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'builds' | 'betaTesters')>;
        /**
         * maximum number of related betaTesters returned (when they are included)
         */
        'limit[betaTesters]'?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
};

export type BetaGroupsGetInstanceResponse = (BetaGroupResponse);

export type BetaGroupsGetInstanceError = (ErrorResponse);

export type BetaGroupsUpdateInstanceData = {
    /**
     * BetaGroup representation
     */
    body: BetaGroupUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaGroupsUpdateInstanceResponse = (BetaGroupResponse);

export type BetaGroupsUpdateInstanceError = (ErrorResponse);

export type BetaGroupsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaGroupsDeleteInstanceResponse = (void);

export type BetaGroupsDeleteInstanceError = (ErrorResponse);

export type BetaLicenseAgreementsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type betaLicenseAgreements
         */
        'fields[betaLicenseAgreements]'?: Array<('agreementText' | 'app')>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BetaLicenseAgreementsGetCollectionResponse = (BetaLicenseAgreementsResponse);

export type BetaLicenseAgreementsGetCollectionError = (ErrorResponse);

export type BetaLicenseAgreementsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type betaLicenseAgreements
         */
        'fields[betaLicenseAgreements]'?: Array<('agreementText' | 'app')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app')>;
    };
};

export type BetaLicenseAgreementsGetInstanceResponse = (BetaLicenseAgreementResponse);

export type BetaLicenseAgreementsGetInstanceError = (ErrorResponse);

export type BetaLicenseAgreementsUpdateInstanceData = {
    /**
     * BetaLicenseAgreement representation
     */
    body: BetaLicenseAgreementUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaLicenseAgreementsUpdateInstanceResponse = (BetaLicenseAgreementResponse);

export type BetaLicenseAgreementsUpdateInstanceError = (ErrorResponse);

export type BetaTesterInvitationsCreateInstanceData = {
    /**
     * BetaTesterInvitation representation
     */
    body: BetaTesterInvitationCreateRequest;
};

export type BetaTesterInvitationsCreateInstanceResponse = (BetaTesterInvitationResponse);

export type BetaTesterInvitationsCreateInstanceError = (ErrorResponse);

export type BetaTestersGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<('name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'app' | 'builds' | 'betaTesters')>;
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<('firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * filter by id(s) of related 'apps'
         */
        'filter[apps]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'betaGroups'
         */
        'filter[betaGroups]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'builds'
         */
        'filter[builds]'?: Array<(string)>;
        /**
         * filter by attribute 'email'
         */
        'filter[email]'?: Array<(string)>;
        /**
         * filter by attribute 'firstName'
         */
        'filter[firstName]'?: Array<(string)>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'inviteType'
         */
        'filter[inviteType]'?: Array<('EMAIL' | 'PUBLIC_LINK')>;
        /**
         * filter by attribute 'lastName'
         */
        'filter[lastName]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('apps' | 'betaGroups' | 'builds')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related apps returned (when they are included)
         */
        'limit[apps]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('firstName' | '-firstName' | 'lastName' | '-lastName' | 'email' | '-email' | 'inviteType' | '-inviteType' | 'state' | '-state')>;
    };
};

export type BetaTestersGetCollectionResponse = (BetaTestersResponse);

export type BetaTestersGetCollectionError = (ErrorResponse);

export type BetaTestersCreateInstanceData = {
    /**
     * BetaTester representation
     */
    body: BetaTesterCreateRequest;
};

export type BetaTestersCreateInstanceResponse = (BetaTesterResponse);

export type BetaTestersCreateInstanceError = (ErrorResponse);

export type BetaTestersGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<('name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'app' | 'builds' | 'betaTesters')>;
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<('firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('apps' | 'betaGroups' | 'builds')>;
        /**
         * maximum number of related apps returned (when they are included)
         */
        'limit[apps]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
};

export type BetaTestersGetInstanceResponse = (BetaTesterResponse);

export type BetaTestersGetInstanceError = (ErrorResponse);

export type BetaTestersDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaTestersDeleteInstanceResponse = (unknown | void);

export type BetaTestersDeleteInstanceError = (ErrorResponse);

export type BuildBetaDetailsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type buildBetaDetails
         */
        'fields[buildBetaDetails]'?: Array<('autoNotifyEnabled' | 'internalBuildState' | 'externalBuildState' | 'build')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * filter by id(s) of related 'build'
         */
        'filter[build]'?: Array<(string)>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('build')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BuildBetaDetailsGetCollectionResponse = (BuildBetaDetailsResponse);

export type BuildBetaDetailsGetCollectionError = (ErrorResponse);

export type BuildBetaDetailsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type buildBetaDetails
         */
        'fields[buildBetaDetails]'?: Array<('autoNotifyEnabled' | 'internalBuildState' | 'externalBuildState' | 'build')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('build')>;
    };
};

export type BuildBetaDetailsGetInstanceResponse = (BuildBetaDetailResponse);

export type BuildBetaDetailsGetInstanceError = (ErrorResponse);

export type BuildBetaDetailsUpdateInstanceData = {
    /**
     * BuildBetaDetail representation
     */
    body: BuildBetaDetailUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BuildBetaDetailsUpdateInstanceResponse = (BuildBetaDetailResponse);

export type BuildBetaDetailsUpdateInstanceError = (ErrorResponse);

export type BuildBetaNotificationsCreateInstanceData = {
    /**
     * BuildBetaNotification representation
     */
    body: BuildBetaNotificationCreateRequest;
};

export type BuildBetaNotificationsCreateInstanceResponse = (BuildBetaNotificationResponse);

export type BuildBetaNotificationsCreateInstanceError = (ErrorResponse);

export type BuildsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<('appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type betaAppReviewSubmissions
         */
        'fields[betaAppReviewSubmissions]'?: Array<('betaReviewState' | 'submittedDate' | 'build')>;
        /**
         * the fields to include for returned resources of type betaBuildLocalizations
         */
        'fields[betaBuildLocalizations]'?: Array<('whatsNew' | 'locale' | 'build')>;
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<('firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds')>;
        /**
         * the fields to include for returned resources of type buildBetaDetails
         */
        'fields[buildBetaDetails]'?: Array<('autoNotifyEnabled' | 'internalBuildState' | 'externalBuildState' | 'build')>;
        /**
         * the fields to include for returned resources of type buildIcons
         */
        'fields[buildIcons]'?: Array<('name' | 'iconAsset' | 'iconType')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<('version' | 'platform' | 'builds' | 'app')>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'appStoreVersion'
         */
        'filter[appStoreVersion]'?: Array<(string)>;
        /**
         * filter by attribute 'betaAppReviewSubmission.betaReviewState'
         */
        'filter[betaAppReviewSubmission.betaReviewState]'?: Array<('WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'APPROVED')>;
        /**
         * filter by id(s) of related 'betaGroups'
         */
        'filter[betaGroups]'?: Array<(string)>;
        /**
         * filter by attribute 'buildAudienceType'
         */
        'filter[buildAudienceType]'?: Array<('INTERNAL_ONLY' | 'APP_STORE_ELIGIBLE')>;
        /**
         * filter by attribute 'expired'
         */
        'filter[expired]'?: Array<(string)>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'preReleaseVersion.platform'
         */
        'filter[preReleaseVersion.platform]'?: Array<('IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS')>;
        /**
         * filter by attribute 'preReleaseVersion.version'
         */
        'filter[preReleaseVersion.version]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'preReleaseVersion'
         */
        'filter[preReleaseVersion]'?: Array<(string)>;
        /**
         * filter by attribute 'processingState'
         */
        'filter[processingState]'?: Array<('PROCESSING' | 'FAILED' | 'INVALID' | 'VALID')>;
        /**
         * filter by attribute 'usesNonExemptEncryption'
         */
        'filter[usesNonExemptEncryption]'?: Array<(string)>;
        /**
         * filter by attribute 'version'
         */
        'filter[version]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related betaBuildLocalizations returned (when they are included)
         */
        'limit[betaBuildLocalizations]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related buildBundles returned (when they are included)
         */
        'limit[buildBundles]'?: number;
        /**
         * maximum number of related icons returned (when they are included)
         */
        'limit[icons]'?: number;
        /**
         * maximum number of related individualTesters returned (when they are included)
         */
        'limit[individualTesters]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('version' | '-version' | 'uploadedDate' | '-uploadedDate' | 'preReleaseVersion' | '-preReleaseVersion')>;
    };
};

export type BuildsGetCollectionResponse = (BuildsResponse);

export type BuildsGetCollectionError = (ErrorResponse);

export type BuildsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<('appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type betaAppReviewSubmissions
         */
        'fields[betaAppReviewSubmissions]'?: Array<('betaReviewState' | 'submittedDate' | 'build')>;
        /**
         * the fields to include for returned resources of type betaBuildLocalizations
         */
        'fields[betaBuildLocalizations]'?: Array<('whatsNew' | 'locale' | 'build')>;
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<('firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds')>;
        /**
         * the fields to include for returned resources of type buildBetaDetails
         */
        'fields[buildBetaDetails]'?: Array<('autoNotifyEnabled' | 'internalBuildState' | 'externalBuildState' | 'build')>;
        /**
         * the fields to include for returned resources of type buildIcons
         */
        'fields[buildIcons]'?: Array<('name' | 'iconAsset' | 'iconType')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<('version' | 'platform' | 'builds' | 'app')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles')>;
        /**
         * maximum number of related betaBuildLocalizations returned (when they are included)
         */
        'limit[betaBuildLocalizations]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related buildBundles returned (when they are included)
         */
        'limit[buildBundles]'?: number;
        /**
         * maximum number of related icons returned (when they are included)
         */
        'limit[icons]'?: number;
        /**
         * maximum number of related individualTesters returned (when they are included)
         */
        'limit[individualTesters]'?: number;
    };
};

export type BuildsGetInstanceResponse = (BuildResponse);

export type BuildsGetInstanceError = (ErrorResponse);

export type BuildsUpdateInstanceData = {
    /**
     * Build representation
     */
    body: BuildUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BuildsUpdateInstanceResponse = (BuildResponse);

export type BuildsUpdateInstanceError = (ErrorResponse);

export type BundleIdCapabilitiesCreateInstanceData = {
    /**
     * BundleIdCapability representation
     */
    body: BundleIdCapabilityCreateRequest;
};

export type BundleIdCapabilitiesCreateInstanceResponse = (BundleIdCapabilityResponse);

export type BundleIdCapabilitiesCreateInstanceError = (ErrorResponse);

export type BundleIdCapabilitiesUpdateInstanceData = {
    /**
     * BundleIdCapability representation
     */
    body: BundleIdCapabilityUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BundleIdCapabilitiesUpdateInstanceResponse = (BundleIdCapabilityResponse);

export type BundleIdCapabilitiesUpdateInstanceError = (ErrorResponse);

export type BundleIdCapabilitiesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BundleIdCapabilitiesDeleteInstanceResponse = (void);

export type BundleIdCapabilitiesDeleteInstanceError = (ErrorResponse);

export type BundleIdsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type bundleIdCapabilities
         */
        'fields[bundleIdCapabilities]'?: Array<('capabilityType' | 'settings' | 'bundleId')>;
        /**
         * the fields to include for returned resources of type bundleIds
         */
        'fields[bundleIds]'?: Array<('name' | 'platform' | 'identifier' | 'seedId' | 'profiles' | 'bundleIdCapabilities' | 'app')>;
        /**
         * the fields to include for returned resources of type profiles
         */
        'fields[profiles]'?: Array<('name' | 'platform' | 'profileType' | 'profileState' | 'profileContent' | 'uuid' | 'createdDate' | 'expirationDate' | 'bundleId' | 'devices' | 'certificates')>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'identifier'
         */
        'filter[identifier]'?: Array<(string)>;
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<(string)>;
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<('IOS' | 'MAC_OS')>;
        /**
         * filter by attribute 'seedId'
         */
        'filter[seedId]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('profiles' | 'bundleIdCapabilities' | 'app')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related bundleIdCapabilities returned (when they are included)
         */
        'limit[bundleIdCapabilities]'?: number;
        /**
         * maximum number of related profiles returned (when they are included)
         */
        'limit[profiles]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('name' | '-name' | 'platform' | '-platform' | 'identifier' | '-identifier' | 'seedId' | '-seedId' | 'id' | '-id')>;
    };
};

export type BundleIdsGetCollectionResponse = (BundleIdsResponse);

export type BundleIdsGetCollectionError = (ErrorResponse);

export type BundleIdsCreateInstanceData = {
    /**
     * BundleId representation
     */
    body: BundleIdCreateRequest;
};

export type BundleIdsCreateInstanceResponse = (BundleIdResponse);

export type BundleIdsCreateInstanceError = (ErrorResponse);

export type BundleIdsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type bundleIdCapabilities
         */
        'fields[bundleIdCapabilities]'?: Array<('capabilityType' | 'settings' | 'bundleId')>;
        /**
         * the fields to include for returned resources of type bundleIds
         */
        'fields[bundleIds]'?: Array<('name' | 'platform' | 'identifier' | 'seedId' | 'profiles' | 'bundleIdCapabilities' | 'app')>;
        /**
         * the fields to include for returned resources of type profiles
         */
        'fields[profiles]'?: Array<('name' | 'platform' | 'profileType' | 'profileState' | 'profileContent' | 'uuid' | 'createdDate' | 'expirationDate' | 'bundleId' | 'devices' | 'certificates')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('profiles' | 'bundleIdCapabilities' | 'app')>;
        /**
         * maximum number of related bundleIdCapabilities returned (when they are included)
         */
        'limit[bundleIdCapabilities]'?: number;
        /**
         * maximum number of related profiles returned (when they are included)
         */
        'limit[profiles]'?: number;
    };
};

export type BundleIdsGetInstanceResponse = (BundleIdResponse);

export type BundleIdsGetInstanceError = (ErrorResponse);

export type BundleIdsUpdateInstanceData = {
    /**
     * BundleId representation
     */
    body: BundleIdUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BundleIdsUpdateInstanceResponse = (BundleIdResponse);

export type BundleIdsUpdateInstanceError = (ErrorResponse);

export type BundleIdsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BundleIdsDeleteInstanceResponse = (void);

export type BundleIdsDeleteInstanceError = (ErrorResponse);

export type CertificatesGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type certificates
         */
        'fields[certificates]'?: Array<('name' | 'csrContent' | 'certificateType' | 'displayName' | 'serialNumber' | 'platform' | 'expirationDate' | 'certificateContent')>;
        /**
         * filter by attribute 'certificateType'
         */
        'filter[certificateType]'?: Array<('IOS_DEVELOPMENT' | 'IOS_DISTRIBUTION' | 'MAC_APP_DISTRIBUTION' | 'MAC_INSTALLER_DISTRIBUTION' | 'MAC_APP_DEVELOPMENT' | 'DEVELOPER_ID_KEXT' | 'DEVELOPER_ID_APPLICATION' | 'DEVELOPMENT' | 'DISTRIBUTION' | 'PASS_TYPE_ID' | 'PASS_TYPE_ID_WITH_NFC')>;
        /**
         * filter by attribute 'displayName'
         */
        'filter[displayName]'?: Array<(string)>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'serialNumber'
         */
        'filter[serialNumber]'?: Array<(string)>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('displayName' | '-displayName' | 'certificateType' | '-certificateType' | 'serialNumber' | '-serialNumber' | 'id' | '-id')>;
    };
};

export type CertificatesGetCollectionResponse = (CertificatesResponse);

export type CertificatesGetCollectionError = (ErrorResponse);

export type CertificatesCreateInstanceData = {
    /**
     * Certificate representation
     */
    body: CertificateCreateRequest;
};

export type CertificatesCreateInstanceResponse = (CertificateResponse);

export type CertificatesCreateInstanceError = (ErrorResponse);

export type CertificatesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type certificates
         */
        'fields[certificates]'?: Array<('name' | 'csrContent' | 'certificateType' | 'displayName' | 'serialNumber' | 'platform' | 'expirationDate' | 'certificateContent')>;
    };
};

export type CertificatesGetInstanceResponse = (CertificateResponse);

export type CertificatesGetInstanceError = (ErrorResponse);

export type CertificatesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type CertificatesDeleteInstanceResponse = (void);

export type CertificatesDeleteInstanceError = (ErrorResponse);

export type CiArtifactsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciArtifacts
         */
        'fields[ciArtifacts]'?: Array<('fileType' | 'fileName' | 'fileSize' | 'downloadUrl')>;
    };
};

export type CiArtifactsGetInstanceResponse = (CiArtifactResponse);

export type CiArtifactsGetInstanceError = (ErrorResponse);

export type CiBuildActionsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciBuildActions
         */
        'fields[ciBuildActions]'?: Array<('name' | 'actionType' | 'startedDate' | 'finishedDate' | 'issueCounts' | 'executionProgress' | 'completionStatus' | 'isRequiredToPass' | 'buildRun' | 'artifacts' | 'issues' | 'testResults')>;
        /**
         * the fields to include for returned resources of type ciBuildRuns
         */
        'fields[ciBuildRuns]'?: Array<('clean' | 'number' | 'createdDate' | 'startedDate' | 'finishedDate' | 'sourceCommit' | 'destinationCommit' | 'isPullRequestBuild' | 'issueCounts' | 'executionProgress' | 'completionStatus' | 'startReason' | 'cancelReason' | 'buildRun' | 'builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'actions' | 'pullRequest')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('buildRun')>;
    };
};

export type CiBuildActionsGetInstanceResponse = (CiBuildActionResponse);

export type CiBuildActionsGetInstanceError = (ErrorResponse);

export type CiBuildRunsCreateInstanceData = {
    /**
     * CiBuildRun representation
     */
    body: CiBuildRunCreateRequest;
};

export type CiBuildRunsCreateInstanceResponse = (CiBuildRunResponse);

export type CiBuildRunsCreateInstanceError = (ErrorResponse);

export type CiBuildRunsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type ciBuildRuns
         */
        'fields[ciBuildRuns]'?: Array<('clean' | 'number' | 'createdDate' | 'startedDate' | 'finishedDate' | 'sourceCommit' | 'destinationCommit' | 'isPullRequestBuild' | 'issueCounts' | 'executionProgress' | 'completionStatus' | 'startReason' | 'cancelReason' | 'buildRun' | 'builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'actions' | 'pullRequest')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'pullRequest')>;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
};

export type CiBuildRunsGetInstanceResponse = (CiBuildRunResponse);

export type CiBuildRunsGetInstanceError = (ErrorResponse);

export type CiIssuesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciIssues
         */
        'fields[ciIssues]'?: Array<('issueType' | 'message' | 'fileSource' | 'category')>;
    };
};

export type CiIssuesGetInstanceResponse = (CiIssueResponse);

export type CiIssuesGetInstanceError = (ErrorResponse);

export type CiMacOsVersionsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type ciMacOsVersions
         */
        'fields[ciMacOsVersions]'?: Array<('version' | 'name' | 'xcodeVersions')>;
        /**
         * the fields to include for returned resources of type ciXcodeVersions
         */
        'fields[ciXcodeVersions]'?: Array<('version' | 'name' | 'testDestinations' | 'macOsVersions')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('xcodeVersions')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related xcodeVersions returned (when they are included)
         */
        'limit[xcodeVersions]'?: number;
    };
};

export type CiMacOsVersionsGetCollectionResponse = (CiMacOsVersionsResponse);

export type CiMacOsVersionsGetCollectionError = (ErrorResponse);

export type CiMacOsVersionsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciMacOsVersions
         */
        'fields[ciMacOsVersions]'?: Array<('version' | 'name' | 'xcodeVersions')>;
        /**
         * the fields to include for returned resources of type ciXcodeVersions
         */
        'fields[ciXcodeVersions]'?: Array<('version' | 'name' | 'testDestinations' | 'macOsVersions')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('xcodeVersions')>;
        /**
         * maximum number of related xcodeVersions returned (when they are included)
         */
        'limit[xcodeVersions]'?: number;
    };
};

export type CiMacOsVersionsGetInstanceResponse = (CiMacOsVersionResponse);

export type CiMacOsVersionsGetInstanceError = (ErrorResponse);

export type CiProductsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<('name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns')>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<('lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests')>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<(string)>;
        /**
         * filter by attribute 'productType'
         */
        'filter[productType]'?: Array<('APP' | 'FRAMEWORK')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'bundleId' | 'primaryRepositories')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related primaryRepositories returned (when they are included)
         */
        'limit[primaryRepositories]'?: number;
    };
};

export type CiProductsGetCollectionResponse = (CiProductsResponse);

export type CiProductsGetCollectionError = (ErrorResponse);

export type CiProductsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<('name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns')>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<('lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'bundleId' | 'primaryRepositories')>;
        /**
         * maximum number of related primaryRepositories returned (when they are included)
         */
        'limit[primaryRepositories]'?: number;
    };
};

export type CiProductsGetInstanceResponse = (CiProductResponse);

export type CiProductsGetInstanceError = (ErrorResponse);

export type CiProductsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type CiProductsDeleteInstanceResponse = (void);

export type CiProductsDeleteInstanceError = (ErrorResponse);

export type CiTestResultsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciTestResults
         */
        'fields[ciTestResults]'?: Array<('className' | 'name' | 'status' | 'fileSource' | 'message' | 'destinationTestResults')>;
    };
};

export type CiTestResultsGetInstanceResponse = (CiTestResultResponse);

export type CiTestResultsGetInstanceError = (ErrorResponse);

export type CiWorkflowsCreateInstanceData = {
    /**
     * CiWorkflow representation
     */
    body: CiWorkflowCreateRequest;
};

export type CiWorkflowsCreateInstanceResponse = (CiWorkflowResponse);

export type CiWorkflowsCreateInstanceError = (ErrorResponse);

export type CiWorkflowsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciWorkflows
         */
        'fields[ciWorkflows]'?: Array<('name' | 'description' | 'branchStartCondition' | 'tagStartCondition' | 'pullRequestStartCondition' | 'scheduledStartCondition' | 'manualBranchStartCondition' | 'manualTagStartCondition' | 'manualPullRequestStartCondition' | 'actions' | 'isEnabled' | 'isLockedForEditing' | 'clean' | 'containerFilePath' | 'lastModifiedDate' | 'product' | 'repository' | 'xcodeVersion' | 'macOsVersion' | 'buildRuns')>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<('lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('product' | 'repository' | 'xcodeVersion' | 'macOsVersion')>;
    };
};

export type CiWorkflowsGetInstanceResponse = (CiWorkflowResponse);

export type CiWorkflowsGetInstanceError = (ErrorResponse);

export type CiWorkflowsUpdateInstanceData = {
    /**
     * CiWorkflow representation
     */
    body: CiWorkflowUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type CiWorkflowsUpdateInstanceResponse = (CiWorkflowResponse);

export type CiWorkflowsUpdateInstanceError = (ErrorResponse);

export type CiWorkflowsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type CiWorkflowsDeleteInstanceResponse = (void);

export type CiWorkflowsDeleteInstanceError = (ErrorResponse);

export type CiXcodeVersionsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type ciMacOsVersions
         */
        'fields[ciMacOsVersions]'?: Array<('version' | 'name' | 'xcodeVersions')>;
        /**
         * the fields to include for returned resources of type ciXcodeVersions
         */
        'fields[ciXcodeVersions]'?: Array<('version' | 'name' | 'testDestinations' | 'macOsVersions')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('macOsVersions')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related macOsVersions returned (when they are included)
         */
        'limit[macOsVersions]'?: number;
    };
};

export type CiXcodeVersionsGetCollectionResponse = (CiXcodeVersionsResponse);

export type CiXcodeVersionsGetCollectionError = (ErrorResponse);

export type CiXcodeVersionsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciMacOsVersions
         */
        'fields[ciMacOsVersions]'?: Array<('version' | 'name' | 'xcodeVersions')>;
        /**
         * the fields to include for returned resources of type ciXcodeVersions
         */
        'fields[ciXcodeVersions]'?: Array<('version' | 'name' | 'testDestinations' | 'macOsVersions')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('macOsVersions')>;
        /**
         * maximum number of related macOsVersions returned (when they are included)
         */
        'limit[macOsVersions]'?: number;
    };
};

export type CiXcodeVersionsGetInstanceResponse = (CiXcodeVersionResponse);

export type CiXcodeVersionsGetInstanceError = (ErrorResponse);

export type CustomerReviewResponsesCreateInstanceData = {
    /**
     * CustomerReviewResponse representation
     */
    body: CustomerReviewResponseV1CreateRequest;
};

export type CustomerReviewResponsesCreateInstanceResponse = (CustomerReviewResponseV1Response);

export type CustomerReviewResponsesCreateInstanceError = (ErrorResponse);

export type CustomerReviewResponsesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type customerReviewResponses
         */
        'fields[customerReviewResponses]'?: Array<('responseBody' | 'lastModifiedDate' | 'state' | 'review')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('review')>;
    };
};

export type CustomerReviewResponsesGetInstanceResponse = (CustomerReviewResponseV1Response);

export type CustomerReviewResponsesGetInstanceError = (ErrorResponse);

export type CustomerReviewResponsesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type CustomerReviewResponsesDeleteInstanceResponse = (void);

export type CustomerReviewResponsesDeleteInstanceError = (ErrorResponse);

export type CustomerReviewsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type customerReviewResponses
         */
        'fields[customerReviewResponses]'?: Array<('responseBody' | 'lastModifiedDate' | 'state' | 'review')>;
        /**
         * the fields to include for returned resources of type customerReviews
         */
        'fields[customerReviews]'?: Array<('rating' | 'title' | 'body' | 'reviewerNickname' | 'createdDate' | 'territory' | 'response')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('response')>;
    };
};

export type CustomerReviewsGetInstanceResponse = (CustomerReviewResponse);

export type CustomerReviewsGetInstanceError = (ErrorResponse);

export type DevicesGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type devices
         */
        'fields[devices]'?: Array<('name' | 'platform' | 'udid' | 'deviceClass' | 'status' | 'model' | 'addedDate')>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<(string)>;
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<('IOS' | 'MAC_OS')>;
        /**
         * filter by attribute 'status'
         */
        'filter[status]'?: Array<('ENABLED' | 'DISABLED')>;
        /**
         * filter by attribute 'udid'
         */
        'filter[udid]'?: Array<(string)>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('name' | '-name' | 'platform' | '-platform' | 'udid' | '-udid' | 'status' | '-status' | 'id' | '-id')>;
    };
};

export type DevicesGetCollectionResponse = (DevicesResponse);

export type DevicesGetCollectionError = (ErrorResponse);

export type DevicesCreateInstanceData = {
    /**
     * Device representation
     */
    body: DeviceCreateRequest;
};

export type DevicesCreateInstanceResponse = (DeviceResponse);

export type DevicesCreateInstanceError = (ErrorResponse);

export type DevicesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type devices
         */
        'fields[devices]'?: Array<('name' | 'platform' | 'udid' | 'deviceClass' | 'status' | 'model' | 'addedDate')>;
    };
};

export type DevicesGetInstanceResponse = (DeviceResponse);

export type DevicesGetInstanceError = (ErrorResponse);

export type DevicesUpdateInstanceData = {
    /**
     * Device representation
     */
    body: DeviceUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type DevicesUpdateInstanceResponse = (DeviceResponse);

export type DevicesUpdateInstanceError = (ErrorResponse);

export type EndAppAvailabilityPreOrdersCreateInstanceData = {
    /**
     * EndAppAvailabilityPreOrder representation
     */
    body: EndAppAvailabilityPreOrderCreateRequest;
};

export type EndAppAvailabilityPreOrdersCreateInstanceResponse = (EndAppAvailabilityPreOrderResponse);

export type EndAppAvailabilityPreOrdersCreateInstanceError = (ErrorResponse);

export type EndUserLicenseAgreementsCreateInstanceData = {
    /**
     * EndUserLicenseAgreement representation
     */
    body: EndUserLicenseAgreementCreateRequest;
};

export type EndUserLicenseAgreementsCreateInstanceResponse = (EndUserLicenseAgreementResponse);

export type EndUserLicenseAgreementsCreateInstanceError = (ErrorResponse);

export type EndUserLicenseAgreementsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type endUserLicenseAgreements
         */
        'fields[endUserLicenseAgreements]'?: Array<('agreementText' | 'app' | 'territories')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'territories')>;
        /**
         * maximum number of related territories returned (when they are included)
         */
        'limit[territories]'?: number;
    };
};

export type EndUserLicenseAgreementsGetInstanceResponse = (EndUserLicenseAgreementResponse);

export type EndUserLicenseAgreementsGetInstanceError = (ErrorResponse);

export type EndUserLicenseAgreementsUpdateInstanceData = {
    /**
     * EndUserLicenseAgreement representation
     */
    body: EndUserLicenseAgreementUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type EndUserLicenseAgreementsUpdateInstanceResponse = (EndUserLicenseAgreementResponse);

export type EndUserLicenseAgreementsUpdateInstanceError = (ErrorResponse);

export type EndUserLicenseAgreementsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type EndUserLicenseAgreementsDeleteInstanceResponse = (void);

export type EndUserLicenseAgreementsDeleteInstanceError = (ErrorResponse);

export type FinanceReportsGetCollectionData = {
    query: {
        /**
         * filter by attribute 'regionCode'
         */
        'filter[regionCode]': Array<(string)>;
        /**
         * filter by attribute 'reportDate'
         */
        'filter[reportDate]': Array<(string)>;
        /**
         * filter by attribute 'reportType'
         */
        'filter[reportType]': Array<('FINANCIAL' | 'FINANCE_DETAIL')>;
        /**
         * filter by attribute 'vendorNumber'
         */
        'filter[vendorNumber]': Array<(string)>;
    };
};

export type FinanceReportsGetCollectionResponse = (gzip);

export type FinanceReportsGetCollectionError = (ErrorResponse);

export type GameCenterAchievementImagesCreateInstanceData = {
    /**
     * GameCenterAchievementImage representation
     */
    body: GameCenterAchievementImageCreateRequest;
};

export type GameCenterAchievementImagesCreateInstanceResponse = (GameCenterAchievementImageResponse);

export type GameCenterAchievementImagesCreateInstanceError = (ErrorResponse);

export type GameCenterAchievementImagesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementImages
         */
        'fields[gameCenterAchievementImages]'?: Array<('fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'gameCenterAchievementLocalization')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterAchievementLocalization')>;
    };
};

export type GameCenterAchievementImagesGetInstanceResponse = (GameCenterAchievementImageResponse);

export type GameCenterAchievementImagesGetInstanceError = (ErrorResponse);

export type GameCenterAchievementImagesUpdateInstanceData = {
    /**
     * GameCenterAchievementImage representation
     */
    body: GameCenterAchievementImageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterAchievementImagesUpdateInstanceResponse = (GameCenterAchievementImageResponse);

export type GameCenterAchievementImagesUpdateInstanceError = (ErrorResponse);

export type GameCenterAchievementImagesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterAchievementImagesDeleteInstanceResponse = (void);

export type GameCenterAchievementImagesDeleteInstanceError = (ErrorResponse);

export type GameCenterAchievementLocalizationsCreateInstanceData = {
    /**
     * GameCenterAchievementLocalization representation
     */
    body: GameCenterAchievementLocalizationCreateRequest;
};

export type GameCenterAchievementLocalizationsCreateInstanceResponse = (GameCenterAchievementLocalizationResponse);

export type GameCenterAchievementLocalizationsCreateInstanceError = (ErrorResponse);

export type GameCenterAchievementLocalizationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementImages
         */
        'fields[gameCenterAchievementImages]'?: Array<('fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'gameCenterAchievementLocalization')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementLocalizations
         */
        'fields[gameCenterAchievementLocalizations]'?: Array<('locale' | 'name' | 'beforeEarnedDescription' | 'afterEarnedDescription' | 'gameCenterAchievement' | 'gameCenterAchievementImage')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<('referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterAchievement' | 'gameCenterAchievementImage')>;
    };
};

export type GameCenterAchievementLocalizationsGetInstanceResponse = (GameCenterAchievementLocalizationResponse);

export type GameCenterAchievementLocalizationsGetInstanceError = (ErrorResponse);

export type GameCenterAchievementLocalizationsUpdateInstanceData = {
    /**
     * GameCenterAchievementLocalization representation
     */
    body: GameCenterAchievementLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterAchievementLocalizationsUpdateInstanceResponse = (GameCenterAchievementLocalizationResponse);

export type GameCenterAchievementLocalizationsUpdateInstanceError = (ErrorResponse);

export type GameCenterAchievementLocalizationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterAchievementLocalizationsDeleteInstanceResponse = (void);

export type GameCenterAchievementLocalizationsDeleteInstanceError = (ErrorResponse);

export type GameCenterAchievementReleasesCreateInstanceData = {
    /**
     * GameCenterAchievementRelease representation
     */
    body: GameCenterAchievementReleaseCreateRequest;
};

export type GameCenterAchievementReleasesCreateInstanceResponse = (GameCenterAchievementReleaseResponse);

export type GameCenterAchievementReleasesCreateInstanceError = (ErrorResponse);

export type GameCenterAchievementReleasesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterAchievement')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterAchievement')>;
    };
};

export type GameCenterAchievementReleasesGetInstanceResponse = (GameCenterAchievementReleaseResponse);

export type GameCenterAchievementReleasesGetInstanceError = (ErrorResponse);

export type GameCenterAchievementReleasesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterAchievementReleasesDeleteInstanceResponse = (void);

export type GameCenterAchievementReleasesDeleteInstanceError = (ErrorResponse);

export type GameCenterAchievementsCreateInstanceData = {
    /**
     * GameCenterAchievement representation
     */
    body: GameCenterAchievementCreateRequest;
};

export type GameCenterAchievementsCreateInstanceResponse = (GameCenterAchievementResponse);

export type GameCenterAchievementsCreateInstanceError = (ErrorResponse);

export type GameCenterAchievementsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementLocalizations
         */
        'fields[gameCenterAchievementLocalizations]'?: Array<('locale' | 'name' | 'beforeEarnedDescription' | 'afterEarnedDescription' | 'gameCenterAchievement' | 'gameCenterAchievementImage')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterAchievement')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<('referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
};

export type GameCenterAchievementsGetInstanceResponse = (GameCenterAchievementResponse);

export type GameCenterAchievementsGetInstanceError = (ErrorResponse);

export type GameCenterAchievementsUpdateInstanceData = {
    /**
     * GameCenterAchievement representation
     */
    body: GameCenterAchievementUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterAchievementsUpdateInstanceResponse = (GameCenterAchievementResponse);

export type GameCenterAchievementsUpdateInstanceError = (ErrorResponse);

export type GameCenterAchievementsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterAchievementsDeleteInstanceResponse = (void);

export type GameCenterAchievementsDeleteInstanceError = (ErrorResponse);

export type GameCenterAppVersionsCreateInstanceData = {
    /**
     * GameCenterAppVersion representation
     */
    body: GameCenterAppVersionCreateRequest;
};

export type GameCenterAppVersionsCreateInstanceResponse = (GameCenterAppVersionResponse);

export type GameCenterAppVersionsCreateInstanceError = (ErrorResponse);

export type GameCenterAppVersionsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<('enabled' | 'compatibilityVersions' | 'appStoreVersion')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('compatibilityVersions' | 'appStoreVersion')>;
        /**
         * maximum number of related compatibilityVersions returned (when they are included)
         */
        'limit[compatibilityVersions]'?: number;
    };
};

export type GameCenterAppVersionsGetInstanceResponse = (GameCenterAppVersionResponse);

export type GameCenterAppVersionsGetInstanceError = (ErrorResponse);

export type GameCenterAppVersionsUpdateInstanceData = {
    /**
     * GameCenterAppVersion representation
     */
    body: GameCenterAppVersionUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterAppVersionsUpdateInstanceResponse = (GameCenterAppVersionResponse);

export type GameCenterAppVersionsUpdateInstanceError = (ErrorResponse);

export type GameCenterDetailsCreateInstanceData = {
    /**
     * GameCenterDetail representation
     */
    body: GameCenterDetailCreateRequest;
};

export type GameCenterDetailsCreateInstanceResponse = (GameCenterDetailResponse);

export type GameCenterDetailsCreateInstanceError = (ErrorResponse);

export type GameCenterDetailsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterAchievement')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<('referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<('enabled' | 'compatibilityVersions' | 'appStoreVersion')>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboard')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * maximum number of related achievementReleases returned (when they are included)
         */
        'limit[achievementReleases]'?: number;
        /**
         * maximum number of related gameCenterAchievements returned (when they are included)
         */
        'limit[gameCenterAchievements]'?: number;
        /**
         * maximum number of related gameCenterAppVersions returned (when they are included)
         */
        'limit[gameCenterAppVersions]'?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related leaderboardReleases returned (when they are included)
         */
        'limit[leaderboardReleases]'?: number;
        /**
         * maximum number of related leaderboardSetReleases returned (when they are included)
         */
        'limit[leaderboardSetReleases]'?: number;
    };
};

export type GameCenterDetailsGetInstanceResponse = (GameCenterDetailResponse);

export type GameCenterDetailsGetInstanceError = (ErrorResponse);

export type GameCenterDetailsUpdateInstanceData = {
    /**
     * GameCenterDetail representation
     */
    body: GameCenterDetailUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterDetailsUpdateInstanceResponse = (GameCenterDetailResponse);

export type GameCenterDetailsUpdateInstanceError = (ErrorResponse);

export type GameCenterGroupsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<('referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * filter by id(s) of related 'gameCenterDetails'
         */
        'filter[gameCenterDetails]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related gameCenterAchievements returned (when they are included)
         */
        'limit[gameCenterAchievements]'?: number;
        /**
         * maximum number of related gameCenterDetails returned (when they are included)
         */
        'limit[gameCenterDetails]'?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
    };
};

export type GameCenterGroupsGetCollectionResponse = (GameCenterGroupsResponse);

export type GameCenterGroupsGetCollectionError = (ErrorResponse);

export type GameCenterGroupsCreateInstanceData = {
    /**
     * GameCenterGroup representation
     */
    body: GameCenterGroupCreateRequest;
};

export type GameCenterGroupsCreateInstanceResponse = (GameCenterGroupResponse);

export type GameCenterGroupsCreateInstanceError = (ErrorResponse);

export type GameCenterGroupsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<('referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * maximum number of related gameCenterAchievements returned (when they are included)
         */
        'limit[gameCenterAchievements]'?: number;
        /**
         * maximum number of related gameCenterDetails returned (when they are included)
         */
        'limit[gameCenterDetails]'?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
    };
};

export type GameCenterGroupsGetInstanceResponse = (GameCenterGroupResponse);

export type GameCenterGroupsGetInstanceError = (ErrorResponse);

export type GameCenterGroupsUpdateInstanceData = {
    /**
     * GameCenterGroup representation
     */
    body: GameCenterGroupUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterGroupsUpdateInstanceResponse = (GameCenterGroupResponse);

export type GameCenterGroupsUpdateInstanceError = (ErrorResponse);

export type GameCenterGroupsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterGroupsDeleteInstanceResponse = (void);

export type GameCenterGroupsDeleteInstanceError = (ErrorResponse);

export type GameCenterLeaderboardEntrySubmissionsCreateInstanceData = {
    /**
     * GameCenterLeaderboardEntrySubmission representation
     */
    body: GameCenterLeaderboardEntrySubmissionCreateRequest;
};

export type GameCenterLeaderboardEntrySubmissionsCreateInstanceResponse = (GameCenterLeaderboardEntrySubmissionResponse);

export type GameCenterLeaderboardEntrySubmissionsCreateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardImagesCreateInstanceData = {
    /**
     * GameCenterLeaderboardImage representation
     */
    body: GameCenterLeaderboardImageCreateRequest;
};

export type GameCenterLeaderboardImagesCreateInstanceResponse = (GameCenterLeaderboardImageResponse);

export type GameCenterLeaderboardImagesCreateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardImagesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardImages
         */
        'fields[gameCenterLeaderboardImages]'?: Array<('fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'gameCenterLeaderboardLocalization')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterLeaderboardLocalization')>;
    };
};

export type GameCenterLeaderboardImagesGetInstanceResponse = (GameCenterLeaderboardImageResponse);

export type GameCenterLeaderboardImagesGetInstanceError = (ErrorResponse);

export type GameCenterLeaderboardImagesUpdateInstanceData = {
    /**
     * GameCenterLeaderboardImage representation
     */
    body: GameCenterLeaderboardImageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardImagesUpdateInstanceResponse = (GameCenterLeaderboardImageResponse);

export type GameCenterLeaderboardImagesUpdateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardImagesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardImagesDeleteInstanceResponse = (void);

export type GameCenterLeaderboardImagesDeleteInstanceError = (ErrorResponse);

export type GameCenterLeaderboardLocalizationsCreateInstanceData = {
    /**
     * GameCenterLeaderboardLocalization representation
     */
    body: GameCenterLeaderboardLocalizationCreateRequest;
};

export type GameCenterLeaderboardLocalizationsCreateInstanceResponse = (GameCenterLeaderboardLocalizationResponse);

export type GameCenterLeaderboardLocalizationsCreateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardLocalizationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardImages
         */
        'fields[gameCenterLeaderboardImages]'?: Array<('fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'gameCenterLeaderboardLocalization')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<('locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterLeaderboard' | 'gameCenterLeaderboardImage')>;
    };
};

export type GameCenterLeaderboardLocalizationsGetInstanceResponse = (GameCenterLeaderboardLocalizationResponse);

export type GameCenterLeaderboardLocalizationsGetInstanceError = (ErrorResponse);

export type GameCenterLeaderboardLocalizationsUpdateInstanceData = {
    /**
     * GameCenterLeaderboardLocalization representation
     */
    body: GameCenterLeaderboardLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardLocalizationsUpdateInstanceResponse = (GameCenterLeaderboardLocalizationResponse);

export type GameCenterLeaderboardLocalizationsUpdateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardLocalizationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardLocalizationsDeleteInstanceResponse = (void);

export type GameCenterLeaderboardLocalizationsDeleteInstanceError = (ErrorResponse);

export type GameCenterLeaderboardReleasesCreateInstanceData = {
    /**
     * GameCenterLeaderboardRelease representation
     */
    body: GameCenterLeaderboardReleaseCreateRequest;
};

export type GameCenterLeaderboardReleasesCreateInstanceResponse = (GameCenterLeaderboardReleaseResponse);

export type GameCenterLeaderboardReleasesCreateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardReleasesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboard')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterLeaderboard')>;
    };
};

export type GameCenterLeaderboardReleasesGetInstanceResponse = (GameCenterLeaderboardReleaseResponse);

export type GameCenterLeaderboardReleasesGetInstanceError = (ErrorResponse);

export type GameCenterLeaderboardReleasesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardReleasesDeleteInstanceResponse = (void);

export type GameCenterLeaderboardReleasesDeleteInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetImagesCreateInstanceData = {
    /**
     * GameCenterLeaderboardSetImage representation
     */
    body: GameCenterLeaderboardSetImageCreateRequest;
};

export type GameCenterLeaderboardSetImagesCreateInstanceResponse = (GameCenterLeaderboardSetImageResponse);

export type GameCenterLeaderboardSetImagesCreateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetImagesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetImages
         */
        'fields[gameCenterLeaderboardSetImages]'?: Array<('fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'gameCenterLeaderboardSetLocalization')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterLeaderboardSetLocalization')>;
    };
};

export type GameCenterLeaderboardSetImagesGetInstanceResponse = (GameCenterLeaderboardSetImageResponse);

export type GameCenterLeaderboardSetImagesGetInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetImagesUpdateInstanceData = {
    /**
     * GameCenterLeaderboardSetImage representation
     */
    body: GameCenterLeaderboardSetImageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardSetImagesUpdateInstanceResponse = (GameCenterLeaderboardSetImageResponse);

export type GameCenterLeaderboardSetImagesUpdateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetImagesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardSetImagesDeleteInstanceResponse = (void);

export type GameCenterLeaderboardSetImagesDeleteInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetLocalizationsCreateInstanceData = {
    /**
     * GameCenterLeaderboardSetLocalization representation
     */
    body: GameCenterLeaderboardSetLocalizationCreateRequest;
};

export type GameCenterLeaderboardSetLocalizationsCreateInstanceResponse = (GameCenterLeaderboardSetLocalizationResponse);

export type GameCenterLeaderboardSetLocalizationsCreateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetLocalizationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetImages
         */
        'fields[gameCenterLeaderboardSetImages]'?: Array<('fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'gameCenterLeaderboardSetLocalization')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
         */
        'fields[gameCenterLeaderboardSetLocalizations]'?: Array<('locale' | 'name' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage')>;
    };
};

export type GameCenterLeaderboardSetLocalizationsGetInstanceResponse = (GameCenterLeaderboardSetLocalizationResponse);

export type GameCenterLeaderboardSetLocalizationsGetInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetLocalizationsUpdateInstanceData = {
    /**
     * GameCenterLeaderboardSetLocalization representation
     */
    body: GameCenterLeaderboardSetLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardSetLocalizationsUpdateInstanceResponse = (GameCenterLeaderboardSetLocalizationResponse);

export type GameCenterLeaderboardSetLocalizationsUpdateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetLocalizationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardSetLocalizationsDeleteInstanceResponse = (void);

export type GameCenterLeaderboardSetLocalizationsDeleteInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetMemberLocalizationsGetCollectionData = {
    query: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetMemberLocalizations
         */
        'fields[gameCenterLeaderboardSetMemberLocalizations]'?: Array<('name' | 'locale' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboard')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * filter by id(s) of related 'gameCenterLeaderboard'
         */
        'filter[gameCenterLeaderboard]': Array<(string)>;
        /**
         * filter by id(s) of related 'gameCenterLeaderboardSet'
         */
        'filter[gameCenterLeaderboardSet]': Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterLeaderboardSet' | 'gameCenterLeaderboard')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterLeaderboardSetMemberLocalizationsGetCollectionResponse = (GameCenterLeaderboardSetMemberLocalizationsResponse);

export type GameCenterLeaderboardSetMemberLocalizationsGetCollectionError = (ErrorResponse);

export type GameCenterLeaderboardSetMemberLocalizationsCreateInstanceData = {
    /**
     * GameCenterLeaderboardSetMemberLocalization representation
     */
    body: GameCenterLeaderboardSetMemberLocalizationCreateRequest;
};

export type GameCenterLeaderboardSetMemberLocalizationsCreateInstanceResponse = (GameCenterLeaderboardSetMemberLocalizationResponse);

export type GameCenterLeaderboardSetMemberLocalizationsCreateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceData = {
    /**
     * GameCenterLeaderboardSetMemberLocalization representation
     */
    body: GameCenterLeaderboardSetMemberLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceResponse = (GameCenterLeaderboardSetMemberLocalizationResponse);

export type GameCenterLeaderboardSetMemberLocalizationsUpdateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceResponse = (void);

export type GameCenterLeaderboardSetMemberLocalizationsDeleteInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetReleasesCreateInstanceData = {
    /**
     * GameCenterLeaderboardSetRelease representation
     */
    body: GameCenterLeaderboardSetReleaseCreateRequest;
};

export type GameCenterLeaderboardSetReleasesCreateInstanceResponse = (GameCenterLeaderboardSetReleaseResponse);

export type GameCenterLeaderboardSetReleasesCreateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetReleasesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterLeaderboardSet')>;
    };
};

export type GameCenterLeaderboardSetReleasesGetInstanceResponse = (GameCenterLeaderboardSetReleaseResponse);

export type GameCenterLeaderboardSetReleasesGetInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetReleasesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardSetReleasesDeleteInstanceResponse = (void);

export type GameCenterLeaderboardSetReleasesDeleteInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetsCreateInstanceData = {
    /**
     * GameCenterLeaderboardSet representation
     */
    body: GameCenterLeaderboardSetCreateRequest;
};

export type GameCenterLeaderboardSetsCreateInstanceResponse = (GameCenterLeaderboardSetResponse);

export type GameCenterLeaderboardSetsCreateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
         */
        'fields[gameCenterLeaderboardSetLocalizations]'?: Array<('locale' | 'name' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
};

export type GameCenterLeaderboardSetsGetInstanceResponse = (GameCenterLeaderboardSetResponse);

export type GameCenterLeaderboardSetsGetInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetsUpdateInstanceData = {
    /**
     * GameCenterLeaderboardSet representation
     */
    body: GameCenterLeaderboardSetUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardSetsUpdateInstanceResponse = (GameCenterLeaderboardSetResponse);

export type GameCenterLeaderboardSetsUpdateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardSetsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardSetsDeleteInstanceResponse = (void);

export type GameCenterLeaderboardSetsDeleteInstanceError = (ErrorResponse);

export type GameCenterLeaderboardsCreateInstanceData = {
    /**
     * GameCenterLeaderboard representation
     */
    body: GameCenterLeaderboardCreateRequest;
};

export type GameCenterLeaderboardsCreateInstanceResponse = (GameCenterLeaderboardResponse);

export type GameCenterLeaderboardsCreateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<('locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboard')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
};

export type GameCenterLeaderboardsGetInstanceResponse = (GameCenterLeaderboardResponse);

export type GameCenterLeaderboardsGetInstanceError = (ErrorResponse);

export type GameCenterLeaderboardsUpdateInstanceData = {
    /**
     * GameCenterLeaderboard representation
     */
    body: GameCenterLeaderboardUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardsUpdateInstanceResponse = (GameCenterLeaderboardResponse);

export type GameCenterLeaderboardsUpdateInstanceError = (ErrorResponse);

export type GameCenterLeaderboardsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardsDeleteInstanceResponse = (void);

export type GameCenterLeaderboardsDeleteInstanceError = (ErrorResponse);

export type GameCenterMatchmakingQueuesGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingQueues
         */
        'fields[gameCenterMatchmakingQueues]'?: Array<('referenceName' | 'classicMatchmakingBundleIds' | 'ruleSet' | 'experimentRuleSet')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('ruleSet' | 'experimentRuleSet')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterMatchmakingQueuesGetCollectionResponse = (GameCenterMatchmakingQueuesResponse);

export type GameCenterMatchmakingQueuesGetCollectionError = (ErrorResponse);

export type GameCenterMatchmakingQueuesCreateInstanceData = {
    /**
     * GameCenterMatchmakingQueue representation
     */
    body: GameCenterMatchmakingQueueCreateRequest;
};

export type GameCenterMatchmakingQueuesCreateInstanceResponse = (GameCenterMatchmakingQueueResponse);

export type GameCenterMatchmakingQueuesCreateInstanceError = (ErrorResponse);

export type GameCenterMatchmakingQueuesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingQueues
         */
        'fields[gameCenterMatchmakingQueues]'?: Array<('referenceName' | 'classicMatchmakingBundleIds' | 'ruleSet' | 'experimentRuleSet')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('ruleSet' | 'experimentRuleSet')>;
    };
};

export type GameCenterMatchmakingQueuesGetInstanceResponse = (GameCenterMatchmakingQueueResponse);

export type GameCenterMatchmakingQueuesGetInstanceError = (ErrorResponse);

export type GameCenterMatchmakingQueuesUpdateInstanceData = {
    /**
     * GameCenterMatchmakingQueue representation
     */
    body: GameCenterMatchmakingQueueUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterMatchmakingQueuesUpdateInstanceResponse = (GameCenterMatchmakingQueueResponse);

export type GameCenterMatchmakingQueuesUpdateInstanceError = (ErrorResponse);

export type GameCenterMatchmakingQueuesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterMatchmakingQueuesDeleteInstanceResponse = (void);

export type GameCenterMatchmakingQueuesDeleteInstanceError = (ErrorResponse);

export type GameCenterMatchmakingRuleSetTestsCreateInstanceData = {
    /**
     * GameCenterMatchmakingRuleSetTest representation
     */
    body: GameCenterMatchmakingRuleSetTestCreateRequest;
};

export type GameCenterMatchmakingRuleSetTestsCreateInstanceResponse = (GameCenterMatchmakingRuleSetTestResponse);

export type GameCenterMatchmakingRuleSetTestsCreateInstanceError = (ErrorResponse);

export type GameCenterMatchmakingRuleSetsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingQueues
         */
        'fields[gameCenterMatchmakingQueues]'?: Array<('referenceName' | 'classicMatchmakingBundleIds' | 'ruleSet' | 'experimentRuleSet')>;
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingRules
         */
        'fields[gameCenterMatchmakingRules]'?: Array<('referenceName' | 'description' | 'type' | 'expression' | 'weight' | 'ruleSet')>;
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingRuleSets
         */
        'fields[gameCenterMatchmakingRuleSets]'?: Array<('referenceName' | 'ruleLanguageVersion' | 'minPlayers' | 'maxPlayers' | 'teams' | 'rules' | 'matchmakingQueues')>;
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingTeams
         */
        'fields[gameCenterMatchmakingTeams]'?: Array<('referenceName' | 'minPlayers' | 'maxPlayers' | 'ruleSet')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('teams' | 'rules' | 'matchmakingQueues')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related matchmakingQueues returned (when they are included)
         */
        'limit[matchmakingQueues]'?: number;
        /**
         * maximum number of related rules returned (when they are included)
         */
        'limit[rules]'?: number;
        /**
         * maximum number of related teams returned (when they are included)
         */
        'limit[teams]'?: number;
    };
};

export type GameCenterMatchmakingRuleSetsGetCollectionResponse = (GameCenterMatchmakingRuleSetsResponse);

export type GameCenterMatchmakingRuleSetsGetCollectionError = (ErrorResponse);

export type GameCenterMatchmakingRuleSetsCreateInstanceData = {
    /**
     * GameCenterMatchmakingRuleSet representation
     */
    body: GameCenterMatchmakingRuleSetCreateRequest;
};

export type GameCenterMatchmakingRuleSetsCreateInstanceResponse = (GameCenterMatchmakingRuleSetResponse);

export type GameCenterMatchmakingRuleSetsCreateInstanceError = (ErrorResponse);

export type GameCenterMatchmakingRuleSetsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingQueues
         */
        'fields[gameCenterMatchmakingQueues]'?: Array<('referenceName' | 'classicMatchmakingBundleIds' | 'ruleSet' | 'experimentRuleSet')>;
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingRules
         */
        'fields[gameCenterMatchmakingRules]'?: Array<('referenceName' | 'description' | 'type' | 'expression' | 'weight' | 'ruleSet')>;
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingRuleSets
         */
        'fields[gameCenterMatchmakingRuleSets]'?: Array<('referenceName' | 'ruleLanguageVersion' | 'minPlayers' | 'maxPlayers' | 'teams' | 'rules' | 'matchmakingQueues')>;
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingTeams
         */
        'fields[gameCenterMatchmakingTeams]'?: Array<('referenceName' | 'minPlayers' | 'maxPlayers' | 'ruleSet')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('teams' | 'rules' | 'matchmakingQueues')>;
        /**
         * maximum number of related matchmakingQueues returned (when they are included)
         */
        'limit[matchmakingQueues]'?: number;
        /**
         * maximum number of related rules returned (when they are included)
         */
        'limit[rules]'?: number;
        /**
         * maximum number of related teams returned (when they are included)
         */
        'limit[teams]'?: number;
    };
};

export type GameCenterMatchmakingRuleSetsGetInstanceResponse = (GameCenterMatchmakingRuleSetResponse);

export type GameCenterMatchmakingRuleSetsGetInstanceError = (ErrorResponse);

export type GameCenterMatchmakingRuleSetsUpdateInstanceData = {
    /**
     * GameCenterMatchmakingRuleSet representation
     */
    body: GameCenterMatchmakingRuleSetUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterMatchmakingRuleSetsUpdateInstanceResponse = (GameCenterMatchmakingRuleSetResponse);

export type GameCenterMatchmakingRuleSetsUpdateInstanceError = (ErrorResponse);

export type GameCenterMatchmakingRuleSetsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterMatchmakingRuleSetsDeleteInstanceResponse = (void);

export type GameCenterMatchmakingRuleSetsDeleteInstanceError = (ErrorResponse);

export type GameCenterMatchmakingRulesCreateInstanceData = {
    /**
     * GameCenterMatchmakingRule representation
     */
    body: GameCenterMatchmakingRuleCreateRequest;
};

export type GameCenterMatchmakingRulesCreateInstanceResponse = (GameCenterMatchmakingRuleResponse);

export type GameCenterMatchmakingRulesCreateInstanceError = (ErrorResponse);

export type GameCenterMatchmakingRulesUpdateInstanceData = {
    /**
     * GameCenterMatchmakingRule representation
     */
    body: GameCenterMatchmakingRuleUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterMatchmakingRulesUpdateInstanceResponse = (GameCenterMatchmakingRuleResponse);

export type GameCenterMatchmakingRulesUpdateInstanceError = (ErrorResponse);

export type GameCenterMatchmakingRulesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterMatchmakingRulesDeleteInstanceResponse = (void);

export type GameCenterMatchmakingRulesDeleteInstanceError = (ErrorResponse);

export type GameCenterMatchmakingTeamsCreateInstanceData = {
    /**
     * GameCenterMatchmakingTeam representation
     */
    body: GameCenterMatchmakingTeamCreateRequest;
};

export type GameCenterMatchmakingTeamsCreateInstanceResponse = (GameCenterMatchmakingTeamResponse);

export type GameCenterMatchmakingTeamsCreateInstanceError = (ErrorResponse);

export type GameCenterMatchmakingTeamsUpdateInstanceData = {
    /**
     * GameCenterMatchmakingTeam representation
     */
    body: GameCenterMatchmakingTeamUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterMatchmakingTeamsUpdateInstanceResponse = (GameCenterMatchmakingTeamResponse);

export type GameCenterMatchmakingTeamsUpdateInstanceError = (ErrorResponse);

export type GameCenterMatchmakingTeamsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterMatchmakingTeamsDeleteInstanceResponse = (void);

export type GameCenterMatchmakingTeamsDeleteInstanceError = (ErrorResponse);

export type GameCenterPlayerAchievementSubmissionsCreateInstanceData = {
    /**
     * GameCenterPlayerAchievementSubmission representation
     */
    body: GameCenterPlayerAchievementSubmissionCreateRequest;
};

export type GameCenterPlayerAchievementSubmissionsCreateInstanceResponse = (GameCenterPlayerAchievementSubmissionResponse);

export type GameCenterPlayerAchievementSubmissionsCreateInstanceError = (ErrorResponse);

export type InAppPurchaseAppStoreReviewScreenshotsCreateInstanceData = {
    /**
     * InAppPurchaseAppStoreReviewScreenshot representation
     */
    body: InAppPurchaseAppStoreReviewScreenshotCreateRequest;
};

export type InAppPurchaseAppStoreReviewScreenshotsCreateInstanceResponse = (InAppPurchaseAppStoreReviewScreenshotResponse);

export type InAppPurchaseAppStoreReviewScreenshotsCreateInstanceError = (ErrorResponse);

export type InAppPurchaseAppStoreReviewScreenshotsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots
         */
        'fields[inAppPurchaseAppStoreReviewScreenshots]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'inAppPurchaseV2')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchaseV2')>;
    };
};

export type InAppPurchaseAppStoreReviewScreenshotsGetInstanceResponse = (InAppPurchaseAppStoreReviewScreenshotResponse);

export type InAppPurchaseAppStoreReviewScreenshotsGetInstanceError = (ErrorResponse);

export type InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceData = {
    /**
     * InAppPurchaseAppStoreReviewScreenshot representation
     */
    body: InAppPurchaseAppStoreReviewScreenshotUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceResponse = (InAppPurchaseAppStoreReviewScreenshotResponse);

export type InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceError = (ErrorResponse);

export type InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceResponse = (void);

export type InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceError = (ErrorResponse);

export type InAppPurchaseAvailabilitiesCreateInstanceData = {
    /**
     * InAppPurchaseAvailability representation
     */
    body: InAppPurchaseAvailabilityCreateRequest;
};

export type InAppPurchaseAvailabilitiesCreateInstanceResponse = (InAppPurchaseAvailabilityResponse);

export type InAppPurchaseAvailabilitiesCreateInstanceError = (ErrorResponse);

export type InAppPurchaseAvailabilitiesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseAvailabilities
         */
        'fields[inAppPurchaseAvailabilities]'?: Array<('availableInNewTerritories' | 'inAppPurchase' | 'availableTerritories')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('availableTerritories')>;
        /**
         * maximum number of related availableTerritories returned (when they are included)
         */
        'limit[availableTerritories]'?: number;
    };
};

export type InAppPurchaseAvailabilitiesGetInstanceResponse = (InAppPurchaseAvailabilityResponse);

export type InAppPurchaseAvailabilitiesGetInstanceError = (ErrorResponse);

export type InAppPurchaseContentsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseContents
         */
        'fields[inAppPurchaseContents]'?: Array<('fileName' | 'fileSize' | 'url' | 'lastModifiedDate' | 'inAppPurchaseV2')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchaseV2')>;
    };
};

export type InAppPurchaseContentsGetInstanceResponse = (InAppPurchaseContentResponse);

export type InAppPurchaseContentsGetInstanceError = (ErrorResponse);

export type InAppPurchaseImagesCreateInstanceData = {
    /**
     * InAppPurchaseImage representation
     */
    body: InAppPurchaseImageCreateRequest;
};

export type InAppPurchaseImagesCreateInstanceResponse = (InAppPurchaseImageResponse);

export type InAppPurchaseImagesCreateInstanceError = (ErrorResponse);

export type InAppPurchaseImagesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseImages
         */
        'fields[inAppPurchaseImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'uploadOperations' | 'uploaded' | 'state' | 'inAppPurchase')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchase')>;
    };
};

export type InAppPurchaseImagesGetInstanceResponse = (InAppPurchaseImageResponse);

export type InAppPurchaseImagesGetInstanceError = (ErrorResponse);

export type InAppPurchaseImagesUpdateInstanceData = {
    /**
     * InAppPurchaseImage representation
     */
    body: InAppPurchaseImageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type InAppPurchaseImagesUpdateInstanceResponse = (InAppPurchaseImageResponse);

export type InAppPurchaseImagesUpdateInstanceError = (ErrorResponse);

export type InAppPurchaseImagesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type InAppPurchaseImagesDeleteInstanceResponse = (void);

export type InAppPurchaseImagesDeleteInstanceError = (ErrorResponse);

export type InAppPurchaseLocalizationsCreateInstanceData = {
    /**
     * InAppPurchaseLocalization representation
     */
    body: InAppPurchaseLocalizationCreateRequest;
};

export type InAppPurchaseLocalizationsCreateInstanceResponse = (InAppPurchaseLocalizationResponse);

export type InAppPurchaseLocalizationsCreateInstanceError = (ErrorResponse);

export type InAppPurchaseLocalizationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseLocalizations
         */
        'fields[inAppPurchaseLocalizations]'?: Array<('name' | 'locale' | 'description' | 'state' | 'inAppPurchaseV2')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchaseV2')>;
    };
};

export type InAppPurchaseLocalizationsGetInstanceResponse = (InAppPurchaseLocalizationResponse);

export type InAppPurchaseLocalizationsGetInstanceError = (ErrorResponse);

export type InAppPurchaseLocalizationsUpdateInstanceData = {
    /**
     * InAppPurchaseLocalization representation
     */
    body: InAppPurchaseLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type InAppPurchaseLocalizationsUpdateInstanceResponse = (InAppPurchaseLocalizationResponse);

export type InAppPurchaseLocalizationsUpdateInstanceError = (ErrorResponse);

export type InAppPurchaseLocalizationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type InAppPurchaseLocalizationsDeleteInstanceResponse = (void);

export type InAppPurchaseLocalizationsDeleteInstanceError = (ErrorResponse);

export type InAppPurchasePriceSchedulesCreateInstanceData = {
    /**
     * InAppPurchasePriceSchedule representation
     */
    body: InAppPurchasePriceScheduleCreateRequest;
};

export type InAppPurchasePriceSchedulesCreateInstanceResponse = (InAppPurchasePriceScheduleResponse);

export type InAppPurchasePriceSchedulesCreateInstanceError = (ErrorResponse);

export type InAppPurchasePriceSchedulesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchasePrices
         */
        'fields[inAppPurchasePrices]'?: Array<('startDate' | 'endDate' | 'manual' | 'inAppPurchaseV2' | 'inAppPurchasePricePoint' | 'territory')>;
        /**
         * the fields to include for returned resources of type inAppPurchasePriceSchedules
         */
        'fields[inAppPurchasePriceSchedules]'?: Array<('inAppPurchase' | 'baseTerritory' | 'manualPrices' | 'automaticPrices')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchase' | 'baseTerritory' | 'manualPrices' | 'automaticPrices')>;
        /**
         * maximum number of related automaticPrices returned (when they are included)
         */
        'limit[automaticPrices]'?: number;
        /**
         * maximum number of related manualPrices returned (when they are included)
         */
        'limit[manualPrices]'?: number;
    };
};

export type InAppPurchasePriceSchedulesGetInstanceResponse = (InAppPurchasePriceScheduleResponse);

export type InAppPurchasePriceSchedulesGetInstanceError = (ErrorResponse);

export type InAppPurchaseSubmissionsCreateInstanceData = {
    /**
     * InAppPurchaseSubmission representation
     */
    body: InAppPurchaseSubmissionCreateRequest;
};

export type InAppPurchaseSubmissionsCreateInstanceResponse = (InAppPurchaseSubmissionResponse);

export type InAppPurchaseSubmissionsCreateInstanceError = (ErrorResponse);

export type InAppPurchasesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<('referenceName' | 'productId' | 'inAppPurchaseType' | 'state' | 'apps')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('apps')>;
        /**
         * maximum number of related apps returned (when they are included)
         */
        'limit[apps]'?: number;
    };
};

export type InAppPurchasesGetInstanceResponse = (InAppPurchaseResponse);

export type InAppPurchasesGetInstanceError = (ErrorResponse);

export type InAppPurchasesV2CreateInstanceData = {
    /**
     * InAppPurchase representation
     */
    body: InAppPurchaseV2CreateRequest;
};

export type InAppPurchasesV2CreateInstanceResponse = (InAppPurchaseV2Response);

export type InAppPurchasesV2CreateInstanceError = (ErrorResponse);

export type InAppPurchasesV2GetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots
         */
        'fields[inAppPurchaseAppStoreReviewScreenshots]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'inAppPurchaseV2')>;
        /**
         * the fields to include for returned resources of type inAppPurchaseAvailabilities
         */
        'fields[inAppPurchaseAvailabilities]'?: Array<('availableInNewTerritories' | 'inAppPurchase' | 'availableTerritories')>;
        /**
         * the fields to include for returned resources of type inAppPurchaseContents
         */
        'fields[inAppPurchaseContents]'?: Array<('fileName' | 'fileSize' | 'url' | 'lastModifiedDate' | 'inAppPurchaseV2')>;
        /**
         * the fields to include for returned resources of type inAppPurchaseImages
         */
        'fields[inAppPurchaseImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'uploadOperations' | 'uploaded' | 'state' | 'inAppPurchase')>;
        /**
         * the fields to include for returned resources of type inAppPurchaseLocalizations
         */
        'fields[inAppPurchaseLocalizations]'?: Array<('name' | 'locale' | 'description' | 'state' | 'inAppPurchaseV2')>;
        /**
         * the fields to include for returned resources of type inAppPurchasePricePoints
         */
        'fields[inAppPurchasePricePoints]'?: Array<('customerPrice' | 'proceeds' | 'territory' | 'inAppPurchaseV2')>;
        /**
         * the fields to include for returned resources of type inAppPurchasePriceSchedules
         */
        'fields[inAppPurchasePriceSchedules]'?: Array<('inAppPurchase' | 'baseTerritory' | 'manualPrices' | 'automaticPrices')>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<('name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'app' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images')>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<('visibleForAllUsers' | 'enabled' | 'state' | 'app' | 'inAppPurchaseV2' | 'subscription' | 'promotionImages')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images')>;
        /**
         * maximum number of related images returned (when they are included)
         */
        'limit[images]'?: number;
        /**
         * maximum number of related inAppPurchaseLocalizations returned (when they are included)
         */
        'limit[inAppPurchaseLocalizations]'?: number;
        /**
         * maximum number of related pricePoints returned (when they are included)
         */
        'limit[pricePoints]'?: number;
    };
};

export type InAppPurchasesV2GetInstanceResponse = (InAppPurchaseV2Response);

export type InAppPurchasesV2GetInstanceError = (ErrorResponse);

export type InAppPurchasesV2UpdateInstanceData = {
    /**
     * InAppPurchase representation
     */
    body: InAppPurchaseV2UpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type InAppPurchasesV2UpdateInstanceResponse = (InAppPurchaseV2Response);

export type InAppPurchasesV2UpdateInstanceError = (ErrorResponse);

export type InAppPurchasesV2DeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type InAppPurchasesV2DeleteInstanceResponse = (void);

export type InAppPurchasesV2DeleteInstanceError = (ErrorResponse);

export type MarketplaceDomainsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type marketplaceDomains
         */
        'fields[marketplaceDomains]'?: Array<('domain' | 'referenceName' | 'createdDate')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type MarketplaceDomainsGetCollectionResponse = (MarketplaceDomainsResponse);

export type MarketplaceDomainsGetCollectionError = (ErrorResponse);

export type MarketplaceDomainsCreateInstanceData = {
    /**
     * MarketplaceDomain representation
     */
    body: MarketplaceDomainCreateRequest;
};

export type MarketplaceDomainsCreateInstanceResponse = (MarketplaceDomainResponse);

export type MarketplaceDomainsCreateInstanceError = (ErrorResponse);

export type MarketplaceDomainsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type marketplaceDomains
         */
        'fields[marketplaceDomains]'?: Array<('domain' | 'referenceName' | 'createdDate')>;
    };
};

export type MarketplaceDomainsGetInstanceResponse = (MarketplaceDomainResponse);

export type MarketplaceDomainsGetInstanceError = (ErrorResponse);

export type MarketplaceDomainsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type MarketplaceDomainsDeleteInstanceResponse = (void);

export type MarketplaceDomainsDeleteInstanceError = (ErrorResponse);

export type MarketplaceSearchDetailsCreateInstanceData = {
    /**
     * MarketplaceSearchDetail representation
     */
    body: MarketplaceSearchDetailCreateRequest;
};

export type MarketplaceSearchDetailsCreateInstanceResponse = (MarketplaceSearchDetailResponse);

export type MarketplaceSearchDetailsCreateInstanceError = (ErrorResponse);

export type MarketplaceSearchDetailsUpdateInstanceData = {
    /**
     * MarketplaceSearchDetail representation
     */
    body: MarketplaceSearchDetailUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type MarketplaceSearchDetailsUpdateInstanceResponse = (MarketplaceSearchDetailResponse);

export type MarketplaceSearchDetailsUpdateInstanceError = (ErrorResponse);

export type MarketplaceSearchDetailsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type MarketplaceSearchDetailsDeleteInstanceResponse = (void);

export type MarketplaceSearchDetailsDeleteInstanceError = (ErrorResponse);

export type MarketplaceWebhooksGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type marketplaceWebhooks
         */
        'fields[marketplaceWebhooks]'?: Array<('endpointUrl' | 'secret')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type MarketplaceWebhooksGetCollectionResponse = (MarketplaceWebhooksResponse);

export type MarketplaceWebhooksGetCollectionError = (ErrorResponse);

export type MarketplaceWebhooksCreateInstanceData = {
    /**
     * MarketplaceWebhook representation
     */
    body: MarketplaceWebhookCreateRequest;
};

export type MarketplaceWebhooksCreateInstanceResponse = (MarketplaceWebhookResponse);

export type MarketplaceWebhooksCreateInstanceError = (ErrorResponse);

export type MarketplaceWebhooksUpdateInstanceData = {
    /**
     * MarketplaceWebhook representation
     */
    body: MarketplaceWebhookUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type MarketplaceWebhooksUpdateInstanceResponse = (MarketplaceWebhookResponse);

export type MarketplaceWebhooksUpdateInstanceError = (ErrorResponse);

export type MarketplaceWebhooksDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type MarketplaceWebhooksDeleteInstanceResponse = (void);

export type MarketplaceWebhooksDeleteInstanceError = (ErrorResponse);

export type PreReleaseVersionsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<('version' | 'platform' | 'builds' | 'app')>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<(string)>;
        /**
         * filter by attribute 'builds.expired'
         */
        'filter[builds.expired]'?: Array<(string)>;
        /**
         * filter by attribute 'builds.processingState'
         */
        'filter[builds.processingState]'?: Array<('PROCESSING' | 'FAILED' | 'INVALID' | 'VALID')>;
        /**
         * filter by attribute 'builds.version'
         */
        'filter[builds.version]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'builds'
         */
        'filter[builds]'?: Array<(string)>;
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<('IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS')>;
        /**
         * filter by attribute 'version'
         */
        'filter[version]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('builds' | 'app')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('version' | '-version')>;
    };
};

export type PreReleaseVersionsGetCollectionResponse = (PreReleaseVersionsResponse);

export type PreReleaseVersionsGetCollectionError = (ErrorResponse);

export type PreReleaseVersionsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<('version' | 'platform' | 'builds' | 'app')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('builds' | 'app')>;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
};

export type PreReleaseVersionsGetInstanceResponse = (PrereleaseVersionResponse);

export type PreReleaseVersionsGetInstanceError = (ErrorResponse);

export type ProfilesGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type bundleIds
         */
        'fields[bundleIds]'?: Array<('name' | 'platform' | 'identifier' | 'seedId' | 'profiles' | 'bundleIdCapabilities' | 'app')>;
        /**
         * the fields to include for returned resources of type certificates
         */
        'fields[certificates]'?: Array<('name' | 'csrContent' | 'certificateType' | 'displayName' | 'serialNumber' | 'platform' | 'expirationDate' | 'certificateContent')>;
        /**
         * the fields to include for returned resources of type devices
         */
        'fields[devices]'?: Array<('name' | 'platform' | 'udid' | 'deviceClass' | 'status' | 'model' | 'addedDate')>;
        /**
         * the fields to include for returned resources of type profiles
         */
        'fields[profiles]'?: Array<('name' | 'platform' | 'profileType' | 'profileState' | 'profileContent' | 'uuid' | 'createdDate' | 'expirationDate' | 'bundleId' | 'devices' | 'certificates')>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<(string)>;
        /**
         * filter by attribute 'profileState'
         */
        'filter[profileState]'?: Array<('ACTIVE' | 'INVALID')>;
        /**
         * filter by attribute 'profileType'
         */
        'filter[profileType]'?: Array<('IOS_APP_DEVELOPMENT' | 'IOS_APP_STORE' | 'IOS_APP_ADHOC' | 'IOS_APP_INHOUSE' | 'MAC_APP_DEVELOPMENT' | 'MAC_APP_STORE' | 'MAC_APP_DIRECT' | 'TVOS_APP_DEVELOPMENT' | 'TVOS_APP_STORE' | 'TVOS_APP_ADHOC' | 'TVOS_APP_INHOUSE' | 'MAC_CATALYST_APP_DEVELOPMENT' | 'MAC_CATALYST_APP_STORE' | 'MAC_CATALYST_APP_DIRECT')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('bundleId' | 'devices' | 'certificates')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related certificates returned (when they are included)
         */
        'limit[certificates]'?: number;
        /**
         * maximum number of related devices returned (when they are included)
         */
        'limit[devices]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('name' | '-name' | 'profileType' | '-profileType' | 'profileState' | '-profileState' | 'id' | '-id')>;
    };
};

export type ProfilesGetCollectionResponse = (ProfilesResponse);

export type ProfilesGetCollectionError = (ErrorResponse);

export type ProfilesCreateInstanceData = {
    /**
     * Profile representation
     */
    body: ProfileCreateRequest;
};

export type ProfilesCreateInstanceResponse = (ProfileResponse);

export type ProfilesCreateInstanceError = (ErrorResponse);

export type ProfilesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type bundleIds
         */
        'fields[bundleIds]'?: Array<('name' | 'platform' | 'identifier' | 'seedId' | 'profiles' | 'bundleIdCapabilities' | 'app')>;
        /**
         * the fields to include for returned resources of type certificates
         */
        'fields[certificates]'?: Array<('name' | 'csrContent' | 'certificateType' | 'displayName' | 'serialNumber' | 'platform' | 'expirationDate' | 'certificateContent')>;
        /**
         * the fields to include for returned resources of type devices
         */
        'fields[devices]'?: Array<('name' | 'platform' | 'udid' | 'deviceClass' | 'status' | 'model' | 'addedDate')>;
        /**
         * the fields to include for returned resources of type profiles
         */
        'fields[profiles]'?: Array<('name' | 'platform' | 'profileType' | 'profileState' | 'profileContent' | 'uuid' | 'createdDate' | 'expirationDate' | 'bundleId' | 'devices' | 'certificates')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('bundleId' | 'devices' | 'certificates')>;
        /**
         * maximum number of related certificates returned (when they are included)
         */
        'limit[certificates]'?: number;
        /**
         * maximum number of related devices returned (when they are included)
         */
        'limit[devices]'?: number;
    };
};

export type ProfilesGetInstanceResponse = (ProfileResponse);

export type ProfilesGetInstanceError = (ErrorResponse);

export type ProfilesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type ProfilesDeleteInstanceResponse = (void);

export type ProfilesDeleteInstanceError = (ErrorResponse);

export type PromotedPurchaseImagesCreateInstanceData = {
    /**
     * PromotedPurchaseImage representation
     */
    body: PromotedPurchaseImageCreateRequest;
};

export type PromotedPurchaseImagesCreateInstanceResponse = (PromotedPurchaseImageResponse);

export type PromotedPurchaseImagesCreateInstanceError = (ErrorResponse);

export type PromotedPurchaseImagesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type promotedPurchaseImages
         */
        'fields[promotedPurchaseImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'assetType' | 'uploadOperations' | 'uploaded' | 'state' | 'promotedPurchase')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('promotedPurchase')>;
    };
};

export type PromotedPurchaseImagesGetInstanceResponse = (PromotedPurchaseImageResponse);

export type PromotedPurchaseImagesGetInstanceError = (ErrorResponse);

export type PromotedPurchaseImagesUpdateInstanceData = {
    /**
     * PromotedPurchaseImage representation
     */
    body: PromotedPurchaseImageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type PromotedPurchaseImagesUpdateInstanceResponse = (PromotedPurchaseImageResponse);

export type PromotedPurchaseImagesUpdateInstanceError = (ErrorResponse);

export type PromotedPurchaseImagesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type PromotedPurchaseImagesDeleteInstanceResponse = (void);

export type PromotedPurchaseImagesDeleteInstanceError = (ErrorResponse);

export type PromotedPurchasesCreateInstanceData = {
    /**
     * PromotedPurchase representation
     */
    body: PromotedPurchaseCreateRequest;
};

export type PromotedPurchasesCreateInstanceResponse = (PromotedPurchaseResponse);

export type PromotedPurchasesCreateInstanceError = (ErrorResponse);

export type PromotedPurchasesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type promotedPurchaseImages
         * @deprecated
         */
        'fields[promotedPurchaseImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'assetType' | 'uploadOperations' | 'uploaded' | 'state' | 'promotedPurchase')>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<('visibleForAllUsers' | 'enabled' | 'state' | 'app' | 'inAppPurchaseV2' | 'subscription' | 'promotionImages')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchaseV2' | 'subscription' | 'promotionImages')>;
        /**
         * maximum number of related promotionImages returned (when they are included)
         * @deprecated
         */
        'limit[promotionImages]'?: number;
    };
};

export type PromotedPurchasesGetInstanceResponse = (PromotedPurchaseResponse);

export type PromotedPurchasesGetInstanceError = (ErrorResponse);

export type PromotedPurchasesUpdateInstanceData = {
    /**
     * PromotedPurchase representation
     */
    body: PromotedPurchaseUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type PromotedPurchasesUpdateInstanceResponse = (PromotedPurchaseResponse);

export type PromotedPurchasesUpdateInstanceError = (ErrorResponse);

export type PromotedPurchasesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type PromotedPurchasesDeleteInstanceResponse = (void);

export type PromotedPurchasesDeleteInstanceError = (ErrorResponse);

export type ReviewSubmissionItemsCreateInstanceData = {
    /**
     * ReviewSubmissionItem representation
     */
    body: ReviewSubmissionItemCreateRequest;
};

export type ReviewSubmissionItemsCreateInstanceResponse = (ReviewSubmissionItemResponse);

export type ReviewSubmissionItemsCreateInstanceError = (ErrorResponse);

export type ReviewSubmissionItemsUpdateInstanceData = {
    /**
     * ReviewSubmissionItem representation
     */
    body: ReviewSubmissionItemUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type ReviewSubmissionItemsUpdateInstanceResponse = (ReviewSubmissionItemResponse);

export type ReviewSubmissionItemsUpdateInstanceError = (ErrorResponse);

export type ReviewSubmissionItemsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type ReviewSubmissionItemsDeleteInstanceResponse = (void);

export type ReviewSubmissionItemsDeleteInstanceError = (ErrorResponse);

export type ReviewSubmissionsGetCollectionData = {
    query: {
        /**
         * the fields to include for returned resources of type reviewSubmissionItems
         */
        'fields[reviewSubmissionItems]'?: Array<('state' | 'resolved' | 'removed' | 'reviewSubmission' | 'appStoreVersion' | 'appCustomProductPageVersion' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appEvent')>;
        /**
         * the fields to include for returned resources of type reviewSubmissions
         */
        'fields[reviewSubmissions]'?: Array<('platform' | 'submittedDate' | 'state' | 'submitted' | 'canceled' | 'app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor')>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]': Array<(string)>;
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<('IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS')>;
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<('READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'UNRESOLVED_ISSUES' | 'CANCELING' | 'COMPLETING' | 'COMPLETE')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related items returned (when they are included)
         */
        'limit[items]'?: number;
    };
};

export type ReviewSubmissionsGetCollectionResponse = (ReviewSubmissionsResponse);

export type ReviewSubmissionsGetCollectionError = (ErrorResponse);

export type ReviewSubmissionsCreateInstanceData = {
    /**
     * ReviewSubmission representation
     */
    body: ReviewSubmissionCreateRequest;
};

export type ReviewSubmissionsCreateInstanceResponse = (ReviewSubmissionResponse);

export type ReviewSubmissionsCreateInstanceError = (ErrorResponse);

export type ReviewSubmissionsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type reviewSubmissionItems
         */
        'fields[reviewSubmissionItems]'?: Array<('state' | 'resolved' | 'removed' | 'reviewSubmission' | 'appStoreVersion' | 'appCustomProductPageVersion' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appEvent')>;
        /**
         * the fields to include for returned resources of type reviewSubmissions
         */
        'fields[reviewSubmissions]'?: Array<('platform' | 'submittedDate' | 'state' | 'submitted' | 'canceled' | 'app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor')>;
        /**
         * maximum number of related items returned (when they are included)
         */
        'limit[items]'?: number;
    };
};

export type ReviewSubmissionsGetInstanceResponse = (ReviewSubmissionResponse);

export type ReviewSubmissionsGetInstanceError = (ErrorResponse);

export type ReviewSubmissionsUpdateInstanceData = {
    /**
     * ReviewSubmission representation
     */
    body: ReviewSubmissionUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type ReviewSubmissionsUpdateInstanceResponse = (ReviewSubmissionResponse);

export type ReviewSubmissionsUpdateInstanceError = (ErrorResponse);

export type RoutingAppCoveragesCreateInstanceData = {
    /**
     * RoutingAppCoverage representation
     */
    body: RoutingAppCoverageCreateRequest;
};

export type RoutingAppCoveragesCreateInstanceResponse = (RoutingAppCoverageResponse);

export type RoutingAppCoveragesCreateInstanceError = (ErrorResponse);

export type RoutingAppCoveragesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type routingAppCoverages
         */
        'fields[routingAppCoverages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appStoreVersion')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersion')>;
    };
};

export type RoutingAppCoveragesGetInstanceResponse = (RoutingAppCoverageResponse);

export type RoutingAppCoveragesGetInstanceError = (ErrorResponse);

export type RoutingAppCoveragesUpdateInstanceData = {
    /**
     * RoutingAppCoverage representation
     */
    body: RoutingAppCoverageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type RoutingAppCoveragesUpdateInstanceResponse = (RoutingAppCoverageResponse);

export type RoutingAppCoveragesUpdateInstanceError = (ErrorResponse);

export type RoutingAppCoveragesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type RoutingAppCoveragesDeleteInstanceResponse = (void);

export type RoutingAppCoveragesDeleteInstanceError = (ErrorResponse);

export type SalesReportsGetCollectionData = {
    query: {
        /**
         * filter by attribute 'frequency'
         */
        'filter[frequency]': Array<('DAILY' | 'WEEKLY' | 'MONTHLY' | 'YEARLY')>;
        /**
         * filter by attribute 'reportDate'
         */
        'filter[reportDate]'?: Array<(string)>;
        /**
         * filter by attribute 'reportSubType'
         */
        'filter[reportSubType]': Array<('SUMMARY' | 'DETAILED' | 'SUMMARY_INSTALL_TYPE' | 'SUMMARY_TERRITORY' | 'SUMMARY_CHANNEL')>;
        /**
         * filter by attribute 'reportType'
         */
        'filter[reportType]': Array<('SALES' | 'PRE_ORDER' | 'NEWSSTAND' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SUBSCRIBER' | 'SUBSCRIPTION_OFFER_CODE_REDEMPTION' | 'INSTALLS' | 'FIRST_ANNUAL')>;
        /**
         * filter by attribute 'vendorNumber'
         */
        'filter[vendorNumber]': Array<(string)>;
        /**
         * filter by attribute 'version'
         */
        'filter[version]'?: Array<(string)>;
    };
};

export type SalesReportsGetCollectionResponse = (gzip);

export type SalesReportsGetCollectionError = (ErrorResponse);

export type SandboxTestersV2GetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type sandboxTesters
         */
        'fields[sandboxTesters]'?: Array<('firstName' | 'lastName' | 'acAccountName' | 'territory' | 'applePayCompatible' | 'interruptPurchases' | 'subscriptionRenewalRate')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type SandboxTestersV2GetCollectionResponse = (SandboxTestersV2Response);

export type SandboxTestersV2GetCollectionError = (ErrorResponse);

export type SandboxTestersV2UpdateInstanceData = {
    /**
     * SandboxTester representation
     */
    body: SandboxTesterV2UpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SandboxTestersV2UpdateInstanceResponse = (SandboxTesterV2Response);

export type SandboxTestersV2UpdateInstanceError = (ErrorResponse);

export type SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceData = {
    /**
     * SandboxTestersClearPurchaseHistoryRequest representation
     */
    body: SandboxTestersClearPurchaseHistoryRequestV2CreateRequest;
};

export type SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceResponse = (SandboxTestersClearPurchaseHistoryRequestV2Response);

export type SandboxTestersClearPurchaseHistoryRequestV2CreateInstanceError = (ErrorResponse);

export type ScmGitReferencesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<('name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('repository')>;
    };
};

export type ScmGitReferencesGetInstanceResponse = (ScmGitReferenceResponse);

export type ScmGitReferencesGetInstanceError = (ErrorResponse);

export type ScmProvidersGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type scmProviders
         */
        'fields[scmProviders]'?: Array<('scmProviderType' | 'url' | 'repositories')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type ScmProvidersGetCollectionResponse = (ScmProvidersResponse);

export type ScmProvidersGetCollectionError = (ErrorResponse);

export type ScmProvidersGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmProviders
         */
        'fields[scmProviders]'?: Array<('scmProviderType' | 'url' | 'repositories')>;
    };
};

export type ScmProvidersGetInstanceResponse = (ScmProviderResponse);

export type ScmProvidersGetInstanceError = (ErrorResponse);

export type ScmPullRequestsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmPullRequests
         */
        'fields[scmPullRequests]'?: Array<('title' | 'number' | 'webUrl' | 'sourceRepositoryOwner' | 'sourceRepositoryName' | 'sourceBranchName' | 'destinationRepositoryOwner' | 'destinationRepositoryName' | 'destinationBranchName' | 'isClosed' | 'isCrossRepository' | 'repository')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('repository')>;
    };
};

export type ScmPullRequestsGetInstanceResponse = (ScmPullRequestResponse);

export type ScmPullRequestsGetInstanceError = (ErrorResponse);

export type ScmRepositoriesGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<('lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests')>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('scmProvider' | 'defaultBranch')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type ScmRepositoriesGetCollectionResponse = (ScmRepositoriesResponse);

export type ScmRepositoriesGetCollectionError = (ErrorResponse);

export type ScmRepositoriesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<('lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('scmProvider' | 'defaultBranch')>;
    };
};

export type ScmRepositoriesGetInstanceResponse = (ScmRepositoryResponse);

export type ScmRepositoriesGetInstanceError = (ErrorResponse);

export type SubscriptionAppStoreReviewScreenshotsCreateInstanceData = {
    /**
     * SubscriptionAppStoreReviewScreenshot representation
     */
    body: SubscriptionAppStoreReviewScreenshotCreateRequest;
};

export type SubscriptionAppStoreReviewScreenshotsCreateInstanceResponse = (SubscriptionAppStoreReviewScreenshotResponse);

export type SubscriptionAppStoreReviewScreenshotsCreateInstanceError = (ErrorResponse);

export type SubscriptionAppStoreReviewScreenshotsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots
         */
        'fields[subscriptionAppStoreReviewScreenshots]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'subscription')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscription')>;
    };
};

export type SubscriptionAppStoreReviewScreenshotsGetInstanceResponse = (SubscriptionAppStoreReviewScreenshotResponse);

export type SubscriptionAppStoreReviewScreenshotsGetInstanceError = (ErrorResponse);

export type SubscriptionAppStoreReviewScreenshotsUpdateInstanceData = {
    /**
     * SubscriptionAppStoreReviewScreenshot representation
     */
    body: SubscriptionAppStoreReviewScreenshotUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionAppStoreReviewScreenshotsUpdateInstanceResponse = (SubscriptionAppStoreReviewScreenshotResponse);

export type SubscriptionAppStoreReviewScreenshotsUpdateInstanceError = (ErrorResponse);

export type SubscriptionAppStoreReviewScreenshotsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionAppStoreReviewScreenshotsDeleteInstanceResponse = (void);

export type SubscriptionAppStoreReviewScreenshotsDeleteInstanceError = (ErrorResponse);

export type SubscriptionAvailabilitiesCreateInstanceData = {
    /**
     * SubscriptionAvailability representation
     */
    body: SubscriptionAvailabilityCreateRequest;
};

export type SubscriptionAvailabilitiesCreateInstanceResponse = (SubscriptionAvailabilityResponse);

export type SubscriptionAvailabilitiesCreateInstanceError = (ErrorResponse);

export type SubscriptionAvailabilitiesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionAvailabilities
         */
        'fields[subscriptionAvailabilities]'?: Array<('availableInNewTerritories' | 'subscription' | 'availableTerritories')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscription' | 'availableTerritories')>;
        /**
         * maximum number of related availableTerritories returned (when they are included)
         */
        'limit[availableTerritories]'?: number;
    };
};

export type SubscriptionAvailabilitiesGetInstanceResponse = (SubscriptionAvailabilityResponse);

export type SubscriptionAvailabilitiesGetInstanceError = (ErrorResponse);

export type SubscriptionGracePeriodsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionGracePeriods
         */
        'fields[subscriptionGracePeriods]'?: Array<('optIn' | 'sandboxOptIn' | 'duration' | 'renewalType')>;
    };
};

export type SubscriptionGracePeriodsGetInstanceResponse = (SubscriptionGracePeriodResponse);

export type SubscriptionGracePeriodsGetInstanceError = (ErrorResponse);

export type SubscriptionGracePeriodsUpdateInstanceData = {
    /**
     * SubscriptionGracePeriod representation
     */
    body: SubscriptionGracePeriodUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionGracePeriodsUpdateInstanceResponse = (SubscriptionGracePeriodResponse);

export type SubscriptionGracePeriodsUpdateInstanceError = (ErrorResponse);

export type SubscriptionGroupLocalizationsCreateInstanceData = {
    /**
     * SubscriptionGroupLocalization representation
     */
    body: SubscriptionGroupLocalizationCreateRequest;
};

export type SubscriptionGroupLocalizationsCreateInstanceResponse = (SubscriptionGroupLocalizationResponse);

export type SubscriptionGroupLocalizationsCreateInstanceError = (ErrorResponse);

export type SubscriptionGroupLocalizationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionGroupLocalizations
         */
        'fields[subscriptionGroupLocalizations]'?: Array<('name' | 'customAppName' | 'locale' | 'state' | 'subscriptionGroup')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscriptionGroup')>;
    };
};

export type SubscriptionGroupLocalizationsGetInstanceResponse = (SubscriptionGroupLocalizationResponse);

export type SubscriptionGroupLocalizationsGetInstanceError = (ErrorResponse);

export type SubscriptionGroupLocalizationsUpdateInstanceData = {
    /**
     * SubscriptionGroupLocalization representation
     */
    body: SubscriptionGroupLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionGroupLocalizationsUpdateInstanceResponse = (SubscriptionGroupLocalizationResponse);

export type SubscriptionGroupLocalizationsUpdateInstanceError = (ErrorResponse);

export type SubscriptionGroupLocalizationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionGroupLocalizationsDeleteInstanceResponse = (void);

export type SubscriptionGroupLocalizationsDeleteInstanceError = (ErrorResponse);

export type SubscriptionGroupSubmissionsCreateInstanceData = {
    /**
     * SubscriptionGroupSubmission representation
     */
    body: SubscriptionGroupSubmissionCreateRequest;
};

export type SubscriptionGroupSubmissionsCreateInstanceResponse = (SubscriptionGroupSubmissionResponse);

export type SubscriptionGroupSubmissionsCreateInstanceError = (ErrorResponse);

export type SubscriptionGroupsCreateInstanceData = {
    /**
     * SubscriptionGroup representation
     */
    body: SubscriptionGroupCreateRequest;
};

export type SubscriptionGroupsCreateInstanceResponse = (SubscriptionGroupResponse);

export type SubscriptionGroupsCreateInstanceError = (ErrorResponse);

export type SubscriptionGroupsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionGroupLocalizations
         */
        'fields[subscriptionGroupLocalizations]'?: Array<('name' | 'customAppName' | 'locale' | 'state' | 'subscriptionGroup')>;
        /**
         * the fields to include for returned resources of type subscriptionGroups
         */
        'fields[subscriptionGroups]'?: Array<('referenceName' | 'app' | 'subscriptions' | 'subscriptionGroupLocalizations')>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<('name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscriptions' | 'subscriptionGroupLocalizations')>;
        /**
         * maximum number of related subscriptionGroupLocalizations returned (when they are included)
         */
        'limit[subscriptionGroupLocalizations]'?: number;
        /**
         * maximum number of related subscriptions returned (when they are included)
         */
        'limit[subscriptions]'?: number;
    };
};

export type SubscriptionGroupsGetInstanceResponse = (SubscriptionGroupResponse);

export type SubscriptionGroupsGetInstanceError = (ErrorResponse);

export type SubscriptionGroupsUpdateInstanceData = {
    /**
     * SubscriptionGroup representation
     */
    body: SubscriptionGroupUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionGroupsUpdateInstanceResponse = (SubscriptionGroupResponse);

export type SubscriptionGroupsUpdateInstanceError = (ErrorResponse);

export type SubscriptionGroupsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionGroupsDeleteInstanceResponse = (void);

export type SubscriptionGroupsDeleteInstanceError = (ErrorResponse);

export type SubscriptionImagesCreateInstanceData = {
    /**
     * SubscriptionImage representation
     */
    body: SubscriptionImageCreateRequest;
};

export type SubscriptionImagesCreateInstanceResponse = (SubscriptionImageResponse);

export type SubscriptionImagesCreateInstanceError = (ErrorResponse);

export type SubscriptionImagesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionImages
         */
        'fields[subscriptionImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'uploadOperations' | 'uploaded' | 'state' | 'subscription')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscription')>;
    };
};

export type SubscriptionImagesGetInstanceResponse = (SubscriptionImageResponse);

export type SubscriptionImagesGetInstanceError = (ErrorResponse);

export type SubscriptionImagesUpdateInstanceData = {
    /**
     * SubscriptionImage representation
     */
    body: SubscriptionImageUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionImagesUpdateInstanceResponse = (SubscriptionImageResponse);

export type SubscriptionImagesUpdateInstanceError = (ErrorResponse);

export type SubscriptionImagesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionImagesDeleteInstanceResponse = (void);

export type SubscriptionImagesDeleteInstanceError = (ErrorResponse);

export type SubscriptionIntroductoryOffersCreateInstanceData = {
    /**
     * SubscriptionIntroductoryOffer representation
     */
    body: SubscriptionIntroductoryOfferCreateRequest;
};

export type SubscriptionIntroductoryOffersCreateInstanceResponse = (SubscriptionIntroductoryOfferResponse);

export type SubscriptionIntroductoryOffersCreateInstanceError = (ErrorResponse);

export type SubscriptionIntroductoryOffersUpdateInstanceData = {
    /**
     * SubscriptionIntroductoryOffer representation
     */
    body: SubscriptionIntroductoryOfferUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionIntroductoryOffersUpdateInstanceResponse = (SubscriptionIntroductoryOfferResponse);

export type SubscriptionIntroductoryOffersUpdateInstanceError = (ErrorResponse);

export type SubscriptionIntroductoryOffersDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionIntroductoryOffersDeleteInstanceResponse = (void);

export type SubscriptionIntroductoryOffersDeleteInstanceError = (ErrorResponse);

export type SubscriptionLocalizationsCreateInstanceData = {
    /**
     * SubscriptionLocalization representation
     */
    body: SubscriptionLocalizationCreateRequest;
};

export type SubscriptionLocalizationsCreateInstanceResponse = (SubscriptionLocalizationResponse);

export type SubscriptionLocalizationsCreateInstanceError = (ErrorResponse);

export type SubscriptionLocalizationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionLocalizations
         */
        'fields[subscriptionLocalizations]'?: Array<('name' | 'locale' | 'description' | 'state' | 'subscription')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscription')>;
    };
};

export type SubscriptionLocalizationsGetInstanceResponse = (SubscriptionLocalizationResponse);

export type SubscriptionLocalizationsGetInstanceError = (ErrorResponse);

export type SubscriptionLocalizationsUpdateInstanceData = {
    /**
     * SubscriptionLocalization representation
     */
    body: SubscriptionLocalizationUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionLocalizationsUpdateInstanceResponse = (SubscriptionLocalizationResponse);

export type SubscriptionLocalizationsUpdateInstanceError = (ErrorResponse);

export type SubscriptionLocalizationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionLocalizationsDeleteInstanceResponse = (void);

export type SubscriptionLocalizationsDeleteInstanceError = (ErrorResponse);

export type SubscriptionOfferCodeCustomCodesCreateInstanceData = {
    /**
     * SubscriptionOfferCodeCustomCode representation
     */
    body: SubscriptionOfferCodeCustomCodeCreateRequest;
};

export type SubscriptionOfferCodeCustomCodesCreateInstanceResponse = (SubscriptionOfferCodeCustomCodeResponse);

export type SubscriptionOfferCodeCustomCodesCreateInstanceError = (ErrorResponse);

export type SubscriptionOfferCodeCustomCodesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
         */
        'fields[subscriptionOfferCodeCustomCodes]'?: Array<('customCode' | 'numberOfCodes' | 'createdDate' | 'expirationDate' | 'active' | 'offerCode')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('offerCode')>;
    };
};

export type SubscriptionOfferCodeCustomCodesGetInstanceResponse = (SubscriptionOfferCodeCustomCodeResponse);

export type SubscriptionOfferCodeCustomCodesGetInstanceError = (ErrorResponse);

export type SubscriptionOfferCodeCustomCodesUpdateInstanceData = {
    /**
     * SubscriptionOfferCodeCustomCode representation
     */
    body: SubscriptionOfferCodeCustomCodeUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionOfferCodeCustomCodesUpdateInstanceResponse = (SubscriptionOfferCodeCustomCodeResponse);

export type SubscriptionOfferCodeCustomCodesUpdateInstanceError = (ErrorResponse);

export type SubscriptionOfferCodeOneTimeUseCodesCreateInstanceData = {
    /**
     * SubscriptionOfferCodeOneTimeUseCode representation
     */
    body: SubscriptionOfferCodeOneTimeUseCodeCreateRequest;
};

export type SubscriptionOfferCodeOneTimeUseCodesCreateInstanceResponse = (SubscriptionOfferCodeOneTimeUseCodeResponse);

export type SubscriptionOfferCodeOneTimeUseCodesCreateInstanceError = (ErrorResponse);

export type SubscriptionOfferCodeOneTimeUseCodesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
         */
        'fields[subscriptionOfferCodeOneTimeUseCodes]'?: Array<('numberOfCodes' | 'createdDate' | 'expirationDate' | 'active' | 'offerCode' | 'values')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('offerCode')>;
    };
};

export type SubscriptionOfferCodeOneTimeUseCodesGetInstanceResponse = (SubscriptionOfferCodeOneTimeUseCodeResponse);

export type SubscriptionOfferCodeOneTimeUseCodesGetInstanceError = (ErrorResponse);

export type SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceData = {
    /**
     * SubscriptionOfferCodeOneTimeUseCode representation
     */
    body: SubscriptionOfferCodeOneTimeUseCodeUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceResponse = (SubscriptionOfferCodeOneTimeUseCodeResponse);

export type SubscriptionOfferCodeOneTimeUseCodesUpdateInstanceError = (ErrorResponse);

export type SubscriptionOfferCodesCreateInstanceData = {
    /**
     * SubscriptionOfferCode representation
     */
    body: SubscriptionOfferCodeCreateRequest;
};

export type SubscriptionOfferCodesCreateInstanceResponse = (SubscriptionOfferCodeResponse);

export type SubscriptionOfferCodesCreateInstanceError = (ErrorResponse);

export type SubscriptionOfferCodesGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
         */
        'fields[subscriptionOfferCodeCustomCodes]'?: Array<('customCode' | 'numberOfCodes' | 'createdDate' | 'expirationDate' | 'active' | 'offerCode')>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
         */
        'fields[subscriptionOfferCodeOneTimeUseCodes]'?: Array<('numberOfCodes' | 'createdDate' | 'expirationDate' | 'active' | 'offerCode' | 'values')>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodePrices
         */
        'fields[subscriptionOfferCodePrices]'?: Array<('territory' | 'subscriptionPricePoint')>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodes
         */
        'fields[subscriptionOfferCodes]'?: Array<('name' | 'customerEligibilities' | 'offerEligibility' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'totalNumberOfCodes' | 'active' | 'subscription' | 'oneTimeUseCodes' | 'customCodes' | 'prices')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscription' | 'oneTimeUseCodes' | 'customCodes' | 'prices')>;
        /**
         * maximum number of related customCodes returned (when they are included)
         */
        'limit[customCodes]'?: number;
        /**
         * maximum number of related oneTimeUseCodes returned (when they are included)
         */
        'limit[oneTimeUseCodes]'?: number;
        /**
         * maximum number of related prices returned (when they are included)
         */
        'limit[prices]'?: number;
    };
};

export type SubscriptionOfferCodesGetInstanceResponse = (SubscriptionOfferCodeResponse);

export type SubscriptionOfferCodesGetInstanceError = (ErrorResponse);

export type SubscriptionOfferCodesUpdateInstanceData = {
    /**
     * SubscriptionOfferCode representation
     */
    body: SubscriptionOfferCodeUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionOfferCodesUpdateInstanceResponse = (SubscriptionOfferCodeResponse);

export type SubscriptionOfferCodesUpdateInstanceError = (ErrorResponse);

export type SubscriptionPricePointsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionPricePoints
         */
        'fields[subscriptionPricePoints]'?: Array<('customerPrice' | 'proceeds' | 'proceedsYear2' | 'territory' | 'subscription' | 'equalizations')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('territory')>;
    };
};

export type SubscriptionPricePointsGetInstanceResponse = (SubscriptionPricePointResponse);

export type SubscriptionPricePointsGetInstanceError = (ErrorResponse);

export type SubscriptionPricesCreateInstanceData = {
    /**
     * SubscriptionPrice representation
     */
    body: SubscriptionPriceCreateRequest;
};

export type SubscriptionPricesCreateInstanceResponse = (SubscriptionPriceResponse);

export type SubscriptionPricesCreateInstanceError = (ErrorResponse);

export type SubscriptionPricesDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionPricesDeleteInstanceResponse = (void);

export type SubscriptionPricesDeleteInstanceError = (ErrorResponse);

export type SubscriptionPromotionalOffersCreateInstanceData = {
    /**
     * SubscriptionPromotionalOffer representation
     */
    body: SubscriptionPromotionalOfferCreateRequest;
};

export type SubscriptionPromotionalOffersCreateInstanceResponse = (SubscriptionPromotionalOfferResponse);

export type SubscriptionPromotionalOffersCreateInstanceError = (ErrorResponse);

export type SubscriptionPromotionalOffersGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionPromotionalOfferPrices
         */
        'fields[subscriptionPromotionalOfferPrices]'?: Array<('territory' | 'subscriptionPricePoint')>;
        /**
         * the fields to include for returned resources of type subscriptionPromotionalOffers
         */
        'fields[subscriptionPromotionalOffers]'?: Array<('name' | 'offerCode' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'subscription' | 'prices')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscription' | 'prices')>;
        /**
         * maximum number of related prices returned (when they are included)
         */
        'limit[prices]'?: number;
    };
};

export type SubscriptionPromotionalOffersGetInstanceResponse = (SubscriptionPromotionalOfferResponse);

export type SubscriptionPromotionalOffersGetInstanceError = (ErrorResponse);

export type SubscriptionPromotionalOffersUpdateInstanceData = {
    /**
     * SubscriptionPromotionalOffer representation
     */
    body: SubscriptionPromotionalOfferUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionPromotionalOffersUpdateInstanceResponse = (SubscriptionPromotionalOfferResponse);

export type SubscriptionPromotionalOffersUpdateInstanceError = (ErrorResponse);

export type SubscriptionPromotionalOffersDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionPromotionalOffersDeleteInstanceResponse = (void);

export type SubscriptionPromotionalOffersDeleteInstanceError = (ErrorResponse);

export type SubscriptionSubmissionsCreateInstanceData = {
    /**
     * SubscriptionSubmission representation
     */
    body: SubscriptionSubmissionCreateRequest;
};

export type SubscriptionSubmissionsCreateInstanceResponse = (SubscriptionSubmissionResponse);

export type SubscriptionSubmissionsCreateInstanceError = (ErrorResponse);

export type SubscriptionsCreateInstanceData = {
    /**
     * Subscription representation
     */
    body: SubscriptionCreateRequest;
};

export type SubscriptionsCreateInstanceResponse = (SubscriptionResponse);

export type SubscriptionsCreateInstanceError = (ErrorResponse);

export type SubscriptionsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<('visibleForAllUsers' | 'enabled' | 'state' | 'app' | 'inAppPurchaseV2' | 'subscription' | 'promotionImages')>;
        /**
         * the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots
         */
        'fields[subscriptionAppStoreReviewScreenshots]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'subscription')>;
        /**
         * the fields to include for returned resources of type subscriptionAvailabilities
         */
        'fields[subscriptionAvailabilities]'?: Array<('availableInNewTerritories' | 'subscription' | 'availableTerritories')>;
        /**
         * the fields to include for returned resources of type subscriptionImages
         */
        'fields[subscriptionImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'uploadOperations' | 'uploaded' | 'state' | 'subscription')>;
        /**
         * the fields to include for returned resources of type subscriptionIntroductoryOffers
         */
        'fields[subscriptionIntroductoryOffers]'?: Array<('startDate' | 'endDate' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'subscription' | 'territory' | 'subscriptionPricePoint')>;
        /**
         * the fields to include for returned resources of type subscriptionLocalizations
         */
        'fields[subscriptionLocalizations]'?: Array<('name' | 'locale' | 'description' | 'state' | 'subscription')>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodes
         */
        'fields[subscriptionOfferCodes]'?: Array<('name' | 'customerEligibilities' | 'offerEligibility' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'totalNumberOfCodes' | 'active' | 'subscription' | 'oneTimeUseCodes' | 'customCodes' | 'prices')>;
        /**
         * the fields to include for returned resources of type subscriptionPrices
         */
        'fields[subscriptionPrices]'?: Array<('startDate' | 'preserved' | 'preserveCurrentPrice' | 'subscription' | 'territory' | 'subscriptionPricePoint')>;
        /**
         * the fields to include for returned resources of type subscriptionPromotionalOffers
         */
        'fields[subscriptionPromotionalOffers]'?: Array<('name' | 'offerCode' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'subscription' | 'prices')>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<('name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images')>;
        /**
         * the fields to include for returned resources of type winBackOffers
         */
        'fields[winBackOffers]'?: Array<('referenceName' | 'offerId' | 'duration' | 'offerMode' | 'periodCount' | 'customerEligibilityPaidSubscriptionDurationInMonths' | 'customerEligibilityTimeSinceLastSubscribedInMonths' | 'customerEligibilityWaitBetweenOffersInMonths' | 'startDate' | 'endDate' | 'priority' | 'promotionIntent' | 'subscription' | 'prices')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images')>;
        /**
         * maximum number of related images returned (when they are included)
         */
        'limit[images]'?: number;
        /**
         * maximum number of related introductoryOffers returned (when they are included)
         */
        'limit[introductoryOffers]'?: number;
        /**
         * maximum number of related offerCodes returned (when they are included)
         */
        'limit[offerCodes]'?: number;
        /**
         * maximum number of related prices returned (when they are included)
         */
        'limit[prices]'?: number;
        /**
         * maximum number of related promotionalOffers returned (when they are included)
         */
        'limit[promotionalOffers]'?: number;
        /**
         * maximum number of related subscriptionLocalizations returned (when they are included)
         */
        'limit[subscriptionLocalizations]'?: number;
        /**
         * maximum number of related winBackOffers returned (when they are included)
         */
        'limit[winBackOffers]'?: number;
    };
};

export type SubscriptionsGetInstanceResponse = (SubscriptionResponse);

export type SubscriptionsGetInstanceError = (ErrorResponse);

export type SubscriptionsUpdateInstanceData = {
    /**
     * Subscription representation
     */
    body: SubscriptionUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionsUpdateInstanceResponse = (SubscriptionResponse);

export type SubscriptionsUpdateInstanceError = (ErrorResponse);

export type SubscriptionsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionsDeleteInstanceResponse = (void);

export type SubscriptionsDeleteInstanceError = (ErrorResponse);

export type TerritoriesGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type TerritoriesGetCollectionResponse = (TerritoriesResponse);

export type TerritoriesGetCollectionError = (ErrorResponse);

export type TerritoryAvailabilitiesUpdateInstanceData = {
    /**
     * TerritoryAvailability representation
     */
    body: TerritoryAvailabilityUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type TerritoryAvailabilitiesUpdateInstanceResponse = (TerritoryAvailabilityResponse);

export type TerritoryAvailabilitiesUpdateInstanceError = (ErrorResponse);

export type UserInvitationsGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type userInvitations
         */
        'fields[userInvitations]'?: Array<('email' | 'firstName' | 'lastName' | 'expirationDate' | 'roles' | 'allAppsVisible' | 'provisioningAllowed' | 'visibleApps')>;
        /**
         * filter by attribute 'email'
         */
        'filter[email]'?: Array<(string)>;
        /**
         * filter by attribute 'roles'
         */
        'filter[roles]'?: Array<('ADMIN' | 'FINANCE' | 'ACCOUNT_HOLDER' | 'SALES' | 'MARKETING' | 'APP_MANAGER' | 'DEVELOPER' | 'ACCESS_TO_REPORTS' | 'CUSTOMER_SUPPORT' | 'CREATE_APPS' | 'CLOUD_MANAGED_DEVELOPER_ID' | 'CLOUD_MANAGED_APP_DISTRIBUTION' | 'GENERATE_INDIVIDUAL_KEYS')>;
        /**
         * filter by id(s) of related 'visibleApps'
         */
        'filter[visibleApps]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('visibleApps')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related visibleApps returned (when they are included)
         */
        'limit[visibleApps]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('email' | '-email' | 'lastName' | '-lastName')>;
    };
};

export type UserInvitationsGetCollectionResponse = (UserInvitationsResponse);

export type UserInvitationsGetCollectionError = (ErrorResponse);

export type UserInvitationsCreateInstanceData = {
    /**
     * UserInvitation representation
     */
    body: UserInvitationCreateRequest;
};

export type UserInvitationsCreateInstanceResponse = (UserInvitationResponse);

export type UserInvitationsCreateInstanceError = (ErrorResponse);

export type UserInvitationsGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type userInvitations
         */
        'fields[userInvitations]'?: Array<('email' | 'firstName' | 'lastName' | 'expirationDate' | 'roles' | 'allAppsVisible' | 'provisioningAllowed' | 'visibleApps')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('visibleApps')>;
        /**
         * maximum number of related visibleApps returned (when they are included)
         */
        'limit[visibleApps]'?: number;
    };
};

export type UserInvitationsGetInstanceResponse = (UserInvitationResponse);

export type UserInvitationsGetInstanceError = (ErrorResponse);

export type UserInvitationsDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type UserInvitationsDeleteInstanceResponse = (void);

export type UserInvitationsDeleteInstanceError = (ErrorResponse);

export type UsersGetCollectionData = {
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type users
         */
        'fields[users]'?: Array<('username' | 'firstName' | 'lastName' | 'roles' | 'allAppsVisible' | 'provisioningAllowed' | 'visibleApps')>;
        /**
         * filter by attribute 'roles'
         */
        'filter[roles]'?: Array<('ADMIN' | 'FINANCE' | 'ACCOUNT_HOLDER' | 'SALES' | 'MARKETING' | 'APP_MANAGER' | 'DEVELOPER' | 'ACCESS_TO_REPORTS' | 'CUSTOMER_SUPPORT' | 'CREATE_APPS' | 'CLOUD_MANAGED_DEVELOPER_ID' | 'CLOUD_MANAGED_APP_DISTRIBUTION' | 'GENERATE_INDIVIDUAL_KEYS')>;
        /**
         * filter by attribute 'username'
         */
        'filter[username]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'visibleApps'
         */
        'filter[visibleApps]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('visibleApps')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related visibleApps returned (when they are included)
         */
        'limit[visibleApps]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('username' | '-username' | 'lastName' | '-lastName')>;
    };
};

export type UsersGetCollectionResponse = (UsersResponse);

export type UsersGetCollectionError = (ErrorResponse);

export type UsersGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type users
         */
        'fields[users]'?: Array<('username' | 'firstName' | 'lastName' | 'roles' | 'allAppsVisible' | 'provisioningAllowed' | 'visibleApps')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('visibleApps')>;
        /**
         * maximum number of related visibleApps returned (when they are included)
         */
        'limit[visibleApps]'?: number;
    };
};

export type UsersGetInstanceResponse = (UserResponse);

export type UsersGetInstanceError = (ErrorResponse);

export type UsersUpdateInstanceData = {
    /**
     * User representation
     */
    body: UserUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type UsersUpdateInstanceResponse = (UserResponse);

export type UsersUpdateInstanceError = (ErrorResponse);

export type UsersDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type UsersDeleteInstanceResponse = (void);

export type UsersDeleteInstanceError = (ErrorResponse);

export type WinBackOffersCreateInstanceData = {
    /**
     * WinBackOffer representation
     */
    body: WinBackOfferCreateRequest;
};

export type WinBackOffersCreateInstanceResponse = (WinBackOfferResponse);

export type WinBackOffersCreateInstanceError = (ErrorResponse);

export type WinBackOffersGetInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type winBackOfferPrices
         */
        'fields[winBackOfferPrices]'?: Array<('territory' | 'subscriptionPricePoint')>;
        /**
         * the fields to include for returned resources of type winBackOffers
         */
        'fields[winBackOffers]'?: Array<('referenceName' | 'offerId' | 'duration' | 'offerMode' | 'periodCount' | 'customerEligibilityPaidSubscriptionDurationInMonths' | 'customerEligibilityTimeSinceLastSubscribedInMonths' | 'customerEligibilityWaitBetweenOffersInMonths' | 'startDate' | 'endDate' | 'priority' | 'promotionIntent' | 'subscription' | 'prices')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('prices')>;
        /**
         * maximum number of related prices returned (when they are included)
         */
        'limit[prices]'?: number;
    };
};

export type WinBackOffersGetInstanceResponse = (WinBackOfferResponse);

export type WinBackOffersGetInstanceError = (ErrorResponse);

export type WinBackOffersUpdateInstanceData = {
    /**
     * WinBackOffer representation
     */
    body: WinBackOfferUpdateRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type WinBackOffersUpdateInstanceResponse = (WinBackOfferResponse);

export type WinBackOffersUpdateInstanceError = (ErrorResponse);

export type WinBackOffersDeleteInstanceData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type WinBackOffersDeleteInstanceResponse = (void);

export type WinBackOffersDeleteInstanceError = (ErrorResponse);

export type AlternativeDistributionPackageVersionsDeltasGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageDeltas
         */
        'fields[alternativeDistributionPackageDeltas]'?: Array<('url' | 'urlExpirationDate' | 'alternativeDistributionKeyBlob' | 'fileChecksum')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AlternativeDistributionPackageVersionsDeltasGetToManyRelatedResponse = (AlternativeDistributionPackageDeltasResponse);

export type AlternativeDistributionPackageVersionsDeltasGetToManyRelatedError = (ErrorResponse);

export type AlternativeDistributionPackageVersionsVariantsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageVariants
         */
        'fields[alternativeDistributionPackageVariants]'?: Array<('url' | 'urlExpirationDate' | 'alternativeDistributionKeyBlob' | 'fileChecksum')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AlternativeDistributionPackageVersionsVariantsGetToManyRelatedResponse = (AlternativeDistributionPackageVariantsResponse);

export type AlternativeDistributionPackageVersionsVariantsGetToManyRelatedError = (ErrorResponse);

export type AlternativeDistributionPackagesVersionsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageDeltas
         */
        'fields[alternativeDistributionPackageDeltas]'?: Array<('url' | 'urlExpirationDate' | 'alternativeDistributionKeyBlob' | 'fileChecksum')>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackages
         */
        'fields[alternativeDistributionPackages]'?: Array<('appStoreVersion' | 'versions')>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageVariants
         */
        'fields[alternativeDistributionPackageVariants]'?: Array<('url' | 'urlExpirationDate' | 'alternativeDistributionKeyBlob' | 'fileChecksum')>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageVersions
         */
        'fields[alternativeDistributionPackageVersions]'?: Array<('url' | 'urlExpirationDate' | 'version' | 'fileChecksum' | 'state' | 'variants' | 'deltas' | 'alternativeDistributionPackage')>;
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<('COMPLETED' | 'REPLACED')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('variants' | 'deltas' | 'alternativeDistributionPackage')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related deltas returned (when they are included)
         */
        'limit[deltas]'?: number;
        /**
         * maximum number of related variants returned (when they are included)
         */
        'limit[variants]'?: number;
    };
};

export type AlternativeDistributionPackagesVersionsGetToManyRelatedResponse = (AlternativeDistributionPackageVersionsResponse);

export type AlternativeDistributionPackagesVersionsGetToManyRelatedError = (ErrorResponse);

export type AnalyticsReportInstancesSegmentsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type analyticsReportSegments
         */
        'fields[analyticsReportSegments]'?: Array<('checksum' | 'sizeInBytes' | 'url')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AnalyticsReportInstancesSegmentsGetToManyRelatedResponse = (AnalyticsReportSegmentsResponse);

export type AnalyticsReportInstancesSegmentsGetToManyRelatedError = (ErrorResponse);

export type AnalyticsReportRequestsReportsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type analyticsReports
         */
        'fields[analyticsReports]'?: Array<('name' | 'category' | 'instances')>;
        /**
         * filter by attribute 'category'
         */
        'filter[category]'?: Array<('APP_USAGE' | 'APP_STORE_ENGAGEMENT' | 'COMMERCE' | 'FRAMEWORK_USAGE' | 'PERFORMANCE')>;
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<(string)>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AnalyticsReportRequestsReportsGetToManyRelatedResponse = (AnalyticsReportsResponse);

export type AnalyticsReportRequestsReportsGetToManyRelatedError = (ErrorResponse);

export type AnalyticsReportsInstancesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type analyticsReportInstances
         */
        'fields[analyticsReportInstances]'?: Array<('granularity' | 'processingDate' | 'segments')>;
        /**
         * filter by attribute 'granularity'
         */
        'filter[granularity]'?: Array<('DAILY' | 'WEEKLY' | 'MONTHLY')>;
        /**
         * filter by attribute 'processingDate'
         */
        'filter[processingDate]'?: Array<(string)>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AnalyticsReportsInstancesGetToManyRelatedResponse = (AnalyticsReportInstancesResponse);

export type AnalyticsReportsInstancesGetToManyRelatedError = (ErrorResponse);

export type AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * the fields to include for returned resources of type territoryAvailabilities
         */
        'fields[territoryAvailabilities]'?: Array<('available' | 'releaseDate' | 'preOrderEnabled' | 'preOrderPublishDate' | 'contentStatuses' | 'territory')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('territory')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedResponse = (TerritoryAvailabilitiesResponse);

export type AppAvailabilitiesV2TerritoryAvailabilitiesGetToManyRelatedError = (ErrorResponse);

export type AppAvailabilitiesAvailableTerritoriesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppAvailabilitiesAvailableTerritoriesGetToManyRelatedResponse = (TerritoriesResponse);

export type AppAvailabilitiesAvailableTerritoriesGetToManyRelatedError = (ErrorResponse);

export type AppCategoriesParentGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<('platforms' | 'subcategories' | 'parent')>;
    };
};

export type AppCategoriesParentGetToOneRelatedResponse = (AppCategoryWithoutIncludesResponse);

export type AppCategoriesParentGetToOneRelatedError = (ErrorResponse);

export type AppCategoriesSubcategoriesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<('platforms' | 'subcategories' | 'parent')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppCategoriesSubcategoriesGetToManyRelatedResponse = (AppCategoriesWithoutIncludesResponse);

export type AppCategoriesSubcategoriesGetToManyRelatedError = (ErrorResponse);

export type AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipDefaultExperienceLocalizations
         */
        'fields[appClipDefaultExperienceLocalizations]'?: Array<('locale' | 'subtitle' | 'appClipDefaultExperience' | 'appClipHeaderImage')>;
        /**
         * the fields to include for returned resources of type appClipHeaderImages
         */
        'fields[appClipHeaderImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appClipDefaultExperienceLocalization')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appClipDefaultExperienceLocalization')>;
    };
};

export type AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedResponse = (AppClipHeaderImageResponse);

export type AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedError = (ErrorResponse);

export type AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipAppStoreReviewDetails
         */
        'fields[appClipAppStoreReviewDetails]'?: Array<('invocationUrls' | 'appClipDefaultExperience')>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<('action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceTemplate')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appClipDefaultExperience')>;
    };
};

export type AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedResponse = (AppClipAppStoreReviewDetailResponse);

export type AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedError = (ErrorResponse);

export type AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipDefaultExperienceLocalizations
         */
        'fields[appClipDefaultExperienceLocalizations]'?: Array<('locale' | 'subtitle' | 'appClipDefaultExperience' | 'appClipHeaderImage')>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<('action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceTemplate')>;
        /**
         * the fields to include for returned resources of type appClipHeaderImages
         */
        'fields[appClipHeaderImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appClipDefaultExperienceLocalization')>;
        /**
         * filter by attribute 'locale'
         */
        'filter[locale]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appClipDefaultExperience' | 'appClipHeaderImage')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedResponse = (AppClipDefaultExperienceLocalizationsResponse);

export type AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedError = (ErrorResponse);

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipResponse = (AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse);

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipError = (ErrorResponse);

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipData = {
    /**
     * Related linkage
     */
    body: AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipResponse = (void);

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipError = (ErrorResponse);

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         */
        'fields[ageRatingDeclarations]'?: Array<('alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus')>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackages
         */
        'fields[alternativeDistributionPackages]'?: Array<('appStoreVersion' | 'versions')>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<('action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceTemplate')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type appStoreReviewDetails
         */
        'fields[appStoreReviewDetails]'?: Array<('contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'appStoreVersion' | 'appStoreReviewAttachments')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<('name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'started' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'platform' | 'app' | 'latestControlVersion' | 'controlVersions')>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<('description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appStoreVersionPhasedReleases
         */
        'fields[appStoreVersionPhasedReleases]'?: Array<('phasedReleaseState' | 'startDate' | 'totalPauseDuration' | 'currentDayNumber' | 'appStoreVersion')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type appStoreVersionSubmissions
         */
        'fields[appStoreVersionSubmissions]'?: Array<('appStoreVersion')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<('enabled' | 'compatibilityVersions' | 'appStoreVersion')>;
        /**
         * the fields to include for returned resources of type routingAppCoverages
         */
        'fields[routingAppCoverages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appStoreVersion')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionPackage')>;
        /**
         * maximum number of related appStoreVersionExperiments returned (when they are included)
         * @deprecated
         */
        'limit[appStoreVersionExperiments]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
         */
        'limit[appStoreVersionExperimentsV2]'?: number;
        /**
         * maximum number of related appStoreVersionLocalizations returned (when they are included)
         */
        'limit[appStoreVersionLocalizations]'?: number;
    };
};

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedResponse = (AppStoreVersionResponse);

export type AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedError = (ErrorResponse);

export type AppClipsAppClipAdvancedExperiencesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipAdvancedExperienceImages
         */
        'fields[appClipAdvancedExperienceImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded')>;
        /**
         * the fields to include for returned resources of type appClipAdvancedExperienceLocalizations
         */
        'fields[appClipAdvancedExperienceLocalizations]'?: Array<('language' | 'title' | 'subtitle')>;
        /**
         * the fields to include for returned resources of type appClipAdvancedExperiences
         */
        'fields[appClipAdvancedExperiences]'?: Array<('link' | 'version' | 'status' | 'action' | 'isPoweredBy' | 'place' | 'placeStatus' | 'businessCategory' | 'defaultLanguage' | 'removed' | 'appClip' | 'headerImage' | 'localizations')>;
        /**
         * the fields to include for returned resources of type appClips
         */
        'fields[appClips]'?: Array<('bundleId' | 'app' | 'appClipDefaultExperiences' | 'appClipAdvancedExperiences')>;
        /**
         * filter by attribute 'action'
         */
        'filter[action]'?: Array<('OPEN' | 'VIEW' | 'PLAY')>;
        /**
         * filter by attribute 'placeStatus'
         */
        'filter[placeStatus]'?: Array<('PENDING' | 'MATCHED' | 'NO_MATCH')>;
        /**
         * filter by attribute 'status'
         */
        'filter[status]'?: Array<('RECEIVED' | 'DEACTIVATED' | 'APP_TRANSFER_IN_PROGRESS')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appClip' | 'headerImage' | 'localizations')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
    };
};

export type AppClipsAppClipAdvancedExperiencesGetToManyRelatedResponse = (AppClipAdvancedExperiencesResponse);

export type AppClipsAppClipAdvancedExperiencesGetToManyRelatedError = (ErrorResponse);

export type AppClipsAppClipDefaultExperiencesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by existence or non-existence of related 'releaseWithAppStoreVersion'
         */
        'exists[releaseWithAppStoreVersion]'?: boolean;
        /**
         * the fields to include for returned resources of type appClipAppStoreReviewDetails
         */
        'fields[appClipAppStoreReviewDetails]'?: Array<('invocationUrls' | 'appClipDefaultExperience')>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperienceLocalizations
         */
        'fields[appClipDefaultExperienceLocalizations]'?: Array<('locale' | 'subtitle' | 'appClipDefaultExperience' | 'appClipHeaderImage')>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<('action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceTemplate')>;
        /**
         * the fields to include for returned resources of type appClips
         */
        'fields[appClips]'?: Array<('bundleId' | 'app' | 'appClipDefaultExperiences' | 'appClipAdvancedExperiences')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)
         */
        'limit[appClipDefaultExperienceLocalizations]'?: number;
    };
};

export type AppClipsAppClipDefaultExperiencesGetToManyRelatedResponse = (AppClipDefaultExperiencesResponse);

export type AppClipsAppClipDefaultExperiencesGetToManyRelatedError = (ErrorResponse);

export type AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<('locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appPreviews
         */
        'fields[appPreviews]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'previewFrameTimeCode' | 'mimeType' | 'videoUrl' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appPreviewSet')>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<('previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<('locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<('description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * filter by id(s) of related 'appStoreVersionExperimentTreatmentLocalization'
         */
        'filter[appStoreVersionExperimentTreatmentLocalization]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'appStoreVersionLocalization'
         */
        'filter[appStoreVersionLocalization]'?: Array<(string)>;
        /**
         * filter by attribute 'previewType'
         */
        'filter[previewType]'?: Array<('IPHONE_67' | 'IPHONE_61' | 'IPHONE_65' | 'IPHONE_58' | 'IPHONE_55' | 'IPHONE_47' | 'IPHONE_40' | 'IPHONE_35' | 'IPAD_PRO_3GEN_129' | 'IPAD_PRO_3GEN_11' | 'IPAD_PRO_129' | 'IPAD_105' | 'IPAD_97' | 'DESKTOP' | 'APPLE_TV' | 'APPLE_VISION_PRO')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appPreviews returned (when they are included)
         */
        'limit[appPreviews]'?: number;
    };
};

export type AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedResponse = (AppPreviewSetsResponse);

export type AppCustomProductPageLocalizationsAppPreviewSetsGetToManyRelatedError = (ErrorResponse);

export type AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<('locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appScreenshots
         */
        'fields[appScreenshots]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appScreenshotSet')>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<('screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<('locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<('description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * filter by id(s) of related 'appStoreVersionExperimentTreatmentLocalization'
         */
        'filter[appStoreVersionExperimentTreatmentLocalization]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'appStoreVersionLocalization'
         */
        'filter[appStoreVersionLocalization]'?: Array<(string)>;
        /**
         * filter by attribute 'screenshotDisplayType'
         */
        'filter[screenshotDisplayType]'?: Array<('APP_IPHONE_67' | 'APP_IPHONE_61' | 'APP_IPHONE_65' | 'APP_IPHONE_58' | 'APP_IPHONE_55' | 'APP_IPHONE_47' | 'APP_IPHONE_40' | 'APP_IPHONE_35' | 'APP_IPAD_PRO_3GEN_129' | 'APP_IPAD_PRO_3GEN_11' | 'APP_IPAD_PRO_129' | 'APP_IPAD_105' | 'APP_IPAD_97' | 'APP_DESKTOP' | 'APP_WATCH_ULTRA' | 'APP_WATCH_SERIES_10' | 'APP_WATCH_SERIES_7' | 'APP_WATCH_SERIES_4' | 'APP_WATCH_SERIES_3' | 'APP_APPLE_TV' | 'APP_APPLE_VISION_PRO' | 'IMESSAGE_APP_IPHONE_67' | 'IMESSAGE_APP_IPHONE_61' | 'IMESSAGE_APP_IPHONE_65' | 'IMESSAGE_APP_IPHONE_58' | 'IMESSAGE_APP_IPHONE_55' | 'IMESSAGE_APP_IPHONE_47' | 'IMESSAGE_APP_IPHONE_40' | 'IMESSAGE_APP_IPAD_PRO_3GEN_129' | 'IMESSAGE_APP_IPAD_PRO_3GEN_11' | 'IMESSAGE_APP_IPAD_PRO_129' | 'IMESSAGE_APP_IPAD_105' | 'IMESSAGE_APP_IPAD_97')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appScreenshots returned (when they are included)
         */
        'limit[appScreenshots]'?: number;
    };
};

export type AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedResponse = (AppScreenshotSetsResponse);

export type AppCustomProductPageLocalizationsAppScreenshotSetsGetToManyRelatedError = (ErrorResponse);

export type AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<('locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appCustomProductPageVersions
         */
        'fields[appCustomProductPageVersions]'?: Array<('version' | 'state' | 'deepLink' | 'appCustomProductPage' | 'appCustomProductPageLocalizations')>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<('previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews')>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<('screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots')>;
        /**
         * filter by attribute 'locale'
         */
        'filter[locale]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appPreviewSets returned (when they are included)
         */
        'limit[appPreviewSets]'?: number;
        /**
         * maximum number of related appScreenshotSets returned (when they are included)
         */
        'limit[appScreenshotSets]'?: number;
    };
};

export type AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedResponse = (AppCustomProductPageLocalizationsResponse);

export type AppCustomProductPageVersionsAppCustomProductPageLocalizationsGetToManyRelatedError = (ErrorResponse);

export type AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<('locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appCustomProductPages
         */
        'fields[appCustomProductPages]'?: Array<('name' | 'url' | 'visible' | 'app' | 'appCustomProductPageVersions' | 'appStoreVersionTemplate' | 'customProductPageTemplate')>;
        /**
         * the fields to include for returned resources of type appCustomProductPageVersions
         */
        'fields[appCustomProductPageVersions]'?: Array<('version' | 'state' | 'deepLink' | 'appCustomProductPage' | 'appCustomProductPageLocalizations')>;
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<('PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REPLACED_WITH_NEW_VERSION' | 'REJECTED')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appCustomProductPage' | 'appCustomProductPageLocalizations')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appCustomProductPageLocalizations returned (when they are included)
         */
        'limit[appCustomProductPageLocalizations]'?: number;
    };
};

export type AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedResponse = (AppCustomProductPageVersionsResponse);

export type AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedError = (ErrorResponse);

export type AppEncryptionDeclarationsAppGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
    };
};

export type AppEncryptionDeclarationsAppGetToOneRelatedResponse = (AppWithoutIncludesResponse);

export type AppEncryptionDeclarationsAppGetToOneRelatedError = (ErrorResponse);

export type AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEncryptionDeclarationDocuments
         */
        'fields[appEncryptionDeclarationDocuments]'?: Array<('fileSize' | 'fileName' | 'assetToken' | 'downloadUrl' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appEncryptionDeclaration')>;
    };
};

export type AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedResponse = (AppEncryptionDeclarationDocumentResponse);

export type AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedError = (ErrorResponse);

export type AppEncryptionDeclarationsBuildsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: AppEncryptionDeclarationBuildsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppEncryptionDeclarationsBuildsCreateToManyRelationshipResponse = (void);

export type AppEncryptionDeclarationsBuildsCreateToManyRelationshipError = (ErrorResponse);

export type AppEventLocalizationsAppEventScreenshotsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEventLocalizations
         */
        'fields[appEventLocalizations]'?: Array<('locale' | 'name' | 'shortDescription' | 'longDescription' | 'appEvent' | 'appEventScreenshots' | 'appEventVideoClips')>;
        /**
         * the fields to include for returned resources of type appEventScreenshots
         */
        'fields[appEventScreenshots]'?: Array<('fileSize' | 'fileName' | 'imageAsset' | 'assetToken' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appEventAssetType' | 'appEventLocalization')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appEventLocalization')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppEventLocalizationsAppEventScreenshotsGetToManyRelatedResponse = (AppEventScreenshotsResponse);

export type AppEventLocalizationsAppEventScreenshotsGetToManyRelatedError = (ErrorResponse);

export type AppEventLocalizationsAppEventVideoClipsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEventLocalizations
         */
        'fields[appEventLocalizations]'?: Array<('locale' | 'name' | 'shortDescription' | 'longDescription' | 'appEvent' | 'appEventScreenshots' | 'appEventVideoClips')>;
        /**
         * the fields to include for returned resources of type appEventVideoClips
         */
        'fields[appEventVideoClips]'?: Array<('fileSize' | 'fileName' | 'previewFrameTimeCode' | 'videoUrl' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appEventAssetType' | 'appEventLocalization')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appEventLocalization')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppEventLocalizationsAppEventVideoClipsGetToManyRelatedResponse = (AppEventVideoClipsResponse);

export type AppEventLocalizationsAppEventVideoClipsGetToManyRelatedError = (ErrorResponse);

export type AppEventsLocalizationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEventLocalizations
         */
        'fields[appEventLocalizations]'?: Array<('locale' | 'name' | 'shortDescription' | 'longDescription' | 'appEvent' | 'appEventScreenshots' | 'appEventVideoClips')>;
        /**
         * the fields to include for returned resources of type appEvents
         */
        'fields[appEvents]'?: Array<('referenceName' | 'badge' | 'eventState' | 'deepLink' | 'purchaseRequirement' | 'primaryLocale' | 'priority' | 'purpose' | 'territorySchedules' | 'archivedTerritorySchedules' | 'app' | 'localizations')>;
        /**
         * the fields to include for returned resources of type appEventScreenshots
         */
        'fields[appEventScreenshots]'?: Array<('fileSize' | 'fileName' | 'imageAsset' | 'assetToken' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appEventAssetType' | 'appEventLocalization')>;
        /**
         * the fields to include for returned resources of type appEventVideoClips
         */
        'fields[appEventVideoClips]'?: Array<('fileSize' | 'fileName' | 'previewFrameTimeCode' | 'videoUrl' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appEventAssetType' | 'appEventLocalization')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appEvent' | 'appEventScreenshots' | 'appEventVideoClips')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appEventScreenshots returned (when they are included)
         */
        'limit[appEventScreenshots]'?: number;
        /**
         * maximum number of related appEventVideoClips returned (when they are included)
         */
        'limit[appEventVideoClips]'?: number;
    };
};

export type AppEventsLocalizationsGetToManyRelatedResponse = (AppEventLocalizationsResponse);

export type AppEventsLocalizationsGetToManyRelatedError = (ErrorResponse);

export type AppInfosAgeRatingDeclarationGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         */
        'fields[ageRatingDeclarations]'?: Array<('alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus')>;
    };
};

export type AppInfosAgeRatingDeclarationGetToOneRelatedResponse = (AgeRatingDeclarationResponse);

export type AppInfosAgeRatingDeclarationGetToOneRelatedError = (ErrorResponse);

export type AppInfosAppInfoLocalizationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appInfoLocalizations
         */
        'fields[appInfoLocalizations]'?: Array<('locale' | 'name' | 'subtitle' | 'privacyPolicyUrl' | 'privacyChoicesUrl' | 'privacyPolicyText' | 'appInfo')>;
        /**
         * the fields to include for returned resources of type appInfos
         */
        'fields[appInfos]'?: Array<('appStoreState' | 'state' | 'appStoreAgeRating' | 'australiaAgeRating' | 'brazilAgeRating' | 'brazilAgeRatingV2' | 'koreaAgeRating' | 'kidsAgeBand' | 'app' | 'ageRatingDeclaration' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo')>;
        /**
         * filter by attribute 'locale'
         */
        'filter[locale]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appInfo')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppInfosAppInfoLocalizationsGetToManyRelatedResponse = (AppInfoLocalizationsResponse);

export type AppInfosAppInfoLocalizationsGetToManyRelatedError = (ErrorResponse);

export type AppInfosPrimaryCategoryGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<('platforms' | 'subcategories' | 'parent')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subcategories' | 'parent')>;
        /**
         * maximum number of related subcategories returned (when they are included)
         */
        'limit[subcategories]'?: number;
    };
};

export type AppInfosPrimaryCategoryGetToOneRelatedResponse = (AppCategoryResponse);

export type AppInfosPrimaryCategoryGetToOneRelatedError = (ErrorResponse);

export type AppInfosPrimarySubcategoryOneGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<('platforms' | 'subcategories' | 'parent')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subcategories' | 'parent')>;
        /**
         * maximum number of related subcategories returned (when they are included)
         */
        'limit[subcategories]'?: number;
    };
};

export type AppInfosPrimarySubcategoryOneGetToOneRelatedResponse = (AppCategoryResponse);

export type AppInfosPrimarySubcategoryOneGetToOneRelatedError = (ErrorResponse);

export type AppInfosPrimarySubcategoryTwoGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<('platforms' | 'subcategories' | 'parent')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subcategories' | 'parent')>;
        /**
         * maximum number of related subcategories returned (when they are included)
         */
        'limit[subcategories]'?: number;
    };
};

export type AppInfosPrimarySubcategoryTwoGetToOneRelatedResponse = (AppCategoryResponse);

export type AppInfosPrimarySubcategoryTwoGetToOneRelatedError = (ErrorResponse);

export type AppInfosSecondaryCategoryGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<('platforms' | 'subcategories' | 'parent')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subcategories' | 'parent')>;
        /**
         * maximum number of related subcategories returned (when they are included)
         */
        'limit[subcategories]'?: number;
    };
};

export type AppInfosSecondaryCategoryGetToOneRelatedResponse = (AppCategoryResponse);

export type AppInfosSecondaryCategoryGetToOneRelatedError = (ErrorResponse);

export type AppInfosSecondarySubcategoryOneGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<('platforms' | 'subcategories' | 'parent')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subcategories' | 'parent')>;
        /**
         * maximum number of related subcategories returned (when they are included)
         */
        'limit[subcategories]'?: number;
    };
};

export type AppInfosSecondarySubcategoryOneGetToOneRelatedResponse = (AppCategoryResponse);

export type AppInfosSecondarySubcategoryOneGetToOneRelatedError = (ErrorResponse);

export type AppInfosSecondarySubcategoryTwoGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<('platforms' | 'subcategories' | 'parent')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subcategories' | 'parent')>;
        /**
         * maximum number of related subcategories returned (when they are included)
         */
        'limit[subcategories]'?: number;
    };
};

export type AppInfosSecondarySubcategoryTwoGetToOneRelatedResponse = (AppCategoryResponse);

export type AppInfosSecondarySubcategoryTwoGetToOneRelatedError = (ErrorResponse);

export type AppPreviewSetsAppPreviewsGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppPreviewSetsAppPreviewsGetToManyRelationshipResponse = (AppPreviewSetAppPreviewsLinkagesResponse);

export type AppPreviewSetsAppPreviewsGetToManyRelationshipError = (ErrorResponse);

export type AppPreviewSetsAppPreviewsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: AppPreviewSetAppPreviewsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppPreviewSetsAppPreviewsReplaceToManyRelationshipResponse = (void);

export type AppPreviewSetsAppPreviewsReplaceToManyRelationshipError = (ErrorResponse);

export type AppPreviewSetsAppPreviewsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPreviews
         */
        'fields[appPreviews]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'previewFrameTimeCode' | 'mimeType' | 'videoUrl' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appPreviewSet')>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<('previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appPreviewSet')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppPreviewSetsAppPreviewsGetToManyRelatedResponse = (AppPreviewsResponse);

export type AppPreviewSetsAppPreviewsGetToManyRelatedError = (ErrorResponse);

export type AppPricePointsV3EqualizationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPricePoints
         */
        'fields[appPricePoints]'?: Array<('customerPrice' | 'proceeds' | 'app' | 'equalizations' | 'territory')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'territory')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppPricePointsV3EqualizationsGetToManyRelatedResponse = (AppPricePointsV3Response);

export type AppPricePointsV3EqualizationsGetToManyRelatedError = (ErrorResponse);

export type AppPriceSchedulesAutomaticPricesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPricePoints
         */
        'fields[appPricePoints]'?: Array<('customerPrice' | 'proceeds' | 'app' | 'equalizations' | 'territory')>;
        /**
         * the fields to include for returned resources of type appPrices
         */
        'fields[appPrices]'?: Array<('manual' | 'startDate' | 'endDate' | 'appPricePoint' | 'territory')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * filter by attribute 'endDate'
         */
        'filter[endDate]'?: Array<(string)>;
        /**
         * filter by attribute 'startDate'
         */
        'filter[startDate]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appPricePoint' | 'territory')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppPriceSchedulesAutomaticPricesGetToManyRelatedResponse = (AppPricesV2Response);

export type AppPriceSchedulesAutomaticPricesGetToManyRelatedError = (ErrorResponse);

export type AppPriceSchedulesBaseTerritoryGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
    };
};

export type AppPriceSchedulesBaseTerritoryGetToOneRelatedResponse = (TerritoryResponse);

export type AppPriceSchedulesBaseTerritoryGetToOneRelatedError = (ErrorResponse);

export type AppPriceSchedulesManualPricesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPricePoints
         */
        'fields[appPricePoints]'?: Array<('customerPrice' | 'proceeds' | 'app' | 'equalizations' | 'territory')>;
        /**
         * the fields to include for returned resources of type appPrices
         */
        'fields[appPrices]'?: Array<('manual' | 'startDate' | 'endDate' | 'appPricePoint' | 'territory')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * filter by attribute 'endDate'
         */
        'filter[endDate]'?: Array<(string)>;
        /**
         * filter by attribute 'startDate'
         */
        'filter[startDate]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appPricePoint' | 'territory')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppPriceSchedulesManualPricesGetToManyRelatedResponse = (AppPricesV2Response);

export type AppPriceSchedulesManualPricesGetToManyRelatedError = (ErrorResponse);

export type AppScreenshotSetsAppScreenshotsGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppScreenshotSetsAppScreenshotsGetToManyRelationshipResponse = (AppScreenshotSetAppScreenshotsLinkagesResponse);

export type AppScreenshotSetsAppScreenshotsGetToManyRelationshipError = (ErrorResponse);

export type AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: AppScreenshotSetAppScreenshotsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipResponse = (void);

export type AppScreenshotSetsAppScreenshotsReplaceToManyRelationshipError = (ErrorResponse);

export type AppScreenshotSetsAppScreenshotsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appScreenshots
         */
        'fields[appScreenshots]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appScreenshotSet')>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<('screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appScreenshotSet')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppScreenshotSetsAppScreenshotsGetToManyRelatedResponse = (AppScreenshotsResponse);

export type AppScreenshotSetsAppScreenshotsGetToManyRelatedError = (ErrorResponse);

export type AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreReviewAttachments
         */
        'fields[appStoreReviewAttachments]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appStoreReviewDetail')>;
        /**
         * the fields to include for returned resources of type appStoreReviewDetails
         */
        'fields[appStoreReviewDetails]'?: Array<('contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'appStoreVersion' | 'appStoreReviewAttachments')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreReviewDetail')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedResponse = (AppStoreReviewAttachmentsResponse);

export type AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedError = (ErrorResponse);

export type AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<('locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appPreviews
         */
        'fields[appPreviews]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'previewFrameTimeCode' | 'mimeType' | 'videoUrl' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appPreviewSet')>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<('previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<('locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<('description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * filter by id(s) of related 'appCustomProductPageLocalization'
         */
        'filter[appCustomProductPageLocalization]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'appStoreVersionLocalization'
         */
        'filter[appStoreVersionLocalization]'?: Array<(string)>;
        /**
         * filter by attribute 'previewType'
         */
        'filter[previewType]'?: Array<('IPHONE_67' | 'IPHONE_61' | 'IPHONE_65' | 'IPHONE_58' | 'IPHONE_55' | 'IPHONE_47' | 'IPHONE_40' | 'IPHONE_35' | 'IPAD_PRO_3GEN_129' | 'IPAD_PRO_3GEN_11' | 'IPAD_PRO_129' | 'IPAD_105' | 'IPAD_97' | 'DESKTOP' | 'APPLE_TV' | 'APPLE_VISION_PRO')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appPreviews returned (when they are included)
         */
        'limit[appPreviews]'?: number;
    };
};

export type AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedResponse = (AppPreviewSetsResponse);

export type AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedError = (ErrorResponse);

export type AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<('locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appScreenshots
         */
        'fields[appScreenshots]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appScreenshotSet')>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<('screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<('locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<('description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * filter by id(s) of related 'appCustomProductPageLocalization'
         */
        'filter[appCustomProductPageLocalization]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'appStoreVersionLocalization'
         */
        'filter[appStoreVersionLocalization]'?: Array<(string)>;
        /**
         * filter by attribute 'screenshotDisplayType'
         */
        'filter[screenshotDisplayType]'?: Array<('APP_IPHONE_67' | 'APP_IPHONE_61' | 'APP_IPHONE_65' | 'APP_IPHONE_58' | 'APP_IPHONE_55' | 'APP_IPHONE_47' | 'APP_IPHONE_40' | 'APP_IPHONE_35' | 'APP_IPAD_PRO_3GEN_129' | 'APP_IPAD_PRO_3GEN_11' | 'APP_IPAD_PRO_129' | 'APP_IPAD_105' | 'APP_IPAD_97' | 'APP_DESKTOP' | 'APP_WATCH_ULTRA' | 'APP_WATCH_SERIES_10' | 'APP_WATCH_SERIES_7' | 'APP_WATCH_SERIES_4' | 'APP_WATCH_SERIES_3' | 'APP_APPLE_TV' | 'APP_APPLE_VISION_PRO' | 'IMESSAGE_APP_IPHONE_67' | 'IMESSAGE_APP_IPHONE_61' | 'IMESSAGE_APP_IPHONE_65' | 'IMESSAGE_APP_IPHONE_58' | 'IMESSAGE_APP_IPHONE_55' | 'IMESSAGE_APP_IPHONE_47' | 'IMESSAGE_APP_IPHONE_40' | 'IMESSAGE_APP_IPAD_PRO_3GEN_129' | 'IMESSAGE_APP_IPAD_PRO_3GEN_11' | 'IMESSAGE_APP_IPAD_PRO_129' | 'IMESSAGE_APP_IPAD_105' | 'IMESSAGE_APP_IPAD_97')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appScreenshots returned (when they are included)
         */
        'limit[appScreenshots]'?: number;
    };
};

export type AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedResponse = (AppScreenshotSetsResponse);

export type AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedError = (ErrorResponse);

export type AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<('previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews')>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<('screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<('locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<('name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations')>;
        /**
         * filter by attribute 'locale'
         */
        'filter[locale]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appPreviewSets returned (when they are included)
         */
        'limit[appPreviewSets]'?: number;
        /**
         * maximum number of related appScreenshotSets returned (when they are included)
         */
        'limit[appScreenshotSets]'?: number;
    };
};

export type AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedResponse = (AppStoreVersionExperimentTreatmentLocalizationsResponse);

export type AppStoreVersionExperimentTreatmentsAppStoreVersionExperimentTreatmentLocalizationsGetToManyRelatedError = (ErrorResponse);

export type AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<('name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'started' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'platform' | 'app' | 'latestControlVersion' | 'controlVersions')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<('locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<('name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included)
         */
        'limit[appStoreVersionExperimentTreatmentLocalizations]'?: number;
    };
};

export type AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedResponse = (AppStoreVersionExperimentTreatmentsResponse);

export type AppStoreVersionExperimentsV2AppStoreVersionExperimentTreatmentsGetToManyRelatedError = (ErrorResponse);

export type AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<('name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'started' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'platform' | 'app' | 'latestControlVersion' | 'controlVersions')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<('locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<('name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appStoreVersionExperimentTreatmentLocalizations returned (when they are included)
         */
        'limit[appStoreVersionExperimentTreatmentLocalizations]'?: number;
    };
};

export type AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedResponse = (AppStoreVersionExperimentTreatmentsResponse);

export type AppStoreVersionExperimentsAppStoreVersionExperimentTreatmentsGetToManyRelatedError = (ErrorResponse);

export type AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<('locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appPreviews
         */
        'fields[appPreviews]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'previewFrameTimeCode' | 'mimeType' | 'videoUrl' | 'previewImage' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appPreviewSet')>;
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<('previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<('locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<('description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * filter by id(s) of related 'appCustomProductPageLocalization'
         */
        'filter[appCustomProductPageLocalization]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'appStoreVersionExperimentTreatmentLocalization'
         */
        'filter[appStoreVersionExperimentTreatmentLocalization]'?: Array<(string)>;
        /**
         * filter by attribute 'previewType'
         */
        'filter[previewType]'?: Array<('IPHONE_67' | 'IPHONE_61' | 'IPHONE_65' | 'IPHONE_58' | 'IPHONE_55' | 'IPHONE_47' | 'IPHONE_40' | 'IPHONE_35' | 'IPAD_PRO_3GEN_129' | 'IPAD_PRO_3GEN_11' | 'IPAD_PRO_129' | 'IPAD_105' | 'IPAD_97' | 'DESKTOP' | 'APPLE_TV' | 'APPLE_VISION_PRO')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appPreviews returned (when they are included)
         */
        'limit[appPreviews]'?: number;
    };
};

export type AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedResponse = (AppPreviewSetsResponse);

export type AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedError = (ErrorResponse);

export type AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCustomProductPageLocalizations
         */
        'fields[appCustomProductPageLocalizations]'?: Array<('locale' | 'promotionalText' | 'appCustomProductPageVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appScreenshots
         */
        'fields[appScreenshots]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appScreenshotSet')>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<('screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
         */
        'fields[appStoreVersionExperimentTreatmentLocalizations]'?: Array<('locale' | 'appStoreVersionExperimentTreatment' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<('description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * filter by id(s) of related 'appCustomProductPageLocalization'
         */
        'filter[appCustomProductPageLocalization]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'appStoreVersionExperimentTreatmentLocalization'
         */
        'filter[appStoreVersionExperimentTreatmentLocalization]'?: Array<(string)>;
        /**
         * filter by attribute 'screenshotDisplayType'
         */
        'filter[screenshotDisplayType]'?: Array<('APP_IPHONE_67' | 'APP_IPHONE_61' | 'APP_IPHONE_65' | 'APP_IPHONE_58' | 'APP_IPHONE_55' | 'APP_IPHONE_47' | 'APP_IPHONE_40' | 'APP_IPHONE_35' | 'APP_IPAD_PRO_3GEN_129' | 'APP_IPAD_PRO_3GEN_11' | 'APP_IPAD_PRO_129' | 'APP_IPAD_105' | 'APP_IPAD_97' | 'APP_DESKTOP' | 'APP_WATCH_ULTRA' | 'APP_WATCH_SERIES_10' | 'APP_WATCH_SERIES_7' | 'APP_WATCH_SERIES_4' | 'APP_WATCH_SERIES_3' | 'APP_APPLE_TV' | 'APP_APPLE_VISION_PRO' | 'IMESSAGE_APP_IPHONE_67' | 'IMESSAGE_APP_IPHONE_61' | 'IMESSAGE_APP_IPHONE_65' | 'IMESSAGE_APP_IPHONE_58' | 'IMESSAGE_APP_IPHONE_55' | 'IMESSAGE_APP_IPHONE_47' | 'IMESSAGE_APP_IPHONE_40' | 'IMESSAGE_APP_IPAD_PRO_3GEN_129' | 'IMESSAGE_APP_IPAD_PRO_3GEN_11' | 'IMESSAGE_APP_IPAD_PRO_129' | 'IMESSAGE_APP_IPAD_105' | 'IMESSAGE_APP_IPAD_97')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appScreenshots returned (when they are included)
         */
        'limit[appScreenshots]'?: number;
    };
};

export type AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedResponse = (AppScreenshotSetsResponse);

export type AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedError = (ErrorResponse);

export type AppStoreVersionsAgeRatingDeclarationGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         */
        'fields[ageRatingDeclarations]'?: Array<('alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus')>;
    };
};

export type AppStoreVersionsAgeRatingDeclarationGetToOneRelatedResponse = (AgeRatingDeclarationWithoutIncludesResponse);

export type AppStoreVersionsAgeRatingDeclarationGetToOneRelatedError = (ErrorResponse);

export type AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionPackages
         */
        'fields[alternativeDistributionPackages]'?: Array<('appStoreVersion' | 'versions')>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackageVersions
         */
        'fields[alternativeDistributionPackageVersions]'?: Array<('url' | 'urlExpirationDate' | 'version' | 'fileChecksum' | 'state' | 'variants' | 'deltas' | 'alternativeDistributionPackage')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('versions')>;
        /**
         * maximum number of related versions returned (when they are included)
         */
        'limit[versions]'?: number;
    };
};

export type AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedResponse = (AlternativeDistributionPackageResponse);

export type AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedError = (ErrorResponse);

export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipResponse = (AppStoreVersionAppClipDefaultExperienceLinkageResponse);

export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipError = (ErrorResponse);

export type AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipData = {
    /**
     * Related linkage
     */
    body: AppStoreVersionAppClipDefaultExperienceLinkageRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipResponse = (void);

export type AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipError = (ErrorResponse);

export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipAppStoreReviewDetails
         */
        'fields[appClipAppStoreReviewDetails]'?: Array<('invocationUrls' | 'appClipDefaultExperience')>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperienceLocalizations
         */
        'fields[appClipDefaultExperienceLocalizations]'?: Array<('locale' | 'subtitle' | 'appClipDefaultExperience' | 'appClipHeaderImage')>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<('action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceTemplate')>;
        /**
         * the fields to include for returned resources of type appClips
         */
        'fields[appClips]'?: Array<('bundleId' | 'app' | 'appClipDefaultExperiences' | 'appClipAdvancedExperiences')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail')>;
        /**
         * maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)
         */
        'limit[appClipDefaultExperienceLocalizations]'?: number;
    };
};

export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedResponse = (AppClipDefaultExperienceResponse);

export type AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedError = (ErrorResponse);

export type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreReviewAttachments
         */
        'fields[appStoreReviewAttachments]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appStoreReviewDetail')>;
        /**
         * the fields to include for returned resources of type appStoreReviewDetails
         */
        'fields[appStoreReviewDetails]'?: Array<('contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'appStoreVersion' | 'appStoreReviewAttachments')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersion' | 'appStoreReviewAttachments')>;
        /**
         * maximum number of related appStoreReviewAttachments returned (when they are included)
         */
        'limit[appStoreReviewAttachments]'?: number;
    };
};

export type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedResponse = (AppStoreReviewDetailResponse);

export type AppStoreVersionsAppStoreReviewDetailGetToOneRelatedError = (ErrorResponse);

export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<('name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'started' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<('name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<('PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REJECTED' | 'COMPLETED' | 'STOPPED')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersion' | 'appStoreVersionExperimentTreatments')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
         */
        'limit[appStoreVersionExperimentTreatments]'?: number;
    };
};

export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedResponse = (AppStoreVersionExperimentsResponse);

export type AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedError = (ErrorResponse);

export type AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<('name' | 'platform' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'started' | 'app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<('name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<('PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REJECTED' | 'COMPLETED' | 'STOPPED')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
         */
        'limit[appStoreVersionExperimentTreatments]'?: number;
        /**
         * maximum number of related controlVersions returned (when they are included)
         */
        'limit[controlVersions]'?: number;
    };
};

export type AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedResponse = (AppStoreVersionExperimentsV2Response);

export type AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedError = (ErrorResponse);

export type AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPreviewSets
         */
        'fields[appPreviewSets]'?: Array<('previewType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appPreviews')>;
        /**
         * the fields to include for returned resources of type appScreenshotSets
         */
        'fields[appScreenshotSets]'?: Array<('screenshotDisplayType' | 'appStoreVersionLocalization' | 'appCustomProductPageLocalization' | 'appStoreVersionExperimentTreatmentLocalization' | 'appScreenshots')>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<('description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * filter by attribute 'locale'
         */
        'filter[locale]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appPreviewSets returned (when they are included)
         */
        'limit[appPreviewSets]'?: number;
        /**
         * maximum number of related appScreenshotSets returned (when they are included)
         */
        'limit[appScreenshotSets]'?: number;
    };
};

export type AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedResponse = (AppStoreVersionLocalizationsResponse);

export type AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedError = (ErrorResponse);

export type AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersionPhasedReleases
         */
        'fields[appStoreVersionPhasedReleases]'?: Array<('phasedReleaseState' | 'startDate' | 'totalPauseDuration' | 'currentDayNumber' | 'appStoreVersion')>;
    };
};

export type AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedResponse = (AppStoreVersionPhasedReleaseWithoutIncludesResponse);

export type AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedError = (ErrorResponse);

export type AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type appStoreVersionSubmissions
         */
        'fields[appStoreVersionSubmissions]'?: Array<('appStoreVersion')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersion')>;
    };
};

export type AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedResponse = (AppStoreVersionSubmissionResponse);

export type AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedError = (ErrorResponse);

export type AppStoreVersionsBuildGetToOneRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionsBuildGetToOneRelationshipResponse = (AppStoreVersionBuildLinkageResponse);

export type AppStoreVersionsBuildGetToOneRelationshipError = (ErrorResponse);

export type AppStoreVersionsBuildUpdateToOneRelationshipData = {
    /**
     * Related linkage
     */
    body: AppStoreVersionBuildLinkageRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppStoreVersionsBuildUpdateToOneRelationshipResponse = (void);

export type AppStoreVersionsBuildUpdateToOneRelationshipError = (ErrorResponse);

export type AppStoreVersionsBuildGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
    };
};

export type AppStoreVersionsBuildGetToOneRelatedResponse = (BuildWithoutIncludesResponse);

export type AppStoreVersionsBuildGetToOneRelatedError = (ErrorResponse);

export type AppStoreVersionsCustomerReviewsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by publishedResponse
         */
        'exists[publishedResponse]'?: boolean;
        /**
         * the fields to include for returned resources of type customerReviewResponses
         */
        'fields[customerReviewResponses]'?: Array<('responseBody' | 'lastModifiedDate' | 'state' | 'review')>;
        /**
         * the fields to include for returned resources of type customerReviews
         */
        'fields[customerReviews]'?: Array<('rating' | 'title' | 'body' | 'reviewerNickname' | 'createdDate' | 'territory' | 'response')>;
        /**
         * filter by attribute 'rating'
         */
        'filter[rating]'?: Array<(string)>;
        /**
         * filter by attribute 'territory'
         */
        'filter[territory]'?: Array<('ABW' | 'AFG' | 'AGO' | 'AIA' | 'ALB' | 'AND' | 'ANT' | 'ARE' | 'ARG' | 'ARM' | 'ASM' | 'ATG' | 'AUS' | 'AUT' | 'AZE' | 'BDI' | 'BEL' | 'BEN' | 'BES' | 'BFA' | 'BGD' | 'BGR' | 'BHR' | 'BHS' | 'BIH' | 'BLR' | 'BLZ' | 'BMU' | 'BOL' | 'BRA' | 'BRB' | 'BRN' | 'BTN' | 'BWA' | 'CAF' | 'CAN' | 'CHE' | 'CHL' | 'CHN' | 'CIV' | 'CMR' | 'COD' | 'COG' | 'COK' | 'COL' | 'COM' | 'CPV' | 'CRI' | 'CUB' | 'CUW' | 'CXR' | 'CYM' | 'CYP' | 'CZE' | 'DEU' | 'DJI' | 'DMA' | 'DNK' | 'DOM' | 'DZA' | 'ECU' | 'EGY' | 'ERI' | 'ESP' | 'EST' | 'ETH' | 'FIN' | 'FJI' | 'FLK' | 'FRA' | 'FRO' | 'FSM' | 'GAB' | 'GBR' | 'GEO' | 'GGY' | 'GHA' | 'GIB' | 'GIN' | 'GLP' | 'GMB' | 'GNB' | 'GNQ' | 'GRC' | 'GRD' | 'GRL' | 'GTM' | 'GUF' | 'GUM' | 'GUY' | 'HKG' | 'HND' | 'HRV' | 'HTI' | 'HUN' | 'IDN' | 'IMN' | 'IND' | 'IRL' | 'IRQ' | 'ISL' | 'ISR' | 'ITA' | 'JAM' | 'JEY' | 'JOR' | 'JPN' | 'KAZ' | 'KEN' | 'KGZ' | 'KHM' | 'KIR' | 'KNA' | 'KOR' | 'KWT' | 'LAO' | 'LBN' | 'LBR' | 'LBY' | 'LCA' | 'LIE' | 'LKA' | 'LSO' | 'LTU' | 'LUX' | 'LVA' | 'MAC' | 'MAR' | 'MCO' | 'MDA' | 'MDG' | 'MDV' | 'MEX' | 'MHL' | 'MKD' | 'MLI' | 'MLT' | 'MMR' | 'MNE' | 'MNG' | 'MNP' | 'MOZ' | 'MRT' | 'MSR' | 'MTQ' | 'MUS' | 'MWI' | 'MYS' | 'MYT' | 'NAM' | 'NCL' | 'NER' | 'NFK' | 'NGA' | 'NIC' | 'NIU' | 'NLD' | 'NOR' | 'NPL' | 'NRU' | 'NZL' | 'OMN' | 'PAK' | 'PAN' | 'PER' | 'PHL' | 'PLW' | 'PNG' | 'POL' | 'PRI' | 'PRT' | 'PRY' | 'PSE' | 'PYF' | 'QAT' | 'REU' | 'ROU' | 'RUS' | 'RWA' | 'SAU' | 'SEN' | 'SGP' | 'SHN' | 'SLB' | 'SLE' | 'SLV' | 'SMR' | 'SOM' | 'SPM' | 'SRB' | 'SSD' | 'STP' | 'SUR' | 'SVK' | 'SVN' | 'SWE' | 'SWZ' | 'SXM' | 'SYC' | 'TCA' | 'TCD' | 'TGO' | 'THA' | 'TJK' | 'TKM' | 'TLS' | 'TON' | 'TTO' | 'TUN' | 'TUR' | 'TUV' | 'TWN' | 'TZA' | 'UGA' | 'UKR' | 'UMI' | 'URY' | 'USA' | 'UZB' | 'VAT' | 'VCT' | 'VEN' | 'VGB' | 'VIR' | 'VNM' | 'VUT' | 'WLF' | 'WSM' | 'YEM' | 'ZAF' | 'ZMB' | 'ZWE')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('response')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('rating' | '-rating' | 'createdDate' | '-createdDate')>;
    };
};

export type AppStoreVersionsCustomerReviewsGetToManyRelatedResponse = (CustomerReviewsResponse);

export type AppStoreVersionsCustomerReviewsGetToManyRelatedError = (ErrorResponse);

export type AppStoreVersionsGameCenterAppVersionGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<('enabled' | 'compatibilityVersions' | 'appStoreVersion')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('compatibilityVersions' | 'appStoreVersion')>;
        /**
         * maximum number of related compatibilityVersions returned (when they are included)
         */
        'limit[compatibilityVersions]'?: number;
    };
};

export type AppStoreVersionsGameCenterAppVersionGetToOneRelatedResponse = (GameCenterAppVersionResponse);

export type AppStoreVersionsGameCenterAppVersionGetToOneRelatedError = (ErrorResponse);

export type AppStoreVersionsRoutingAppCoverageGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type routingAppCoverages
         */
        'fields[routingAppCoverages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appStoreVersion')>;
    };
};

export type AppStoreVersionsRoutingAppCoverageGetToOneRelatedResponse = (RoutingAppCoverageWithoutIncludesResponse);

export type AppStoreVersionsRoutingAppCoverageGetToOneRelatedError = (ErrorResponse);

export type AppsAlternativeDistributionKeyGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type alternativeDistributionKeys
         */
        'fields[alternativeDistributionKeys]'?: Array<('publicKey' | 'app')>;
    };
};

export type AppsAlternativeDistributionKeyGetToOneRelatedResponse = (AlternativeDistributionKeyResponse);

export type AppsAlternativeDistributionKeyGetToOneRelatedError = (ErrorResponse);

export type AppsAnalyticsReportRequestsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type analyticsReportRequests
         */
        'fields[analyticsReportRequests]'?: Array<('accessType' | 'stoppedDueToInactivity' | 'app' | 'reports')>;
        /**
         * the fields to include for returned resources of type analyticsReports
         */
        'fields[analyticsReports]'?: Array<('name' | 'category' | 'instances')>;
        /**
         * filter by attribute 'accessType'
         */
        'filter[accessType]'?: Array<('ONE_TIME_SNAPSHOT' | 'ONGOING')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('reports')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related reports returned (when they are included)
         */
        'limit[reports]'?: number;
    };
};

export type AppsAnalyticsReportRequestsGetToManyRelatedResponse = (AnalyticsReportRequestsResponse);

export type AppsAnalyticsReportRequestsGetToManyRelatedError = (ErrorResponse);

export type AppsAppAvailabilityGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appAvailabilities
         */
        'fields[appAvailabilities]'?: Array<('availableInNewTerritories' | 'app' | 'availableTerritories')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'availableTerritories')>;
        /**
         * maximum number of related availableTerritories returned (when they are included)
         */
        'limit[availableTerritories]'?: number;
    };
};

export type AppsAppAvailabilityGetToOneRelatedResponse = (AppAvailabilityResponse);

export type AppsAppAvailabilityGetToOneRelatedError = (ErrorResponse);

export type AppsAppAvailabilityV2GetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appAvailabilities
         */
        'fields[appAvailabilities]'?: Array<('availableInNewTerritories' | 'app' | 'territoryAvailabilities')>;
        /**
         * the fields to include for returned resources of type territoryAvailabilities
         */
        'fields[territoryAvailabilities]'?: Array<('available' | 'releaseDate' | 'preOrderEnabled' | 'preOrderPublishDate' | 'contentStatuses' | 'territory')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('territoryAvailabilities')>;
        /**
         * maximum number of related territoryAvailabilities returned (when they are included)
         */
        'limit[territoryAvailabilities]'?: number;
    };
};

export type AppsAppAvailabilityV2GetToOneRelatedResponse = (AppAvailabilityV2Response);

export type AppsAppAvailabilityV2GetToOneRelatedError = (ErrorResponse);

export type AppsAppClipsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<('action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceTemplate')>;
        /**
         * the fields to include for returned resources of type appClips
         */
        'fields[appClips]'?: Array<('bundleId' | 'app' | 'appClipDefaultExperiences' | 'appClipAdvancedExperiences')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * filter by attribute 'bundleId'
         */
        'filter[bundleId]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'appClipDefaultExperiences')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appClipDefaultExperiences returned (when they are included)
         */
        'limit[appClipDefaultExperiences]'?: number;
    };
};

export type AppsAppClipsGetToManyRelatedResponse = (AppClipsResponse);

export type AppsAppClipsGetToManyRelatedError = (ErrorResponse);

export type AppsAppCustomProductPagesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCustomProductPages
         */
        'fields[appCustomProductPages]'?: Array<('name' | 'url' | 'visible' | 'app' | 'appCustomProductPageVersions' | 'appStoreVersionTemplate' | 'customProductPageTemplate')>;
        /**
         * the fields to include for returned resources of type appCustomProductPageVersions
         */
        'fields[appCustomProductPageVersions]'?: Array<('version' | 'state' | 'deepLink' | 'appCustomProductPage' | 'appCustomProductPageLocalizations')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * filter by attribute 'visible'
         */
        'filter[visible]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'appCustomProductPageVersions')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appCustomProductPageVersions returned (when they are included)
         */
        'limit[appCustomProductPageVersions]'?: number;
    };
};

export type AppsAppCustomProductPagesGetToManyRelatedResponse = (AppCustomProductPagesResponse);

export type AppsAppCustomProductPagesGetToManyRelatedError = (ErrorResponse);

export type AppsAppEncryptionDeclarationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEncryptionDeclarationDocuments
         */
        'fields[appEncryptionDeclarationDocuments]'?: Array<('fileSize' | 'fileName' | 'assetToken' | 'downloadUrl' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appEncryptionDeclaration')>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<('appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * filter by id(s) of related 'builds'
         */
        'filter[builds]'?: Array<(string)>;
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<('IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'builds' | 'appEncryptionDeclarationDocument')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
};

export type AppsAppEncryptionDeclarationsGetToManyRelatedResponse = (AppEncryptionDeclarationsResponse);

export type AppsAppEncryptionDeclarationsGetToManyRelatedError = (ErrorResponse);

export type AppsAppEventsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEventLocalizations
         */
        'fields[appEventLocalizations]'?: Array<('locale' | 'name' | 'shortDescription' | 'longDescription' | 'appEvent' | 'appEventScreenshots' | 'appEventVideoClips')>;
        /**
         * the fields to include for returned resources of type appEvents
         */
        'fields[appEvents]'?: Array<('referenceName' | 'badge' | 'eventState' | 'deepLink' | 'purchaseRequirement' | 'primaryLocale' | 'priority' | 'purpose' | 'territorySchedules' | 'archivedTerritorySchedules' | 'app' | 'localizations')>;
        /**
         * filter by attribute 'eventState'
         */
        'filter[eventState]'?: Array<('DRAFT' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'ACCEPTED' | 'APPROVED' | 'PUBLISHED' | 'PAST' | 'ARCHIVED')>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('localizations')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
    };
};

export type AppsAppEventsGetToManyRelatedResponse = (AppEventsResponse);

export type AppsAppEventsGetToManyRelatedError = (ErrorResponse);

export type AppsAppInfosGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         */
        'fields[ageRatingDeclarations]'?: Array<('alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus')>;
        /**
         * the fields to include for returned resources of type appCategories
         */
        'fields[appCategories]'?: Array<('platforms' | 'subcategories' | 'parent')>;
        /**
         * the fields to include for returned resources of type appInfoLocalizations
         */
        'fields[appInfoLocalizations]'?: Array<('locale' | 'name' | 'subtitle' | 'privacyPolicyUrl' | 'privacyChoicesUrl' | 'privacyPolicyText' | 'appInfo')>;
        /**
         * the fields to include for returned resources of type appInfos
         */
        'fields[appInfos]'?: Array<('appStoreState' | 'state' | 'appStoreAgeRating' | 'australiaAgeRating' | 'brazilAgeRating' | 'brazilAgeRatingV2' | 'koreaAgeRating' | 'kidsAgeBand' | 'app' | 'ageRatingDeclaration' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'ageRatingDeclaration' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appInfoLocalizations returned (when they are included)
         */
        'limit[appInfoLocalizations]'?: number;
    };
};

export type AppsAppInfosGetToManyRelatedResponse = (AppInfosResponse);

export type AppsAppInfosGetToManyRelatedError = (ErrorResponse);

export type AppsAppPricePointsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPricePoints
         */
        'fields[appPricePoints]'?: Array<('customerPrice' | 'proceeds' | 'app' | 'equalizations' | 'territory')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'territory')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppsAppPricePointsGetToManyRelatedResponse = (AppPricePointsV3Response);

export type AppsAppPricePointsGetToManyRelatedError = (ErrorResponse);

export type AppsAppPriceScheduleGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPrices
         */
        'fields[appPrices]'?: Array<('manual' | 'startDate' | 'endDate' | 'appPricePoint' | 'territory')>;
        /**
         * the fields to include for returned resources of type appPriceSchedules
         */
        'fields[appPriceSchedules]'?: Array<('app' | 'baseTerritory' | 'manualPrices' | 'automaticPrices')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'baseTerritory' | 'manualPrices' | 'automaticPrices')>;
        /**
         * maximum number of related automaticPrices returned (when they are included)
         */
        'limit[automaticPrices]'?: number;
        /**
         * maximum number of related manualPrices returned (when they are included)
         */
        'limit[manualPrices]'?: number;
    };
};

export type AppsAppPriceScheduleGetToOneRelatedResponse = (AppPriceScheduleResponse);

export type AppsAppPriceScheduleGetToOneRelatedError = (ErrorResponse);

export type AppsAppStoreVersionExperimentsV2GetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<('name' | 'platform' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'started' | 'app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperimentTreatments
         */
        'fields[appStoreVersionExperimentTreatments]'?: Array<('name' | 'appIcon' | 'appIconName' | 'promotedDate' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appStoreVersionExperimentTreatmentLocalizations')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<('PREPARE_FOR_SUBMISSION' | 'READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'ACCEPTED' | 'APPROVED' | 'REJECTED' | 'COMPLETED' | 'STOPPED')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
         */
        'limit[appStoreVersionExperimentTreatments]'?: number;
        /**
         * maximum number of related controlVersions returned (when they are included)
         */
        'limit[controlVersions]'?: number;
    };
};

export type AppsAppStoreVersionExperimentsV2GetToManyRelatedResponse = (AppStoreVersionExperimentsV2Response);

export type AppsAppStoreVersionExperimentsV2GetToManyRelatedError = (ErrorResponse);

export type AppsAppStoreVersionsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         */
        'fields[ageRatingDeclarations]'?: Array<('alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus')>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackages
         */
        'fields[alternativeDistributionPackages]'?: Array<('appStoreVersion' | 'versions')>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<('action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceTemplate')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type appStoreReviewDetails
         */
        'fields[appStoreReviewDetails]'?: Array<('contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'appStoreVersion' | 'appStoreReviewAttachments')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<('name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'started' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'platform' | 'app' | 'latestControlVersion' | 'controlVersions')>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<('description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appStoreVersionPhasedReleases
         */
        'fields[appStoreVersionPhasedReleases]'?: Array<('phasedReleaseState' | 'startDate' | 'totalPauseDuration' | 'currentDayNumber' | 'appStoreVersion')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type appStoreVersionSubmissions
         */
        'fields[appStoreVersionSubmissions]'?: Array<('appStoreVersion')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<('enabled' | 'compatibilityVersions' | 'appStoreVersion')>;
        /**
         * the fields to include for returned resources of type routingAppCoverages
         */
        'fields[routingAppCoverages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appStoreVersion')>;
        /**
         * filter by attribute 'appStoreState'
         */
        'filter[appStoreState]'?: Array<('ACCEPTED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'INVALID_BINARY' | 'METADATA_REJECTED' | 'PENDING_APPLE_RELEASE' | 'PENDING_CONTRACT' | 'PENDING_DEVELOPER_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'PREORDER_READY_FOR_SALE' | 'PROCESSING_FOR_APP_STORE' | 'READY_FOR_REVIEW' | 'READY_FOR_SALE' | 'REJECTED' | 'REMOVED_FROM_SALE' | 'WAITING_FOR_EXPORT_COMPLIANCE' | 'WAITING_FOR_REVIEW' | 'REPLACED_WITH_NEW_VERSION' | 'NOT_APPLICABLE')>;
        /**
         * filter by attribute 'appVersionState'
         */
        'filter[appVersionState]'?: Array<('ACCEPTED' | 'DEVELOPER_REJECTED' | 'IN_REVIEW' | 'INVALID_BINARY' | 'METADATA_REJECTED' | 'PENDING_APPLE_RELEASE' | 'PENDING_DEVELOPER_RELEASE' | 'PREPARE_FOR_SUBMISSION' | 'PROCESSING_FOR_DISTRIBUTION' | 'READY_FOR_DISTRIBUTION' | 'READY_FOR_REVIEW' | 'REJECTED' | 'REPLACED_WITH_NEW_VERSION' | 'WAITING_FOR_EXPORT_COMPLIANCE' | 'WAITING_FOR_REVIEW')>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<('IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS')>;
        /**
         * filter by attribute 'versionString'
         */
        'filter[versionString]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionPackage')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related appStoreVersionExperiments returned (when they are included)
         * @deprecated
         */
        'limit[appStoreVersionExperiments]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
         */
        'limit[appStoreVersionExperimentsV2]'?: number;
        /**
         * maximum number of related appStoreVersionLocalizations returned (when they are included)
         */
        'limit[appStoreVersionLocalizations]'?: number;
    };
};

export type AppsAppStoreVersionsGetToManyRelatedResponse = (AppStoreVersionsResponse);

export type AppsAppStoreVersionsGetToManyRelatedError = (ErrorResponse);

export type AppsBetaAppLocalizationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaAppLocalizations
         */
        'fields[betaAppLocalizations]'?: Array<('feedbackEmail' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy' | 'description' | 'locale' | 'app')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppsBetaAppLocalizationsGetToManyRelatedResponse = (BetaAppLocalizationsWithoutIncludesResponse);

export type AppsBetaAppLocalizationsGetToManyRelatedError = (ErrorResponse);

export type AppsBetaAppReviewDetailGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaAppReviewDetails
         */
        'fields[betaAppReviewDetails]'?: Array<('contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'app')>;
    };
};

export type AppsBetaAppReviewDetailGetToOneRelatedResponse = (BetaAppReviewDetailWithoutIncludesResponse);

export type AppsBetaAppReviewDetailGetToOneRelatedError = (ErrorResponse);

export type AppsBetaGroupsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<('name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'app' | 'builds' | 'betaTesters')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppsBetaGroupsGetToManyRelatedResponse = (BetaGroupsWithoutIncludesResponse);

export type AppsBetaGroupsGetToManyRelatedError = (ErrorResponse);

export type AppsBetaLicenseAgreementGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaLicenseAgreements
         */
        'fields[betaLicenseAgreements]'?: Array<('agreementText' | 'app')>;
    };
};

export type AppsBetaLicenseAgreementGetToOneRelatedResponse = (BetaLicenseAgreementWithoutIncludesResponse);

export type AppsBetaLicenseAgreementGetToOneRelatedError = (ErrorResponse);

export type AppsBetaTestersDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: AppBetaTestersLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppsBetaTestersDeleteToManyRelationshipResponse = (unknown | void);

export type AppsBetaTestersDeleteToManyRelationshipError = (ErrorResponse);

export type AppsBuildsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppsBuildsGetToManyRelatedResponse = (BuildsWithoutIncludesResponse);

export type AppsBuildsGetToManyRelatedError = (ErrorResponse);

export type AppsCiProductGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type bundleIds
         */
        'fields[bundleIds]'?: Array<('name' | 'platform' | 'identifier' | 'seedId' | 'profiles' | 'bundleIdCapabilities' | 'app')>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<('name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns')>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<('lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'bundleId' | 'primaryRepositories')>;
        /**
         * maximum number of related primaryRepositories returned (when they are included)
         */
        'limit[primaryRepositories]'?: number;
    };
};

export type AppsCiProductGetToOneRelatedResponse = (CiProductResponse);

export type AppsCiProductGetToOneRelatedError = (ErrorResponse);

export type AppsCustomerReviewsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by publishedResponse
         */
        'exists[publishedResponse]'?: boolean;
        /**
         * the fields to include for returned resources of type customerReviewResponses
         */
        'fields[customerReviewResponses]'?: Array<('responseBody' | 'lastModifiedDate' | 'state' | 'review')>;
        /**
         * the fields to include for returned resources of type customerReviews
         */
        'fields[customerReviews]'?: Array<('rating' | 'title' | 'body' | 'reviewerNickname' | 'createdDate' | 'territory' | 'response')>;
        /**
         * filter by attribute 'rating'
         */
        'filter[rating]'?: Array<(string)>;
        /**
         * filter by attribute 'territory'
         */
        'filter[territory]'?: Array<('ABW' | 'AFG' | 'AGO' | 'AIA' | 'ALB' | 'AND' | 'ANT' | 'ARE' | 'ARG' | 'ARM' | 'ASM' | 'ATG' | 'AUS' | 'AUT' | 'AZE' | 'BDI' | 'BEL' | 'BEN' | 'BES' | 'BFA' | 'BGD' | 'BGR' | 'BHR' | 'BHS' | 'BIH' | 'BLR' | 'BLZ' | 'BMU' | 'BOL' | 'BRA' | 'BRB' | 'BRN' | 'BTN' | 'BWA' | 'CAF' | 'CAN' | 'CHE' | 'CHL' | 'CHN' | 'CIV' | 'CMR' | 'COD' | 'COG' | 'COK' | 'COL' | 'COM' | 'CPV' | 'CRI' | 'CUB' | 'CUW' | 'CXR' | 'CYM' | 'CYP' | 'CZE' | 'DEU' | 'DJI' | 'DMA' | 'DNK' | 'DOM' | 'DZA' | 'ECU' | 'EGY' | 'ERI' | 'ESP' | 'EST' | 'ETH' | 'FIN' | 'FJI' | 'FLK' | 'FRA' | 'FRO' | 'FSM' | 'GAB' | 'GBR' | 'GEO' | 'GGY' | 'GHA' | 'GIB' | 'GIN' | 'GLP' | 'GMB' | 'GNB' | 'GNQ' | 'GRC' | 'GRD' | 'GRL' | 'GTM' | 'GUF' | 'GUM' | 'GUY' | 'HKG' | 'HND' | 'HRV' | 'HTI' | 'HUN' | 'IDN' | 'IMN' | 'IND' | 'IRL' | 'IRQ' | 'ISL' | 'ISR' | 'ITA' | 'JAM' | 'JEY' | 'JOR' | 'JPN' | 'KAZ' | 'KEN' | 'KGZ' | 'KHM' | 'KIR' | 'KNA' | 'KOR' | 'KWT' | 'LAO' | 'LBN' | 'LBR' | 'LBY' | 'LCA' | 'LIE' | 'LKA' | 'LSO' | 'LTU' | 'LUX' | 'LVA' | 'MAC' | 'MAR' | 'MCO' | 'MDA' | 'MDG' | 'MDV' | 'MEX' | 'MHL' | 'MKD' | 'MLI' | 'MLT' | 'MMR' | 'MNE' | 'MNG' | 'MNP' | 'MOZ' | 'MRT' | 'MSR' | 'MTQ' | 'MUS' | 'MWI' | 'MYS' | 'MYT' | 'NAM' | 'NCL' | 'NER' | 'NFK' | 'NGA' | 'NIC' | 'NIU' | 'NLD' | 'NOR' | 'NPL' | 'NRU' | 'NZL' | 'OMN' | 'PAK' | 'PAN' | 'PER' | 'PHL' | 'PLW' | 'PNG' | 'POL' | 'PRI' | 'PRT' | 'PRY' | 'PSE' | 'PYF' | 'QAT' | 'REU' | 'ROU' | 'RUS' | 'RWA' | 'SAU' | 'SEN' | 'SGP' | 'SHN' | 'SLB' | 'SLE' | 'SLV' | 'SMR' | 'SOM' | 'SPM' | 'SRB' | 'SSD' | 'STP' | 'SUR' | 'SVK' | 'SVN' | 'SWE' | 'SWZ' | 'SXM' | 'SYC' | 'TCA' | 'TCD' | 'TGO' | 'THA' | 'TJK' | 'TKM' | 'TLS' | 'TON' | 'TTO' | 'TUN' | 'TUR' | 'TUV' | 'TWN' | 'TZA' | 'UGA' | 'UKR' | 'UMI' | 'URY' | 'USA' | 'UZB' | 'VAT' | 'VCT' | 'VEN' | 'VGB' | 'VIR' | 'VNM' | 'VUT' | 'WLF' | 'WSM' | 'YEM' | 'ZAF' | 'ZMB' | 'ZWE')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('response')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('rating' | '-rating' | 'createdDate' | '-createdDate')>;
    };
};

export type AppsCustomerReviewsGetToManyRelatedResponse = (CustomerReviewsResponse);

export type AppsCustomerReviewsGetToManyRelatedError = (ErrorResponse);

export type AppsEndUserLicenseAgreementGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type endUserLicenseAgreements
         */
        'fields[endUserLicenseAgreements]'?: Array<('agreementText' | 'app' | 'territories')>;
    };
};

export type AppsEndUserLicenseAgreementGetToOneRelatedResponse = (EndUserLicenseAgreementWithoutIncludesResponse);

export type AppsEndUserLicenseAgreementGetToOneRelatedError = (ErrorResponse);

export type AppsGameCenterDetailGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterAchievement')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<('referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<('enabled' | 'compatibilityVersions' | 'appStoreVersion')>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboard')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * maximum number of related achievementReleases returned (when they are included)
         */
        'limit[achievementReleases]'?: number;
        /**
         * maximum number of related gameCenterAchievements returned (when they are included)
         */
        'limit[gameCenterAchievements]'?: number;
        /**
         * maximum number of related gameCenterAppVersions returned (when they are included)
         */
        'limit[gameCenterAppVersions]'?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related leaderboardReleases returned (when they are included)
         */
        'limit[leaderboardReleases]'?: number;
        /**
         * maximum number of related leaderboardSetReleases returned (when they are included)
         */
        'limit[leaderboardSetReleases]'?: number;
    };
};

export type AppsGameCenterDetailGetToOneRelatedResponse = (GameCenterDetailResponse);

export type AppsGameCenterDetailGetToOneRelatedError = (ErrorResponse);

export type AppsGameCenterEnabledVersionsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type gameCenterEnabledVersions
         */
        'fields[gameCenterEnabledVersions]'?: Array<('platform' | 'versionString' | 'iconAsset' | 'compatibleVersions' | 'app')>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<('IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS')>;
        /**
         * filter by attribute 'versionString'
         */
        'filter[versionString]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('compatibleVersions' | 'app')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related compatibleVersions returned (when they are included)
         * @deprecated
         */
        'limit[compatibleVersions]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('versionString' | '-versionString')>;
    };
};

export type AppsGameCenterEnabledVersionsGetToManyRelatedResponse = (GameCenterEnabledVersionsResponse);

export type AppsGameCenterEnabledVersionsGetToManyRelatedError = (ErrorResponse);

export type AppsInAppPurchasesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<('referenceName' | 'productId' | 'inAppPurchaseType' | 'state' | 'apps')>;
        /**
         * filter by canBeSubmitted
         */
        'filter[canBeSubmitted]'?: Array<(string)>;
        /**
         * filter by attribute 'inAppPurchaseType'
         */
        'filter[inAppPurchaseType]'?: Array<('AUTOMATICALLY_RENEWABLE_SUBSCRIPTION' | 'NON_CONSUMABLE' | 'CONSUMABLE' | 'NON_RENEWING_SUBSCRIPTION' | 'FREE_SUBSCRIPTION')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('apps')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related apps returned (when they are included)
         */
        'limit[apps]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('referenceName' | '-referenceName' | 'productId' | '-productId' | 'inAppPurchaseType' | '-inAppPurchaseType')>;
    };
};

export type AppsInAppPurchasesGetToManyRelatedResponse = (InAppPurchasesResponse);

export type AppsInAppPurchasesGetToManyRelatedError = (ErrorResponse);

export type AppsInAppPurchasesV2GetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots
         */
        'fields[inAppPurchaseAppStoreReviewScreenshots]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'inAppPurchaseV2')>;
        /**
         * the fields to include for returned resources of type inAppPurchaseAvailabilities
         */
        'fields[inAppPurchaseAvailabilities]'?: Array<('availableInNewTerritories' | 'inAppPurchase' | 'availableTerritories')>;
        /**
         * the fields to include for returned resources of type inAppPurchaseContents
         */
        'fields[inAppPurchaseContents]'?: Array<('fileName' | 'fileSize' | 'url' | 'lastModifiedDate' | 'inAppPurchaseV2')>;
        /**
         * the fields to include for returned resources of type inAppPurchaseImages
         */
        'fields[inAppPurchaseImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'uploadOperations' | 'uploaded' | 'state' | 'inAppPurchase')>;
        /**
         * the fields to include for returned resources of type inAppPurchaseLocalizations
         */
        'fields[inAppPurchaseLocalizations]'?: Array<('name' | 'locale' | 'description' | 'state' | 'inAppPurchaseV2')>;
        /**
         * the fields to include for returned resources of type inAppPurchasePriceSchedules
         */
        'fields[inAppPurchasePriceSchedules]'?: Array<('inAppPurchase' | 'baseTerritory' | 'manualPrices' | 'automaticPrices')>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<('name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'app' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images')>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<('visibleForAllUsers' | 'enabled' | 'state' | 'app' | 'inAppPurchaseV2' | 'subscription' | 'promotionImages')>;
        /**
         * filter by attribute 'inAppPurchaseType'
         */
        'filter[inAppPurchaseType]'?: Array<('CONSUMABLE' | 'NON_CONSUMABLE' | 'NON_RENEWING_SUBSCRIPTION')>;
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<(string)>;
        /**
         * filter by attribute 'productId'
         */
        'filter[productId]'?: Array<(string)>;
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<('MISSING_METADATA' | 'WAITING_FOR_UPLOAD' | 'PROCESSING_CONTENT' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'DEVELOPER_ACTION_NEEDED' | 'PENDING_BINARY_APPROVAL' | 'APPROVED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'REMOVED_FROM_SALE' | 'REJECTED')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchaseLocalizations' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related images returned (when they are included)
         */
        'limit[images]'?: number;
        /**
         * maximum number of related inAppPurchaseLocalizations returned (when they are included)
         */
        'limit[inAppPurchaseLocalizations]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('name' | '-name' | 'inAppPurchaseType' | '-inAppPurchaseType')>;
    };
};

export type AppsInAppPurchasesV2GetToManyRelatedResponse = (InAppPurchasesV2Response);

export type AppsInAppPurchasesV2GetToManyRelatedError = (ErrorResponse);

export type AppsMarketplaceSearchDetailGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type marketplaceSearchDetails
         */
        'fields[marketplaceSearchDetails]'?: Array<('catalogUrl' | 'app')>;
    };
};

export type AppsMarketplaceSearchDetailGetToOneRelatedResponse = (MarketplaceSearchDetailResponse);

export type AppsMarketplaceSearchDetailGetToOneRelatedError = (ErrorResponse);

export type AppsPerfPowerMetricsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'deviceType'
         */
        'filter[deviceType]'?: Array<(string)>;
        /**
         * filter by attribute 'metricType'
         */
        'filter[metricType]'?: Array<('DISK' | 'HANG' | 'BATTERY' | 'LAUNCH' | 'MEMORY' | 'ANIMATION' | 'TERMINATION')>;
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<('IOS')>;
    };
};

export type AppsPerfPowerMetricsGetToManyRelatedResponse = (xcodeMetrics);

export type AppsPerfPowerMetricsGetToManyRelatedError = (ErrorResponse);

export type AppsPreOrderGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appPreOrders
         */
        'fields[appPreOrders]'?: Array<('preOrderAvailableDate' | 'appReleaseDate' | 'app')>;
    };
};

export type AppsPreOrderGetToOneRelatedResponse = (AppPreOrderWithoutIncludesResponse);

export type AppsPreOrderGetToOneRelatedError = (ErrorResponse);

export type AppsPreReleaseVersionsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<('version' | 'platform' | 'builds' | 'app')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppsPreReleaseVersionsGetToManyRelatedResponse = (PreReleaseVersionsWithoutIncludesResponse);

export type AppsPreReleaseVersionsGetToManyRelatedError = (ErrorResponse);

export type AppsPromotedPurchasesGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type AppsPromotedPurchasesGetToManyRelationshipResponse = (AppPromotedPurchasesLinkagesResponse);

export type AppsPromotedPurchasesGetToManyRelationshipError = (ErrorResponse);

export type AppsPromotedPurchasesReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: AppPromotedPurchasesLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type AppsPromotedPurchasesReplaceToManyRelationshipResponse = (void);

export type AppsPromotedPurchasesReplaceToManyRelationshipError = (ErrorResponse);

export type AppsPromotedPurchasesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<('name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'app' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images')>;
        /**
         * the fields to include for returned resources of type promotedPurchaseImages
         */
        'fields[promotedPurchaseImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'assetType' | 'uploadOperations' | 'uploaded' | 'state' | 'promotedPurchase')>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<('visibleForAllUsers' | 'enabled' | 'state' | 'app' | 'inAppPurchaseV2' | 'subscription' | 'promotionImages')>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<('name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchaseV2' | 'subscription' | 'promotionImages')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related promotionImages returned (when they are included)
         * @deprecated
         */
        'limit[promotionImages]'?: number;
    };
};

export type AppsPromotedPurchasesGetToManyRelatedResponse = (PromotedPurchasesResponse);

export type AppsPromotedPurchasesGetToManyRelatedError = (ErrorResponse);

export type AppsReviewSubmissionsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type actors
         */
        'fields[actors]'?: Array<('actorType' | 'userFirstName' | 'userLastName' | 'userEmail' | 'apiKeyId')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type reviewSubmissionItems
         */
        'fields[reviewSubmissionItems]'?: Array<('state' | 'resolved' | 'removed' | 'reviewSubmission' | 'appStoreVersion' | 'appCustomProductPageVersion' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appEvent')>;
        /**
         * the fields to include for returned resources of type reviewSubmissions
         */
        'fields[reviewSubmissions]'?: Array<('platform' | 'submittedDate' | 'state' | 'submitted' | 'canceled' | 'app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor')>;
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<('IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS')>;
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<('READY_FOR_REVIEW' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'UNRESOLVED_ISSUES' | 'CANCELING' | 'COMPLETING' | 'COMPLETE')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related items returned (when they are included)
         */
        'limit[items]'?: number;
    };
};

export type AppsReviewSubmissionsGetToManyRelatedResponse = (ReviewSubmissionsResponse);

export type AppsReviewSubmissionsGetToManyRelatedError = (ErrorResponse);

export type AppsSubscriptionGracePeriodGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionGracePeriods
         */
        'fields[subscriptionGracePeriods]'?: Array<('optIn' | 'sandboxOptIn' | 'duration' | 'renewalType')>;
    };
};

export type AppsSubscriptionGracePeriodGetToOneRelatedResponse = (SubscriptionGracePeriodResponse);

export type AppsSubscriptionGracePeriodGetToOneRelatedError = (ErrorResponse);

export type AppsSubscriptionGroupsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionGroupLocalizations
         */
        'fields[subscriptionGroupLocalizations]'?: Array<('name' | 'customAppName' | 'locale' | 'state' | 'subscriptionGroup')>;
        /**
         * the fields to include for returned resources of type subscriptionGroups
         */
        'fields[subscriptionGroups]'?: Array<('referenceName' | 'app' | 'subscriptions' | 'subscriptionGroupLocalizations')>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<('name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images')>;
        /**
         * filter by attribute 'referenceName'
         */
        'filter[referenceName]'?: Array<(string)>;
        /**
         * filter by attribute 'subscriptions.state'
         */
        'filter[subscriptions.state]'?: Array<('MISSING_METADATA' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'DEVELOPER_ACTION_NEEDED' | 'PENDING_BINARY_APPROVAL' | 'APPROVED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'REMOVED_FROM_SALE' | 'REJECTED')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscriptions' | 'subscriptionGroupLocalizations')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related subscriptionGroupLocalizations returned (when they are included)
         */
        'limit[subscriptionGroupLocalizations]'?: number;
        /**
         * maximum number of related subscriptions returned (when they are included)
         */
        'limit[subscriptions]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('referenceName' | '-referenceName')>;
    };
};

export type AppsSubscriptionGroupsGetToManyRelatedResponse = (SubscriptionGroupsResponse);

export type AppsSubscriptionGroupsGetToManyRelatedError = (ErrorResponse);

export type BetaAppLocalizationsAppGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
    };
};

export type BetaAppLocalizationsAppGetToOneRelatedResponse = (AppWithoutIncludesResponse);

export type BetaAppLocalizationsAppGetToOneRelatedError = (ErrorResponse);

export type BetaAppReviewDetailsAppGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
    };
};

export type BetaAppReviewDetailsAppGetToOneRelatedResponse = (AppWithoutIncludesResponse);

export type BetaAppReviewDetailsAppGetToOneRelatedError = (ErrorResponse);

export type BetaAppReviewSubmissionsBuildGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
    };
};

export type BetaAppReviewSubmissionsBuildGetToOneRelatedResponse = (BuildWithoutIncludesResponse);

export type BetaAppReviewSubmissionsBuildGetToOneRelatedError = (ErrorResponse);

export type BetaBuildLocalizationsBuildGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
    };
};

export type BetaBuildLocalizationsBuildGetToOneRelatedResponse = (BuildWithoutIncludesResponse);

export type BetaBuildLocalizationsBuildGetToOneRelatedError = (ErrorResponse);

export type BetaGroupsAppGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
    };
};

export type BetaGroupsAppGetToOneRelatedResponse = (AppWithoutIncludesResponse);

export type BetaGroupsAppGetToOneRelatedError = (ErrorResponse);

export type BetaGroupsBetaTestersGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BetaGroupsBetaTestersGetToManyRelationshipResponse = (BetaGroupBetaTestersLinkagesResponse);

export type BetaGroupsBetaTestersGetToManyRelationshipError = (ErrorResponse);

export type BetaGroupsBetaTestersCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaGroupBetaTestersLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaGroupsBetaTestersCreateToManyRelationshipResponse = (void);

export type BetaGroupsBetaTestersCreateToManyRelationshipError = (ErrorResponse);

export type BetaGroupsBetaTestersDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaGroupBetaTestersLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaGroupsBetaTestersDeleteToManyRelationshipResponse = (void);

export type BetaGroupsBetaTestersDeleteToManyRelationshipError = (ErrorResponse);

export type BetaGroupsBetaTestersGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<('firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BetaGroupsBetaTestersGetToManyRelatedResponse = (BetaTestersWithoutIncludesResponse);

export type BetaGroupsBetaTestersGetToManyRelatedError = (ErrorResponse);

export type BetaGroupsBuildsGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BetaGroupsBuildsGetToManyRelationshipResponse = (BetaGroupBuildsLinkagesResponse);

export type BetaGroupsBuildsGetToManyRelationshipError = (ErrorResponse);

export type BetaGroupsBuildsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaGroupBuildsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaGroupsBuildsCreateToManyRelationshipResponse = (void);

export type BetaGroupsBuildsCreateToManyRelationshipError = (ErrorResponse);

export type BetaGroupsBuildsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaGroupBuildsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaGroupsBuildsDeleteToManyRelationshipResponse = (void);

export type BetaGroupsBuildsDeleteToManyRelationshipError = (ErrorResponse);

export type BetaGroupsBuildsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BetaGroupsBuildsGetToManyRelatedResponse = (BuildsWithoutIncludesResponse);

export type BetaGroupsBuildsGetToManyRelatedError = (ErrorResponse);

export type BetaLicenseAgreementsAppGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
    };
};

export type BetaLicenseAgreementsAppGetToOneRelatedResponse = (AppWithoutIncludesResponse);

export type BetaLicenseAgreementsAppGetToOneRelatedError = (ErrorResponse);

export type BetaTestersAppsGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BetaTestersAppsGetToManyRelationshipResponse = (BetaTesterAppsLinkagesResponse);

export type BetaTestersAppsGetToManyRelationshipError = (ErrorResponse);

export type BetaTestersAppsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaTesterAppsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaTestersAppsDeleteToManyRelationshipResponse = (unknown | void);

export type BetaTestersAppsDeleteToManyRelationshipError = (ErrorResponse);

export type BetaTestersAppsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BetaTestersAppsGetToManyRelatedResponse = (AppsWithoutIncludesResponse);

export type BetaTestersAppsGetToManyRelatedError = (ErrorResponse);

export type BetaTestersBetaGroupsGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BetaTestersBetaGroupsGetToManyRelationshipResponse = (BetaTesterBetaGroupsLinkagesResponse);

export type BetaTestersBetaGroupsGetToManyRelationshipError = (ErrorResponse);

export type BetaTestersBetaGroupsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaTesterBetaGroupsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaTestersBetaGroupsCreateToManyRelationshipResponse = (void);

export type BetaTestersBetaGroupsCreateToManyRelationshipError = (ErrorResponse);

export type BetaTestersBetaGroupsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaTesterBetaGroupsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaTestersBetaGroupsDeleteToManyRelationshipResponse = (void);

export type BetaTestersBetaGroupsDeleteToManyRelationshipError = (ErrorResponse);

export type BetaTestersBetaGroupsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<('name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'app' | 'builds' | 'betaTesters')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BetaTestersBetaGroupsGetToManyRelatedResponse = (BetaGroupsWithoutIncludesResponse);

export type BetaTestersBetaGroupsGetToManyRelatedError = (ErrorResponse);

export type BetaTestersBuildsGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BetaTestersBuildsGetToManyRelationshipResponse = (BetaTesterBuildsLinkagesResponse);

export type BetaTestersBuildsGetToManyRelationshipError = (ErrorResponse);

export type BetaTestersBuildsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaTesterBuildsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaTestersBuildsCreateToManyRelationshipResponse = (void);

export type BetaTestersBuildsCreateToManyRelationshipError = (ErrorResponse);

export type BetaTestersBuildsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BetaTesterBuildsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BetaTestersBuildsDeleteToManyRelationshipResponse = (void);

export type BetaTestersBuildsDeleteToManyRelationshipError = (ErrorResponse);

export type BetaTestersBuildsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BetaTestersBuildsGetToManyRelatedResponse = (BuildsWithoutIncludesResponse);

export type BetaTestersBuildsGetToManyRelatedError = (ErrorResponse);

export type BuildBetaDetailsBuildGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
    };
};

export type BuildBetaDetailsBuildGetToOneRelatedResponse = (BuildWithoutIncludesResponse);

export type BuildBetaDetailsBuildGetToOneRelatedError = (ErrorResponse);

export type BuildBundlesAppClipDomainCacheStatusGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipDomainStatuses
         */
        'fields[appClipDomainStatuses]'?: Array<('domains' | 'lastUpdatedDate')>;
    };
};

export type BuildBundlesAppClipDomainCacheStatusGetToOneRelatedResponse = (AppClipDomainStatusResponse);

export type BuildBundlesAppClipDomainCacheStatusGetToOneRelatedError = (ErrorResponse);

export type BuildBundlesAppClipDomainDebugStatusGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClipDomainStatuses
         */
        'fields[appClipDomainStatuses]'?: Array<('domains' | 'lastUpdatedDate')>;
    };
};

export type BuildBundlesAppClipDomainDebugStatusGetToOneRelatedResponse = (AppClipDomainStatusResponse);

export type BuildBundlesAppClipDomainDebugStatusGetToOneRelatedError = (ErrorResponse);

export type BuildBundlesBetaAppClipInvocationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaAppClipInvocationLocalizations
         */
        'fields[betaAppClipInvocationLocalizations]'?: Array<('title' | 'locale' | 'betaAppClipInvocation')>;
        /**
         * the fields to include for returned resources of type betaAppClipInvocations
         */
        'fields[betaAppClipInvocations]'?: Array<('url' | 'buildBundle' | 'betaAppClipInvocationLocalizations')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('betaAppClipInvocationLocalizations')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related betaAppClipInvocationLocalizations returned (when they are included)
         */
        'limit[betaAppClipInvocationLocalizations]'?: number;
    };
};

export type BuildBundlesBetaAppClipInvocationsGetToManyRelatedResponse = (BetaAppClipInvocationsResponse);

export type BuildBundlesBetaAppClipInvocationsGetToManyRelatedError = (ErrorResponse);

export type BuildBundlesBuildBundleFileSizesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type buildBundleFileSizes
         */
        'fields[buildBundleFileSizes]'?: Array<('deviceModel' | 'osVersion' | 'downloadBytes' | 'installBytes')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BuildBundlesBuildBundleFileSizesGetToManyRelatedResponse = (BuildBundleFileSizesResponse);

export type BuildBundlesBuildBundleFileSizesGetToManyRelatedError = (ErrorResponse);

export type BuildsAppGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
    };
};

export type BuildsAppGetToOneRelatedResponse = (AppWithoutIncludesResponse);

export type BuildsAppGetToOneRelatedError = (ErrorResponse);

export type BuildsAppEncryptionDeclarationGetToOneRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BuildsAppEncryptionDeclarationGetToOneRelationshipResponse = (BuildAppEncryptionDeclarationLinkageResponse);

export type BuildsAppEncryptionDeclarationGetToOneRelationshipError = (ErrorResponse);

export type BuildsAppEncryptionDeclarationUpdateToOneRelationshipData = {
    /**
     * Related linkage
     */
    body: BuildAppEncryptionDeclarationLinkageRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BuildsAppEncryptionDeclarationUpdateToOneRelationshipResponse = (void);

export type BuildsAppEncryptionDeclarationUpdateToOneRelationshipError = (ErrorResponse);

export type BuildsAppEncryptionDeclarationGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<('appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument')>;
    };
};

export type BuildsAppEncryptionDeclarationGetToOneRelatedResponse = (AppEncryptionDeclarationWithoutIncludesResponse);

export type BuildsAppEncryptionDeclarationGetToOneRelatedError = (ErrorResponse);

export type BuildsAppStoreVersionGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         */
        'fields[ageRatingDeclarations]'?: Array<('alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus')>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackages
         */
        'fields[alternativeDistributionPackages]'?: Array<('appStoreVersion' | 'versions')>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<('action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceTemplate')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type appStoreReviewDetails
         */
        'fields[appStoreReviewDetails]'?: Array<('contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'appStoreVersion' | 'appStoreReviewAttachments')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<('name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'started' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'platform' | 'app' | 'latestControlVersion' | 'controlVersions')>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<('description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appStoreVersionPhasedReleases
         */
        'fields[appStoreVersionPhasedReleases]'?: Array<('phasedReleaseState' | 'startDate' | 'totalPauseDuration' | 'currentDayNumber' | 'appStoreVersion')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type appStoreVersionSubmissions
         */
        'fields[appStoreVersionSubmissions]'?: Array<('appStoreVersion')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<('enabled' | 'compatibilityVersions' | 'appStoreVersion')>;
        /**
         * the fields to include for returned resources of type routingAppCoverages
         */
        'fields[routingAppCoverages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appStoreVersion')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionPackage')>;
        /**
         * maximum number of related appStoreVersionExperiments returned (when they are included)
         * @deprecated
         */
        'limit[appStoreVersionExperiments]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
         */
        'limit[appStoreVersionExperimentsV2]'?: number;
        /**
         * maximum number of related appStoreVersionLocalizations returned (when they are included)
         */
        'limit[appStoreVersionLocalizations]'?: number;
    };
};

export type BuildsAppStoreVersionGetToOneRelatedResponse = (AppStoreVersionResponse);

export type BuildsAppStoreVersionGetToOneRelatedError = (ErrorResponse);

export type BuildsBetaAppReviewSubmissionGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaAppReviewSubmissions
         */
        'fields[betaAppReviewSubmissions]'?: Array<('betaReviewState' | 'submittedDate' | 'build')>;
    };
};

export type BuildsBetaAppReviewSubmissionGetToOneRelatedResponse = (BetaAppReviewSubmissionWithoutIncludesResponse);

export type BuildsBetaAppReviewSubmissionGetToOneRelatedError = (ErrorResponse);

export type BuildsBetaBuildLocalizationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaBuildLocalizations
         */
        'fields[betaBuildLocalizations]'?: Array<('whatsNew' | 'locale' | 'build')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BuildsBetaBuildLocalizationsGetToManyRelatedResponse = (BetaBuildLocalizationsWithoutIncludesResponse);

export type BuildsBetaBuildLocalizationsGetToManyRelatedError = (ErrorResponse);

export type BuildsBetaGroupsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BuildBetaGroupsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BuildsBetaGroupsCreateToManyRelationshipResponse = (void);

export type BuildsBetaGroupsCreateToManyRelationshipError = (ErrorResponse);

export type BuildsBetaGroupsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BuildBetaGroupsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BuildsBetaGroupsDeleteToManyRelationshipResponse = (void);

export type BuildsBetaGroupsDeleteToManyRelationshipError = (ErrorResponse);

export type BuildsBuildBetaDetailGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type buildBetaDetails
         */
        'fields[buildBetaDetails]'?: Array<('autoNotifyEnabled' | 'internalBuildState' | 'externalBuildState' | 'build')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('build')>;
    };
};

export type BuildsBuildBetaDetailGetToOneRelatedResponse = (BuildBetaDetailResponse);

export type BuildsBuildBetaDetailGetToOneRelatedError = (ErrorResponse);

export type BuildsDiagnosticSignaturesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type diagnosticSignatures
         */
        'fields[diagnosticSignatures]'?: Array<('diagnosticType' | 'signature' | 'weight' | 'insight' | 'logs')>;
        /**
         * filter by attribute 'diagnosticType'
         */
        'filter[diagnosticType]'?: Array<('DISK_WRITES' | 'HANGS' | 'LAUNCHES')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BuildsDiagnosticSignaturesGetToManyRelatedResponse = (DiagnosticSignaturesResponse);

export type BuildsDiagnosticSignaturesGetToManyRelatedError = (ErrorResponse);

export type BuildsIconsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type buildIcons
         */
        'fields[buildIcons]'?: Array<('name' | 'iconAsset' | 'iconType')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BuildsIconsGetToManyRelatedResponse = (BuildIconsWithoutIncludesResponse);

export type BuildsIconsGetToManyRelatedError = (ErrorResponse);

export type BuildsIndividualTestersGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BuildsIndividualTestersGetToManyRelationshipResponse = (BuildIndividualTestersLinkagesResponse);

export type BuildsIndividualTestersGetToManyRelationshipError = (ErrorResponse);

export type BuildsIndividualTestersCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BuildIndividualTestersLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BuildsIndividualTestersCreateToManyRelationshipResponse = (void);

export type BuildsIndividualTestersCreateToManyRelationshipError = (ErrorResponse);

export type BuildsIndividualTestersDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: BuildIndividualTestersLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type BuildsIndividualTestersDeleteToManyRelationshipResponse = (void);

export type BuildsIndividualTestersDeleteToManyRelationshipError = (ErrorResponse);

export type BuildsIndividualTestersGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<('firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BuildsIndividualTestersGetToManyRelatedResponse = (BetaTestersWithoutIncludesResponse);

export type BuildsIndividualTestersGetToManyRelatedError = (ErrorResponse);

export type BuildsPerfPowerMetricsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by attribute 'deviceType'
         */
        'filter[deviceType]'?: Array<(string)>;
        /**
         * filter by attribute 'metricType'
         */
        'filter[metricType]'?: Array<('DISK' | 'HANG' | 'BATTERY' | 'LAUNCH' | 'MEMORY' | 'ANIMATION' | 'TERMINATION')>;
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<('IOS')>;
    };
};

export type BuildsPerfPowerMetricsGetToManyRelatedResponse = (xcodeMetrics);

export type BuildsPerfPowerMetricsGetToManyRelatedError = (ErrorResponse);

export type BuildsPreReleaseVersionGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<('version' | 'platform' | 'builds' | 'app')>;
    };
};

export type BuildsPreReleaseVersionGetToOneRelatedResponse = (PrereleaseVersionWithoutIncludesResponse);

export type BuildsPreReleaseVersionGetToOneRelatedError = (ErrorResponse);

export type BundleIdsAppGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
    };
};

export type BundleIdsAppGetToOneRelatedResponse = (AppWithoutIncludesResponse);

export type BundleIdsAppGetToOneRelatedError = (ErrorResponse);

export type BundleIdsBundleIdCapabilitiesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type bundleIdCapabilities
         */
        'fields[bundleIdCapabilities]'?: Array<('capabilityType' | 'settings' | 'bundleId')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BundleIdsBundleIdCapabilitiesGetToManyRelatedResponse = (BundleIdCapabilitiesWithoutIncludesResponse);

export type BundleIdsBundleIdCapabilitiesGetToManyRelatedError = (ErrorResponse);

export type BundleIdsProfilesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type profiles
         */
        'fields[profiles]'?: Array<('name' | 'platform' | 'profileType' | 'profileState' | 'profileContent' | 'uuid' | 'createdDate' | 'expirationDate' | 'bundleId' | 'devices' | 'certificates')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type BundleIdsProfilesGetToManyRelatedResponse = (ProfilesWithoutIncludesResponse);

export type BundleIdsProfilesGetToManyRelatedError = (ErrorResponse);

export type CiBuildActionsArtifactsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciArtifacts
         */
        'fields[ciArtifacts]'?: Array<('fileType' | 'fileName' | 'fileSize' | 'downloadUrl')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type CiBuildActionsArtifactsGetToManyRelatedResponse = (CiArtifactsResponse);

export type CiBuildActionsArtifactsGetToManyRelatedError = (ErrorResponse);

export type CiBuildActionsBuildRunGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type ciBuildRuns
         */
        'fields[ciBuildRuns]'?: Array<('clean' | 'number' | 'createdDate' | 'startedDate' | 'finishedDate' | 'sourceCommit' | 'destinationCommit' | 'isPullRequestBuild' | 'issueCounts' | 'executionProgress' | 'completionStatus' | 'startReason' | 'cancelReason' | 'buildRun' | 'builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'actions' | 'pullRequest')>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<('name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns')>;
        /**
         * the fields to include for returned resources of type ciWorkflows
         */
        'fields[ciWorkflows]'?: Array<('name' | 'description' | 'branchStartCondition' | 'tagStartCondition' | 'pullRequestStartCondition' | 'scheduledStartCondition' | 'manualBranchStartCondition' | 'manualTagStartCondition' | 'manualPullRequestStartCondition' | 'actions' | 'isEnabled' | 'isLockedForEditing' | 'clean' | 'containerFilePath' | 'lastModifiedDate' | 'product' | 'repository' | 'xcodeVersion' | 'macOsVersion' | 'buildRuns')>;
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<('name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository')>;
        /**
         * the fields to include for returned resources of type scmPullRequests
         */
        'fields[scmPullRequests]'?: Array<('title' | 'number' | 'webUrl' | 'sourceRepositoryOwner' | 'sourceRepositoryName' | 'sourceBranchName' | 'destinationRepositoryOwner' | 'destinationRepositoryName' | 'destinationBranchName' | 'isClosed' | 'isCrossRepository' | 'repository')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'pullRequest')>;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
    };
};

export type CiBuildActionsBuildRunGetToOneRelatedResponse = (CiBuildRunResponse);

export type CiBuildActionsBuildRunGetToOneRelatedError = (ErrorResponse);

export type CiBuildActionsIssuesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciIssues
         */
        'fields[ciIssues]'?: Array<('issueType' | 'message' | 'fileSource' | 'category')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type CiBuildActionsIssuesGetToManyRelatedResponse = (CiIssuesResponse);

export type CiBuildActionsIssuesGetToManyRelatedError = (ErrorResponse);

export type CiBuildActionsTestResultsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciTestResults
         */
        'fields[ciTestResults]'?: Array<('className' | 'name' | 'status' | 'fileSource' | 'message' | 'destinationTestResults')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type CiBuildActionsTestResultsGetToManyRelatedResponse = (CiTestResultsResponse);

export type CiBuildActionsTestResultsGetToManyRelatedError = (ErrorResponse);

export type CiBuildRunsActionsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciBuildActions
         */
        'fields[ciBuildActions]'?: Array<('name' | 'actionType' | 'startedDate' | 'finishedDate' | 'issueCounts' | 'executionProgress' | 'completionStatus' | 'isRequiredToPass' | 'buildRun' | 'artifacts' | 'issues' | 'testResults')>;
        /**
         * the fields to include for returned resources of type ciBuildRuns
         */
        'fields[ciBuildRuns]'?: Array<('clean' | 'number' | 'createdDate' | 'startedDate' | 'finishedDate' | 'sourceCommit' | 'destinationCommit' | 'isPullRequestBuild' | 'issueCounts' | 'executionProgress' | 'completionStatus' | 'startReason' | 'cancelReason' | 'buildRun' | 'builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'actions' | 'pullRequest')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('buildRun')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type CiBuildRunsActionsGetToManyRelatedResponse = (CiBuildActionsResponse);

export type CiBuildRunsActionsGetToManyRelatedError = (ErrorResponse);

export type CiBuildRunsBuildsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<('appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type betaAppReviewSubmissions
         */
        'fields[betaAppReviewSubmissions]'?: Array<('betaReviewState' | 'submittedDate' | 'build')>;
        /**
         * the fields to include for returned resources of type betaBuildLocalizations
         */
        'fields[betaBuildLocalizations]'?: Array<('whatsNew' | 'locale' | 'build')>;
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<('name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'app' | 'builds' | 'betaTesters')>;
        /**
         * the fields to include for returned resources of type betaTesters
         */
        'fields[betaTesters]'?: Array<('firstName' | 'lastName' | 'email' | 'inviteType' | 'state' | 'apps' | 'betaGroups' | 'builds')>;
        /**
         * the fields to include for returned resources of type buildBetaDetails
         */
        'fields[buildBetaDetails]'?: Array<('autoNotifyEnabled' | 'internalBuildState' | 'externalBuildState' | 'build')>;
        /**
         * the fields to include for returned resources of type buildBundles
         */
        'fields[buildBundles]'?: Array<('bundleId' | 'bundleType' | 'sdkBuild' | 'platformBuild' | 'fileName' | 'hasSirikit' | 'hasOnDemandResources' | 'hasPrerenderedIcon' | 'usesLocationServices' | 'isIosBuildMacAppStoreCompatible' | 'includesSymbols' | 'dSYMUrl' | 'supportedArchitectures' | 'requiredCapabilities' | 'deviceProtocols' | 'locales' | 'entitlements' | 'appClipDomainCacheStatus' | 'appClipDomainDebugStatus' | 'betaAppClipInvocations' | 'buildBundleFileSizes')>;
        /**
         * the fields to include for returned resources of type buildIcons
         */
        'fields[buildIcons]'?: Array<('name' | 'iconAsset' | 'iconType')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<('version' | 'platform' | 'builds' | 'app')>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'appStoreVersion'
         */
        'filter[appStoreVersion]'?: Array<(string)>;
        /**
         * filter by attribute 'betaAppReviewSubmission.betaReviewState'
         */
        'filter[betaAppReviewSubmission.betaReviewState]'?: Array<('WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'REJECTED' | 'APPROVED')>;
        /**
         * filter by id(s) of related 'betaGroups'
         */
        'filter[betaGroups]'?: Array<(string)>;
        /**
         * filter by attribute 'buildAudienceType'
         */
        'filter[buildAudienceType]'?: Array<('INTERNAL_ONLY' | 'APP_STORE_ELIGIBLE')>;
        /**
         * filter by attribute 'expired'
         */
        'filter[expired]'?: Array<(string)>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'preReleaseVersion.platform'
         */
        'filter[preReleaseVersion.platform]'?: Array<('IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS')>;
        /**
         * filter by attribute 'preReleaseVersion.version'
         */
        'filter[preReleaseVersion.version]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'preReleaseVersion'
         */
        'filter[preReleaseVersion]'?: Array<(string)>;
        /**
         * filter by attribute 'processingState'
         */
        'filter[processingState]'?: Array<('PROCESSING' | 'FAILED' | 'INVALID' | 'VALID')>;
        /**
         * filter by attribute 'usesNonExemptEncryption'
         */
        'filter[usesNonExemptEncryption]'?: Array<(string)>;
        /**
         * filter by attribute 'version'
         */
        'filter[version]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related betaBuildLocalizations returned (when they are included)
         */
        'limit[betaBuildLocalizations]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related buildBundles returned (when they are included)
         */
        'limit[buildBundles]'?: number;
        /**
         * maximum number of related icons returned (when they are included)
         */
        'limit[icons]'?: number;
        /**
         * maximum number of related individualTesters returned (when they are included)
         */
        'limit[individualTesters]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('version' | '-version' | 'uploadedDate' | '-uploadedDate' | 'preReleaseVersion' | '-preReleaseVersion')>;
    };
};

export type CiBuildRunsBuildsGetToManyRelatedResponse = (BuildsResponse);

export type CiBuildRunsBuildsGetToManyRelatedError = (ErrorResponse);

export type CiMacOsVersionsXcodeVersionsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciMacOsVersions
         */
        'fields[ciMacOsVersions]'?: Array<('version' | 'name' | 'xcodeVersions')>;
        /**
         * the fields to include for returned resources of type ciXcodeVersions
         */
        'fields[ciXcodeVersions]'?: Array<('version' | 'name' | 'testDestinations' | 'macOsVersions')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('macOsVersions')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related macOsVersions returned (when they are included)
         */
        'limit[macOsVersions]'?: number;
    };
};

export type CiMacOsVersionsXcodeVersionsGetToManyRelatedResponse = (CiXcodeVersionsResponse);

export type CiMacOsVersionsXcodeVersionsGetToManyRelatedError = (ErrorResponse);

export type CiProductsAdditionalRepositoriesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<('name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository')>;
        /**
         * the fields to include for returned resources of type scmProviders
         */
        'fields[scmProviders]'?: Array<('scmProviderType' | 'url' | 'repositories')>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<('lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests')>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('scmProvider' | 'defaultBranch')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type CiProductsAdditionalRepositoriesGetToManyRelatedResponse = (ScmRepositoriesResponse);

export type CiProductsAdditionalRepositoriesGetToManyRelatedError = (ErrorResponse);

export type CiProductsAppGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appClips
         */
        'fields[appClips]'?: Array<('bundleId' | 'app' | 'appClipDefaultExperiences' | 'appClipAdvancedExperiences')>;
        /**
         * the fields to include for returned resources of type appCustomProductPages
         */
        'fields[appCustomProductPages]'?: Array<('name' | 'url' | 'visible' | 'app' | 'appCustomProductPageVersions' | 'appStoreVersionTemplate' | 'customProductPageTemplate')>;
        /**
         * the fields to include for returned resources of type appEncryptionDeclarations
         */
        'fields[appEncryptionDeclarations]'?: Array<('appDescription' | 'createdDate' | 'usesEncryption' | 'exempt' | 'containsProprietaryCryptography' | 'containsThirdPartyCryptography' | 'availableOnFrenchStore' | 'platform' | 'uploadedDate' | 'documentUrl' | 'documentName' | 'documentType' | 'appEncryptionDeclarationState' | 'codeValue' | 'app' | 'builds' | 'appEncryptionDeclarationDocument')>;
        /**
         * the fields to include for returned resources of type appEvents
         */
        'fields[appEvents]'?: Array<('referenceName' | 'badge' | 'eventState' | 'deepLink' | 'purchaseRequirement' | 'primaryLocale' | 'priority' | 'purpose' | 'territorySchedules' | 'archivedTerritorySchedules' | 'app' | 'localizations')>;
        /**
         * the fields to include for returned resources of type appInfos
         */
        'fields[appInfos]'?: Array<('appStoreState' | 'state' | 'appStoreAgeRating' | 'australiaAgeRating' | 'brazilAgeRating' | 'brazilAgeRatingV2' | 'koreaAgeRating' | 'kidsAgeBand' | 'app' | 'ageRatingDeclaration' | 'appInfoLocalizations' | 'primaryCategory' | 'primarySubcategoryOne' | 'primarySubcategoryTwo' | 'secondaryCategory' | 'secondarySubcategoryOne' | 'secondarySubcategoryTwo')>;
        /**
         * the fields to include for returned resources of type appPreOrders
         */
        'fields[appPreOrders]'?: Array<('preOrderAvailableDate' | 'appReleaseDate' | 'app')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<('name' | 'platform' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'started' | 'app' | 'latestControlVersion' | 'controlVersions' | 'appStoreVersionExperimentTreatments')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type betaAppLocalizations
         */
        'fields[betaAppLocalizations]'?: Array<('feedbackEmail' | 'marketingUrl' | 'privacyPolicyUrl' | 'tvOsPrivacyPolicy' | 'description' | 'locale' | 'app')>;
        /**
         * the fields to include for returned resources of type betaAppReviewDetails
         */
        'fields[betaAppReviewDetails]'?: Array<('contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'app')>;
        /**
         * the fields to include for returned resources of type betaGroups
         */
        'fields[betaGroups]'?: Array<('name' | 'createdDate' | 'isInternalGroup' | 'hasAccessToAllBuilds' | 'publicLinkEnabled' | 'publicLinkId' | 'publicLinkLimitEnabled' | 'publicLinkLimit' | 'publicLink' | 'feedbackEnabled' | 'iosBuildsAvailableForAppleSiliconMac' | 'app' | 'builds' | 'betaTesters')>;
        /**
         * the fields to include for returned resources of type betaLicenseAgreements
         */
        'fields[betaLicenseAgreements]'?: Array<('agreementText' | 'app')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<('name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns')>;
        /**
         * the fields to include for returned resources of type endUserLicenseAgreements
         */
        'fields[endUserLicenseAgreements]'?: Array<('agreementText' | 'app' | 'territories')>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterEnabledVersions
         */
        'fields[gameCenterEnabledVersions]'?: Array<('platform' | 'versionString' | 'iconAsset' | 'compatibleVersions' | 'app')>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<('referenceName' | 'productId' | 'inAppPurchaseType' | 'state' | 'apps' | 'name' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'app' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images')>;
        /**
         * the fields to include for returned resources of type preReleaseVersions
         */
        'fields[preReleaseVersions]'?: Array<('version' | 'platform' | 'builds' | 'app')>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<('visibleForAllUsers' | 'enabled' | 'state' | 'app' | 'inAppPurchaseV2' | 'subscription' | 'promotionImages')>;
        /**
         * the fields to include for returned resources of type reviewSubmissions
         */
        'fields[reviewSubmissions]'?: Array<('platform' | 'submittedDate' | 'state' | 'submitted' | 'canceled' | 'app' | 'items' | 'appStoreVersionForReview' | 'submittedByActor' | 'lastUpdatedByActor')>;
        /**
         * the fields to include for returned resources of type subscriptionGracePeriods
         */
        'fields[subscriptionGracePeriods]'?: Array<('optIn' | 'sandboxOptIn' | 'duration' | 'renewalType')>;
        /**
         * the fields to include for returned resources of type subscriptionGroups
         */
        'fields[subscriptionGroups]'?: Array<('referenceName' | 'app' | 'subscriptions' | 'subscriptionGroupLocalizations')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appEncryptionDeclarations' | 'ciProduct' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'endUserLicenseAgreement' | 'preOrder' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2')>;
        /**
         * maximum number of related appClips returned (when they are included)
         */
        'limit[appClips]'?: number;
        /**
         * maximum number of related appCustomProductPages returned (when they are included)
         */
        'limit[appCustomProductPages]'?: number;
        /**
         * maximum number of related appEncryptionDeclarations returned (when they are included)
         */
        'limit[appEncryptionDeclarations]'?: number;
        /**
         * maximum number of related appEvents returned (when they are included)
         */
        'limit[appEvents]'?: number;
        /**
         * maximum number of related appInfos returned (when they are included)
         */
        'limit[appInfos]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
         */
        'limit[appStoreVersionExperimentsV2]'?: number;
        /**
         * maximum number of related appStoreVersions returned (when they are included)
         */
        'limit[appStoreVersions]'?: number;
        /**
         * maximum number of related betaAppLocalizations returned (when they are included)
         */
        'limit[betaAppLocalizations]'?: number;
        /**
         * maximum number of related betaGroups returned (when they are included)
         */
        'limit[betaGroups]'?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
        /**
         * maximum number of related gameCenterEnabledVersions returned (when they are included)
         * @deprecated
         */
        'limit[gameCenterEnabledVersions]'?: number;
        /**
         * maximum number of related inAppPurchases returned (when they are included)
         * @deprecated
         */
        'limit[inAppPurchases]'?: number;
        /**
         * maximum number of related inAppPurchasesV2 returned (when they are included)
         */
        'limit[inAppPurchasesV2]'?: number;
        /**
         * maximum number of related preReleaseVersions returned (when they are included)
         */
        'limit[preReleaseVersions]'?: number;
        /**
         * maximum number of related promotedPurchases returned (when they are included)
         */
        'limit[promotedPurchases]'?: number;
        /**
         * maximum number of related reviewSubmissions returned (when they are included)
         */
        'limit[reviewSubmissions]'?: number;
        /**
         * maximum number of related subscriptionGroups returned (when they are included)
         */
        'limit[subscriptionGroups]'?: number;
    };
};

export type CiProductsAppGetToOneRelatedResponse = (AppResponse);

export type CiProductsAppGetToOneRelatedError = (ErrorResponse);

export type CiProductsBuildRunsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type ciBuildRuns
         */
        'fields[ciBuildRuns]'?: Array<('clean' | 'number' | 'createdDate' | 'startedDate' | 'finishedDate' | 'sourceCommit' | 'destinationCommit' | 'isPullRequestBuild' | 'issueCounts' | 'executionProgress' | 'completionStatus' | 'startReason' | 'cancelReason' | 'buildRun' | 'builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'actions' | 'pullRequest')>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<('name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns')>;
        /**
         * the fields to include for returned resources of type ciWorkflows
         */
        'fields[ciWorkflows]'?: Array<('name' | 'description' | 'branchStartCondition' | 'tagStartCondition' | 'pullRequestStartCondition' | 'scheduledStartCondition' | 'manualBranchStartCondition' | 'manualTagStartCondition' | 'manualPullRequestStartCondition' | 'actions' | 'isEnabled' | 'isLockedForEditing' | 'clean' | 'containerFilePath' | 'lastModifiedDate' | 'product' | 'repository' | 'xcodeVersion' | 'macOsVersion' | 'buildRuns')>;
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<('name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository')>;
        /**
         * the fields to include for returned resources of type scmPullRequests
         */
        'fields[scmPullRequests]'?: Array<('title' | 'number' | 'webUrl' | 'sourceRepositoryOwner' | 'sourceRepositoryName' | 'sourceBranchName' | 'destinationRepositoryOwner' | 'destinationRepositoryName' | 'destinationBranchName' | 'isClosed' | 'isCrossRepository' | 'repository')>;
        /**
         * filter by id(s) of related 'builds'
         */
        'filter[builds]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'pullRequest')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('number' | '-number')>;
    };
};

export type CiProductsBuildRunsGetToManyRelatedResponse = (CiBuildRunsResponse);

export type CiProductsBuildRunsGetToManyRelatedError = (ErrorResponse);

export type CiProductsPrimaryRepositoriesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<('name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository')>;
        /**
         * the fields to include for returned resources of type scmProviders
         */
        'fields[scmProviders]'?: Array<('scmProviderType' | 'url' | 'repositories')>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<('lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests')>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('scmProvider' | 'defaultBranch')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type CiProductsPrimaryRepositoriesGetToManyRelatedResponse = (ScmRepositoriesResponse);

export type CiProductsPrimaryRepositoriesGetToManyRelatedError = (ErrorResponse);

export type CiProductsWorkflowsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciMacOsVersions
         */
        'fields[ciMacOsVersions]'?: Array<('version' | 'name' | 'xcodeVersions')>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<('name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns')>;
        /**
         * the fields to include for returned resources of type ciWorkflows
         */
        'fields[ciWorkflows]'?: Array<('name' | 'description' | 'branchStartCondition' | 'tagStartCondition' | 'pullRequestStartCondition' | 'scheduledStartCondition' | 'manualBranchStartCondition' | 'manualTagStartCondition' | 'manualPullRequestStartCondition' | 'actions' | 'isEnabled' | 'isLockedForEditing' | 'clean' | 'containerFilePath' | 'lastModifiedDate' | 'product' | 'repository' | 'xcodeVersion' | 'macOsVersion' | 'buildRuns')>;
        /**
         * the fields to include for returned resources of type ciXcodeVersions
         */
        'fields[ciXcodeVersions]'?: Array<('version' | 'name' | 'testDestinations' | 'macOsVersions')>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<('lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('product' | 'repository' | 'xcodeVersion' | 'macOsVersion')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type CiProductsWorkflowsGetToManyRelatedResponse = (CiWorkflowsResponse);

export type CiProductsWorkflowsGetToManyRelatedError = (ErrorResponse);

export type CiWorkflowsBuildRunsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type ciBuildRuns
         */
        'fields[ciBuildRuns]'?: Array<('clean' | 'number' | 'createdDate' | 'startedDate' | 'finishedDate' | 'sourceCommit' | 'destinationCommit' | 'isPullRequestBuild' | 'issueCounts' | 'executionProgress' | 'completionStatus' | 'startReason' | 'cancelReason' | 'buildRun' | 'builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'actions' | 'pullRequest')>;
        /**
         * the fields to include for returned resources of type ciProducts
         */
        'fields[ciProducts]'?: Array<('name' | 'createdDate' | 'productType' | 'app' | 'bundleId' | 'workflows' | 'primaryRepositories' | 'additionalRepositories' | 'buildRuns')>;
        /**
         * the fields to include for returned resources of type ciWorkflows
         */
        'fields[ciWorkflows]'?: Array<('name' | 'description' | 'branchStartCondition' | 'tagStartCondition' | 'pullRequestStartCondition' | 'scheduledStartCondition' | 'manualBranchStartCondition' | 'manualTagStartCondition' | 'manualPullRequestStartCondition' | 'actions' | 'isEnabled' | 'isLockedForEditing' | 'clean' | 'containerFilePath' | 'lastModifiedDate' | 'product' | 'repository' | 'xcodeVersion' | 'macOsVersion' | 'buildRuns')>;
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<('name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository')>;
        /**
         * the fields to include for returned resources of type scmPullRequests
         */
        'fields[scmPullRequests]'?: Array<('title' | 'number' | 'webUrl' | 'sourceRepositoryOwner' | 'sourceRepositoryName' | 'sourceBranchName' | 'destinationRepositoryOwner' | 'destinationRepositoryName' | 'destinationBranchName' | 'isClosed' | 'isCrossRepository' | 'repository')>;
        /**
         * filter by id(s) of related 'builds'
         */
        'filter[builds]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('builds' | 'workflow' | 'product' | 'sourceBranchOrTag' | 'destinationBranch' | 'pullRequest')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related builds returned (when they are included)
         */
        'limit[builds]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('number' | '-number')>;
    };
};

export type CiWorkflowsBuildRunsGetToManyRelatedResponse = (CiBuildRunsResponse);

export type CiWorkflowsBuildRunsGetToManyRelatedError = (ErrorResponse);

export type CiWorkflowsRepositoryGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<('name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository')>;
        /**
         * the fields to include for returned resources of type scmProviders
         */
        'fields[scmProviders]'?: Array<('scmProviderType' | 'url' | 'repositories')>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<('lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('scmProvider' | 'defaultBranch')>;
    };
};

export type CiWorkflowsRepositoryGetToOneRelatedResponse = (ScmRepositoryResponse);

export type CiWorkflowsRepositoryGetToOneRelatedError = (ErrorResponse);

export type CiXcodeVersionsMacOsVersionsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ciMacOsVersions
         */
        'fields[ciMacOsVersions]'?: Array<('version' | 'name' | 'xcodeVersions')>;
        /**
         * the fields to include for returned resources of type ciXcodeVersions
         */
        'fields[ciXcodeVersions]'?: Array<('version' | 'name' | 'testDestinations' | 'macOsVersions')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('xcodeVersions')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related xcodeVersions returned (when they are included)
         */
        'limit[xcodeVersions]'?: number;
    };
};

export type CiXcodeVersionsMacOsVersionsGetToManyRelatedResponse = (CiMacOsVersionsResponse);

export type CiXcodeVersionsMacOsVersionsGetToManyRelatedError = (ErrorResponse);

export type CustomerReviewsResponseGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type customerReviewResponses
         */
        'fields[customerReviewResponses]'?: Array<('responseBody' | 'lastModifiedDate' | 'state' | 'review')>;
        /**
         * the fields to include for returned resources of type customerReviews
         */
        'fields[customerReviews]'?: Array<('rating' | 'title' | 'body' | 'reviewerNickname' | 'createdDate' | 'territory' | 'response')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('review')>;
    };
};

export type CustomerReviewsResponseGetToOneRelatedResponse = (CustomerReviewResponseV1Response);

export type CustomerReviewsResponseGetToOneRelatedError = (ErrorResponse);

export type DiagnosticSignaturesLogsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type DiagnosticSignaturesLogsGetToManyRelatedResponse = (diagnosticLogs);

export type DiagnosticSignaturesLogsGetToManyRelatedError = (ErrorResponse);

export type EndUserLicenseAgreementsTerritoriesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type EndUserLicenseAgreementsTerritoriesGetToManyRelatedResponse = (TerritoriesWithoutIncludesResponse);

export type EndUserLicenseAgreementsTerritoriesGetToManyRelatedError = (ErrorResponse);

export type GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementLocalizations
         */
        'fields[gameCenterAchievementLocalizations]'?: Array<('locale' | 'name' | 'beforeEarnedDescription' | 'afterEarnedDescription' | 'gameCenterAchievement' | 'gameCenterAchievementImage')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterAchievement')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<('referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
};

export type GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedResponse = (GameCenterAchievementResponse);

export type GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedError = (ErrorResponse);

export type GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementImages
         */
        'fields[gameCenterAchievementImages]'?: Array<('fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'gameCenterAchievementLocalization')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementLocalizations
         */
        'fields[gameCenterAchievementLocalizations]'?: Array<('locale' | 'name' | 'beforeEarnedDescription' | 'afterEarnedDescription' | 'gameCenterAchievement' | 'gameCenterAchievementImage')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterAchievementLocalization')>;
    };
};

export type GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedResponse = (GameCenterAchievementImageResponse);

export type GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedError = (ErrorResponse);

export type GameCenterAchievementsGroupAchievementGetToOneRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterAchievementsGroupAchievementGetToOneRelationshipResponse = (GameCenterAchievementGroupAchievementLinkageResponse);

export type GameCenterAchievementsGroupAchievementGetToOneRelationshipError = (ErrorResponse);

export type GameCenterAchievementsGroupAchievementUpdateToOneRelationshipData = {
    /**
     * Related linkage
     */
    body: GameCenterAchievementGroupAchievementLinkageRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterAchievementsGroupAchievementUpdateToOneRelationshipResponse = (void);

export type GameCenterAchievementsGroupAchievementUpdateToOneRelationshipError = (ErrorResponse);

export type GameCenterAchievementsGroupAchievementGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementLocalizations
         */
        'fields[gameCenterAchievementLocalizations]'?: Array<('locale' | 'name' | 'beforeEarnedDescription' | 'afterEarnedDescription' | 'gameCenterAchievement' | 'gameCenterAchievementImage')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterAchievement')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<('referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
};

export type GameCenterAchievementsGroupAchievementGetToOneRelatedResponse = (GameCenterAchievementResponse);

export type GameCenterAchievementsGroupAchievementGetToOneRelatedError = (ErrorResponse);

export type GameCenterAchievementsLocalizationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementImages
         */
        'fields[gameCenterAchievementImages]'?: Array<('fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'gameCenterAchievementLocalization')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementLocalizations
         */
        'fields[gameCenterAchievementLocalizations]'?: Array<('locale' | 'name' | 'beforeEarnedDescription' | 'afterEarnedDescription' | 'gameCenterAchievement' | 'gameCenterAchievementImage')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<('referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterAchievement' | 'gameCenterAchievementImage')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterAchievementsLocalizationsGetToManyRelatedResponse = (GameCenterAchievementLocalizationsResponse);

export type GameCenterAchievementsLocalizationsGetToManyRelatedError = (ErrorResponse);

export type GameCenterAchievementsReleasesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterAchievement')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<('referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * filter by id(s) of related 'gameCenterDetail'
         */
        'filter[gameCenterDetail]'?: Array<(string)>;
        /**
         * filter by attribute 'live'
         */
        'filter[live]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterAchievement')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterAchievementsReleasesGetToManyRelatedResponse = (GameCenterAchievementReleasesResponse);

export type GameCenterAchievementsReleasesGetToManyRelatedError = (ErrorResponse);

export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type ageRatingDeclarations
         */
        'fields[ageRatingDeclarations]'?: Array<('alcoholTobaccoOrDrugUseOrReferences' | 'contests' | 'gamblingAndContests' | 'gambling' | 'gamblingSimulated' | 'kidsAgeBand' | 'lootBox' | 'medicalOrTreatmentInformation' | 'profanityOrCrudeHumor' | 'sexualContentGraphicAndNudity' | 'sexualContentOrNudity' | 'horrorOrFearThemes' | 'matureOrSuggestiveThemes' | 'unrestrictedWebAccess' | 'violenceCartoonOrFantasy' | 'violenceRealisticProlongedGraphicOrSadistic' | 'violenceRealistic' | 'ageRatingOverride' | 'koreaAgeRatingOverride' | 'seventeenPlus')>;
        /**
         * the fields to include for returned resources of type alternativeDistributionPackages
         */
        'fields[alternativeDistributionPackages]'?: Array<('appStoreVersion' | 'versions')>;
        /**
         * the fields to include for returned resources of type appClipDefaultExperiences
         */
        'fields[appClipDefaultExperiences]'?: Array<('action' | 'appClip' | 'releaseWithAppStoreVersion' | 'appClipDefaultExperienceLocalizations' | 'appClipAppStoreReviewDetail' | 'appClipDefaultExperienceTemplate')>;
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type appStoreReviewDetails
         */
        'fields[appStoreReviewDetails]'?: Array<('contactFirstName' | 'contactLastName' | 'contactPhone' | 'contactEmail' | 'demoAccountName' | 'demoAccountPassword' | 'demoAccountRequired' | 'notes' | 'appStoreVersion' | 'appStoreReviewAttachments')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<('name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'started' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'platform' | 'app' | 'latestControlVersion' | 'controlVersions')>;
        /**
         * the fields to include for returned resources of type appStoreVersionLocalizations
         */
        'fields[appStoreVersionLocalizations]'?: Array<('description' | 'locale' | 'keywords' | 'marketingUrl' | 'promotionalText' | 'supportUrl' | 'whatsNew' | 'appStoreVersion' | 'appScreenshotSets' | 'appPreviewSets')>;
        /**
         * the fields to include for returned resources of type appStoreVersionPhasedReleases
         */
        'fields[appStoreVersionPhasedReleases]'?: Array<('phasedReleaseState' | 'startDate' | 'totalPauseDuration' | 'currentDayNumber' | 'appStoreVersion')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type appStoreVersionSubmissions
         */
        'fields[appStoreVersionSubmissions]'?: Array<('appStoreVersion')>;
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<('enabled' | 'compatibilityVersions' | 'appStoreVersion')>;
        /**
         * the fields to include for returned resources of type routingAppCoverages
         */
        'fields[routingAppCoverages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'appStoreVersion')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionPackage')>;
        /**
         * maximum number of related appStoreVersionExperiments returned (when they are included)
         * @deprecated
         */
        'limit[appStoreVersionExperiments]'?: number;
        /**
         * maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
         */
        'limit[appStoreVersionExperimentsV2]'?: number;
        /**
         * maximum number of related appStoreVersionLocalizations returned (when they are included)
         */
        'limit[appStoreVersionLocalizations]'?: number;
    };
};

export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedResponse = (AppStoreVersionResponse);

export type GameCenterAppVersionsAppStoreVersionGetToOneRelatedError = (ErrorResponse);

export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipResponse = (GameCenterAppVersionCompatibilityVersionsLinkagesResponse);

export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipError = (ErrorResponse);

export type GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterAppVersionCompatibilityVersionsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipResponse = (void);

export type GameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipError = (ErrorResponse);

export type GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterAppVersionCompatibilityVersionsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipResponse = (void);

export type GameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipError = (ErrorResponse);

export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<('enabled' | 'compatibilityVersions' | 'appStoreVersion')>;
        /**
         * filter by attribute 'enabled'
         */
        'filter[enabled]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('compatibilityVersions' | 'appStoreVersion')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related compatibilityVersions returned (when they are included)
         */
        'limit[compatibilityVersions]'?: number;
    };
};

export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedResponse = (GameCenterAppVersionsResponse);

export type GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedError = (ErrorResponse);

export type GameCenterDetailsAchievementReleasesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterAchievement')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<('referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * filter by id(s) of related 'gameCenterAchievement'
         */
        'filter[gameCenterAchievement]'?: Array<(string)>;
        /**
         * filter by attribute 'live'
         */
        'filter[live]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterAchievement')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterDetailsAchievementReleasesGetToManyRelatedResponse = (GameCenterAchievementReleasesResponse);

export type GameCenterDetailsAchievementReleasesGetToManyRelatedError = (ErrorResponse);

export type GameCenterDetailsGameCenterAchievementsGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterDetailsGameCenterAchievementsGetToManyRelationshipResponse = (GameCenterDetailGameCenterAchievementsLinkagesResponse);

export type GameCenterDetailsGameCenterAchievementsGetToManyRelationshipError = (ErrorResponse);

export type GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterDetailGameCenterAchievementsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipResponse = (void);

export type GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipError = (ErrorResponse);

export type GameCenterDetailsGameCenterAchievementsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementLocalizations
         */
        'fields[gameCenterAchievementLocalizations]'?: Array<('locale' | 'name' | 'beforeEarnedDescription' | 'afterEarnedDescription' | 'gameCenterAchievement' | 'gameCenterAchievementImage')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterAchievement')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<('referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * filter by attribute 'archived'
         */
        'filter[archived]'?: Array<(string)>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'referenceName'
         */
        'filter[referenceName]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
};

export type GameCenterDetailsGameCenterAchievementsGetToManyRelatedResponse = (GameCenterAchievementsResponse);

export type GameCenterDetailsGameCenterAchievementsGetToManyRelatedError = (ErrorResponse);

export type GameCenterDetailsGameCenterAppVersionsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<('enabled' | 'compatibilityVersions' | 'appStoreVersion')>;
        /**
         * filter by attribute 'enabled'
         */
        'filter[enabled]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('compatibilityVersions' | 'appStoreVersion')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related compatibilityVersions returned (when they are included)
         */
        'limit[compatibilityVersions]'?: number;
    };
};

export type GameCenterDetailsGameCenterAppVersionsGetToManyRelatedResponse = (GameCenterAppVersionsResponse);

export type GameCenterDetailsGameCenterAppVersionsGetToManyRelatedError = (ErrorResponse);

export type GameCenterDetailsGameCenterGroupGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<('referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * maximum number of related gameCenterAchievements returned (when they are included)
         */
        'limit[gameCenterAchievements]'?: number;
        /**
         * maximum number of related gameCenterDetails returned (when they are included)
         */
        'limit[gameCenterDetails]'?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
    };
};

export type GameCenterDetailsGameCenterGroupGetToOneRelatedResponse = (GameCenterGroupResponse);

export type GameCenterDetailsGameCenterGroupGetToOneRelatedError = (ErrorResponse);

export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipResponse = (GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse);

export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipError = (ErrorResponse);

export type GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipResponse = (void);

export type GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipError = (ErrorResponse);

export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
         */
        'fields[gameCenterLeaderboardSetLocalizations]'?: Array<('locale' | 'name' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'referenceName'
         */
        'filter[referenceName]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
};

export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedResponse = (GameCenterLeaderboardSetsResponse);

export type GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedError = (ErrorResponse);

export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipResponse = (GameCenterDetailGameCenterLeaderboardsLinkagesResponse);

export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipError = (ErrorResponse);

export type GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterDetailGameCenterLeaderboardsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipResponse = (void);

export type GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipError = (ErrorResponse);

export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<('locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboard')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * filter by attribute 'archived'
         */
        'filter[archived]'?: Array<(string)>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'referenceName'
         */
        'filter[referenceName]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
};

export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedResponse = (GameCenterLeaderboardsResponse);

export type GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedError = (ErrorResponse);

export type GameCenterDetailsLeaderboardReleasesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboard')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * filter by id(s) of related 'gameCenterLeaderboard'
         */
        'filter[gameCenterLeaderboard]'?: Array<(string)>;
        /**
         * filter by attribute 'live'
         */
        'filter[live]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterLeaderboard')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterDetailsLeaderboardReleasesGetToManyRelatedResponse = (GameCenterLeaderboardReleasesResponse);

export type GameCenterDetailsLeaderboardReleasesGetToManyRelatedError = (ErrorResponse);

export type GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * filter by id(s) of related 'gameCenterLeaderboardSet'
         */
        'filter[gameCenterLeaderboardSet]'?: Array<(string)>;
        /**
         * filter by attribute 'live'
         */
        'filter[live]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterLeaderboardSet')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedResponse = (GameCenterLeaderboardSetReleasesResponse);

export type GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedError = (ErrorResponse);

export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipResponse = (GameCenterEnabledVersionCompatibleVersionsLinkagesResponse);

export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipError = (ErrorResponse);

export type GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterEnabledVersionCompatibleVersionsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipResponse = (void);

export type GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipError = (ErrorResponse);

export type GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterEnabledVersionCompatibleVersionsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipResponse = (void);

export type GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipError = (ErrorResponse);

export type GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterEnabledVersionCompatibleVersionsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipResponse = (void);

export type GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipError = (ErrorResponse);

export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type gameCenterEnabledVersions
         */
        'fields[gameCenterEnabledVersions]'?: Array<('platform' | 'versionString' | 'iconAsset' | 'compatibleVersions' | 'app')>;
        /**
         * filter by id(s) of related 'app'
         */
        'filter[app]'?: Array<(string)>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'platform'
         */
        'filter[platform]'?: Array<('IOS' | 'MAC_OS' | 'TV_OS' | 'VISION_OS')>;
        /**
         * filter by attribute 'versionString'
         */
        'filter[versionString]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('compatibleVersions' | 'app')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related compatibleVersions returned (when they are included)
         * @deprecated
         */
        'limit[compatibleVersions]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('versionString' | '-versionString')>;
    };
};

export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedResponse = (GameCenterEnabledVersionsResponse);

export type GameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedError = (ErrorResponse);

export type GameCenterGroupsGameCenterAchievementsGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterGroupsGameCenterAchievementsGetToManyRelationshipResponse = (GameCenterGroupGameCenterAchievementsLinkagesResponse);

export type GameCenterGroupsGameCenterAchievementsGetToManyRelationshipError = (ErrorResponse);

export type GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterGroupGameCenterAchievementsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipResponse = (void);

export type GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipError = (ErrorResponse);

export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterAchievementLocalizations
         */
        'fields[gameCenterAchievementLocalizations]'?: Array<('locale' | 'name' | 'beforeEarnedDescription' | 'afterEarnedDescription' | 'gameCenterAchievement' | 'gameCenterAchievementImage')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterAchievement')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<('referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * filter by attribute 'archived'
         */
        'filter[archived]'?: Array<(string)>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'referenceName'
         */
        'filter[referenceName]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
};

export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedResponse = (GameCenterAchievementsResponse);

export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedError = (ErrorResponse);

export type GameCenterGroupsGameCenterDetailsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievementReleases
         */
        'fields[gameCenterAchievementReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterAchievement')>;
        /**
         * the fields to include for returned resources of type gameCenterAchievements
         */
        'fields[gameCenterAchievements]'?: Array<('referenceName' | 'vendorIdentifier' | 'points' | 'showBeforeEarned' | 'repeatable' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupAchievement' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterAppVersions
         */
        'fields[gameCenterAppVersions]'?: Array<('enabled' | 'compatibilityVersions' | 'appStoreVersion')>;
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboard')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * filter by attribute 'gameCenterAppVersions.enabled'
         */
        'filter[gameCenterAppVersions.enabled]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related achievementReleases returned (when they are included)
         */
        'limit[achievementReleases]'?: number;
        /**
         * maximum number of related gameCenterAchievements returned (when they are included)
         */
        'limit[gameCenterAchievements]'?: number;
        /**
         * maximum number of related gameCenterAppVersions returned (when they are included)
         */
        'limit[gameCenterAppVersions]'?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related leaderboardReleases returned (when they are included)
         */
        'limit[leaderboardReleases]'?: number;
        /**
         * maximum number of related leaderboardSetReleases returned (when they are included)
         */
        'limit[leaderboardSetReleases]'?: number;
    };
};

export type GameCenterGroupsGameCenterDetailsGetToManyRelatedResponse = (GameCenterDetailsResponse);

export type GameCenterGroupsGameCenterDetailsGetToManyRelatedError = (ErrorResponse);

export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipResponse = (GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse);

export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipError = (ErrorResponse);

export type GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipResponse = (void);

export type GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipError = (ErrorResponse);

export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
         */
        'fields[gameCenterLeaderboardSetLocalizations]'?: Array<('locale' | 'name' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'referenceName'
         */
        'filter[referenceName]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
};

export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedResponse = (GameCenterLeaderboardSetsResponse);

export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedError = (ErrorResponse);

export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipResponse = (GameCenterGroupGameCenterLeaderboardsLinkagesResponse);

export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipError = (ErrorResponse);

export type GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterGroupGameCenterLeaderboardsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipResponse = (void);

export type GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipError = (ErrorResponse);

export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<('locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboard')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * filter by attribute 'archived'
         */
        'filter[archived]'?: Array<(string)>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'referenceName'
         */
        'filter[referenceName]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
};

export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedResponse = (GameCenterLeaderboardsResponse);

export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedError = (ErrorResponse);

export type GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardImages
         */
        'fields[gameCenterLeaderboardImages]'?: Array<('fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'gameCenterLeaderboardLocalization')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<('locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterLeaderboardLocalization')>;
    };
};

export type GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedResponse = (GameCenterLeaderboardImageResponse);

export type GameCenterLeaderboardLocalizationsGameCenterLeaderboardImageGetToOneRelatedError = (ErrorResponse);

export type GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetImages
         */
        'fields[gameCenterLeaderboardSetImages]'?: Array<('fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'gameCenterLeaderboardSetLocalization')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
         */
        'fields[gameCenterLeaderboardSetLocalizations]'?: Array<('locale' | 'name' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterLeaderboardSetLocalization')>;
    };
};

export type GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedResponse = (GameCenterLeaderboardSetImageResponse);

export type GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedError = (ErrorResponse);

export type GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<('locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboard')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
};

export type GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedResponse = (GameCenterLeaderboardResponse);

export type GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardGetToOneRelatedError = (ErrorResponse);

export type GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
         */
        'fields[gameCenterLeaderboardSetLocalizations]'?: Array<('locale' | 'name' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
};

export type GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedResponse = (GameCenterLeaderboardSetResponse);

export type GameCenterLeaderboardSetMemberLocalizationsGameCenterLeaderboardSetGetToOneRelatedError = (ErrorResponse);

export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipResponse = (GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponse);

export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipError = (ErrorResponse);

export type GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipResponse = (void);

export type GameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipError = (ErrorResponse);

export type GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipResponse = (void);

export type GameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipError = (ErrorResponse);

export type GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipResponse = (void);

export type GameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipError = (ErrorResponse);

export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<('locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboard')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * filter by attribute 'archived'
         */
        'filter[archived]'?: Array<(string)>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * filter by attribute 'referenceName'
         */
        'filter[referenceName]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
};

export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedResponse = (GameCenterLeaderboardsResponse);

export type GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedError = (ErrorResponse);

export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipResponse = (GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponse);

export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipError = (ErrorResponse);

export type GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipData = {
    /**
     * Related linkage
     */
    body: GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipResponse = (void);

export type GameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipError = (ErrorResponse);

export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
         */
        'fields[gameCenterLeaderboardSetLocalizations]'?: Array<('locale' | 'name' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * maximum number of related gameCenterLeaderboards returned (when they are included)
         */
        'limit[gameCenterLeaderboards]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
};

export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedResponse = (GameCenterLeaderboardSetResponse);

export type GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedError = (ErrorResponse);

export type GameCenterLeaderboardSetsLocalizationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetImages
         */
        'fields[gameCenterLeaderboardSetImages]'?: Array<('fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'gameCenterLeaderboardSetLocalization')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
         */
        'fields[gameCenterLeaderboardSetLocalizations]'?: Array<('locale' | 'name' | 'gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterLeaderboardSet' | 'gameCenterLeaderboardSetImage')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterLeaderboardSetsLocalizationsGetToManyRelatedResponse = (GameCenterLeaderboardSetLocalizationsResponse);

export type GameCenterLeaderboardSetsLocalizationsGetToManyRelatedError = (ErrorResponse);

export type GameCenterLeaderboardSetsReleasesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSetReleases
         */
        'fields[gameCenterLeaderboardSetReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboardSet')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * filter by id(s) of related 'gameCenterDetail'
         */
        'filter[gameCenterDetail]'?: Array<(string)>;
        /**
         * filter by attribute 'live'
         */
        'filter[live]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterLeaderboardSet')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterLeaderboardSetsReleasesGetToManyRelatedResponse = (GameCenterLeaderboardSetReleasesResponse);

export type GameCenterLeaderboardSetsReleasesGetToManyRelatedError = (ErrorResponse);

export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipResponse = (GameCenterLeaderboardGroupLeaderboardLinkageResponse);

export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelationshipError = (ErrorResponse);

export type GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipData = {
    /**
     * Related linkage
     */
    body: GameCenterLeaderboardGroupLeaderboardLinkageRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipResponse = (void);

export type GameCenterLeaderboardsGroupLeaderboardUpdateToOneRelationshipError = (ErrorResponse);

export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterGroups
         */
        'fields[gameCenterGroups]'?: Array<('referenceName' | 'gameCenterDetails' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<('locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboard')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardSets
         */
        'fields[gameCenterLeaderboardSets]'?: Array<('referenceName' | 'vendorIdentifier' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboardSet' | 'localizations' | 'gameCenterLeaderboards' | 'releases')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * maximum number of related gameCenterLeaderboardSets returned (when they are included)
         */
        'limit[gameCenterLeaderboardSets]'?: number;
        /**
         * maximum number of related localizations returned (when they are included)
         */
        'limit[localizations]'?: number;
        /**
         * maximum number of related releases returned (when they are included)
         */
        'limit[releases]'?: number;
    };
};

export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedResponse = (GameCenterLeaderboardResponse);

export type GameCenterLeaderboardsGroupLeaderboardGetToOneRelatedError = (ErrorResponse);

export type GameCenterLeaderboardsLocalizationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardImages
         */
        'fields[gameCenterLeaderboardImages]'?: Array<('fileSize' | 'fileName' | 'imageAsset' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'gameCenterLeaderboardLocalization')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardLocalizations
         */
        'fields[gameCenterLeaderboardLocalizations]'?: Array<('locale' | 'name' | 'formatterOverride' | 'formatterSuffix' | 'formatterSuffixSingular' | 'gameCenterLeaderboard' | 'gameCenterLeaderboardImage')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterLeaderboard' | 'gameCenterLeaderboardImage')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterLeaderboardsLocalizationsGetToManyRelatedResponse = (GameCenterLeaderboardLocalizationsResponse);

export type GameCenterLeaderboardsLocalizationsGetToManyRelatedError = (ErrorResponse);

export type GameCenterLeaderboardsReleasesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterDetails
         */
        'fields[gameCenterDetails]'?: Array<('arcadeEnabled' | 'challengeEnabled' | 'app' | 'gameCenterAppVersions' | 'gameCenterGroup' | 'gameCenterLeaderboards' | 'gameCenterLeaderboardSets' | 'gameCenterAchievements' | 'defaultLeaderboard' | 'defaultGroupLeaderboard' | 'achievementReleases' | 'leaderboardReleases' | 'leaderboardSetReleases')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboardReleases
         */
        'fields[gameCenterLeaderboardReleases]'?: Array<('live' | 'gameCenterDetail' | 'gameCenterLeaderboard')>;
        /**
         * the fields to include for returned resources of type gameCenterLeaderboards
         */
        'fields[gameCenterLeaderboards]'?: Array<('defaultFormatter' | 'referenceName' | 'vendorIdentifier' | 'submissionType' | 'scoreSortType' | 'scoreRangeStart' | 'scoreRangeEnd' | 'recurrenceStartDate' | 'recurrenceDuration' | 'recurrenceRule' | 'archived' | 'gameCenterDetail' | 'gameCenterGroup' | 'groupLeaderboard' | 'gameCenterLeaderboardSets' | 'localizations' | 'releases')>;
        /**
         * filter by id(s) of related 'gameCenterDetail'
         */
        'filter[gameCenterDetail]'?: Array<(string)>;
        /**
         * filter by attribute 'live'
         */
        'filter[live]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('gameCenterDetail' | 'gameCenterLeaderboard')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterLeaderboardsReleasesGetToManyRelatedResponse = (GameCenterLeaderboardReleasesResponse);

export type GameCenterLeaderboardsReleasesGetToManyRelatedError = (ErrorResponse);

export type GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingQueues
         */
        'fields[gameCenterMatchmakingQueues]'?: Array<('referenceName' | 'classicMatchmakingBundleIds' | 'ruleSet' | 'experimentRuleSet')>;
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingRuleSets
         */
        'fields[gameCenterMatchmakingRuleSets]'?: Array<('referenceName' | 'ruleLanguageVersion' | 'minPlayers' | 'maxPlayers' | 'teams' | 'rules' | 'matchmakingQueues')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('ruleSet' | 'experimentRuleSet')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedResponse = (GameCenterMatchmakingQueuesResponse);

export type GameCenterMatchmakingRuleSetsMatchmakingQueuesGetToManyRelatedError = (ErrorResponse);

export type GameCenterMatchmakingRuleSetsRulesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingRules
         */
        'fields[gameCenterMatchmakingRules]'?: Array<('referenceName' | 'description' | 'type' | 'expression' | 'weight' | 'ruleSet')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterMatchmakingRuleSetsRulesGetToManyRelatedResponse = (GameCenterMatchmakingRulesResponse);

export type GameCenterMatchmakingRuleSetsRulesGetToManyRelatedError = (ErrorResponse);

export type GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type gameCenterMatchmakingTeams
         */
        'fields[gameCenterMatchmakingTeams]'?: Array<('referenceName' | 'minPlayers' | 'maxPlayers' | 'ruleSet')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedResponse = (GameCenterMatchmakingTeamsResponse);

export type GameCenterMatchmakingRuleSetsTeamsGetToManyRelatedError = (ErrorResponse);

export type InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedResponse = (TerritoriesResponse);

export type InAppPurchaseAvailabilitiesAvailableTerritoriesGetToManyRelatedError = (ErrorResponse);

export type InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchasePricePoints
         */
        'fields[inAppPurchasePricePoints]'?: Array<('customerPrice' | 'proceeds' | 'territory' | 'inAppPurchaseV2')>;
        /**
         * the fields to include for returned resources of type inAppPurchasePrices
         */
        'fields[inAppPurchasePrices]'?: Array<('startDate' | 'endDate' | 'manual' | 'inAppPurchaseV2' | 'inAppPurchasePricePoint' | 'territory')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchasePricePoint' | 'territory')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedResponse = (InAppPurchasePricesResponse);

export type InAppPurchasePriceSchedulesAutomaticPricesGetToManyRelatedError = (ErrorResponse);

export type InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
    };
};

export type InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedResponse = (TerritoryResponse);

export type InAppPurchasePriceSchedulesBaseTerritoryGetToOneRelatedError = (ErrorResponse);

export type InAppPurchasePriceSchedulesManualPricesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchasePricePoints
         */
        'fields[inAppPurchasePricePoints]'?: Array<('customerPrice' | 'proceeds' | 'territory' | 'inAppPurchaseV2')>;
        /**
         * the fields to include for returned resources of type inAppPurchasePrices
         */
        'fields[inAppPurchasePrices]'?: Array<('startDate' | 'endDate' | 'manual' | 'inAppPurchaseV2' | 'inAppPurchasePricePoint' | 'territory')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchasePricePoint' | 'territory')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type InAppPurchasePriceSchedulesManualPricesGetToManyRelatedResponse = (InAppPurchasePricesResponse);

export type InAppPurchasePriceSchedulesManualPricesGetToManyRelatedError = (ErrorResponse);

export type InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots
         */
        'fields[inAppPurchaseAppStoreReviewScreenshots]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'inAppPurchaseV2')>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<('name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'app' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchaseV2')>;
    };
};

export type InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedResponse = (InAppPurchaseAppStoreReviewScreenshotResponse);

export type InAppPurchasesV2AppStoreReviewScreenshotGetToOneRelatedError = (ErrorResponse);

export type InAppPurchasesV2ContentGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseContents
         */
        'fields[inAppPurchaseContents]'?: Array<('fileName' | 'fileSize' | 'url' | 'lastModifiedDate' | 'inAppPurchaseV2')>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<('name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'app' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchaseV2')>;
    };
};

export type InAppPurchasesV2ContentGetToOneRelatedResponse = (InAppPurchaseContentResponse);

export type InAppPurchasesV2ContentGetToOneRelatedError = (ErrorResponse);

export type InAppPurchasesV2IapPriceScheduleGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchasePrices
         */
        'fields[inAppPurchasePrices]'?: Array<('startDate' | 'endDate' | 'manual' | 'inAppPurchaseV2' | 'inAppPurchasePricePoint' | 'territory')>;
        /**
         * the fields to include for returned resources of type inAppPurchasePriceSchedules
         */
        'fields[inAppPurchasePriceSchedules]'?: Array<('inAppPurchase' | 'baseTerritory' | 'manualPrices' | 'automaticPrices')>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<('name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'app' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchase' | 'baseTerritory' | 'manualPrices' | 'automaticPrices')>;
        /**
         * maximum number of related automaticPrices returned (when they are included)
         */
        'limit[automaticPrices]'?: number;
        /**
         * maximum number of related manualPrices returned (when they are included)
         */
        'limit[manualPrices]'?: number;
    };
};

export type InAppPurchasesV2IapPriceScheduleGetToOneRelatedResponse = (InAppPurchasePriceScheduleResponse);

export type InAppPurchasesV2IapPriceScheduleGetToOneRelatedError = (ErrorResponse);

export type InAppPurchasesV2ImagesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseImages
         */
        'fields[inAppPurchaseImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'uploadOperations' | 'uploaded' | 'state' | 'inAppPurchase')>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<('name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'app' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchase')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type InAppPurchasesV2ImagesGetToManyRelatedResponse = (InAppPurchaseImagesResponse);

export type InAppPurchasesV2ImagesGetToManyRelatedError = (ErrorResponse);

export type InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseAvailabilities
         */
        'fields[inAppPurchaseAvailabilities]'?: Array<('availableInNewTerritories' | 'inAppPurchase' | 'availableTerritories')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('availableTerritories')>;
        /**
         * maximum number of related availableTerritories returned (when they are included)
         */
        'limit[availableTerritories]'?: number;
    };
};

export type InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedResponse = (InAppPurchaseAvailabilityResponse);

export type InAppPurchasesV2InAppPurchaseAvailabilityGetToOneRelatedError = (ErrorResponse);

export type InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchaseLocalizations
         */
        'fields[inAppPurchaseLocalizations]'?: Array<('name' | 'locale' | 'description' | 'state' | 'inAppPurchaseV2')>;
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<('name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'app' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchaseV2')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedResponse = (InAppPurchaseLocalizationsResponse);

export type InAppPurchasesV2InAppPurchaseLocalizationsGetToManyRelatedError = (ErrorResponse);

export type InAppPurchasesV2PricePointsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchasePricePoints
         */
        'fields[inAppPurchasePricePoints]'?: Array<('customerPrice' | 'proceeds' | 'territory' | 'inAppPurchaseV2')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('territory')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type InAppPurchasesV2PricePointsGetToManyRelatedResponse = (InAppPurchasePricePointsResponse);

export type InAppPurchasesV2PricePointsGetToManyRelatedError = (ErrorResponse);

export type InAppPurchasesV2PromotedPurchaseGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<('name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'app' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images')>;
        /**
         * the fields to include for returned resources of type promotedPurchaseImages
         */
        'fields[promotedPurchaseImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'assetType' | 'uploadOperations' | 'uploaded' | 'state' | 'promotedPurchase')>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<('visibleForAllUsers' | 'enabled' | 'state' | 'app' | 'inAppPurchaseV2' | 'subscription' | 'promotionImages')>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<('name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchaseV2' | 'subscription' | 'promotionImages')>;
        /**
         * maximum number of related promotionImages returned (when they are included)
         * @deprecated
         */
        'limit[promotionImages]'?: number;
    };
};

export type InAppPurchasesV2PromotedPurchaseGetToOneRelatedResponse = (PromotedPurchaseResponse);

export type InAppPurchasesV2PromotedPurchaseGetToOneRelatedError = (ErrorResponse);

export type PreReleaseVersionsAppGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
    };
};

export type PreReleaseVersionsAppGetToOneRelatedResponse = (AppWithoutIncludesResponse);

export type PreReleaseVersionsAppGetToOneRelatedError = (ErrorResponse);

export type PreReleaseVersionsBuildsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type builds
         */
        'fields[builds]'?: Array<('version' | 'uploadedDate' | 'expirationDate' | 'expired' | 'minOsVersion' | 'lsMinimumSystemVersion' | 'computedMinMacOsVersion' | 'iconAssetToken' | 'processingState' | 'buildAudienceType' | 'usesNonExemptEncryption' | 'preReleaseVersion' | 'individualTesters' | 'betaGroups' | 'betaBuildLocalizations' | 'appEncryptionDeclaration' | 'betaAppReviewSubmission' | 'app' | 'buildBetaDetail' | 'appStoreVersion' | 'icons' | 'buildBundles' | 'perfPowerMetrics' | 'diagnosticSignatures')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type PreReleaseVersionsBuildsGetToManyRelatedResponse = (BuildsWithoutIncludesResponse);

export type PreReleaseVersionsBuildsGetToManyRelatedError = (ErrorResponse);

export type ProfilesBundleIdGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type bundleIds
         */
        'fields[bundleIds]'?: Array<('name' | 'platform' | 'identifier' | 'seedId' | 'profiles' | 'bundleIdCapabilities' | 'app')>;
    };
};

export type ProfilesBundleIdGetToOneRelatedResponse = (BundleIdWithoutIncludesResponse);

export type ProfilesBundleIdGetToOneRelatedError = (ErrorResponse);

export type ProfilesCertificatesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type certificates
         */
        'fields[certificates]'?: Array<('name' | 'csrContent' | 'certificateType' | 'displayName' | 'serialNumber' | 'platform' | 'expirationDate' | 'certificateContent')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type ProfilesCertificatesGetToManyRelatedResponse = (CertificatesWithoutIncludesResponse);

export type ProfilesCertificatesGetToManyRelatedError = (ErrorResponse);

export type ProfilesDevicesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type devices
         */
        'fields[devices]'?: Array<('name' | 'platform' | 'udid' | 'deviceClass' | 'status' | 'model' | 'addedDate')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type ProfilesDevicesGetToManyRelatedResponse = (DevicesWithoutIncludesResponse);

export type ProfilesDevicesGetToManyRelatedError = (ErrorResponse);

export type PromotedPurchasesPromotionImagesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type promotedPurchaseImages
         */
        'fields[promotedPurchaseImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'assetType' | 'uploadOperations' | 'uploaded' | 'state' | 'promotedPurchase')>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<('visibleForAllUsers' | 'enabled' | 'state' | 'app' | 'inAppPurchaseV2' | 'subscription' | 'promotionImages')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('promotedPurchase')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type PromotedPurchasesPromotionImagesGetToManyRelatedResponse = (PromotedPurchaseImagesResponse);

export type PromotedPurchasesPromotionImagesGetToManyRelatedError = (ErrorResponse);

export type ReviewSubmissionsItemsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type appCustomProductPageVersions
         */
        'fields[appCustomProductPageVersions]'?: Array<('version' | 'state' | 'deepLink' | 'appCustomProductPage' | 'appCustomProductPageLocalizations')>;
        /**
         * the fields to include for returned resources of type appEvents
         */
        'fields[appEvents]'?: Array<('referenceName' | 'badge' | 'eventState' | 'deepLink' | 'purchaseRequirement' | 'primaryLocale' | 'priority' | 'purpose' | 'territorySchedules' | 'archivedTerritorySchedules' | 'app' | 'localizations')>;
        /**
         * the fields to include for returned resources of type appStoreVersionExperiments
         */
        'fields[appStoreVersionExperiments]'?: Array<('name' | 'trafficProportion' | 'state' | 'reviewRequired' | 'startDate' | 'endDate' | 'started' | 'appStoreVersion' | 'appStoreVersionExperimentTreatments' | 'platform' | 'app' | 'latestControlVersion' | 'controlVersions')>;
        /**
         * the fields to include for returned resources of type appStoreVersions
         */
        'fields[appStoreVersions]'?: Array<('platform' | 'versionString' | 'appStoreState' | 'appVersionState' | 'copyright' | 'reviewType' | 'releaseType' | 'earliestReleaseDate' | 'downloadable' | 'createdDate' | 'app' | 'ageRatingDeclaration' | 'appStoreVersionLocalizations' | 'build' | 'appStoreVersionPhasedRelease' | 'gameCenterAppVersion' | 'routingAppCoverage' | 'appStoreReviewDetail' | 'appStoreVersionSubmission' | 'appClipDefaultExperience' | 'appStoreVersionExperiments' | 'appStoreVersionExperimentsV2' | 'customerReviews' | 'alternativeDistributionPackage')>;
        /**
         * the fields to include for returned resources of type reviewSubmissionItems
         */
        'fields[reviewSubmissionItems]'?: Array<('state' | 'resolved' | 'removed' | 'reviewSubmission' | 'appStoreVersion' | 'appCustomProductPageVersion' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appEvent')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('appStoreVersion' | 'appCustomProductPageVersion' | 'appStoreVersionExperiment' | 'appStoreVersionExperimentV2' | 'appEvent')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type ReviewSubmissionsItemsGetToManyRelatedResponse = (ReviewSubmissionItemsResponse);

export type ReviewSubmissionsItemsGetToManyRelatedError = (ErrorResponse);

export type ScmProvidersRepositoriesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<('name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository')>;
        /**
         * the fields to include for returned resources of type scmProviders
         */
        'fields[scmProviders]'?: Array<('scmProviderType' | 'url' | 'repositories')>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<('lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests')>;
        /**
         * filter by id(s)
         */
        'filter[id]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('scmProvider' | 'defaultBranch')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type ScmProvidersRepositoriesGetToManyRelatedResponse = (ScmRepositoriesResponse);

export type ScmProvidersRepositoriesGetToManyRelatedError = (ErrorResponse);

export type ScmRepositoriesGitReferencesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmGitReferences
         */
        'fields[scmGitReferences]'?: Array<('name' | 'canonicalName' | 'isDeleted' | 'kind' | 'repository')>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<('lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('repository')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type ScmRepositoriesGitReferencesGetToManyRelatedResponse = (ScmGitReferencesResponse);

export type ScmRepositoriesGitReferencesGetToManyRelatedError = (ErrorResponse);

export type ScmRepositoriesPullRequestsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type scmPullRequests
         */
        'fields[scmPullRequests]'?: Array<('title' | 'number' | 'webUrl' | 'sourceRepositoryOwner' | 'sourceRepositoryName' | 'sourceBranchName' | 'destinationRepositoryOwner' | 'destinationRepositoryName' | 'destinationBranchName' | 'isClosed' | 'isCrossRepository' | 'repository')>;
        /**
         * the fields to include for returned resources of type scmRepositories
         */
        'fields[scmRepositories]'?: Array<('lastAccessedDate' | 'httpCloneUrl' | 'sshCloneUrl' | 'ownerName' | 'repositoryName' | 'scmProvider' | 'defaultBranch' | 'gitReferences' | 'pullRequests')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('repository')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type ScmRepositoriesPullRequestsGetToManyRelatedResponse = (ScmPullRequestsResponse);

export type ScmRepositoriesPullRequestsGetToManyRelatedError = (ErrorResponse);

export type SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedResponse = (TerritoriesResponse);

export type SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedError = (ErrorResponse);

export type SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionGroupLocalizations
         */
        'fields[subscriptionGroupLocalizations]'?: Array<('name' | 'customAppName' | 'locale' | 'state' | 'subscriptionGroup')>;
        /**
         * the fields to include for returned resources of type subscriptionGroups
         */
        'fields[subscriptionGroups]'?: Array<('referenceName' | 'app' | 'subscriptions' | 'subscriptionGroupLocalizations')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscriptionGroup')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedResponse = (SubscriptionGroupLocalizationsResponse);

export type SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedError = (ErrorResponse);

export type SubscriptionGroupsSubscriptionsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<('visibleForAllUsers' | 'enabled' | 'state' | 'app' | 'inAppPurchaseV2' | 'subscription' | 'promotionImages')>;
        /**
         * the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots
         */
        'fields[subscriptionAppStoreReviewScreenshots]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'subscription')>;
        /**
         * the fields to include for returned resources of type subscriptionAvailabilities
         */
        'fields[subscriptionAvailabilities]'?: Array<('availableInNewTerritories' | 'subscription' | 'availableTerritories')>;
        /**
         * the fields to include for returned resources of type subscriptionGroups
         */
        'fields[subscriptionGroups]'?: Array<('referenceName' | 'app' | 'subscriptions' | 'subscriptionGroupLocalizations')>;
        /**
         * the fields to include for returned resources of type subscriptionImages
         */
        'fields[subscriptionImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'uploadOperations' | 'uploaded' | 'state' | 'subscription')>;
        /**
         * the fields to include for returned resources of type subscriptionIntroductoryOffers
         */
        'fields[subscriptionIntroductoryOffers]'?: Array<('startDate' | 'endDate' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'subscription' | 'territory' | 'subscriptionPricePoint')>;
        /**
         * the fields to include for returned resources of type subscriptionLocalizations
         */
        'fields[subscriptionLocalizations]'?: Array<('name' | 'locale' | 'description' | 'state' | 'subscription')>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodes
         */
        'fields[subscriptionOfferCodes]'?: Array<('name' | 'customerEligibilities' | 'offerEligibility' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'totalNumberOfCodes' | 'active' | 'subscription' | 'oneTimeUseCodes' | 'customCodes' | 'prices')>;
        /**
         * the fields to include for returned resources of type subscriptionPrices
         */
        'fields[subscriptionPrices]'?: Array<('startDate' | 'preserved' | 'preserveCurrentPrice' | 'subscription' | 'territory' | 'subscriptionPricePoint')>;
        /**
         * the fields to include for returned resources of type subscriptionPromotionalOffers
         */
        'fields[subscriptionPromotionalOffers]'?: Array<('name' | 'offerCode' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'subscription' | 'prices')>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<('name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images')>;
        /**
         * the fields to include for returned resources of type winBackOffers
         */
        'fields[winBackOffers]'?: Array<('referenceName' | 'offerId' | 'duration' | 'offerMode' | 'periodCount' | 'customerEligibilityPaidSubscriptionDurationInMonths' | 'customerEligibilityTimeSinceLastSubscribedInMonths' | 'customerEligibilityWaitBetweenOffersInMonths' | 'startDate' | 'endDate' | 'priority' | 'promotionIntent' | 'subscription' | 'prices')>;
        /**
         * filter by attribute 'name'
         */
        'filter[name]'?: Array<(string)>;
        /**
         * filter by attribute 'productId'
         */
        'filter[productId]'?: Array<(string)>;
        /**
         * filter by attribute 'state'
         */
        'filter[state]'?: Array<('MISSING_METADATA' | 'READY_TO_SUBMIT' | 'WAITING_FOR_REVIEW' | 'IN_REVIEW' | 'DEVELOPER_ACTION_NEEDED' | 'PENDING_BINARY_APPROVAL' | 'APPROVED' | 'DEVELOPER_REMOVED_FROM_SALE' | 'REMOVED_FROM_SALE' | 'REJECTED')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related images returned (when they are included)
         */
        'limit[images]'?: number;
        /**
         * maximum number of related introductoryOffers returned (when they are included)
         */
        'limit[introductoryOffers]'?: number;
        /**
         * maximum number of related offerCodes returned (when they are included)
         */
        'limit[offerCodes]'?: number;
        /**
         * maximum number of related prices returned (when they are included)
         */
        'limit[prices]'?: number;
        /**
         * maximum number of related promotionalOffers returned (when they are included)
         */
        'limit[promotionalOffers]'?: number;
        /**
         * maximum number of related subscriptionLocalizations returned (when they are included)
         */
        'limit[subscriptionLocalizations]'?: number;
        /**
         * maximum number of related winBackOffers returned (when they are included)
         */
        'limit[winBackOffers]'?: number;
        /**
         * comma-separated list of sort expressions; resources will be sorted as specified
         */
        sort?: Array<('name' | '-name')>;
    };
};

export type SubscriptionGroupsSubscriptionsGetToManyRelatedResponse = (SubscriptionsResponse);

export type SubscriptionGroupsSubscriptionsGetToManyRelatedError = (ErrorResponse);

export type SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedResponse = (csv);

export type SubscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedError = (ErrorResponse);

export type SubscriptionOfferCodesCustomCodesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
         */
        'fields[subscriptionOfferCodeCustomCodes]'?: Array<('customCode' | 'numberOfCodes' | 'createdDate' | 'expirationDate' | 'active' | 'offerCode')>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodes
         */
        'fields[subscriptionOfferCodes]'?: Array<('name' | 'customerEligibilities' | 'offerEligibility' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'totalNumberOfCodes' | 'active' | 'subscription' | 'oneTimeUseCodes' | 'customCodes' | 'prices')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('offerCode')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type SubscriptionOfferCodesCustomCodesGetToManyRelatedResponse = (SubscriptionOfferCodeCustomCodesResponse);

export type SubscriptionOfferCodesCustomCodesGetToManyRelatedError = (ErrorResponse);

export type SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
         */
        'fields[subscriptionOfferCodeOneTimeUseCodes]'?: Array<('numberOfCodes' | 'createdDate' | 'expirationDate' | 'active' | 'offerCode' | 'values')>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodes
         */
        'fields[subscriptionOfferCodes]'?: Array<('name' | 'customerEligibilities' | 'offerEligibility' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'totalNumberOfCodes' | 'active' | 'subscription' | 'oneTimeUseCodes' | 'customCodes' | 'prices')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('offerCode')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedResponse = (SubscriptionOfferCodeOneTimeUseCodesResponse);

export type SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedError = (ErrorResponse);

export type SubscriptionOfferCodesPricesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionOfferCodePrices
         */
        'fields[subscriptionOfferCodePrices]'?: Array<('territory' | 'subscriptionPricePoint')>;
        /**
         * the fields to include for returned resources of type subscriptionPricePoints
         */
        'fields[subscriptionPricePoints]'?: Array<('customerPrice' | 'proceeds' | 'proceedsYear2' | 'territory' | 'subscription' | 'equalizations')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('territory' | 'subscriptionPricePoint')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type SubscriptionOfferCodesPricesGetToManyRelatedResponse = (SubscriptionOfferCodePricesResponse);

export type SubscriptionOfferCodesPricesGetToManyRelatedError = (ErrorResponse);

export type SubscriptionPricePointsEqualizationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionPricePoints
         */
        'fields[subscriptionPricePoints]'?: Array<('customerPrice' | 'proceeds' | 'proceedsYear2' | 'territory' | 'subscription' | 'equalizations')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * filter by id(s) of related 'subscription'
         */
        'filter[subscription]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('territory')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type SubscriptionPricePointsEqualizationsGetToManyRelatedResponse = (SubscriptionPricePointsResponse);

export type SubscriptionPricePointsEqualizationsGetToManyRelatedError = (ErrorResponse);

export type SubscriptionPromotionalOffersPricesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionPricePoints
         */
        'fields[subscriptionPricePoints]'?: Array<('customerPrice' | 'proceeds' | 'proceedsYear2' | 'territory' | 'subscription' | 'equalizations')>;
        /**
         * the fields to include for returned resources of type subscriptionPromotionalOfferPrices
         */
        'fields[subscriptionPromotionalOfferPrices]'?: Array<('territory' | 'subscriptionPricePoint')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('territory' | 'subscriptionPricePoint')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type SubscriptionPromotionalOffersPricesGetToManyRelatedResponse = (SubscriptionPromotionalOfferPricesResponse);

export type SubscriptionPromotionalOffersPricesGetToManyRelatedError = (ErrorResponse);

export type SubscriptionsAppStoreReviewScreenshotGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots
         */
        'fields[subscriptionAppStoreReviewScreenshots]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'imageAsset' | 'assetToken' | 'assetType' | 'uploadOperations' | 'assetDeliveryState' | 'uploaded' | 'subscription')>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<('name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscription')>;
    };
};

export type SubscriptionsAppStoreReviewScreenshotGetToOneRelatedResponse = (SubscriptionAppStoreReviewScreenshotResponse);

export type SubscriptionsAppStoreReviewScreenshotGetToOneRelatedError = (ErrorResponse);

export type SubscriptionsImagesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionImages
         */
        'fields[subscriptionImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'uploadOperations' | 'uploaded' | 'state' | 'subscription')>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<('name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscription')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type SubscriptionsImagesGetToManyRelatedResponse = (SubscriptionImagesResponse);

export type SubscriptionsImagesGetToManyRelatedError = (ErrorResponse);

export type SubscriptionsIntroductoryOffersGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type SubscriptionsIntroductoryOffersGetToManyRelationshipResponse = (SubscriptionIntroductoryOffersLinkagesResponse);

export type SubscriptionsIntroductoryOffersGetToManyRelationshipError = (ErrorResponse);

export type SubscriptionsIntroductoryOffersDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: SubscriptionIntroductoryOffersLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionsIntroductoryOffersDeleteToManyRelationshipResponse = (void);

export type SubscriptionsIntroductoryOffersDeleteToManyRelationshipError = (ErrorResponse);

export type SubscriptionsIntroductoryOffersGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionIntroductoryOffers
         */
        'fields[subscriptionIntroductoryOffers]'?: Array<('startDate' | 'endDate' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'subscription' | 'territory' | 'subscriptionPricePoint')>;
        /**
         * the fields to include for returned resources of type subscriptionPricePoints
         */
        'fields[subscriptionPricePoints]'?: Array<('customerPrice' | 'proceeds' | 'proceedsYear2' | 'territory' | 'subscription' | 'equalizations')>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<('name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscription' | 'territory' | 'subscriptionPricePoint')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type SubscriptionsIntroductoryOffersGetToManyRelatedResponse = (SubscriptionIntroductoryOffersResponse);

export type SubscriptionsIntroductoryOffersGetToManyRelatedError = (ErrorResponse);

export type SubscriptionsOfferCodesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
         */
        'fields[subscriptionOfferCodeCustomCodes]'?: Array<('customCode' | 'numberOfCodes' | 'createdDate' | 'expirationDate' | 'active' | 'offerCode')>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
         */
        'fields[subscriptionOfferCodeOneTimeUseCodes]'?: Array<('numberOfCodes' | 'createdDate' | 'expirationDate' | 'active' | 'offerCode' | 'values')>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodePrices
         */
        'fields[subscriptionOfferCodePrices]'?: Array<('territory' | 'subscriptionPricePoint')>;
        /**
         * the fields to include for returned resources of type subscriptionOfferCodes
         */
        'fields[subscriptionOfferCodes]'?: Array<('name' | 'customerEligibilities' | 'offerEligibility' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'totalNumberOfCodes' | 'active' | 'subscription' | 'oneTimeUseCodes' | 'customCodes' | 'prices')>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<('name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images')>;
        /**
         * filter by territory
         */
        'filter[territory]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscription' | 'oneTimeUseCodes' | 'customCodes' | 'prices')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related customCodes returned (when they are included)
         */
        'limit[customCodes]'?: number;
        /**
         * maximum number of related oneTimeUseCodes returned (when they are included)
         */
        'limit[oneTimeUseCodes]'?: number;
        /**
         * maximum number of related prices returned (when they are included)
         */
        'limit[prices]'?: number;
    };
};

export type SubscriptionsOfferCodesGetToManyRelatedResponse = (SubscriptionOfferCodesResponse);

export type SubscriptionsOfferCodesGetToManyRelatedError = (ErrorResponse);

export type SubscriptionsPricePointsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionPricePoints
         */
        'fields[subscriptionPricePoints]'?: Array<('customerPrice' | 'proceeds' | 'proceedsYear2' | 'territory' | 'subscription' | 'equalizations')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('territory')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type SubscriptionsPricePointsGetToManyRelatedResponse = (SubscriptionPricePointsResponse);

export type SubscriptionsPricePointsGetToManyRelatedError = (ErrorResponse);

export type SubscriptionsPricesGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type SubscriptionsPricesGetToManyRelationshipResponse = (SubscriptionPricesLinkagesResponse);

export type SubscriptionsPricesGetToManyRelationshipError = (ErrorResponse);

export type SubscriptionsPricesDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: SubscriptionPricesLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type SubscriptionsPricesDeleteToManyRelationshipResponse = (void);

export type SubscriptionsPricesDeleteToManyRelationshipError = (ErrorResponse);

export type SubscriptionsPricesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionPricePoints
         */
        'fields[subscriptionPricePoints]'?: Array<('customerPrice' | 'proceeds' | 'proceedsYear2' | 'territory' | 'subscription' | 'equalizations')>;
        /**
         * the fields to include for returned resources of type subscriptionPrices
         */
        'fields[subscriptionPrices]'?: Array<('startDate' | 'preserved' | 'preserveCurrentPrice' | 'subscription' | 'territory' | 'subscriptionPricePoint')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * filter by id(s) of related 'subscriptionPricePoint'
         */
        'filter[subscriptionPricePoint]'?: Array<(string)>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('territory' | 'subscriptionPricePoint')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type SubscriptionsPricesGetToManyRelatedResponse = (SubscriptionPricesResponse);

export type SubscriptionsPricesGetToManyRelatedError = (ErrorResponse);

export type SubscriptionsPromotedPurchaseGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type inAppPurchases
         */
        'fields[inAppPurchases]'?: Array<('name' | 'productId' | 'inAppPurchaseType' | 'state' | 'reviewNote' | 'familySharable' | 'contentHosting' | 'app' | 'inAppPurchaseLocalizations' | 'pricePoints' | 'content' | 'appStoreReviewScreenshot' | 'promotedPurchase' | 'iapPriceSchedule' | 'inAppPurchaseAvailability' | 'images')>;
        /**
         * the fields to include for returned resources of type promotedPurchaseImages
         */
        'fields[promotedPurchaseImages]'?: Array<('fileSize' | 'fileName' | 'sourceFileChecksum' | 'assetToken' | 'imageAsset' | 'assetType' | 'uploadOperations' | 'uploaded' | 'state' | 'promotedPurchase')>;
        /**
         * the fields to include for returned resources of type promotedPurchases
         */
        'fields[promotedPurchases]'?: Array<('visibleForAllUsers' | 'enabled' | 'state' | 'app' | 'inAppPurchaseV2' | 'subscription' | 'promotionImages')>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<('name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('inAppPurchaseV2' | 'subscription' | 'promotionImages')>;
        /**
         * maximum number of related promotionImages returned (when they are included)
         * @deprecated
         */
        'limit[promotionImages]'?: number;
    };
};

export type SubscriptionsPromotedPurchaseGetToOneRelatedResponse = (PromotedPurchaseResponse);

export type SubscriptionsPromotedPurchaseGetToOneRelatedError = (ErrorResponse);

export type SubscriptionsPromotionalOffersGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionPromotionalOfferPrices
         */
        'fields[subscriptionPromotionalOfferPrices]'?: Array<('territory' | 'subscriptionPricePoint')>;
        /**
         * the fields to include for returned resources of type subscriptionPromotionalOffers
         */
        'fields[subscriptionPromotionalOffers]'?: Array<('name' | 'offerCode' | 'duration' | 'offerMode' | 'numberOfPeriods' | 'subscription' | 'prices')>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<('name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images')>;
        /**
         * filter by territory
         */
        'filter[territory]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscription' | 'prices')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related prices returned (when they are included)
         */
        'limit[prices]'?: number;
    };
};

export type SubscriptionsPromotionalOffersGetToManyRelatedResponse = (SubscriptionPromotionalOffersResponse);

export type SubscriptionsPromotionalOffersGetToManyRelatedError = (ErrorResponse);

export type SubscriptionsSubscriptionAvailabilityGetToOneRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionAvailabilities
         */
        'fields[subscriptionAvailabilities]'?: Array<('availableInNewTerritories' | 'subscription' | 'availableTerritories')>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<('name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscription' | 'availableTerritories')>;
        /**
         * maximum number of related availableTerritories returned (when they are included)
         */
        'limit[availableTerritories]'?: number;
    };
};

export type SubscriptionsSubscriptionAvailabilityGetToOneRelatedResponse = (SubscriptionAvailabilityResponse);

export type SubscriptionsSubscriptionAvailabilityGetToOneRelatedError = (ErrorResponse);

export type SubscriptionsSubscriptionLocalizationsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionLocalizations
         */
        'fields[subscriptionLocalizations]'?: Array<('name' | 'locale' | 'description' | 'state' | 'subscription')>;
        /**
         * the fields to include for returned resources of type subscriptions
         */
        'fields[subscriptions]'?: Array<('name' | 'productId' | 'familySharable' | 'state' | 'subscriptionPeriod' | 'reviewNote' | 'groupLevel' | 'subscriptionLocalizations' | 'appStoreReviewScreenshot' | 'group' | 'introductoryOffers' | 'promotionalOffers' | 'offerCodes' | 'prices' | 'pricePoints' | 'promotedPurchase' | 'subscriptionAvailability' | 'winBackOffers' | 'images')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('subscription')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type SubscriptionsSubscriptionLocalizationsGetToManyRelatedResponse = (SubscriptionLocalizationsResponse);

export type SubscriptionsSubscriptionLocalizationsGetToManyRelatedError = (ErrorResponse);

export type SubscriptionsWinBackOffersGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type winBackOfferPrices
         */
        'fields[winBackOfferPrices]'?: Array<('territory' | 'subscriptionPricePoint')>;
        /**
         * the fields to include for returned resources of type winBackOffers
         */
        'fields[winBackOffers]'?: Array<('referenceName' | 'offerId' | 'duration' | 'offerMode' | 'periodCount' | 'customerEligibilityPaidSubscriptionDurationInMonths' | 'customerEligibilityTimeSinceLastSubscribedInMonths' | 'customerEligibilityWaitBetweenOffersInMonths' | 'startDate' | 'endDate' | 'priority' | 'promotionIntent' | 'subscription' | 'prices')>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('prices')>;
        /**
         * maximum resources per page
         */
        limit?: number;
        /**
         * maximum number of related prices returned (when they are included)
         */
        'limit[prices]'?: number;
    };
};

export type SubscriptionsWinBackOffersGetToManyRelatedResponse = (WinBackOffersResponse);

export type SubscriptionsWinBackOffersGetToManyRelatedError = (ErrorResponse);

export type UserInvitationsVisibleAppsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type UserInvitationsVisibleAppsGetToManyRelatedResponse = (AppsWithoutIncludesResponse);

export type UserInvitationsVisibleAppsGetToManyRelatedError = (ErrorResponse);

export type UsersVisibleAppsGetToManyRelationshipData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type UsersVisibleAppsGetToManyRelationshipResponse = (UserVisibleAppsLinkagesResponse);

export type UsersVisibleAppsGetToManyRelationshipError = (ErrorResponse);

export type UsersVisibleAppsCreateToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: UserVisibleAppsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type UsersVisibleAppsCreateToManyRelationshipResponse = (void);

export type UsersVisibleAppsCreateToManyRelationshipError = (ErrorResponse);

export type UsersVisibleAppsReplaceToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: UserVisibleAppsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type UsersVisibleAppsReplaceToManyRelationshipResponse = (void);

export type UsersVisibleAppsReplaceToManyRelationshipError = (ErrorResponse);

export type UsersVisibleAppsDeleteToManyRelationshipData = {
    /**
     * List of related linkages
     */
    body: UserVisibleAppsLinkagesRequest;
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
};

export type UsersVisibleAppsDeleteToManyRelationshipResponse = (void);

export type UsersVisibleAppsDeleteToManyRelationshipError = (ErrorResponse);

export type UsersVisibleAppsGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type apps
         */
        'fields[apps]'?: Array<('name' | 'bundleId' | 'sku' | 'primaryLocale' | 'isOrEverWasMadeForKids' | 'subscriptionStatusUrl' | 'subscriptionStatusUrlVersion' | 'subscriptionStatusUrlForSandbox' | 'subscriptionStatusUrlVersionForSandbox' | 'contentRightsDeclaration' | 'streamlinedPurchasingEnabled' | 'appEncryptionDeclarations' | 'ciProduct' | 'betaTesters' | 'betaGroups' | 'appStoreVersions' | 'preReleaseVersions' | 'betaAppLocalizations' | 'builds' | 'betaLicenseAgreement' | 'betaAppReviewDetail' | 'appInfos' | 'appClips' | 'appPricePoints' | 'endUserLicenseAgreement' | 'preOrder' | 'appPriceSchedule' | 'appAvailability' | 'appAvailabilityV2' | 'inAppPurchases' | 'subscriptionGroups' | 'gameCenterEnabledVersions' | 'perfPowerMetrics' | 'appCustomProductPages' | 'inAppPurchasesV2' | 'promotedPurchases' | 'appEvents' | 'reviewSubmissions' | 'subscriptionGracePeriod' | 'customerReviews' | 'gameCenterDetail' | 'appStoreVersionExperimentsV2' | 'alternativeDistributionKey' | 'analyticsReportRequests' | 'marketplaceSearchDetail')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type UsersVisibleAppsGetToManyRelatedResponse = (AppsWithoutIncludesResponse);

export type UsersVisibleAppsGetToManyRelatedError = (ErrorResponse);

export type WinBackOffersPricesGetToManyRelatedData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * the fields to include for returned resources of type subscriptionPricePoints
         */
        'fields[subscriptionPricePoints]'?: Array<('customerPrice' | 'proceeds' | 'proceedsYear2' | 'territory' | 'subscription' | 'equalizations')>;
        /**
         * the fields to include for returned resources of type territories
         */
        'fields[territories]'?: Array<('currency')>;
        /**
         * the fields to include for returned resources of type winBackOfferPrices
         */
        'fields[winBackOfferPrices]'?: Array<('territory' | 'subscriptionPricePoint')>;
        /**
         * filter by id(s) of related 'territory'
         */
        'filter[territory]'?: Array<(string)>;
        /**
         * comma-separated list of relationships to include
         */
        include?: Array<('territory' | 'subscriptionPricePoint')>;
        /**
         * maximum resources per page
         */
        limit?: number;
    };
};

export type WinBackOffersPricesGetToManyRelatedResponse = (WinBackOfferPricesResponse);

export type WinBackOffersPricesGetToManyRelatedError = (ErrorResponse);

export type AppsBetaTesterUsagesGetMetricsData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by 'betaTesters' relationship dimension
         */
        'filter[betaTesters]'?: string;
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<('betaTesters')>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
        /**
         * the duration of the reporting period
         */
        period?: 'P7D' | 'P30D' | 'P90D' | 'P365D';
    };
};

export type AppsBetaTesterUsagesGetMetricsResponse = (AppsBetaTesterUsagesV1MetricResponse);

export type AppsBetaTesterUsagesGetMetricsError = (ErrorResponse);

export type BetaGroupsBetaTesterUsagesGetMetricsData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * filter by 'betaTesters' relationship dimension
         */
        'filter[betaTesters]'?: string;
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<('betaTesters')>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
        /**
         * the duration of the reporting period
         */
        period?: 'P7D' | 'P30D' | 'P90D' | 'P365D';
    };
};

export type BetaGroupsBetaTesterUsagesGetMetricsResponse = (AppsBetaTesterUsagesV1MetricResponse);

export type BetaGroupsBetaTesterUsagesGetMetricsError = (ErrorResponse);

export type BetaTestersBetaTesterUsagesGetMetricsData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * filter by 'apps' relationship dimension
         */
        'filter[apps]': string;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
        /**
         * the duration of the reporting period
         */
        period?: 'P7D' | 'P30D' | 'P90D' | 'P365D';
    };
};

export type BetaTestersBetaTesterUsagesGetMetricsResponse = (BetaTesterUsagesV1MetricResponse);

export type BetaTestersBetaTesterUsagesGetMetricsError = (ErrorResponse);

export type BuildsBetaBuildUsagesGetMetricsData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query?: {
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
    };
};

export type BuildsBetaBuildUsagesGetMetricsResponse = (BetaBuildUsagesV1MetricResponse);

export type BuildsBetaBuildUsagesGetMetricsError = (ErrorResponse);

export type GameCenterDetailsClassicMatchmakingRequestsGetMetricsData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * filter by 'result' attribute dimension
         */
        'filter[result]'?: 'MATCHED' | 'CANCELED' | 'EXPIRED';
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<('result')>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<('count' | '-count' | 'averageSecondsInQueue' | '-averageSecondsInQueue' | 'p50SecondsInQueue' | '-p50SecondsInQueue' | 'p95SecondsInQueue' | '-p95SecondsInQueue')>;
    };
};

export type GameCenterDetailsClassicMatchmakingRequestsGetMetricsResponse = (GameCenterMatchmakingAppRequestsV1MetricResponse);

export type GameCenterDetailsClassicMatchmakingRequestsGetMetricsError = (ErrorResponse);

export type GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * filter by 'result' attribute dimension
         */
        'filter[result]'?: 'MATCHED' | 'CANCELED' | 'EXPIRED';
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<('result')>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<('count' | '-count' | 'averageSecondsInQueue' | '-averageSecondsInQueue' | 'p50SecondsInQueue' | '-p50SecondsInQueue' | 'p95SecondsInQueue' | '-p95SecondsInQueue')>;
    };
};

export type GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsResponse = (GameCenterMatchmakingAppRequestsV1MetricResponse);

export type GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsError = (ErrorResponse);

export type GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<('count' | '-count' | 'averageNumberOfRequests' | '-averageNumberOfRequests' | 'p50NumberOfRequests' | '-p50NumberOfRequests' | 'p95NumberOfRequests' | '-p95NumberOfRequests')>;
    };
};

export type GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsResponse = (GameCenterMatchmakingQueueSizesV1MetricResponse);

export type GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsError = (ErrorResponse);

export type GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * filter by 'gameCenterDetail' relationship dimension
         */
        'filter[gameCenterDetail]'?: string;
        /**
         * filter by 'result' attribute dimension
         */
        'filter[result]'?: 'MATCHED' | 'CANCELED' | 'EXPIRED';
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<('result' | 'gameCenterDetail')>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<('count' | '-count' | 'averageSecondsInQueue' | '-averageSecondsInQueue' | 'p50SecondsInQueue' | '-p50SecondsInQueue' | 'p95SecondsInQueue' | '-p95SecondsInQueue')>;
    };
};

export type GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsResponse = (GameCenterMatchmakingQueueRequestsV1MetricResponse);

export type GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsError = (ErrorResponse);

export type GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<('count' | '-count' | 'averageNumberOfRequests' | '-averageNumberOfRequests' | 'p50NumberOfRequests' | '-p50NumberOfRequests' | 'p95NumberOfRequests' | '-p95NumberOfRequests')>;
    };
};

export type GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsResponse = (GameCenterMatchmakingQueueSizesV1MetricResponse);

export type GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsError = (ErrorResponse);

export type GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * filter by 'gameCenterDetail' relationship dimension
         */
        'filter[gameCenterDetail]'?: string;
        /**
         * filter by 'result' attribute dimension
         */
        'filter[result]'?: 'MATCHED' | 'CANCELED' | 'EXPIRED';
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<('result' | 'gameCenterDetail')>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<('count' | '-count' | 'averageSecondsInQueue' | '-averageSecondsInQueue' | 'p50SecondsInQueue' | '-p50SecondsInQueue' | 'p95SecondsInQueue' | '-p95SecondsInQueue')>;
    };
};

export type GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsResponse = (GameCenterMatchmakingQueueRequestsV1MetricResponse);

export type GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsError = (ErrorResponse);

export type GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<('count' | '-count' | 'averagePlayerCount' | '-averagePlayerCount' | 'p50PlayerCount' | '-p50PlayerCount' | 'p95PlayerCount' | '-p95PlayerCount')>;
    };
};

export type GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsResponse = (GameCenterMatchmakingSessionsV1MetricResponse);

export type GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsError = (ErrorResponse);

export type GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * filter by 'gameCenterMatchmakingQueue' relationship dimension
         */
        'filter[gameCenterMatchmakingQueue]'?: string;
        /**
         * filter by 'result' attribute dimension
         */
        'filter[result]'?: string;
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<('result' | 'gameCenterMatchmakingQueue')>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<('count' | '-count')>;
    };
};

export type GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsResponse = (GameCenterMatchmakingBooleanRuleResultsV1MetricResponse);

export type GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsError = (ErrorResponse);

export type GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * filter by 'gameCenterMatchmakingQueue' relationship dimension
         */
        'filter[gameCenterMatchmakingQueue]'?: string;
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<('gameCenterMatchmakingQueue')>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<('count' | '-count' | 'averageResult' | '-averageResult' | 'p50Result' | '-p50Result' | 'p95Result' | '-p95Result')>;
    };
};

export type GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsResponse = (GameCenterMatchmakingNumberRuleResultsV1MetricResponse);

export type GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsError = (ErrorResponse);

export type GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsData = {
    path: {
        /**
         * the id of the requested resource
         */
        id: string;
    };
    query: {
        /**
         * filter by 'gameCenterMatchmakingQueue' relationship dimension
         */
        'filter[gameCenterMatchmakingQueue]'?: string;
        /**
         * the granularity of the per-group dataset
         */
        granularity: 'P1D' | 'PT1H' | 'PT15M';
        /**
         * the dimension by which to group the results
         */
        groupBy?: Array<('gameCenterMatchmakingQueue')>;
        /**
         * maximum number of groups to return per page
         */
        limit?: number;
        /**
         * comma-separated list of sort expressions; metrics will be sorted as specified
         */
        sort?: Array<('count' | '-count')>;
    };
};

export type GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsResponse = (GameCenterMatchmakingRuleErrorsV1MetricResponse);

export type GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsError = (ErrorResponse);