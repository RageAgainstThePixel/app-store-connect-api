// This file is auto-generated by @hey-api/openapi-ts

export const ActorSchema = {
    type: 'object',
    title: 'Actor',
    properties: {
        type: {
            type: 'string',
            enum: ['actors']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                actorType: {
                    type: 'string',
                    enum: ['USER', 'API_KEY', 'XCODE_CLOUD', 'APPLE']
                },
                userFirstName: {
                    type: 'string'
                },
                userLastName: {
                    type: 'string'
                },
                userEmail: {
                    type: 'string'
                },
                apiKeyId: {
                    type: 'string'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const ActorsResponseSchema = {
    type: 'object',
    title: 'ActorsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Actor'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const ActorResponseSchema = {
    type: 'object',
    title: 'ActorResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/Actor'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AgeRatingDeclarationSchema = {
    type: 'object',
    title: 'AgeRatingDeclaration',
    properties: {
        type: {
            type: 'string',
            enum: ['ageRatingDeclarations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                alcoholTobaccoOrDrugUseOrReferences: {
                    type: 'string',
                    enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                },
                contests: {
                    type: 'string',
                    enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                },
                gamblingAndContests: {
                    type: 'boolean',
                    deprecated: true
                },
                gambling: {
                    type: 'boolean'
                },
                gamblingSimulated: {
                    type: 'string',
                    enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                },
                kidsAgeBand: {
                    '$ref': '#/components/schemas/KidsAgeBand'
                },
                lootBox: {
                    type: 'boolean'
                },
                medicalOrTreatmentInformation: {
                    type: 'string',
                    enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                },
                profanityOrCrudeHumor: {
                    type: 'string',
                    enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                },
                sexualContentGraphicAndNudity: {
                    type: 'string',
                    enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                },
                sexualContentOrNudity: {
                    type: 'string',
                    enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                },
                horrorOrFearThemes: {
                    type: 'string',
                    enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                },
                matureOrSuggestiveThemes: {
                    type: 'string',
                    enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                },
                unrestrictedWebAccess: {
                    type: 'boolean'
                },
                violenceCartoonOrFantasy: {
                    type: 'string',
                    enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                },
                violenceRealisticProlongedGraphicOrSadistic: {
                    type: 'string',
                    enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                },
                violenceRealistic: {
                    type: 'string',
                    enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                },
                ageRatingOverride: {
                    type: 'string',
                    enum: ['NONE', 'SEVENTEEN_PLUS', 'UNRATED']
                },
                koreaAgeRatingOverride: {
                    type: 'string',
                    enum: ['NONE', 'FIFTEEN_PLUS', 'NINETEEN_PLUS']
                },
                seventeenPlus: {
                    type: 'boolean',
                    deprecated: true
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AgeRatingDeclarationResponseSchema = {
    type: 'object',
    title: 'AgeRatingDeclarationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AgeRatingDeclaration'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AgeRatingDeclarationUpdateRequestSchema = {
    type: 'object',
    title: 'AgeRatingDeclarationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['ageRatingDeclarations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        alcoholTobaccoOrDrugUseOrReferences: {
                            type: 'string',
                            enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                        },
                        contests: {
                            type: 'string',
                            enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                        },
                        gamblingAndContests: {
                            type: 'boolean',
                            deprecated: true
                        },
                        gambling: {
                            type: 'boolean'
                        },
                        gamblingSimulated: {
                            type: 'string',
                            enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                        },
                        kidsAgeBand: {
                            '$ref': '#/components/schemas/KidsAgeBand'
                        },
                        lootBox: {
                            type: 'boolean'
                        },
                        medicalOrTreatmentInformation: {
                            type: 'string',
                            enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                        },
                        profanityOrCrudeHumor: {
                            type: 'string',
                            enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                        },
                        sexualContentGraphicAndNudity: {
                            type: 'string',
                            enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                        },
                        sexualContentOrNudity: {
                            type: 'string',
                            enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                        },
                        horrorOrFearThemes: {
                            type: 'string',
                            enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                        },
                        matureOrSuggestiveThemes: {
                            type: 'string',
                            enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                        },
                        unrestrictedWebAccess: {
                            type: 'boolean'
                        },
                        violenceCartoonOrFantasy: {
                            type: 'string',
                            enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                        },
                        violenceRealisticProlongedGraphicOrSadistic: {
                            type: 'string',
                            enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                        },
                        violenceRealistic: {
                            type: 'string',
                            enum: ['NONE', 'INFREQUENT_OR_MILD', 'FREQUENT_OR_INTENSE']
                        },
                        ageRatingOverride: {
                            type: 'string',
                            enum: ['NONE', 'SEVENTEEN_PLUS', 'UNRATED']
                        },
                        koreaAgeRatingOverride: {
                            type: 'string',
                            enum: ['NONE', 'FIFTEEN_PLUS', 'NINETEEN_PLUS']
                        },
                        seventeenPlus: {
                            type: 'boolean',
                            deprecated: true
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AlternativeDistributionDomainSchema = {
    type: 'object',
    title: 'AlternativeDistributionDomain',
    properties: {
        type: {
            type: 'string',
            enum: ['alternativeDistributionDomains']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                domain: {
                    type: 'string'
                },
                referenceName: {
                    type: 'string'
                },
                createdDate: {
                    type: 'string',
                    format: 'date-time'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AlternativeDistributionDomainsResponseSchema = {
    type: 'object',
    title: 'AlternativeDistributionDomainsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AlternativeDistributionDomain'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AlternativeDistributionDomainResponseSchema = {
    type: 'object',
    title: 'AlternativeDistributionDomainResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AlternativeDistributionDomain'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AlternativeDistributionDomainCreateRequestSchema = {
    type: 'object',
    title: 'AlternativeDistributionDomainCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['alternativeDistributionDomains']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        domain: {
                            type: 'string'
                        },
                        referenceName: {
                            type: 'string'
                        }
                    },
                    required: ['domain', 'referenceName']
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AlternativeDistributionKeySchema = {
    type: 'object',
    title: 'AlternativeDistributionKey',
    properties: {
        type: {
            type: 'string',
            enum: ['alternativeDistributionKeys']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                publicKey: {
                    type: 'string'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AlternativeDistributionKeysResponseSchema = {
    type: 'object',
    title: 'AlternativeDistributionKeysResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AlternativeDistributionKey'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AlternativeDistributionKeyResponseSchema = {
    type: 'object',
    title: 'AlternativeDistributionKeyResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AlternativeDistributionKey'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AlternativeDistributionKeyCreateRequestSchema = {
    type: 'object',
    title: 'AlternativeDistributionKeyCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['alternativeDistributionKeys']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        publicKey: {
                            type: 'string'
                        }
                    },
                    required: ['publicKey']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    }
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AlternativeDistributionPackageDeltaSchema = {
    type: 'object',
    title: 'AlternativeDistributionPackageDelta',
    properties: {
        type: {
            type: 'string',
            enum: ['alternativeDistributionPackageDeltas']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                url: {
                    type: 'string',
                    format: 'uri'
                },
                urlExpirationDate: {
                    type: 'string',
                    format: 'date-time'
                },
                alternativeDistributionKeyBlob: {
                    type: 'string'
                },
                fileChecksum: {
                    type: 'string'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AlternativeDistributionPackageDeltasResponseSchema = {
    type: 'object',
    title: 'AlternativeDistributionPackageDeltasResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AlternativeDistributionPackageDelta'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AlternativeDistributionPackageDeltaResponseSchema = {
    type: 'object',
    title: 'AlternativeDistributionPackageDeltaResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AlternativeDistributionPackageDelta'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AlternativeDistributionPackageVariantSchema = {
    type: 'object',
    title: 'AlternativeDistributionPackageVariant',
    properties: {
        type: {
            type: 'string',
            enum: ['alternativeDistributionPackageVariants']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                url: {
                    type: 'string',
                    format: 'uri'
                },
                urlExpirationDate: {
                    type: 'string',
                    format: 'date-time'
                },
                alternativeDistributionKeyBlob: {
                    type: 'string'
                },
                fileChecksum: {
                    type: 'string'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AlternativeDistributionPackageVariantsResponseSchema = {
    type: 'object',
    title: 'AlternativeDistributionPackageVariantsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AlternativeDistributionPackageVariant'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AlternativeDistributionPackageVariantResponseSchema = {
    type: 'object',
    title: 'AlternativeDistributionPackageVariantResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AlternativeDistributionPackageVariant'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AlternativeDistributionPackageVersionSchema = {
    type: 'object',
    title: 'AlternativeDistributionPackageVersion',
    properties: {
        type: {
            type: 'string',
            enum: ['alternativeDistributionPackageVersions']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                url: {
                    type: 'string',
                    format: 'uri'
                },
                urlExpirationDate: {
                    type: 'string',
                    format: 'date-time'
                },
                version: {
                    type: 'string'
                },
                fileChecksum: {
                    type: 'string'
                },
                state: {
                    type: 'string',
                    enum: ['COMPLETED', 'REPLACED']
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                variants: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['alternativeDistributionPackageVariants']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                deltas: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['alternativeDistributionPackageDeltas']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                alternativeDistributionPackage: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['alternativeDistributionPackages']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AlternativeDistributionPackageVersionsResponseSchema = {
    type: 'object',
    title: 'AlternativeDistributionPackageVersionsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AlternativeDistributionPackageVersion'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AlternativeDistributionPackageVariant'
                    },
                    {
                        '$ref': '#/components/schemas/AlternativeDistributionPackageDelta'
                    },
                    {
                        '$ref': '#/components/schemas/AlternativeDistributionPackage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AlternativeDistributionPackageVersionResponseSchema = {
    type: 'object',
    title: 'AlternativeDistributionPackageVersionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AlternativeDistributionPackageVersion'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AlternativeDistributionPackageVariant'
                    },
                    {
                        '$ref': '#/components/schemas/AlternativeDistributionPackageDelta'
                    },
                    {
                        '$ref': '#/components/schemas/AlternativeDistributionPackage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AlternativeDistributionPackageSchema = {
    type: 'object',
    title: 'AlternativeDistributionPackage',
    properties: {
        type: {
            type: 'string',
            enum: ['alternativeDistributionPackages']
        },
        id: {
            type: 'string'
        },
        relationships: {
            type: 'object',
            properties: {
                versions: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['alternativeDistributionPackageVersions']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AlternativeDistributionPackageResponseSchema = {
    type: 'object',
    title: 'AlternativeDistributionPackageResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AlternativeDistributionPackage'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AlternativeDistributionPackageVersion'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AlternativeDistributionPackageCreateRequestSchema = {
    type: 'object',
    title: 'AlternativeDistributionPackageCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['alternativeDistributionPackages']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appStoreVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appStoreVersion']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const AnalyticsReportInstanceSchema = {
    type: 'object',
    title: 'AnalyticsReportInstance',
    properties: {
        type: {
            type: 'string',
            enum: ['analyticsReportInstances']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                granularity: {
                    type: 'string',
                    enum: ['DAILY', 'WEEKLY', 'MONTHLY']
                },
                processingDate: {
                    type: 'string',
                    format: 'date'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                segments: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AnalyticsReportInstancesResponseSchema = {
    type: 'object',
    title: 'AnalyticsReportInstancesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AnalyticsReportInstance'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AnalyticsReportInstanceResponseSchema = {
    type: 'object',
    title: 'AnalyticsReportInstanceResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AnalyticsReportInstance'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AnalyticsReportRequestSchema = {
    type: 'object',
    title: 'AnalyticsReportRequest',
    properties: {
        type: {
            type: 'string',
            enum: ['analyticsReportRequests']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                accessType: {
                    type: 'string',
                    enum: ['ONE_TIME_SNAPSHOT', 'ONGOING']
                },
                stoppedDueToInactivity: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                reports: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['analyticsReports']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AnalyticsReportRequestsResponseSchema = {
    type: 'object',
    title: 'AnalyticsReportRequestsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AnalyticsReportRequest'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AnalyticsReport'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AnalyticsReportRequestResponseSchema = {
    type: 'object',
    title: 'AnalyticsReportRequestResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AnalyticsReportRequest'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AnalyticsReport'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AnalyticsReportRequestCreateRequestSchema = {
    type: 'object',
    title: 'AnalyticsReportRequestCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['analyticsReportRequests']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        accessType: {
                            type: 'string',
                            enum: ['ONE_TIME_SNAPSHOT', 'ONGOING']
                        }
                    },
                    required: ['accessType']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['app']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AnalyticsReportSegmentSchema = {
    type: 'object',
    title: 'AnalyticsReportSegment',
    properties: {
        type: {
            type: 'string',
            enum: ['analyticsReportSegments']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                checksum: {
                    type: 'string'
                },
                sizeInBytes: {
                    type: 'integer'
                },
                url: {
                    type: 'string',
                    format: 'uri'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AnalyticsReportSegmentsResponseSchema = {
    type: 'object',
    title: 'AnalyticsReportSegmentsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AnalyticsReportSegment'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AnalyticsReportSegmentResponseSchema = {
    type: 'object',
    title: 'AnalyticsReportSegmentResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AnalyticsReportSegment'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AnalyticsReportSchema = {
    type: 'object',
    title: 'AnalyticsReport',
    properties: {
        type: {
            type: 'string',
            enum: ['analyticsReports']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                category: {
                    type: 'string',
                    enum: ['APP_USAGE', 'APP_STORE_ENGAGEMENT', 'COMMERCE', 'FRAMEWORK_USAGE', 'PERFORMANCE']
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                instances: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AnalyticsReportsResponseSchema = {
    type: 'object',
    title: 'AnalyticsReportsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AnalyticsReport'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AnalyticsReportResponseSchema = {
    type: 'object',
    title: 'AnalyticsReportResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AnalyticsReport'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppAvailabilityV2Schema = {
    type: 'object',
    title: 'AppAvailabilityV2',
    properties: {
        type: {
            type: 'string',
            enum: ['appAvailabilities']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                availableInNewTerritories: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                territoryAvailabilities: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['territoryAvailabilities']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppAvailabilityV2ResponseSchema = {
    type: 'object',
    title: 'AppAvailabilityV2Response',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppAvailabilityV2'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TerritoryAvailability'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppAvailabilityV2CreateRequestSchema = {
    type: 'object',
    title: 'AppAvailabilityV2CreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appAvailabilities']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        availableInNewTerritories: {
                            type: 'boolean'
                        }
                    },
                    required: ['availableInNewTerritories']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        territoryAvailabilities: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['territoryAvailabilities']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['app', 'territoryAvailabilities']
                }
            },
            required: ['relationships', 'attributes', 'type']
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TerritoryAvailabilityInlineCreate'
            }
        }
    },
    required: ['data']
} as const;

export const AppCategorySchema = {
    type: 'object',
    title: 'AppCategory',
    properties: {
        type: {
            type: 'string',
            enum: ['appCategories']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                platforms: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Platform'
                    }
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                subcategories: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appCategories']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                parent: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appCategories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppCategoriesResponseSchema = {
    type: 'object',
    title: 'AppCategoriesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppCategory'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppCategory'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppCategoryResponseSchema = {
    type: 'object',
    title: 'AppCategoryResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppCategory'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppCategory'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppClipAdvancedExperienceImageSchema = {
    type: 'object',
    title: 'AppClipAdvancedExperienceImage',
    properties: {
        type: {
            type: 'string',
            enum: ['appClipAdvancedExperienceImages']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                sourceFileChecksum: {
                    type: 'string'
                },
                imageAsset: {
                    '$ref': '#/components/schemas/ImageAsset'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                assetDeliveryState: {
                    '$ref': '#/components/schemas/AppMediaAssetState'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppClipAdvancedExperienceImageResponseSchema = {
    type: 'object',
    title: 'AppClipAdvancedExperienceImageResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppClipAdvancedExperienceImage'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppClipAdvancedExperienceImageCreateRequestSchema = {
    type: 'object',
    title: 'AppClipAdvancedExperienceImageCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appClipAdvancedExperienceImages']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        }
                    },
                    required: ['fileName', 'fileSize']
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppClipAdvancedExperienceImageUpdateRequestSchema = {
    type: 'object',
    title: 'AppClipAdvancedExperienceImageUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appClipAdvancedExperienceImages']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        sourceFileChecksum: {
                            type: 'string'
                        },
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppClipAdvancedExperienceLocalizationSchema = {
    type: 'object',
    title: 'AppClipAdvancedExperienceLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['appClipAdvancedExperienceLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                language: {
                    '$ref': '#/components/schemas/AppClipAdvancedExperienceLanguage'
                },
                title: {
                    type: 'string'
                },
                subtitle: {
                    type: 'string'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppClipAdvancedExperienceLocalizationInlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['appClipAdvancedExperienceLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                language: {
                    '$ref': '#/components/schemas/AppClipAdvancedExperienceLanguage'
                },
                title: {
                    type: 'string'
                },
                subtitle: {
                    type: 'string'
                }
            }
        }
    },
    required: ['type']
} as const;

export const AppClipAdvancedExperienceSchema = {
    type: 'object',
    title: 'AppClipAdvancedExperience',
    properties: {
        type: {
            type: 'string',
            enum: ['appClipAdvancedExperiences']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                link: {
                    type: 'string',
                    format: 'uri'
                },
                version: {
                    type: 'integer'
                },
                status: {
                    type: 'string',
                    enum: ['RECEIVED', 'DEACTIVATED', 'APP_TRANSFER_IN_PROGRESS']
                },
                action: {
                    '$ref': '#/components/schemas/AppClipAction'
                },
                isPoweredBy: {
                    type: 'boolean'
                },
                place: {
                    type: 'object',
                    properties: {
                        placeId: {
                            type: 'string'
                        },
                        names: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        mainAddress: {
                            type: 'object',
                            properties: {
                                fullAddress: {
                                    type: 'string'
                                },
                                structuredAddress: {
                                    type: 'object',
                                    properties: {
                                        streetAddress: {
                                            type: 'array',
                                            items: {
                                                type: 'string'
                                            }
                                        },
                                        floor: {
                                            type: 'string'
                                        },
                                        neighborhood: {
                                            type: 'string'
                                        },
                                        locality: {
                                            type: 'string'
                                        },
                                        stateProvince: {
                                            type: 'string'
                                        },
                                        postalCode: {
                                            type: 'string'
                                        },
                                        countryCode: {
                                            type: 'string'
                                        }
                                    }
                                }
                            }
                        },
                        displayPoint: {
                            type: 'object',
                            properties: {
                                coordinates: {
                                    type: 'object',
                                    properties: {
                                        latitude: {
                                            type: 'number'
                                        },
                                        longitude: {
                                            type: 'number'
                                        }
                                    }
                                },
                                source: {
                                    type: 'string',
                                    enum: ['CALCULATED', 'MANUALLY_PLACED']
                                }
                            }
                        },
                        mapAction: {
                            type: 'string',
                            enum: ['BUY_TICKETS', 'VIEW_AVAILABILITY', 'VIEW_PRICING', 'HOTEL_BOOK_ROOM', 'PARKING_RESERVE_PARKING', 'RESTAURANT_JOIN_WAITLIST', 'RESTAURANT_ORDER_DELIVERY', 'RESTAURANT_ORDER_FOOD', 'RESTAURANT_ORDER_TAKEOUT', 'RESTAURANT_RESERVATION', 'SCHEDULE_APPOINTMENT', 'RESTAURANT_VIEW_MENU', 'THEATER_NOW_PLAYING']
                        },
                        relationship: {
                            type: 'string',
                            enum: ['OWNER', 'AUTHORIZED', 'OTHER']
                        },
                        phoneNumber: {
                            type: 'object',
                            properties: {
                                number: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'string',
                                    enum: ['FAX', 'LANDLINE', 'MOBILE', 'TOLLFREE']
                                },
                                intent: {
                                    type: 'string'
                                }
                            }
                        },
                        homePage: {
                            type: 'string'
                        },
                        categories: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        }
                    }
                },
                placeStatus: {
                    type: 'string',
                    enum: ['PENDING', 'MATCHED', 'NO_MATCH']
                },
                businessCategory: {
                    type: 'string',
                    enum: ['AUTOMOTIVE', 'BEAUTY', 'BIKES', 'BOOKS', 'CASINO', 'EDUCATION', 'EDUCATION_JAPAN', 'ENTERTAINMENT', 'EV_CHARGER', 'FINANCIAL_USD', 'FINANCIAL_CNY', 'FINANCIAL_GBP', 'FINANCIAL_JPY', 'FINANCIAL_EUR', 'FITNESS', 'FOOD_AND_DRINK', 'GAS', 'GROCERY', 'HEALTH_AND_MEDICAL', 'HOTEL_AND_TRAVEL', 'MUSIC', 'PARKING', 'PET_SERVICES', 'PROFESSIONAL_SERVICES', 'SHOPPING', 'TICKETING', 'TRANSIT']
                },
                defaultLanguage: {
                    '$ref': '#/components/schemas/AppClipAdvancedExperienceLanguage'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appClip: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appClips']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                headerImage: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appClipAdvancedExperienceImages']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                localizations: {
                    type: 'object',
                    properties: {
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appClipAdvancedExperienceLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppClipAdvancedExperiencesResponseSchema = {
    type: 'object',
    title: 'AppClipAdvancedExperiencesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppClipAdvancedExperience'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppClip'
                    },
                    {
                        '$ref': '#/components/schemas/AppClipAdvancedExperienceImage'
                    },
                    {
                        '$ref': '#/components/schemas/AppClipAdvancedExperienceLocalization'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppClipAdvancedExperienceResponseSchema = {
    type: 'object',
    title: 'AppClipAdvancedExperienceResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppClipAdvancedExperience'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppClip'
                    },
                    {
                        '$ref': '#/components/schemas/AppClipAdvancedExperienceImage'
                    },
                    {
                        '$ref': '#/components/schemas/AppClipAdvancedExperienceLocalization'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppClipAdvancedExperienceCreateRequestSchema = {
    type: 'object',
    title: 'AppClipAdvancedExperienceCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appClipAdvancedExperiences']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        link: {
                            type: 'string',
                            format: 'uri'
                        },
                        action: {
                            '$ref': '#/components/schemas/AppClipAction'
                        },
                        isPoweredBy: {
                            type: 'boolean'
                        },
                        place: {
                            type: 'object',
                            properties: {
                                placeId: {
                                    type: 'string'
                                },
                                names: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    }
                                },
                                mainAddress: {
                                    type: 'object',
                                    properties: {
                                        fullAddress: {
                                            type: 'string'
                                        },
                                        structuredAddress: {
                                            type: 'object',
                                            properties: {
                                                streetAddress: {
                                                    type: 'array',
                                                    items: {
                                                        type: 'string'
                                                    }
                                                },
                                                floor: {
                                                    type: 'string'
                                                },
                                                neighborhood: {
                                                    type: 'string'
                                                },
                                                locality: {
                                                    type: 'string'
                                                },
                                                stateProvince: {
                                                    type: 'string'
                                                },
                                                postalCode: {
                                                    type: 'string'
                                                },
                                                countryCode: {
                                                    type: 'string'
                                                }
                                            }
                                        }
                                    }
                                },
                                displayPoint: {
                                    type: 'object',
                                    properties: {
                                        coordinates: {
                                            type: 'object',
                                            properties: {
                                                latitude: {
                                                    type: 'number'
                                                },
                                                longitude: {
                                                    type: 'number'
                                                }
                                            }
                                        },
                                        source: {
                                            type: 'string',
                                            enum: ['CALCULATED', 'MANUALLY_PLACED']
                                        }
                                    }
                                },
                                mapAction: {
                                    type: 'string',
                                    enum: ['BUY_TICKETS', 'VIEW_AVAILABILITY', 'VIEW_PRICING', 'HOTEL_BOOK_ROOM', 'PARKING_RESERVE_PARKING', 'RESTAURANT_JOIN_WAITLIST', 'RESTAURANT_ORDER_DELIVERY', 'RESTAURANT_ORDER_FOOD', 'RESTAURANT_ORDER_TAKEOUT', 'RESTAURANT_RESERVATION', 'SCHEDULE_APPOINTMENT', 'RESTAURANT_VIEW_MENU', 'THEATER_NOW_PLAYING']
                                },
                                relationship: {
                                    type: 'string',
                                    enum: ['OWNER', 'AUTHORIZED', 'OTHER']
                                },
                                phoneNumber: {
                                    type: 'object',
                                    properties: {
                                        number: {
                                            type: 'string'
                                        },
                                        type: {
                                            type: 'string',
                                            enum: ['FAX', 'LANDLINE', 'MOBILE', 'TOLLFREE']
                                        },
                                        intent: {
                                            type: 'string'
                                        }
                                    }
                                },
                                homePage: {
                                    type: 'string'
                                },
                                categories: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    }
                                }
                            }
                        },
                        businessCategory: {
                            type: 'string',
                            enum: ['AUTOMOTIVE', 'BEAUTY', 'BIKES', 'BOOKS', 'CASINO', 'EDUCATION', 'EDUCATION_JAPAN', 'ENTERTAINMENT', 'EV_CHARGER', 'FINANCIAL_USD', 'FINANCIAL_CNY', 'FINANCIAL_GBP', 'FINANCIAL_JPY', 'FINANCIAL_EUR', 'FITNESS', 'FOOD_AND_DRINK', 'GAS', 'GROCERY', 'HEALTH_AND_MEDICAL', 'HOTEL_AND_TRAVEL', 'MUSIC', 'PARKING', 'PET_SERVICES', 'PROFESSIONAL_SERVICES', 'SHOPPING', 'TICKETING', 'TRANSIT']
                        },
                        defaultLanguage: {
                            '$ref': '#/components/schemas/AppClipAdvancedExperienceLanguage'
                        }
                    },
                    required: ['defaultLanguage', 'isPoweredBy', 'link']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appClip: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appClips']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        headerImage: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appClipAdvancedExperienceImages']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        localizations: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['appClipAdvancedExperienceLocalizations']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appClip', 'headerImage', 'localizations']
                }
            },
            required: ['relationships', 'attributes', 'type']
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppClipAdvancedExperienceLocalizationInlineCreate'
            }
        }
    },
    required: ['data']
} as const;

export const AppClipAdvancedExperienceUpdateRequestSchema = {
    type: 'object',
    title: 'AppClipAdvancedExperienceUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appClipAdvancedExperiences']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        action: {
                            '$ref': '#/components/schemas/AppClipAction'
                        },
                        isPoweredBy: {
                            type: 'boolean'
                        },
                        place: {
                            type: 'object',
                            properties: {
                                placeId: {
                                    type: 'string'
                                },
                                names: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    }
                                },
                                mainAddress: {
                                    type: 'object',
                                    properties: {
                                        fullAddress: {
                                            type: 'string'
                                        },
                                        structuredAddress: {
                                            type: 'object',
                                            properties: {
                                                streetAddress: {
                                                    type: 'array',
                                                    items: {
                                                        type: 'string'
                                                    }
                                                },
                                                floor: {
                                                    type: 'string'
                                                },
                                                neighborhood: {
                                                    type: 'string'
                                                },
                                                locality: {
                                                    type: 'string'
                                                },
                                                stateProvince: {
                                                    type: 'string'
                                                },
                                                postalCode: {
                                                    type: 'string'
                                                },
                                                countryCode: {
                                                    type: 'string'
                                                }
                                            }
                                        }
                                    }
                                },
                                displayPoint: {
                                    type: 'object',
                                    properties: {
                                        coordinates: {
                                            type: 'object',
                                            properties: {
                                                latitude: {
                                                    type: 'number'
                                                },
                                                longitude: {
                                                    type: 'number'
                                                }
                                            }
                                        },
                                        source: {
                                            type: 'string',
                                            enum: ['CALCULATED', 'MANUALLY_PLACED']
                                        }
                                    }
                                },
                                mapAction: {
                                    type: 'string',
                                    enum: ['BUY_TICKETS', 'VIEW_AVAILABILITY', 'VIEW_PRICING', 'HOTEL_BOOK_ROOM', 'PARKING_RESERVE_PARKING', 'RESTAURANT_JOIN_WAITLIST', 'RESTAURANT_ORDER_DELIVERY', 'RESTAURANT_ORDER_FOOD', 'RESTAURANT_ORDER_TAKEOUT', 'RESTAURANT_RESERVATION', 'SCHEDULE_APPOINTMENT', 'RESTAURANT_VIEW_MENU', 'THEATER_NOW_PLAYING']
                                },
                                relationship: {
                                    type: 'string',
                                    enum: ['OWNER', 'AUTHORIZED', 'OTHER']
                                },
                                phoneNumber: {
                                    type: 'object',
                                    properties: {
                                        number: {
                                            type: 'string'
                                        },
                                        type: {
                                            type: 'string',
                                            enum: ['FAX', 'LANDLINE', 'MOBILE', 'TOLLFREE']
                                        },
                                        intent: {
                                            type: 'string'
                                        }
                                    }
                                },
                                homePage: {
                                    type: 'string'
                                },
                                categories: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    }
                                }
                            }
                        },
                        businessCategory: {
                            type: 'string',
                            enum: ['AUTOMOTIVE', 'BEAUTY', 'BIKES', 'BOOKS', 'CASINO', 'EDUCATION', 'EDUCATION_JAPAN', 'ENTERTAINMENT', 'EV_CHARGER', 'FINANCIAL_USD', 'FINANCIAL_CNY', 'FINANCIAL_GBP', 'FINANCIAL_JPY', 'FINANCIAL_EUR', 'FITNESS', 'FOOD_AND_DRINK', 'GAS', 'GROCERY', 'HEALTH_AND_MEDICAL', 'HOTEL_AND_TRAVEL', 'MUSIC', 'PARKING', 'PET_SERVICES', 'PROFESSIONAL_SERVICES', 'SHOPPING', 'TICKETING', 'TRANSIT']
                        },
                        defaultLanguage: {
                            '$ref': '#/components/schemas/AppClipAdvancedExperienceLanguage'
                        },
                        removed: {
                            type: 'boolean'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appClip: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appClips']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        headerImage: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appClipAdvancedExperienceImages']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        localizations: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['appClipAdvancedExperienceLocalizations']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        }
                    }
                }
            },
            required: ['id', 'type']
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppClipAdvancedExperienceLocalizationInlineCreate'
            }
        }
    },
    required: ['data']
} as const;

export const AppClipAppStoreReviewDetailSchema = {
    type: 'object',
    title: 'AppClipAppStoreReviewDetail',
    properties: {
        type: {
            type: 'string',
            enum: ['appClipAppStoreReviewDetails']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                invocationUrls: {
                    type: 'array',
                    items: {
                        type: 'string',
                        format: 'uri'
                    }
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appClipDefaultExperience: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appClipDefaultExperiences']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppClipAppStoreReviewDetailResponseSchema = {
    type: 'object',
    title: 'AppClipAppStoreReviewDetailResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppClipAppStoreReviewDetail'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppClipDefaultExperience'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppClipAppStoreReviewDetailCreateRequestSchema = {
    type: 'object',
    title: 'AppClipAppStoreReviewDetailCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appClipAppStoreReviewDetails']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        invocationUrls: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'uri'
                            }
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appClipDefaultExperience: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appClipDefaultExperiences']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appClipDefaultExperience']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const AppClipAppStoreReviewDetailUpdateRequestSchema = {
    type: 'object',
    title: 'AppClipAppStoreReviewDetailUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appClipAppStoreReviewDetails']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        invocationUrls: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'uri'
                            }
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppClipDefaultExperienceLocalizationSchema = {
    type: 'object',
    title: 'AppClipDefaultExperienceLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['appClipDefaultExperienceLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                locale: {
                    type: 'string'
                },
                subtitle: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appClipDefaultExperience: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appClipDefaultExperiences']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appClipHeaderImage: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appClipHeaderImages']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppClipDefaultExperienceLocalizationsResponseSchema = {
    type: 'object',
    title: 'AppClipDefaultExperienceLocalizationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppClipDefaultExperienceLocalization'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppClipDefaultExperience'
                    },
                    {
                        '$ref': '#/components/schemas/AppClipHeaderImage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppClipDefaultExperienceLocalizationResponseSchema = {
    type: 'object',
    title: 'AppClipDefaultExperienceLocalizationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppClipDefaultExperienceLocalization'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppClipDefaultExperience'
                    },
                    {
                        '$ref': '#/components/schemas/AppClipHeaderImage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppClipDefaultExperienceLocalizationCreateRequestSchema = {
    type: 'object',
    title: 'AppClipDefaultExperienceLocalizationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appClipDefaultExperienceLocalizations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        locale: {
                            type: 'string'
                        },
                        subtitle: {
                            type: 'string'
                        }
                    },
                    required: ['locale']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appClipDefaultExperience: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appClipDefaultExperiences']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appClipDefaultExperience']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppClipDefaultExperienceLocalizationUpdateRequestSchema = {
    type: 'object',
    title: 'AppClipDefaultExperienceLocalizationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appClipDefaultExperienceLocalizations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        subtitle: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppClipDefaultExperienceSchema = {
    type: 'object',
    title: 'AppClipDefaultExperience',
    properties: {
        type: {
            type: 'string',
            enum: ['appClipDefaultExperiences']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                action: {
                    '$ref': '#/components/schemas/AppClipAction'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appClip: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appClips']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                releaseWithAppStoreVersion: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appClipDefaultExperienceLocalizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appClipDefaultExperienceLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                appClipAppStoreReviewDetail: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appClipAppStoreReviewDetails']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppClipDefaultExperiencesResponseSchema = {
    type: 'object',
    title: 'AppClipDefaultExperiencesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppClipDefaultExperience'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppClip'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppClipDefaultExperienceLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppClipAppStoreReviewDetail'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppClipDefaultExperienceResponseSchema = {
    type: 'object',
    title: 'AppClipDefaultExperienceResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppClipDefaultExperience'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppClip'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppClipDefaultExperienceLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppClipAppStoreReviewDetail'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppClipDefaultExperienceCreateRequestSchema = {
    type: 'object',
    title: 'AppClipDefaultExperienceCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appClipDefaultExperiences']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        action: {
                            '$ref': '#/components/schemas/AppClipAction'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appClip: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appClips']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        releaseWithAppStoreVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        appClipDefaultExperienceTemplate: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appClipDefaultExperiences']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    },
                    required: ['appClip']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const AppClipDefaultExperienceUpdateRequestSchema = {
    type: 'object',
    title: 'AppClipDefaultExperienceUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appClipDefaultExperiences']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        action: {
                            '$ref': '#/components/schemas/AppClipAction'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        releaseWithAppStoreVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppClipDomainStatusSchema = {
    type: 'object',
    title: 'AppClipDomainStatus',
    properties: {
        type: {
            type: 'string',
            enum: ['appClipDomainStatuses']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                domains: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            domain: {
                                type: 'string'
                            },
                            isValid: {
                                type: 'boolean'
                            },
                            lastUpdatedDate: {
                                type: 'string',
                                format: 'date-time'
                            },
                            errorCode: {
                                type: 'string',
                                enum: ['BAD_HTTP_RESPONSE', 'BAD_JSON_CONTENT', 'BAD_PKCS7_SIGNATURE', 'CANNOT_REACH_AASA_FILE', 'DNS_ERROR', 'INSECURE_REDIRECTS_FORBIDDEN', 'INVALID_ENTITLEMENT_MISSING_SECTION', 'INVALID_ENTITLEMENT_SYNTAX_ERROR', 'INVALID_ENTITLEMENT_UNHANDLED_SECTION', 'INVALID_ENTITLEMENT_UNKNOWN_ID', 'NETWORK_ERROR', 'NETWORK_ERROR_TEMPORARY', 'OTHER_ERROR', 'TIMEOUT', 'TLS_ERROR', 'UNEXPECTED_ERROR']
                            }
                        }
                    }
                },
                lastUpdatedDate: {
                    type: 'string',
                    format: 'date-time'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppClipDomainStatusResponseSchema = {
    type: 'object',
    title: 'AppClipDomainStatusResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppClipDomainStatus'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppClipHeaderImageSchema = {
    type: 'object',
    title: 'AppClipHeaderImage',
    properties: {
        type: {
            type: 'string',
            enum: ['appClipHeaderImages']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                sourceFileChecksum: {
                    type: 'string'
                },
                imageAsset: {
                    '$ref': '#/components/schemas/ImageAsset'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                assetDeliveryState: {
                    '$ref': '#/components/schemas/AppMediaAssetState'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appClipDefaultExperienceLocalization: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appClipDefaultExperienceLocalizations']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppClipHeaderImageResponseSchema = {
    type: 'object',
    title: 'AppClipHeaderImageResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppClipHeaderImage'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppClipDefaultExperienceLocalization'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppClipHeaderImageCreateRequestSchema = {
    type: 'object',
    title: 'AppClipHeaderImageCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appClipHeaderImages']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        }
                    },
                    required: ['fileName', 'fileSize']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appClipDefaultExperienceLocalization: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appClipDefaultExperienceLocalizations']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appClipDefaultExperienceLocalization']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppClipHeaderImageUpdateRequestSchema = {
    type: 'object',
    title: 'AppClipHeaderImageUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appClipHeaderImages']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        sourceFileChecksum: {
                            type: 'string'
                        },
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppClipSchema = {
    type: 'object',
    title: 'AppClip',
    properties: {
        type: {
            type: 'string',
            enum: ['appClips']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                bundleId: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                app: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appClipDefaultExperiences: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appClipDefaultExperiences']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                appClipAdvancedExperiences: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppClipsResponseSchema = {
    type: 'object',
    title: 'AppClipsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppClip'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/AppClipDefaultExperience'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppClipResponseSchema = {
    type: 'object',
    title: 'AppClipResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppClip'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/AppClipDefaultExperience'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppCustomProductPageLocalizationSchema = {
    type: 'object',
    title: 'AppCustomProductPageLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['appCustomProductPageLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                locale: {
                    type: 'string'
                },
                promotionalText: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appCustomProductPageVersion: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appCustomProductPageVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appScreenshotSets: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appScreenshotSets']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                appPreviewSets: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appPreviewSets']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppCustomProductPageLocalizationInlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['appCustomProductPageLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                locale: {
                    type: 'string'
                },
                promotionalText: {
                    type: 'string'
                }
            },
            required: ['locale']
        },
        relationships: {
            type: 'object',
            properties: {
                appCustomProductPageVersion: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appCustomProductPageVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        }
    },
    required: ['attributes', 'type']
} as const;

export const AppCustomProductPageLocalizationsResponseSchema = {
    type: 'object',
    title: 'AppCustomProductPageLocalizationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppCustomProductPageLocalization'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppCustomProductPageVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppScreenshotSet'
                    },
                    {
                        '$ref': '#/components/schemas/AppPreviewSet'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppCustomProductPageLocalizationResponseSchema = {
    type: 'object',
    title: 'AppCustomProductPageLocalizationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppCustomProductPageLocalization'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppCustomProductPageVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppScreenshotSet'
                    },
                    {
                        '$ref': '#/components/schemas/AppPreviewSet'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppCustomProductPageLocalizationCreateRequestSchema = {
    type: 'object',
    title: 'AppCustomProductPageLocalizationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appCustomProductPageLocalizations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        locale: {
                            type: 'string'
                        },
                        promotionalText: {
                            type: 'string'
                        }
                    },
                    required: ['locale']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appCustomProductPageVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appCustomProductPageVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appCustomProductPageVersion']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppCustomProductPageLocalizationUpdateRequestSchema = {
    type: 'object',
    title: 'AppCustomProductPageLocalizationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appCustomProductPageLocalizations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        promotionalText: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppCustomProductPageVersionSchema = {
    type: 'object',
    title: 'AppCustomProductPageVersion',
    properties: {
        type: {
            type: 'string',
            enum: ['appCustomProductPageVersions']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                version: {
                    type: 'string'
                },
                state: {
                    type: 'string',
                    enum: ['PREPARE_FOR_SUBMISSION', 'READY_FOR_REVIEW', 'WAITING_FOR_REVIEW', 'IN_REVIEW', 'ACCEPTED', 'APPROVED', 'REPLACED_WITH_NEW_VERSION', 'REJECTED']
                },
                deepLink: {
                    type: 'string',
                    format: 'uri'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appCustomProductPage: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appCustomProductPages']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appCustomProductPageLocalizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appCustomProductPageLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppCustomProductPageVersionInlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['appCustomProductPageVersions']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                deepLink: {
                    type: 'string',
                    format: 'uri'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appCustomProductPage: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appCustomProductPages']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appCustomProductPageLocalizations: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appCustomProductPageLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        }
    },
    required: ['type']
} as const;

export const AppCustomProductPageVersionsResponseSchema = {
    type: 'object',
    title: 'AppCustomProductPageVersionsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppCustomProductPageVersion'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppCustomProductPage'
                    },
                    {
                        '$ref': '#/components/schemas/AppCustomProductPageLocalization'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppCustomProductPageVersionResponseSchema = {
    type: 'object',
    title: 'AppCustomProductPageVersionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppCustomProductPageVersion'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppCustomProductPage'
                    },
                    {
                        '$ref': '#/components/schemas/AppCustomProductPageLocalization'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppCustomProductPageVersionCreateRequestSchema = {
    type: 'object',
    title: 'AppCustomProductPageVersionCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appCustomProductPageVersions']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        deepLink: {
                            type: 'string',
                            format: 'uri'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appCustomProductPage: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appCustomProductPages']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        appCustomProductPageLocalizations: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['appCustomProductPageLocalizations']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        }
                    },
                    required: ['appCustomProductPage']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const AppCustomProductPageVersionUpdateRequestSchema = {
    type: 'object',
    title: 'AppCustomProductPageVersionUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appCustomProductPageVersions']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        deepLink: {
                            type: 'string',
                            format: 'uri'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppCustomProductPageSchema = {
    type: 'object',
    title: 'AppCustomProductPage',
    properties: {
        type: {
            type: 'string',
            enum: ['appCustomProductPages']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                url: {
                    type: 'string',
                    format: 'uri'
                },
                visible: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                app: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appCustomProductPageVersions: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appCustomProductPageVersions']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppCustomProductPagesResponseSchema = {
    type: 'object',
    title: 'AppCustomProductPagesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppCustomProductPage'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/AppCustomProductPageVersion'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppCustomProductPageResponseSchema = {
    type: 'object',
    title: 'AppCustomProductPageResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppCustomProductPage'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/AppCustomProductPageVersion'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppCustomProductPageCreateRequestSchema = {
    type: 'object',
    title: 'AppCustomProductPageCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appCustomProductPages']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        }
                    },
                    required: ['name']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        appCustomProductPageVersions: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['appCustomProductPageVersions']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        },
                        appStoreVersionTemplate: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        customProductPageTemplate: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appCustomProductPages']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    },
                    required: ['app']
                }
            },
            required: ['relationships', 'attributes', 'type']
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppCustomProductPageLocalizationInlineCreate'
                    },
                    {
                        '$ref': '#/components/schemas/AppCustomProductPageVersionInlineCreate'
                    }
                ]
            }
        }
    },
    required: ['data']
} as const;

export const AppCustomProductPageUpdateRequestSchema = {
    type: 'object',
    title: 'AppCustomProductPageUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appCustomProductPages']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        visible: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppEncryptionDeclarationDocumentSchema = {
    type: 'object',
    title: 'AppEncryptionDeclarationDocument',
    properties: {
        type: {
            type: 'string',
            enum: ['appEncryptionDeclarationDocuments']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                assetToken: {
                    type: 'string'
                },
                downloadUrl: {
                    type: 'string',
                    format: 'uri'
                },
                sourceFileChecksum: {
                    type: 'string'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                assetDeliveryState: {
                    '$ref': '#/components/schemas/AppMediaAssetState'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppEncryptionDeclarationDocumentResponseSchema = {
    type: 'object',
    title: 'AppEncryptionDeclarationDocumentResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppEncryptionDeclarationDocument'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppEncryptionDeclarationDocumentCreateRequestSchema = {
    type: 'object',
    title: 'AppEncryptionDeclarationDocumentCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appEncryptionDeclarationDocuments']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        }
                    },
                    required: ['fileName', 'fileSize']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appEncryptionDeclaration: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appEncryptionDeclarations']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appEncryptionDeclaration']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppEncryptionDeclarationDocumentUpdateRequestSchema = {
    type: 'object',
    title: 'AppEncryptionDeclarationDocumentUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appEncryptionDeclarationDocuments']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        sourceFileChecksum: {
                            type: 'string'
                        },
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppEncryptionDeclarationSchema = {
    type: 'object',
    title: 'AppEncryptionDeclaration',
    properties: {
        type: {
            type: 'string',
            enum: ['appEncryptionDeclarations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                appDescription: {
                    type: 'string'
                },
                createdDate: {
                    type: 'string',
                    format: 'date-time'
                },
                usesEncryption: {
                    type: 'boolean',
                    deprecated: true
                },
                exempt: {
                    type: 'boolean'
                },
                containsProprietaryCryptography: {
                    type: 'boolean'
                },
                containsThirdPartyCryptography: {
                    type: 'boolean'
                },
                availableOnFrenchStore: {
                    type: 'boolean'
                },
                platform: {
                    deprecated: true,
                    '$ref': '#/components/schemas/Platform'
                },
                uploadedDate: {
                    type: 'string',
                    format: 'date-time',
                    deprecated: true
                },
                documentUrl: {
                    type: 'string',
                    deprecated: true
                },
                documentName: {
                    type: 'string',
                    deprecated: true
                },
                documentType: {
                    type: 'string',
                    deprecated: true
                },
                appEncryptionDeclarationState: {
                    '$ref': '#/components/schemas/AppEncryptionDeclarationState'
                },
                codeValue: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                app: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    },
                    deprecated: true
                },
                builds: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['builds']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    },
                    deprecated: true
                },
                appEncryptionDeclarationDocument: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appEncryptionDeclarationDocuments']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppEncryptionDeclarationsResponseSchema = {
    type: 'object',
    title: 'AppEncryptionDeclarationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppEncryptionDeclaration'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/Build'
                    },
                    {
                        '$ref': '#/components/schemas/AppEncryptionDeclarationDocument'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppEncryptionDeclarationResponseSchema = {
    type: 'object',
    title: 'AppEncryptionDeclarationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppEncryptionDeclaration'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/Build'
                    },
                    {
                        '$ref': '#/components/schemas/AppEncryptionDeclarationDocument'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppEncryptionDeclarationCreateRequestSchema = {
    type: 'object',
    title: 'AppEncryptionDeclarationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appEncryptionDeclarations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        appDescription: {
                            type: 'string'
                        },
                        containsProprietaryCryptography: {
                            type: 'boolean'
                        },
                        containsThirdPartyCryptography: {
                            type: 'boolean'
                        },
                        availableOnFrenchStore: {
                            type: 'boolean'
                        }
                    },
                    required: ['availableOnFrenchStore', 'appDescription', 'containsThirdPartyCryptography', 'containsProprietaryCryptography']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data'],
                            deprecated: true
                        }
                    },
                    required: ['app']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppEventLocalizationSchema = {
    type: 'object',
    title: 'AppEventLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['appEventLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                locale: {
                    type: 'string'
                },
                name: {
                    type: 'string'
                },
                shortDescription: {
                    type: 'string'
                },
                longDescription: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appEvent: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appEvents']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appEventScreenshots: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appEventScreenshots']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                appEventVideoClips: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appEventVideoClips']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppEventLocalizationsResponseSchema = {
    type: 'object',
    title: 'AppEventLocalizationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppEventLocalization'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppEvent'
                    },
                    {
                        '$ref': '#/components/schemas/AppEventScreenshot'
                    },
                    {
                        '$ref': '#/components/schemas/AppEventVideoClip'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppEventLocalizationResponseSchema = {
    type: 'object',
    title: 'AppEventLocalizationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppEventLocalization'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppEvent'
                    },
                    {
                        '$ref': '#/components/schemas/AppEventScreenshot'
                    },
                    {
                        '$ref': '#/components/schemas/AppEventVideoClip'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppEventLocalizationCreateRequestSchema = {
    type: 'object',
    title: 'AppEventLocalizationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appEventLocalizations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        locale: {
                            type: 'string'
                        },
                        name: {
                            type: 'string'
                        },
                        shortDescription: {
                            type: 'string'
                        },
                        longDescription: {
                            type: 'string'
                        }
                    },
                    required: ['locale']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appEvent: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appEvents']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appEvent']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppEventLocalizationUpdateRequestSchema = {
    type: 'object',
    title: 'AppEventLocalizationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appEventLocalizations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        shortDescription: {
                            type: 'string'
                        },
                        longDescription: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppEventScreenshotSchema = {
    type: 'object',
    title: 'AppEventScreenshot',
    properties: {
        type: {
            type: 'string',
            enum: ['appEventScreenshots']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                imageAsset: {
                    '$ref': '#/components/schemas/ImageAsset'
                },
                assetToken: {
                    type: 'string'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                assetDeliveryState: {
                    '$ref': '#/components/schemas/AppMediaAssetState'
                },
                appEventAssetType: {
                    '$ref': '#/components/schemas/AppEventAssetType'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appEventLocalization: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appEventLocalizations']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppEventScreenshotsResponseSchema = {
    type: 'object',
    title: 'AppEventScreenshotsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppEventScreenshot'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppEventLocalization'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppEventScreenshotResponseSchema = {
    type: 'object',
    title: 'AppEventScreenshotResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppEventScreenshot'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppEventLocalization'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppEventScreenshotCreateRequestSchema = {
    type: 'object',
    title: 'AppEventScreenshotCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appEventScreenshots']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        },
                        appEventAssetType: {
                            '$ref': '#/components/schemas/AppEventAssetType'
                        }
                    },
                    required: ['fileName', 'appEventAssetType', 'fileSize']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appEventLocalization: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appEventLocalizations']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appEventLocalization']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppEventScreenshotUpdateRequestSchema = {
    type: 'object',
    title: 'AppEventScreenshotUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appEventScreenshots']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppEventVideoClipSchema = {
    type: 'object',
    title: 'AppEventVideoClip',
    properties: {
        type: {
            type: 'string',
            enum: ['appEventVideoClips']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                previewFrameTimeCode: {
                    type: 'string'
                },
                videoUrl: {
                    type: 'string'
                },
                previewFrameImage: {
                    '$ref': '#/components/schemas/PreviewFrameImage'
                },
                previewImage: {
                    deprecated: true,
                    '$ref': '#/components/schemas/ImageAsset'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                assetDeliveryState: {
                    deprecated: true,
                    '$ref': '#/components/schemas/AppMediaAssetState'
                },
                videoDeliveryState: {
                    '$ref': '#/components/schemas/AppMediaVideoState'
                },
                appEventAssetType: {
                    '$ref': '#/components/schemas/AppEventAssetType'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appEventLocalization: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appEventLocalizations']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppEventVideoClipsResponseSchema = {
    type: 'object',
    title: 'AppEventVideoClipsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppEventVideoClip'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppEventLocalization'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppEventVideoClipResponseSchema = {
    type: 'object',
    title: 'AppEventVideoClipResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppEventVideoClip'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppEventLocalization'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppEventVideoClipCreateRequestSchema = {
    type: 'object',
    title: 'AppEventVideoClipCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appEventVideoClips']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        },
                        previewFrameTimeCode: {
                            type: 'string'
                        },
                        appEventAssetType: {
                            '$ref': '#/components/schemas/AppEventAssetType'
                        }
                    },
                    required: ['fileName', 'appEventAssetType', 'fileSize']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appEventLocalization: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appEventLocalizations']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appEventLocalization']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppEventVideoClipUpdateRequestSchema = {
    type: 'object',
    title: 'AppEventVideoClipUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appEventVideoClips']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        previewFrameTimeCode: {
                            type: 'string'
                        },
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppEventSchema = {
    type: 'object',
    title: 'AppEvent',
    properties: {
        type: {
            type: 'string',
            enum: ['appEvents']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                referenceName: {
                    type: 'string'
                },
                badge: {
                    type: 'string',
                    enum: ['LIVE_EVENT', 'PREMIERE', 'CHALLENGE', 'COMPETITION', 'NEW_SEASON', 'MAJOR_UPDATE', 'SPECIAL_EVENT']
                },
                eventState: {
                    type: 'string',
                    enum: ['DRAFT', 'READY_FOR_REVIEW', 'WAITING_FOR_REVIEW', 'IN_REVIEW', 'REJECTED', 'ACCEPTED', 'APPROVED', 'PUBLISHED', 'PAST', 'ARCHIVED']
                },
                deepLink: {
                    type: 'string',
                    format: 'uri'
                },
                purchaseRequirement: {
                    type: 'string'
                },
                primaryLocale: {
                    type: 'string'
                },
                priority: {
                    type: 'string',
                    enum: ['HIGH', 'NORMAL']
                },
                purpose: {
                    type: 'string',
                    enum: ['APPROPRIATE_FOR_ALL_USERS', 'ATTRACT_NEW_USERS', 'KEEP_ACTIVE_USERS_INFORMED', 'BRING_BACK_LAPSED_USERS']
                },
                territorySchedules: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            territories: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            },
                            publishStart: {
                                type: 'string',
                                format: 'date-time'
                            },
                            eventStart: {
                                type: 'string',
                                format: 'date-time'
                            },
                            eventEnd: {
                                type: 'string',
                                format: 'date-time'
                            }
                        }
                    }
                },
                archivedTerritorySchedules: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            territories: {
                                type: 'array',
                                items: {
                                    type: 'string'
                                }
                            },
                            publishStart: {
                                type: 'string',
                                format: 'date-time'
                            },
                            eventStart: {
                                type: 'string',
                                format: 'date-time'
                            },
                            eventEnd: {
                                type: 'string',
                                format: 'date-time'
                            }
                        }
                    }
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                localizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appEventLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppEventsResponseSchema = {
    type: 'object',
    title: 'AppEventsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppEvent'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppEventLocalization'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppEventResponseSchema = {
    type: 'object',
    title: 'AppEventResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppEvent'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppEventLocalization'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppEventCreateRequestSchema = {
    type: 'object',
    title: 'AppEventCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appEvents']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        referenceName: {
                            type: 'string'
                        },
                        badge: {
                            type: 'string',
                            enum: ['LIVE_EVENT', 'PREMIERE', 'CHALLENGE', 'COMPETITION', 'NEW_SEASON', 'MAJOR_UPDATE', 'SPECIAL_EVENT']
                        },
                        deepLink: {
                            type: 'string',
                            format: 'uri'
                        },
                        purchaseRequirement: {
                            type: 'string'
                        },
                        primaryLocale: {
                            type: 'string'
                        },
                        priority: {
                            type: 'string',
                            enum: ['HIGH', 'NORMAL']
                        },
                        purpose: {
                            type: 'string',
                            enum: ['APPROPRIATE_FOR_ALL_USERS', 'ATTRACT_NEW_USERS', 'KEEP_ACTIVE_USERS_INFORMED', 'BRING_BACK_LAPSED_USERS']
                        },
                        territorySchedules: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    territories: {
                                        type: 'array',
                                        items: {
                                            type: 'string'
                                        }
                                    },
                                    publishStart: {
                                        type: 'string',
                                        format: 'date-time'
                                    },
                                    eventStart: {
                                        type: 'string',
                                        format: 'date-time'
                                    },
                                    eventEnd: {
                                        type: 'string',
                                        format: 'date-time'
                                    }
                                }
                            }
                        }
                    },
                    required: ['referenceName']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['app']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppEventUpdateRequestSchema = {
    type: 'object',
    title: 'AppEventUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appEvents']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        referenceName: {
                            type: 'string'
                        },
                        badge: {
                            type: 'string',
                            enum: ['LIVE_EVENT', 'PREMIERE', 'CHALLENGE', 'COMPETITION', 'NEW_SEASON', 'MAJOR_UPDATE', 'SPECIAL_EVENT']
                        },
                        deepLink: {
                            type: 'string',
                            format: 'uri'
                        },
                        purchaseRequirement: {
                            type: 'string'
                        },
                        primaryLocale: {
                            type: 'string'
                        },
                        priority: {
                            type: 'string',
                            enum: ['HIGH', 'NORMAL']
                        },
                        purpose: {
                            type: 'string',
                            enum: ['APPROPRIATE_FOR_ALL_USERS', 'ATTRACT_NEW_USERS', 'KEEP_ACTIVE_USERS_INFORMED', 'BRING_BACK_LAPSED_USERS']
                        },
                        territorySchedules: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    territories: {
                                        type: 'array',
                                        items: {
                                            type: 'string'
                                        }
                                    },
                                    publishStart: {
                                        type: 'string',
                                        format: 'date-time'
                                    },
                                    eventStart: {
                                        type: 'string',
                                        format: 'date-time'
                                    },
                                    eventEnd: {
                                        type: 'string',
                                        format: 'date-time'
                                    }
                                }
                            }
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppInfoLocalizationSchema = {
    type: 'object',
    title: 'AppInfoLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['appInfoLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                locale: {
                    type: 'string'
                },
                name: {
                    type: 'string'
                },
                subtitle: {
                    type: 'string'
                },
                privacyPolicyUrl: {
                    type: 'string'
                },
                privacyChoicesUrl: {
                    type: 'string'
                },
                privacyPolicyText: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appInfo: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appInfos']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppInfoLocalizationsResponseSchema = {
    type: 'object',
    title: 'AppInfoLocalizationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppInfoLocalization'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppInfo'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppInfoLocalizationResponseSchema = {
    type: 'object',
    title: 'AppInfoLocalizationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppInfoLocalization'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppInfo'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppInfoLocalizationCreateRequestSchema = {
    type: 'object',
    title: 'AppInfoLocalizationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appInfoLocalizations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        locale: {
                            type: 'string'
                        },
                        name: {
                            type: 'string'
                        },
                        subtitle: {
                            type: 'string'
                        },
                        privacyPolicyUrl: {
                            type: 'string'
                        },
                        privacyChoicesUrl: {
                            type: 'string'
                        },
                        privacyPolicyText: {
                            type: 'string'
                        }
                    },
                    required: ['name', 'locale']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appInfo: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appInfos']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appInfo']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppInfoLocalizationUpdateRequestSchema = {
    type: 'object',
    title: 'AppInfoLocalizationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appInfoLocalizations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        subtitle: {
                            type: 'string'
                        },
                        privacyPolicyUrl: {
                            type: 'string'
                        },
                        privacyChoicesUrl: {
                            type: 'string'
                        },
                        privacyPolicyText: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppInfoSchema = {
    type: 'object',
    title: 'AppInfo',
    properties: {
        type: {
            type: 'string',
            enum: ['appInfos']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                appStoreState: {
                    deprecated: true,
                    '$ref': '#/components/schemas/AppStoreVersionState'
                },
                state: {
                    type: 'string',
                    enum: ['ACCEPTED', 'DEVELOPER_REJECTED', 'IN_REVIEW', 'PENDING_RELEASE', 'PREPARE_FOR_SUBMISSION', 'READY_FOR_DISTRIBUTION', 'READY_FOR_REVIEW', 'REJECTED', 'REPLACED_WITH_NEW_INFO', 'WAITING_FOR_REVIEW']
                },
                appStoreAgeRating: {
                    '$ref': '#/components/schemas/AppStoreAgeRating'
                },
                australiaAgeRating: {
                    type: 'string',
                    enum: ['FIFTEEN', 'EIGHTEEN']
                },
                brazilAgeRating: {
                    deprecated: true,
                    '$ref': '#/components/schemas/BrazilAgeRating'
                },
                brazilAgeRatingV2: {
                    type: 'string',
                    enum: ['SELF_RATED_L', 'SELF_RATED_TEN', 'SELF_RATED_TWELVE', 'SELF_RATED_FOURTEEN', 'SELF_RATED_SIXTEEN', 'SELF_RATED_EIGHTEEN', 'OFFICIAL_L', 'OFFICIAL_TEN', 'OFFICIAL_TWELVE', 'OFFICIAL_FOURTEEN', 'OFFICIAL_SIXTEEN', 'OFFICIAL_EIGHTEEN']
                },
                franceAgeRating: {
                    type: 'string',
                    enum: ['EIGHTEEN']
                },
                koreaAgeRating: {
                    type: 'string',
                    enum: ['ALL', 'TWELVE', 'FIFTEEN', 'NINETEEN', 'NOT_APPLICABLE']
                },
                kidsAgeBand: {
                    '$ref': '#/components/schemas/KidsAgeBand'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                app: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                ageRatingDeclaration: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['ageRatingDeclarations']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appInfoLocalizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appInfoLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                primaryCategory: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appCategories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                primarySubcategoryOne: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appCategories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                primarySubcategoryTwo: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appCategories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                secondaryCategory: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appCategories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                secondarySubcategoryOne: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appCategories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                secondarySubcategoryTwo: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appCategories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppInfosResponseSchema = {
    type: 'object',
    title: 'AppInfosResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppInfo'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/AgeRatingDeclaration'
                    },
                    {
                        '$ref': '#/components/schemas/AppInfoLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppCategory'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppInfoResponseSchema = {
    type: 'object',
    title: 'AppInfoResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppInfo'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/AgeRatingDeclaration'
                    },
                    {
                        '$ref': '#/components/schemas/AppInfoLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppCategory'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppInfoUpdateRequestSchema = {
    type: 'object',
    title: 'AppInfoUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appInfos']
                },
                id: {
                    type: 'string'
                },
                relationships: {
                    type: 'object',
                    properties: {
                        primaryCategory: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appCategories']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        primarySubcategoryOne: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appCategories']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        primarySubcategoryTwo: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appCategories']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        secondaryCategory: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appCategories']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        secondarySubcategoryOne: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appCategories']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        secondarySubcategoryTwo: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appCategories']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppPreviewSetSchema = {
    type: 'object',
    title: 'AppPreviewSet',
    properties: {
        type: {
            type: 'string',
            enum: ['appPreviewSets']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                previewType: {
                    '$ref': '#/components/schemas/PreviewType'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appStoreVersionLocalization: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersionLocalizations']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appCustomProductPageLocalization: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appCustomProductPageLocalizations']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appStoreVersionExperimentTreatmentLocalization: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersionExperimentTreatmentLocalizations']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appPreviews: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appPreviews']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppPreviewSetsResponseSchema = {
    type: 'object',
    title: 'AppPreviewSetsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppPreviewSet'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppStoreVersionLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppCustomProductPageLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentTreatmentLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppPreview'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppPreviewSetResponseSchema = {
    type: 'object',
    title: 'AppPreviewSetResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppPreviewSet'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppStoreVersionLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppCustomProductPageLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentTreatmentLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppPreview'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppPreviewSetCreateRequestSchema = {
    type: 'object',
    title: 'AppPreviewSetCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appPreviewSets']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        previewType: {
                            '$ref': '#/components/schemas/PreviewType'
                        }
                    },
                    required: ['previewType']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appStoreVersionLocalization: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersionLocalizations']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        appCustomProductPageLocalization: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appCustomProductPageLocalizations']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        appStoreVersionExperimentTreatmentLocalization: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersionExperimentTreatmentLocalizations']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    }
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppPreviewSchema = {
    type: 'object',
    title: 'AppPreview',
    properties: {
        type: {
            type: 'string',
            enum: ['appPreviews']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                sourceFileChecksum: {
                    type: 'string'
                },
                previewFrameTimeCode: {
                    type: 'string'
                },
                mimeType: {
                    type: 'string'
                },
                videoUrl: {
                    type: 'string'
                },
                previewFrameImage: {
                    '$ref': '#/components/schemas/PreviewFrameImage'
                },
                previewImage: {
                    deprecated: true,
                    '$ref': '#/components/schemas/ImageAsset'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                assetDeliveryState: {
                    deprecated: true,
                    '$ref': '#/components/schemas/AppMediaAssetState'
                },
                videoDeliveryState: {
                    '$ref': '#/components/schemas/AppMediaVideoState'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appPreviewSet: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appPreviewSets']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppPreviewsResponseSchema = {
    type: 'object',
    title: 'AppPreviewsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppPreview'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppPreviewSet'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppPreviewResponseSchema = {
    type: 'object',
    title: 'AppPreviewResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppPreview'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppPreviewSet'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppPreviewCreateRequestSchema = {
    type: 'object',
    title: 'AppPreviewCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appPreviews']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        },
                        previewFrameTimeCode: {
                            type: 'string'
                        },
                        mimeType: {
                            type: 'string'
                        }
                    },
                    required: ['fileName', 'fileSize']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appPreviewSet: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appPreviewSets']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appPreviewSet']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppPreviewUpdateRequestSchema = {
    type: 'object',
    title: 'AppPreviewUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appPreviews']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        sourceFileChecksum: {
                            type: 'string'
                        },
                        previewFrameTimeCode: {
                            type: 'string'
                        },
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppPricePointV3Schema = {
    type: 'object',
    title: 'AppPricePointV3',
    properties: {
        type: {
            type: 'string',
            enum: ['appPricePoints']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                customerPrice: {
                    type: 'string'
                },
                proceeds: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                app: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                equalizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                territory: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppPricePointsV3ResponseSchema = {
    type: 'object',
    title: 'AppPricePointsV3Response',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppPricePointV3'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/Territory'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppPricePointV3ResponseSchema = {
    type: 'object',
    title: 'AppPricePointV3Response',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppPricePointV3'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/Territory'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppPriceScheduleSchema = {
    type: 'object',
    title: 'AppPriceSchedule',
    properties: {
        type: {
            type: 'string',
            enum: ['appPriceSchedules']
        },
        id: {
            type: 'string'
        },
        relationships: {
            type: 'object',
            properties: {
                app: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                baseTerritory: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                manualPrices: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appPrices']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                automaticPrices: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appPrices']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppPriceScheduleResponseSchema = {
    type: 'object',
    title: 'AppPriceScheduleResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppPriceSchedule'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/Territory'
                    },
                    {
                        '$ref': '#/components/schemas/AppPriceV2'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppPriceScheduleCreateRequestSchema = {
    type: 'object',
    title: 'AppPriceScheduleCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appPriceSchedules']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        baseTerritory: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['territories']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        manualPrices: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['appPrices']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['app', 'manualPrices', 'baseTerritory']
                }
            },
            required: ['relationships', 'type']
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppPriceV2InlineCreate'
                    },
                    {
                        '$ref': '#/components/schemas/TerritoryInlineCreate'
                    }
                ]
            }
        }
    },
    required: ['data']
} as const;

export const AppPriceV2Schema = {
    type: 'object',
    title: 'AppPriceV2',
    properties: {
        type: {
            type: 'string',
            enum: ['appPrices']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                manual: {
                    type: 'boolean'
                },
                startDate: {
                    type: 'string',
                    format: 'date'
                },
                endDate: {
                    type: 'string',
                    format: 'date'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appPricePoint: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appPricePoints']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                territory: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppPriceV2InlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['appPrices']
        },
        id: {
            type: 'string'
        }
    },
    required: ['type']
} as const;

export const AppPricesV2ResponseSchema = {
    type: 'object',
    title: 'AppPricesV2Response',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppPriceV2'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppPricePointV3'
                    },
                    {
                        '$ref': '#/components/schemas/Territory'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppScreenshotSetSchema = {
    type: 'object',
    title: 'AppScreenshotSet',
    properties: {
        type: {
            type: 'string',
            enum: ['appScreenshotSets']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                screenshotDisplayType: {
                    '$ref': '#/components/schemas/ScreenshotDisplayType'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appStoreVersionLocalization: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersionLocalizations']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appCustomProductPageLocalization: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appCustomProductPageLocalizations']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appStoreVersionExperimentTreatmentLocalization: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersionExperimentTreatmentLocalizations']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appScreenshots: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appScreenshots']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppScreenshotSetsResponseSchema = {
    type: 'object',
    title: 'AppScreenshotSetsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppScreenshotSet'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppStoreVersionLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppCustomProductPageLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentTreatmentLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppScreenshot'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppScreenshotSetResponseSchema = {
    type: 'object',
    title: 'AppScreenshotSetResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppScreenshotSet'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppStoreVersionLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppCustomProductPageLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentTreatmentLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppScreenshot'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppScreenshotSetCreateRequestSchema = {
    type: 'object',
    title: 'AppScreenshotSetCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appScreenshotSets']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        screenshotDisplayType: {
                            '$ref': '#/components/schemas/ScreenshotDisplayType'
                        }
                    },
                    required: ['screenshotDisplayType']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appStoreVersionLocalization: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersionLocalizations']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        appCustomProductPageLocalization: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appCustomProductPageLocalizations']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        appStoreVersionExperimentTreatmentLocalization: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersionExperimentTreatmentLocalizations']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    }
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppScreenshotSchema = {
    type: 'object',
    title: 'AppScreenshot',
    properties: {
        type: {
            type: 'string',
            enum: ['appScreenshots']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                sourceFileChecksum: {
                    type: 'string'
                },
                imageAsset: {
                    '$ref': '#/components/schemas/ImageAsset'
                },
                assetToken: {
                    type: 'string'
                },
                assetType: {
                    type: 'string'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                assetDeliveryState: {
                    '$ref': '#/components/schemas/AppMediaAssetState'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appScreenshotSet: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appScreenshotSets']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppScreenshotsResponseSchema = {
    type: 'object',
    title: 'AppScreenshotsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppScreenshot'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppScreenshotSet'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppScreenshotResponseSchema = {
    type: 'object',
    title: 'AppScreenshotResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppScreenshot'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppScreenshotSet'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppScreenshotCreateRequestSchema = {
    type: 'object',
    title: 'AppScreenshotCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appScreenshots']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        }
                    },
                    required: ['fileName', 'fileSize']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appScreenshotSet: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appScreenshotSets']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appScreenshotSet']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppScreenshotUpdateRequestSchema = {
    type: 'object',
    title: 'AppScreenshotUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appScreenshots']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        sourceFileChecksum: {
                            type: 'string'
                        },
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreReviewAttachmentSchema = {
    type: 'object',
    title: 'AppStoreReviewAttachment',
    properties: {
        type: {
            type: 'string',
            enum: ['appStoreReviewAttachments']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                sourceFileChecksum: {
                    type: 'string'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                assetDeliveryState: {
                    '$ref': '#/components/schemas/AppMediaAssetState'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appStoreReviewDetail: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreReviewDetails']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppStoreReviewAttachmentsResponseSchema = {
    type: 'object',
    title: 'AppStoreReviewAttachmentsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppStoreReviewAttachment'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppStoreReviewDetail'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreReviewAttachmentResponseSchema = {
    type: 'object',
    title: 'AppStoreReviewAttachmentResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppStoreReviewAttachment'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppStoreReviewDetail'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreReviewAttachmentCreateRequestSchema = {
    type: 'object',
    title: 'AppStoreReviewAttachmentCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreReviewAttachments']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        }
                    },
                    required: ['fileName', 'fileSize']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appStoreReviewDetail: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreReviewDetails']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appStoreReviewDetail']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreReviewAttachmentUpdateRequestSchema = {
    type: 'object',
    title: 'AppStoreReviewAttachmentUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreReviewAttachments']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        sourceFileChecksum: {
                            type: 'string'
                        },
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreReviewDetailSchema = {
    type: 'object',
    title: 'AppStoreReviewDetail',
    properties: {
        type: {
            type: 'string',
            enum: ['appStoreReviewDetails']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                contactFirstName: {
                    type: 'string'
                },
                contactLastName: {
                    type: 'string'
                },
                contactPhone: {
                    type: 'string'
                },
                contactEmail: {
                    type: 'string'
                },
                demoAccountName: {
                    type: 'string'
                },
                demoAccountPassword: {
                    type: 'string'
                },
                demoAccountRequired: {
                    type: 'boolean'
                },
                notes: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appStoreVersion: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appStoreReviewAttachments: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appStoreReviewAttachments']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppStoreReviewDetailResponseSchema = {
    type: 'object',
    title: 'AppStoreReviewDetailResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppStoreReviewDetail'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreReviewAttachment'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreReviewDetailCreateRequestSchema = {
    type: 'object',
    title: 'AppStoreReviewDetailCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreReviewDetails']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        contactFirstName: {
                            type: 'string'
                        },
                        contactLastName: {
                            type: 'string'
                        },
                        contactPhone: {
                            type: 'string'
                        },
                        contactEmail: {
                            type: 'string'
                        },
                        demoAccountName: {
                            type: 'string'
                        },
                        demoAccountPassword: {
                            type: 'string'
                        },
                        demoAccountRequired: {
                            type: 'boolean'
                        },
                        notes: {
                            type: 'string'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appStoreVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appStoreVersion']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreReviewDetailUpdateRequestSchema = {
    type: 'object',
    title: 'AppStoreReviewDetailUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreReviewDetails']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        contactFirstName: {
                            type: 'string'
                        },
                        contactLastName: {
                            type: 'string'
                        },
                        contactPhone: {
                            type: 'string'
                        },
                        contactEmail: {
                            type: 'string'
                        },
                        demoAccountName: {
                            type: 'string'
                        },
                        demoAccountPassword: {
                            type: 'string'
                        },
                        demoAccountRequired: {
                            type: 'boolean'
                        },
                        notes: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreVersionExperimentTreatmentLocalizationSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentTreatmentLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['appStoreVersionExperimentTreatmentLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                locale: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appStoreVersionExperimentTreatment: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersionExperimentTreatments']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appScreenshotSets: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appScreenshotSets']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                appPreviewSets: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appPreviewSets']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppStoreVersionExperimentTreatmentLocalizationsResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentTreatmentLocalizationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppStoreVersionExperimentTreatmentLocalization'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentTreatment'
                    },
                    {
                        '$ref': '#/components/schemas/AppScreenshotSet'
                    },
                    {
                        '$ref': '#/components/schemas/AppPreviewSet'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionExperimentTreatmentLocalizationResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentTreatmentLocalizationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppStoreVersionExperimentTreatmentLocalization'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentTreatment'
                    },
                    {
                        '$ref': '#/components/schemas/AppScreenshotSet'
                    },
                    {
                        '$ref': '#/components/schemas/AppPreviewSet'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionExperimentTreatmentLocalizationCreateRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentTreatmentLocalizationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersionExperimentTreatmentLocalizations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        locale: {
                            type: 'string'
                        }
                    },
                    required: ['locale']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appStoreVersionExperimentTreatment: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersionExperimentTreatments']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appStoreVersionExperimentTreatment']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreVersionExperimentTreatmentSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentTreatment',
    properties: {
        type: {
            type: 'string',
            enum: ['appStoreVersionExperimentTreatments']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                appIcon: {
                    '$ref': '#/components/schemas/ImageAsset'
                },
                appIconName: {
                    type: 'string'
                },
                promotedDate: {
                    type: 'string',
                    format: 'date-time'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appStoreVersionExperiment: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersionExperiments']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appStoreVersionExperimentV2: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersionExperiments']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appStoreVersionExperimentTreatmentLocalizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appStoreVersionExperimentTreatmentLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppStoreVersionExperimentTreatmentsResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentTreatmentsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppStoreVersionExperimentTreatment'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperiment'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentV2'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentTreatmentLocalization'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionExperimentTreatmentResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentTreatmentResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppStoreVersionExperimentTreatment'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperiment'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentV2'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentTreatmentLocalization'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionExperimentTreatmentCreateRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentTreatmentCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersionExperimentTreatments']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        appIconName: {
                            type: 'string'
                        }
                    },
                    required: ['name']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appStoreVersionExperiment: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersionExperiments']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        appStoreVersionExperimentV2: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersionExperiments']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    }
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreVersionExperimentTreatmentUpdateRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentTreatmentUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersionExperimentTreatments']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        appIconName: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreVersionExperimentV2Schema = {
    type: 'object',
    title: 'AppStoreVersionExperimentV2',
    properties: {
        type: {
            type: 'string',
            enum: ['appStoreVersionExperiments']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                platform: {
                    '$ref': '#/components/schemas/Platform'
                },
                trafficProportion: {
                    type: 'integer'
                },
                state: {
                    type: 'string',
                    enum: ['PREPARE_FOR_SUBMISSION', 'READY_FOR_REVIEW', 'WAITING_FOR_REVIEW', 'IN_REVIEW', 'ACCEPTED', 'APPROVED', 'REJECTED', 'COMPLETED', 'STOPPED']
                },
                reviewRequired: {
                    type: 'boolean'
                },
                startDate: {
                    type: 'string',
                    format: 'date-time'
                },
                endDate: {
                    type: 'string',
                    format: 'date-time'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                app: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                latestControlVersion: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                controlVersions: {
                    type: 'object',
                    properties: {
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appStoreVersions']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                appStoreVersionExperimentTreatments: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appStoreVersionExperimentTreatments']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppStoreVersionExperimentsV2ResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentsV2Response',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppStoreVersionExperimentV2'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentTreatment'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionExperimentV2ResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentV2Response',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppStoreVersionExperimentV2'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentTreatment'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionExperimentV2CreateRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentV2CreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersionExperiments']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        platform: {
                            '$ref': '#/components/schemas/Platform'
                        },
                        trafficProportion: {
                            type: 'integer'
                        }
                    },
                    required: ['trafficProportion', 'name', 'platform']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['app']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreVersionExperimentV2UpdateRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentV2UpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersionExperiments']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        trafficProportion: {
                            type: 'integer'
                        },
                        started: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreVersionExperimentSchema = {
    type: 'object',
    title: 'AppStoreVersionExperiment',
    properties: {
        type: {
            type: 'string',
            enum: ['appStoreVersionExperiments']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                trafficProportion: {
                    type: 'integer'
                },
                state: {
                    type: 'string',
                    enum: ['PREPARE_FOR_SUBMISSION', 'READY_FOR_REVIEW', 'WAITING_FOR_REVIEW', 'IN_REVIEW', 'ACCEPTED', 'APPROVED', 'REJECTED', 'COMPLETED', 'STOPPED']
                },
                reviewRequired: {
                    type: 'boolean'
                },
                startDate: {
                    type: 'string',
                    format: 'date-time'
                },
                endDate: {
                    type: 'string',
                    format: 'date-time'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appStoreVersion: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appStoreVersionExperimentTreatments: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appStoreVersionExperimentTreatments']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type'],
    deprecated: true
} as const;

export const AppStoreVersionExperimentsResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppStoreVersionExperiment'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentTreatment'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links'],
    deprecated: true
} as const;

export const AppStoreVersionExperimentResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppStoreVersionExperiment'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentTreatment'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links'],
    deprecated: true
} as const;

export const AppStoreVersionExperimentCreateRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersionExperiments']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        trafficProportion: {
                            type: 'integer'
                        }
                    },
                    required: ['trafficProportion', 'name']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appStoreVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appStoreVersion']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data'],
    deprecated: true
} as const;

export const AppStoreVersionExperimentUpdateRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionExperimentUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersionExperiments']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        trafficProportion: {
                            type: 'integer'
                        },
                        started: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data'],
    deprecated: true
} as const;

export const AppStoreVersionLocalizationSchema = {
    type: 'object',
    title: 'AppStoreVersionLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['appStoreVersionLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                description: {
                    type: 'string'
                },
                locale: {
                    type: 'string'
                },
                keywords: {
                    type: 'string'
                },
                marketingUrl: {
                    type: 'string',
                    format: 'uri'
                },
                promotionalText: {
                    type: 'string'
                },
                supportUrl: {
                    type: 'string',
                    format: 'uri'
                },
                whatsNew: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appStoreVersion: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appScreenshotSets: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appScreenshotSets']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                appPreviewSets: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appPreviewSets']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppStoreVersionLocalizationsResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionLocalizationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppStoreVersionLocalization'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppScreenshotSet'
                    },
                    {
                        '$ref': '#/components/schemas/AppPreviewSet'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionLocalizationResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionLocalizationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppStoreVersionLocalization'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppScreenshotSet'
                    },
                    {
                        '$ref': '#/components/schemas/AppPreviewSet'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionLocalizationCreateRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionLocalizationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersionLocalizations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        description: {
                            type: 'string'
                        },
                        locale: {
                            type: 'string'
                        },
                        keywords: {
                            type: 'string'
                        },
                        marketingUrl: {
                            type: 'string',
                            format: 'uri'
                        },
                        promotionalText: {
                            type: 'string'
                        },
                        supportUrl: {
                            type: 'string',
                            format: 'uri'
                        },
                        whatsNew: {
                            type: 'string'
                        }
                    },
                    required: ['locale']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appStoreVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appStoreVersion']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreVersionLocalizationUpdateRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionLocalizationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersionLocalizations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        description: {
                            type: 'string'
                        },
                        keywords: {
                            type: 'string'
                        },
                        marketingUrl: {
                            type: 'string',
                            format: 'uri'
                        },
                        promotionalText: {
                            type: 'string'
                        },
                        supportUrl: {
                            type: 'string',
                            format: 'uri'
                        },
                        whatsNew: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreVersionPhasedReleaseSchema = {
    type: 'object',
    title: 'AppStoreVersionPhasedRelease',
    properties: {
        type: {
            type: 'string',
            enum: ['appStoreVersionPhasedReleases']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                phasedReleaseState: {
                    '$ref': '#/components/schemas/PhasedReleaseState'
                },
                startDate: {
                    type: 'string',
                    format: 'date-time'
                },
                totalPauseDuration: {
                    type: 'integer'
                },
                currentDayNumber: {
                    type: 'integer'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppStoreVersionPhasedReleaseResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionPhasedReleaseResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppStoreVersionPhasedRelease'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionPhasedReleaseCreateRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionPhasedReleaseCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersionPhasedReleases']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        phasedReleaseState: {
                            '$ref': '#/components/schemas/PhasedReleaseState'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appStoreVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appStoreVersion']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreVersionPhasedReleaseUpdateRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionPhasedReleaseUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersionPhasedReleases']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        phasedReleaseState: {
                            '$ref': '#/components/schemas/PhasedReleaseState'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreVersionPromotionSchema = {
    type: 'object',
    title: 'AppStoreVersionPromotion',
    properties: {
        type: {
            type: 'string',
            enum: ['appStoreVersionPromotions']
        },
        id: {
            type: 'string'
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppStoreVersionPromotionResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionPromotionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppStoreVersionPromotion'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionPromotionCreateRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionPromotionCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersionPromotions']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appStoreVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        appStoreVersionExperimentTreatment: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersionExperimentTreatments']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appStoreVersionExperimentTreatment', 'appStoreVersion']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreVersionReleaseRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionReleaseRequest',
    properties: {
        type: {
            type: 'string',
            enum: ['appStoreVersionReleaseRequests']
        },
        id: {
            type: 'string'
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppStoreVersionReleaseRequestResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionReleaseRequestResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppStoreVersionReleaseRequest'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionReleaseRequestCreateRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionReleaseRequestCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersionReleaseRequests']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appStoreVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appStoreVersion']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreVersionSubmissionSchema = {
    type: 'object',
    title: 'AppStoreVersionSubmission',
    properties: {
        type: {
            type: 'string',
            enum: ['appStoreVersionSubmissions']
        },
        id: {
            type: 'string'
        },
        relationships: {
            type: 'object',
            properties: {
                appStoreVersion: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type'],
    deprecated: true
} as const;

export const AppStoreVersionSubmissionResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionSubmissionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppStoreVersionSubmission'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppStoreVersion'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links'],
    deprecated: true
} as const;

export const AppStoreVersionSubmissionCreateRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionSubmissionCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersionSubmissions']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appStoreVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appStoreVersion']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data'],
    deprecated: true
} as const;

export const AppStoreVersionSchema = {
    type: 'object',
    title: 'AppStoreVersion',
    properties: {
        type: {
            type: 'string',
            enum: ['appStoreVersions']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                platform: {
                    '$ref': '#/components/schemas/Platform'
                },
                versionString: {
                    type: 'string'
                },
                appStoreState: {
                    deprecated: true,
                    '$ref': '#/components/schemas/AppStoreVersionState'
                },
                appVersionState: {
                    '$ref': '#/components/schemas/AppVersionState'
                },
                copyright: {
                    type: 'string'
                },
                reviewType: {
                    type: 'string',
                    enum: ['APP_STORE', 'NOTARIZATION']
                },
                releaseType: {
                    type: 'string',
                    enum: ['MANUAL', 'AFTER_APPROVAL', 'SCHEDULED']
                },
                earliestReleaseDate: {
                    type: 'string',
                    format: 'date-time'
                },
                downloadable: {
                    type: 'boolean'
                },
                createdDate: {
                    type: 'string',
                    format: 'date-time'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                app: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                ageRatingDeclaration: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['ageRatingDeclarations']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    },
                    deprecated: true
                },
                appStoreVersionLocalizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appStoreVersionLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                build: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['builds']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appStoreVersionPhasedRelease: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersionPhasedReleases']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                gameCenterAppVersion: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterAppVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                routingAppCoverage: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['routingAppCoverages']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appStoreReviewDetail: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreReviewDetails']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appStoreVersionSubmission: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersionSubmissions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appClipDefaultExperience: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appClipDefaultExperiences']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appStoreVersionExperiments: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appStoreVersionExperiments']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                appStoreVersionExperimentsV2: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appStoreVersionExperiments']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                customerReviews: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                alternativeDistributionPackage: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['alternativeDistributionPackages']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppStoreVersionsResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppStoreVersion'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/AgeRatingDeclaration'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/Build'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionPhasedRelease'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAppVersion'
                    },
                    {
                        '$ref': '#/components/schemas/RoutingAppCoverage'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreReviewDetail'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionSubmission'
                    },
                    {
                        '$ref': '#/components/schemas/AppClipDefaultExperience'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperiment'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentV2'
                    },
                    {
                        '$ref': '#/components/schemas/AlternativeDistributionPackage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppStoreVersion'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/AgeRatingDeclaration'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/Build'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionPhasedRelease'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAppVersion'
                    },
                    {
                        '$ref': '#/components/schemas/RoutingAppCoverage'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreReviewDetail'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionSubmission'
                    },
                    {
                        '$ref': '#/components/schemas/AppClipDefaultExperience'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperiment'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentV2'
                    },
                    {
                        '$ref': '#/components/schemas/AlternativeDistributionPackage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionCreateRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersions']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        platform: {
                            '$ref': '#/components/schemas/Platform'
                        },
                        versionString: {
                            type: 'string'
                        },
                        copyright: {
                            type: 'string'
                        },
                        reviewType: {
                            type: 'string',
                            enum: ['APP_STORE', 'NOTARIZATION']
                        },
                        releaseType: {
                            type: 'string',
                            enum: ['MANUAL', 'AFTER_APPROVAL', 'SCHEDULED']
                        },
                        earliestReleaseDate: {
                            type: 'string',
                            format: 'date-time'
                        }
                    },
                    required: ['versionString', 'platform']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        appStoreVersionLocalizations: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['appStoreVersionLocalizations']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        },
                        build: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['builds']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    },
                    required: ['app']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreVersionUpdateRequestSchema = {
    type: 'object',
    title: 'AppStoreVersionUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersions']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        versionString: {
                            type: 'string'
                        },
                        copyright: {
                            type: 'string'
                        },
                        reviewType: {
                            type: 'string',
                            enum: ['APP_STORE', 'NOTARIZATION']
                        },
                        releaseType: {
                            type: 'string',
                            enum: ['MANUAL', 'AFTER_APPROVAL', 'SCHEDULED']
                        },
                        earliestReleaseDate: {
                            type: 'string',
                            format: 'date-time'
                        },
                        downloadable: {
                            type: 'boolean'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        build: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['builds']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        appClipDefaultExperience: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appClipDefaultExperiences']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppSchema = {
    type: 'object',
    title: 'App',
    properties: {
        type: {
            type: 'string',
            enum: ['apps']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                bundleId: {
                    type: 'string'
                },
                sku: {
                    type: 'string'
                },
                primaryLocale: {
                    type: 'string'
                },
                isOrEverWasMadeForKids: {
                    type: 'boolean'
                },
                subscriptionStatusUrl: {
                    type: 'string',
                    format: 'uri'
                },
                subscriptionStatusUrlVersion: {
                    '$ref': '#/components/schemas/SubscriptionStatusUrlVersion'
                },
                subscriptionStatusUrlForSandbox: {
                    type: 'string',
                    format: 'uri'
                },
                subscriptionStatusUrlVersionForSandbox: {
                    '$ref': '#/components/schemas/SubscriptionStatusUrlVersion'
                },
                contentRightsDeclaration: {
                    type: 'string',
                    enum: ['DOES_NOT_USE_THIRD_PARTY_CONTENT', 'USES_THIRD_PARTY_CONTENT']
                },
                streamlinedPurchasingEnabled: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appEncryptionDeclarations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appEncryptionDeclarations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                ciProduct: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['ciProducts']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                betaTesters: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                betaGroups: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['betaGroups']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                appStoreVersions: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appStoreVersions']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                preReleaseVersions: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['preReleaseVersions']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                betaAppLocalizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['betaAppLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                builds: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['builds']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                betaLicenseAgreement: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['betaLicenseAgreements']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                betaAppReviewDetail: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['betaAppReviewDetails']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appInfos: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appInfos']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                appClips: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appClips']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                appPricePoints: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                endUserLicenseAgreement: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['endUserLicenseAgreements']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appPriceSchedule: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                appAvailabilityV2: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                inAppPurchases: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['inAppPurchases']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    },
                    deprecated: true
                },
                subscriptionGroups: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['subscriptionGroups']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                gameCenterEnabledVersions: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterEnabledVersions']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                perfPowerMetrics: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                appCustomProductPages: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appCustomProductPages']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                inAppPurchasesV2: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['inAppPurchases']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                promotedPurchases: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['promotedPurchases']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                appEvents: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appEvents']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                reviewSubmissions: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['reviewSubmissions']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                subscriptionGracePeriod: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptionGracePeriods']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                customerReviews: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                gameCenterDetail: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterDetails']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appStoreVersionExperimentsV2: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['appStoreVersionExperiments']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                alternativeDistributionKey: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                analyticsReportRequests: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                marketplaceSearchDetail: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const AppsResponseSchema = {
    type: 'object',
    title: 'AppsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/App'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppEncryptionDeclaration'
                    },
                    {
                        '$ref': '#/components/schemas/CiProduct'
                    },
                    {
                        '$ref': '#/components/schemas/BetaGroup'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/PrereleaseVersion'
                    },
                    {
                        '$ref': '#/components/schemas/BetaAppLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/Build'
                    },
                    {
                        '$ref': '#/components/schemas/BetaLicenseAgreement'
                    },
                    {
                        '$ref': '#/components/schemas/BetaAppReviewDetail'
                    },
                    {
                        '$ref': '#/components/schemas/AppInfo'
                    },
                    {
                        '$ref': '#/components/schemas/AppClip'
                    },
                    {
                        '$ref': '#/components/schemas/EndUserLicenseAgreement'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchase'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionGroup'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterEnabledVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppCustomProductPage'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchaseV2'
                    },
                    {
                        '$ref': '#/components/schemas/PromotedPurchase'
                    },
                    {
                        '$ref': '#/components/schemas/AppEvent'
                    },
                    {
                        '$ref': '#/components/schemas/ReviewSubmission'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionGracePeriod'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterDetail'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentV2'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppResponseSchema = {
    type: 'object',
    title: 'AppResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/App'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppEncryptionDeclaration'
                    },
                    {
                        '$ref': '#/components/schemas/CiProduct'
                    },
                    {
                        '$ref': '#/components/schemas/BetaGroup'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/PrereleaseVersion'
                    },
                    {
                        '$ref': '#/components/schemas/BetaAppLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/Build'
                    },
                    {
                        '$ref': '#/components/schemas/BetaLicenseAgreement'
                    },
                    {
                        '$ref': '#/components/schemas/BetaAppReviewDetail'
                    },
                    {
                        '$ref': '#/components/schemas/AppInfo'
                    },
                    {
                        '$ref': '#/components/schemas/AppClip'
                    },
                    {
                        '$ref': '#/components/schemas/EndUserLicenseAgreement'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchase'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionGroup'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterEnabledVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppCustomProductPage'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchaseV2'
                    },
                    {
                        '$ref': '#/components/schemas/PromotedPurchase'
                    },
                    {
                        '$ref': '#/components/schemas/AppEvent'
                    },
                    {
                        '$ref': '#/components/schemas/ReviewSubmission'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionGracePeriod'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterDetail'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentV2'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppUpdateRequestSchema = {
    type: 'object',
    title: 'AppUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['apps']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        bundleId: {
                            type: 'string'
                        },
                        primaryLocale: {
                            type: 'string'
                        },
                        subscriptionStatusUrl: {
                            type: 'string',
                            format: 'uri'
                        },
                        subscriptionStatusUrlVersion: {
                            '$ref': '#/components/schemas/SubscriptionStatusUrlVersion'
                        },
                        subscriptionStatusUrlForSandbox: {
                            type: 'string',
                            format: 'uri'
                        },
                        subscriptionStatusUrlVersionForSandbox: {
                            '$ref': '#/components/schemas/SubscriptionStatusUrlVersion'
                        },
                        contentRightsDeclaration: {
                            type: 'string',
                            enum: ['DOES_NOT_USE_THIRD_PARTY_CONTENT', 'USES_THIRD_PARTY_CONTENT']
                        },
                        streamlinedPurchasingEnabled: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const BetaAppClipInvocationLocalizationSchema = {
    type: 'object',
    title: 'BetaAppClipInvocationLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['betaAppClipInvocationLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                title: {
                    type: 'string'
                },
                locale: {
                    type: 'string'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BetaAppClipInvocationLocalizationInlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['betaAppClipInvocationLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                title: {
                    type: 'string'
                },
                locale: {
                    type: 'string'
                }
            },
            required: ['locale', 'title']
        },
        relationships: {
            type: 'object',
            properties: {
                betaAppClipInvocation: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['betaAppClipInvocations']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        }
    },
    required: ['attributes', 'type']
} as const;

export const BetaAppClipInvocationLocalizationResponseSchema = {
    type: 'object',
    title: 'BetaAppClipInvocationLocalizationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BetaAppClipInvocationLocalization'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaAppClipInvocationLocalizationCreateRequestSchema = {
    type: 'object',
    title: 'BetaAppClipInvocationLocalizationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['betaAppClipInvocationLocalizations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        title: {
                            type: 'string'
                        },
                        locale: {
                            type: 'string'
                        }
                    },
                    required: ['locale', 'title']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        betaAppClipInvocation: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['betaAppClipInvocations']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['betaAppClipInvocation']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const BetaAppClipInvocationLocalizationUpdateRequestSchema = {
    type: 'object',
    title: 'BetaAppClipInvocationLocalizationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['betaAppClipInvocationLocalizations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        title: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const BetaAppClipInvocationSchema = {
    type: 'object',
    title: 'BetaAppClipInvocation',
    properties: {
        type: {
            type: 'string',
            enum: ['betaAppClipInvocations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                url: {
                    type: 'string',
                    format: 'uri'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                betaAppClipInvocationLocalizations: {
                    type: 'object',
                    properties: {
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['betaAppClipInvocationLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BetaAppClipInvocationsResponseSchema = {
    type: 'object',
    title: 'BetaAppClipInvocationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BetaAppClipInvocation'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BetaAppClipInvocationLocalization'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaAppClipInvocationResponseSchema = {
    type: 'object',
    title: 'BetaAppClipInvocationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BetaAppClipInvocation'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BetaAppClipInvocationLocalization'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaAppClipInvocationCreateRequestSchema = {
    type: 'object',
    title: 'BetaAppClipInvocationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['betaAppClipInvocations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        url: {
                            type: 'string',
                            format: 'uri'
                        }
                    },
                    required: ['url']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        buildBundle: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['buildBundles']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        betaAppClipInvocationLocalizations: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['betaAppClipInvocationLocalizations']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['buildBundle', 'betaAppClipInvocationLocalizations']
                }
            },
            required: ['relationships', 'attributes', 'type']
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BetaAppClipInvocationLocalizationInlineCreate'
            }
        }
    },
    required: ['data']
} as const;

export const BetaAppClipInvocationUpdateRequestSchema = {
    type: 'object',
    title: 'BetaAppClipInvocationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['betaAppClipInvocations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        url: {
                            type: 'string',
                            format: 'uri'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const BetaAppLocalizationSchema = {
    type: 'object',
    title: 'BetaAppLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['betaAppLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                feedbackEmail: {
                    type: 'string'
                },
                marketingUrl: {
                    type: 'string'
                },
                privacyPolicyUrl: {
                    type: 'string'
                },
                tvOsPrivacyPolicy: {
                    type: 'string'
                },
                description: {
                    type: 'string'
                },
                locale: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                app: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BetaAppLocalizationsResponseSchema = {
    type: 'object',
    title: 'BetaAppLocalizationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BetaAppLocalization'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/App'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaAppLocalizationResponseSchema = {
    type: 'object',
    title: 'BetaAppLocalizationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BetaAppLocalization'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/App'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaAppLocalizationCreateRequestSchema = {
    type: 'object',
    title: 'BetaAppLocalizationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['betaAppLocalizations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        feedbackEmail: {
                            type: 'string'
                        },
                        marketingUrl: {
                            type: 'string'
                        },
                        privacyPolicyUrl: {
                            type: 'string'
                        },
                        tvOsPrivacyPolicy: {
                            type: 'string'
                        },
                        description: {
                            type: 'string'
                        },
                        locale: {
                            type: 'string'
                        }
                    },
                    required: ['locale']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['app']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const BetaAppLocalizationUpdateRequestSchema = {
    type: 'object',
    title: 'BetaAppLocalizationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['betaAppLocalizations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        feedbackEmail: {
                            type: 'string'
                        },
                        marketingUrl: {
                            type: 'string'
                        },
                        privacyPolicyUrl: {
                            type: 'string'
                        },
                        tvOsPrivacyPolicy: {
                            type: 'string'
                        },
                        description: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const BetaAppReviewDetailSchema = {
    type: 'object',
    title: 'BetaAppReviewDetail',
    properties: {
        type: {
            type: 'string',
            enum: ['betaAppReviewDetails']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                contactFirstName: {
                    type: 'string'
                },
                contactLastName: {
                    type: 'string'
                },
                contactPhone: {
                    type: 'string'
                },
                contactEmail: {
                    type: 'string'
                },
                demoAccountName: {
                    type: 'string'
                },
                demoAccountPassword: {
                    type: 'string'
                },
                demoAccountRequired: {
                    type: 'boolean'
                },
                notes: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                app: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BetaAppReviewDetailsResponseSchema = {
    type: 'object',
    title: 'BetaAppReviewDetailsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BetaAppReviewDetail'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/App'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaAppReviewDetailResponseSchema = {
    type: 'object',
    title: 'BetaAppReviewDetailResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BetaAppReviewDetail'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/App'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaAppReviewDetailUpdateRequestSchema = {
    type: 'object',
    title: 'BetaAppReviewDetailUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['betaAppReviewDetails']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        contactFirstName: {
                            type: 'string'
                        },
                        contactLastName: {
                            type: 'string'
                        },
                        contactPhone: {
                            type: 'string'
                        },
                        contactEmail: {
                            type: 'string'
                        },
                        demoAccountName: {
                            type: 'string'
                        },
                        demoAccountPassword: {
                            type: 'string'
                        },
                        demoAccountRequired: {
                            type: 'boolean'
                        },
                        notes: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const BetaAppReviewSubmissionSchema = {
    type: 'object',
    title: 'BetaAppReviewSubmission',
    properties: {
        type: {
            type: 'string',
            enum: ['betaAppReviewSubmissions']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                betaReviewState: {
                    '$ref': '#/components/schemas/BetaReviewState'
                },
                submittedDate: {
                    type: 'string',
                    format: 'date-time'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                build: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['builds']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BetaAppReviewSubmissionsResponseSchema = {
    type: 'object',
    title: 'BetaAppReviewSubmissionsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BetaAppReviewSubmission'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Build'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaAppReviewSubmissionResponseSchema = {
    type: 'object',
    title: 'BetaAppReviewSubmissionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BetaAppReviewSubmission'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Build'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaAppReviewSubmissionCreateRequestSchema = {
    type: 'object',
    title: 'BetaAppReviewSubmissionCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['betaAppReviewSubmissions']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        build: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['builds']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['build']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const BetaBuildLocalizationSchema = {
    type: 'object',
    title: 'BetaBuildLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['betaBuildLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                whatsNew: {
                    type: 'string'
                },
                locale: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                build: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['builds']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BetaBuildLocalizationsResponseSchema = {
    type: 'object',
    title: 'BetaBuildLocalizationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BetaBuildLocalization'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Build'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaBuildLocalizationResponseSchema = {
    type: 'object',
    title: 'BetaBuildLocalizationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BetaBuildLocalization'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Build'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaBuildLocalizationCreateRequestSchema = {
    type: 'object',
    title: 'BetaBuildLocalizationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['betaBuildLocalizations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        whatsNew: {
                            type: 'string'
                        },
                        locale: {
                            type: 'string'
                        }
                    },
                    required: ['locale']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        build: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['builds']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['build']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const BetaBuildLocalizationUpdateRequestSchema = {
    type: 'object',
    title: 'BetaBuildLocalizationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['betaBuildLocalizations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        whatsNew: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const BetaGroupSchema = {
    type: 'object',
    title: 'BetaGroup',
    properties: {
        type: {
            type: 'string',
            enum: ['betaGroups']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                createdDate: {
                    type: 'string',
                    format: 'date-time'
                },
                isInternalGroup: {
                    type: 'boolean'
                },
                hasAccessToAllBuilds: {
                    type: 'boolean'
                },
                publicLinkEnabled: {
                    type: 'boolean'
                },
                publicLinkId: {
                    type: 'string'
                },
                publicLinkLimitEnabled: {
                    type: 'boolean'
                },
                publicLinkLimit: {
                    type: 'integer'
                },
                publicLink: {
                    type: 'string'
                },
                feedbackEnabled: {
                    type: 'boolean'
                },
                iosBuildsAvailableForAppleSiliconMac: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                app: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                builds: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['builds']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                betaTesters: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['betaTesters']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BetaGroupsResponseSchema = {
    type: 'object',
    title: 'BetaGroupsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BetaGroup'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/Build'
                    },
                    {
                        '$ref': '#/components/schemas/BetaTester'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaGroupResponseSchema = {
    type: 'object',
    title: 'BetaGroupResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BetaGroup'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/Build'
                    },
                    {
                        '$ref': '#/components/schemas/BetaTester'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaGroupCreateRequestSchema = {
    type: 'object',
    title: 'BetaGroupCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['betaGroups']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        isInternalGroup: {
                            type: 'boolean'
                        },
                        hasAccessToAllBuilds: {
                            type: 'boolean'
                        },
                        publicLinkEnabled: {
                            type: 'boolean'
                        },
                        publicLinkLimitEnabled: {
                            type: 'boolean'
                        },
                        publicLinkLimit: {
                            type: 'integer'
                        },
                        feedbackEnabled: {
                            type: 'boolean'
                        }
                    },
                    required: ['name']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        builds: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['builds']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        },
                        betaTesters: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['betaTesters']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        }
                    },
                    required: ['app']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const BetaGroupUpdateRequestSchema = {
    type: 'object',
    title: 'BetaGroupUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['betaGroups']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        publicLinkEnabled: {
                            type: 'boolean'
                        },
                        publicLinkLimitEnabled: {
                            type: 'boolean'
                        },
                        publicLinkLimit: {
                            type: 'integer'
                        },
                        feedbackEnabled: {
                            type: 'boolean'
                        },
                        iosBuildsAvailableForAppleSiliconMac: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const BetaLicenseAgreementSchema = {
    type: 'object',
    title: 'BetaLicenseAgreement',
    properties: {
        type: {
            type: 'string',
            enum: ['betaLicenseAgreements']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                agreementText: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                app: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BetaLicenseAgreementsResponseSchema = {
    type: 'object',
    title: 'BetaLicenseAgreementsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BetaLicenseAgreement'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/App'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaLicenseAgreementResponseSchema = {
    type: 'object',
    title: 'BetaLicenseAgreementResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BetaLicenseAgreement'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/App'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaLicenseAgreementUpdateRequestSchema = {
    type: 'object',
    title: 'BetaLicenseAgreementUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['betaLicenseAgreements']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        agreementText: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const BetaTesterInvitationSchema = {
    type: 'object',
    title: 'BetaTesterInvitation',
    properties: {
        type: {
            type: 'string',
            enum: ['betaTesterInvitations']
        },
        id: {
            type: 'string'
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BetaTesterInvitationResponseSchema = {
    type: 'object',
    title: 'BetaTesterInvitationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BetaTesterInvitation'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaTesterInvitationCreateRequestSchema = {
    type: 'object',
    title: 'BetaTesterInvitationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['betaTesterInvitations']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        betaTester: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['betaTesters']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['app', 'betaTester']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const BetaTesterSchema = {
    type: 'object',
    title: 'BetaTester',
    properties: {
        type: {
            type: 'string',
            enum: ['betaTesters']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                firstName: {
                    type: 'string'
                },
                lastName: {
                    type: 'string'
                },
                email: {
                    type: 'string',
                    format: 'email'
                },
                inviteType: {
                    '$ref': '#/components/schemas/BetaInviteType'
                },
                state: {
                    '$ref': '#/components/schemas/BetaTesterState'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                apps: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['apps']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                betaGroups: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['betaGroups']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                builds: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['builds']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BetaTestersResponseSchema = {
    type: 'object',
    title: 'BetaTestersResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BetaTester'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/BetaGroup'
                    },
                    {
                        '$ref': '#/components/schemas/Build'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaTesterResponseSchema = {
    type: 'object',
    title: 'BetaTesterResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BetaTester'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/BetaGroup'
                    },
                    {
                        '$ref': '#/components/schemas/Build'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaTesterCreateRequestSchema = {
    type: 'object',
    title: 'BetaTesterCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['betaTesters']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        firstName: {
                            type: 'string'
                        },
                        lastName: {
                            type: 'string'
                        },
                        email: {
                            type: 'string',
                            format: 'email'
                        }
                    },
                    required: ['email']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        betaGroups: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['betaGroups']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        },
                        builds: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['builds']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        }
                    }
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const BuildBetaDetailSchema = {
    type: 'object',
    title: 'BuildBetaDetail',
    properties: {
        type: {
            type: 'string',
            enum: ['buildBetaDetails']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                autoNotifyEnabled: {
                    type: 'boolean'
                },
                internalBuildState: {
                    '$ref': '#/components/schemas/InternalBetaState'
                },
                externalBuildState: {
                    '$ref': '#/components/schemas/ExternalBetaState'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                build: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['builds']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BuildBetaDetailsResponseSchema = {
    type: 'object',
    title: 'BuildBetaDetailsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BuildBetaDetail'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Build'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BuildBetaDetailResponseSchema = {
    type: 'object',
    title: 'BuildBetaDetailResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BuildBetaDetail'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Build'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BuildBetaDetailUpdateRequestSchema = {
    type: 'object',
    title: 'BuildBetaDetailUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['buildBetaDetails']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        autoNotifyEnabled: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const BuildBetaNotificationSchema = {
    type: 'object',
    title: 'BuildBetaNotification',
    properties: {
        type: {
            type: 'string',
            enum: ['buildBetaNotifications']
        },
        id: {
            type: 'string'
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BuildBetaNotificationResponseSchema = {
    type: 'object',
    title: 'BuildBetaNotificationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BuildBetaNotification'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BuildBetaNotificationCreateRequestSchema = {
    type: 'object',
    title: 'BuildBetaNotificationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['buildBetaNotifications']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        build: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['builds']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['build']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const BuildBundleFileSizeSchema = {
    type: 'object',
    title: 'BuildBundleFileSize',
    properties: {
        type: {
            type: 'string',
            enum: ['buildBundleFileSizes']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                deviceModel: {
                    type: 'string'
                },
                osVersion: {
                    type: 'string'
                },
                downloadBytes: {
                    type: 'integer'
                },
                installBytes: {
                    type: 'integer'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BuildBundleFileSizesResponseSchema = {
    type: 'object',
    title: 'BuildBundleFileSizesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BuildBundleFileSize'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BuildBundleSchema = {
    type: 'object',
    title: 'BuildBundle',
    properties: {
        type: {
            type: 'string',
            enum: ['buildBundles']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                bundleId: {
                    type: 'string'
                },
                bundleType: {
                    type: 'string',
                    enum: ['APP', 'APP_CLIP']
                },
                sdkBuild: {
                    type: 'string'
                },
                platformBuild: {
                    type: 'string'
                },
                fileName: {
                    type: 'string'
                },
                hasSirikit: {
                    type: 'boolean'
                },
                hasOnDemandResources: {
                    type: 'boolean'
                },
                hasPrerenderedIcon: {
                    type: 'boolean'
                },
                usesLocationServices: {
                    type: 'boolean'
                },
                isIosBuildMacAppStoreCompatible: {
                    type: 'boolean'
                },
                includesSymbols: {
                    type: 'boolean'
                },
                dSYMUrl: {
                    type: 'string',
                    format: 'uri'
                },
                supportedArchitectures: {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                requiredCapabilities: {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                deviceProtocols: {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                locales: {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                entitlements: {
                    type: 'object',
                    additionalProperties: {
                        type: 'object',
                        additionalProperties: {
                            type: 'string'
                        }
                    }
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appClipDomainCacheStatus: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appClipDomainStatuses']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appClipDomainDebugStatus: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appClipDomainStatuses']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                betaAppClipInvocations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['betaAppClipInvocations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                buildBundleFileSizes: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['buildBundleFileSizes']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BuildIconSchema = {
    type: 'object',
    title: 'BuildIcon',
    properties: {
        type: {
            type: 'string',
            enum: ['buildIcons']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                iconAsset: {
                    '$ref': '#/components/schemas/ImageAsset'
                },
                iconType: {
                    '$ref': '#/components/schemas/IconAssetType'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BuildIconsResponseSchema = {
    type: 'object',
    title: 'BuildIconsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BuildIcon'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BuildSchema = {
    type: 'object',
    title: 'Build',
    properties: {
        type: {
            type: 'string',
            enum: ['builds']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                version: {
                    type: 'string'
                },
                uploadedDate: {
                    type: 'string',
                    format: 'date-time'
                },
                expirationDate: {
                    type: 'string',
                    format: 'date-time'
                },
                expired: {
                    type: 'boolean'
                },
                minOsVersion: {
                    type: 'string'
                },
                lsMinimumSystemVersion: {
                    type: 'string'
                },
                computedMinMacOsVersion: {
                    type: 'string'
                },
                iconAssetToken: {
                    '$ref': '#/components/schemas/ImageAsset'
                },
                processingState: {
                    type: 'string',
                    enum: ['PROCESSING', 'FAILED', 'INVALID', 'VALID']
                },
                buildAudienceType: {
                    '$ref': '#/components/schemas/BuildAudienceType'
                },
                usesNonExemptEncryption: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                preReleaseVersion: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['preReleaseVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                individualTesters: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['betaTesters']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                betaGroups: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['betaGroups']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                betaBuildLocalizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['betaBuildLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                appEncryptionDeclaration: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appEncryptionDeclarations']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                betaAppReviewSubmission: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['betaAppReviewSubmissions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                app: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                buildBetaDetail: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['buildBetaDetails']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appStoreVersion: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                icons: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['buildIcons']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                buildBundles: {
                    type: 'object',
                    properties: {
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['buildBundles']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                perfPowerMetrics: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                diagnosticSignatures: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BuildsResponseSchema = {
    type: 'object',
    title: 'BuildsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Build'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PrereleaseVersion'
                    },
                    {
                        '$ref': '#/components/schemas/BetaTester'
                    },
                    {
                        '$ref': '#/components/schemas/BetaGroup'
                    },
                    {
                        '$ref': '#/components/schemas/BetaBuildLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppEncryptionDeclaration'
                    },
                    {
                        '$ref': '#/components/schemas/BetaAppReviewSubmission'
                    },
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/BuildBetaDetail'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/BuildIcon'
                    },
                    {
                        '$ref': '#/components/schemas/BuildBundle'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BuildResponseSchema = {
    type: 'object',
    title: 'BuildResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/Build'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/PrereleaseVersion'
                    },
                    {
                        '$ref': '#/components/schemas/BetaTester'
                    },
                    {
                        '$ref': '#/components/schemas/BetaGroup'
                    },
                    {
                        '$ref': '#/components/schemas/BetaBuildLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/AppEncryptionDeclaration'
                    },
                    {
                        '$ref': '#/components/schemas/BetaAppReviewSubmission'
                    },
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/BuildBetaDetail'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/BuildIcon'
                    },
                    {
                        '$ref': '#/components/schemas/BuildBundle'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BuildUpdateRequestSchema = {
    type: 'object',
    title: 'BuildUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['builds']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        expired: {
                            type: 'boolean'
                        },
                        usesNonExemptEncryption: {
                            type: 'boolean'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appEncryptionDeclaration: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appEncryptionDeclarations']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const BundleIdCapabilitySchema = {
    type: 'object',
    title: 'BundleIdCapability',
    properties: {
        type: {
            type: 'string',
            enum: ['bundleIdCapabilities']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                capabilityType: {
                    '$ref': '#/components/schemas/CapabilityType'
                },
                settings: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/CapabilitySetting'
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BundleIdCapabilitiesResponseSchema = {
    type: 'object',
    title: 'BundleIdCapabilitiesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BundleIdCapability'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BundleIdCapabilityResponseSchema = {
    type: 'object',
    title: 'BundleIdCapabilityResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BundleIdCapability'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BundleIdCapabilityCreateRequestSchema = {
    type: 'object',
    title: 'BundleIdCapabilityCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['bundleIdCapabilities']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        capabilityType: {
                            '$ref': '#/components/schemas/CapabilityType'
                        },
                        settings: {
                            type: 'array',
                            items: {
                                '$ref': '#/components/schemas/CapabilitySetting'
                            }
                        }
                    },
                    required: ['capabilityType']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        bundleId: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['bundleIds']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['bundleId']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const BundleIdCapabilityUpdateRequestSchema = {
    type: 'object',
    title: 'BundleIdCapabilityUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['bundleIdCapabilities']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        capabilityType: {
                            '$ref': '#/components/schemas/CapabilityType'
                        },
                        settings: {
                            type: 'array',
                            items: {
                                '$ref': '#/components/schemas/CapabilitySetting'
                            }
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const BundleIdSchema = {
    type: 'object',
    title: 'BundleId',
    properties: {
        type: {
            type: 'string',
            enum: ['bundleIds']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                platform: {
                    '$ref': '#/components/schemas/BundleIdPlatform'
                },
                identifier: {
                    type: 'string'
                },
                seedId: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                profiles: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['profiles']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                bundleIdCapabilities: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['bundleIdCapabilities']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                app: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const BundleIdsResponseSchema = {
    type: 'object',
    title: 'BundleIdsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BundleId'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Profile'
                    },
                    {
                        '$ref': '#/components/schemas/BundleIdCapability'
                    },
                    {
                        '$ref': '#/components/schemas/App'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BundleIdResponseSchema = {
    type: 'object',
    title: 'BundleIdResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BundleId'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Profile'
                    },
                    {
                        '$ref': '#/components/schemas/BundleIdCapability'
                    },
                    {
                        '$ref': '#/components/schemas/App'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BundleIdCreateRequestSchema = {
    type: 'object',
    title: 'BundleIdCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['bundleIds']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        platform: {
                            '$ref': '#/components/schemas/BundleIdPlatform'
                        },
                        identifier: {
                            type: 'string'
                        },
                        seedId: {
                            type: 'string'
                        }
                    },
                    required: ['identifier', 'name', 'platform']
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const BundleIdUpdateRequestSchema = {
    type: 'object',
    title: 'BundleIdUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['bundleIds']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const CertificateSchema = {
    type: 'object',
    title: 'Certificate',
    properties: {
        type: {
            type: 'string',
            enum: ['certificates']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                certificateType: {
                    '$ref': '#/components/schemas/CertificateType'
                },
                displayName: {
                    type: 'string'
                },
                serialNumber: {
                    type: 'string'
                },
                platform: {
                    '$ref': '#/components/schemas/BundleIdPlatform'
                },
                expirationDate: {
                    type: 'string',
                    format: 'date-time'
                },
                certificateContent: {
                    type: 'string'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const CertificatesResponseSchema = {
    type: 'object',
    title: 'CertificatesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Certificate'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const CertificateResponseSchema = {
    type: 'object',
    title: 'CertificateResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/Certificate'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const CertificateCreateRequestSchema = {
    type: 'object',
    title: 'CertificateCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['certificates']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        csrContent: {
                            type: 'string'
                        },
                        certificateType: {
                            '$ref': '#/components/schemas/CertificateType'
                        }
                    },
                    required: ['csrContent', 'certificateType']
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const CiArtifactSchema = {
    type: 'object',
    title: 'CiArtifact',
    properties: {
        type: {
            type: 'string',
            enum: ['ciArtifacts']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileType: {
                    type: 'string',
                    enum: ['ARCHIVE', 'ARCHIVE_EXPORT', 'LOG_BUNDLE', 'RESULT_BUNDLE', 'TEST_PRODUCTS', 'XCODEBUILD_PRODUCTS', 'STAPLED_NOTARIZED_ARCHIVE']
                },
                fileName: {
                    type: 'string'
                },
                fileSize: {
                    type: 'integer'
                },
                downloadUrl: {
                    type: 'string',
                    format: 'uri'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const CiArtifactsResponseSchema = {
    type: 'object',
    title: 'CiArtifactsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CiArtifact'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const CiArtifactResponseSchema = {
    type: 'object',
    title: 'CiArtifactResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/CiArtifact'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const CiBuildActionSchema = {
    type: 'object',
    title: 'CiBuildAction',
    properties: {
        type: {
            type: 'string',
            enum: ['ciBuildActions']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                actionType: {
                    '$ref': '#/components/schemas/CiActionType'
                },
                startedDate: {
                    type: 'string',
                    format: 'date-time'
                },
                finishedDate: {
                    type: 'string',
                    format: 'date-time'
                },
                issueCounts: {
                    '$ref': '#/components/schemas/CiIssueCounts'
                },
                executionProgress: {
                    '$ref': '#/components/schemas/CiExecutionProgress'
                },
                completionStatus: {
                    '$ref': '#/components/schemas/CiCompletionStatus'
                },
                isRequiredToPass: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                buildRun: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['ciBuildRuns']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                artifacts: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                issues: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                testResults: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const CiBuildActionsResponseSchema = {
    type: 'object',
    title: 'CiBuildActionsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CiBuildAction'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CiBuildRun'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const CiBuildActionResponseSchema = {
    type: 'object',
    title: 'CiBuildActionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/CiBuildAction'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CiBuildRun'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const CiBuildRunSchema = {
    type: 'object',
    title: 'CiBuildRun',
    properties: {
        type: {
            type: 'string',
            enum: ['ciBuildRuns']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                number: {
                    type: 'integer'
                },
                createdDate: {
                    type: 'string',
                    format: 'date-time'
                },
                startedDate: {
                    type: 'string',
                    format: 'date-time'
                },
                finishedDate: {
                    type: 'string',
                    format: 'date-time'
                },
                sourceCommit: {
                    type: 'object',
                    properties: {
                        commitSha: {
                            type: 'string'
                        },
                        message: {
                            type: 'string'
                        },
                        author: {
                            '$ref': '#/components/schemas/CiGitUser'
                        },
                        committer: {
                            '$ref': '#/components/schemas/CiGitUser'
                        },
                        webUrl: {
                            type: 'string',
                            format: 'uri'
                        }
                    }
                },
                destinationCommit: {
                    type: 'object',
                    properties: {
                        commitSha: {
                            type: 'string'
                        },
                        message: {
                            type: 'string'
                        },
                        author: {
                            '$ref': '#/components/schemas/CiGitUser'
                        },
                        committer: {
                            '$ref': '#/components/schemas/CiGitUser'
                        },
                        webUrl: {
                            type: 'string',
                            format: 'uri'
                        }
                    }
                },
                isPullRequestBuild: {
                    type: 'boolean'
                },
                issueCounts: {
                    '$ref': '#/components/schemas/CiIssueCounts'
                },
                executionProgress: {
                    '$ref': '#/components/schemas/CiExecutionProgress'
                },
                completionStatus: {
                    '$ref': '#/components/schemas/CiCompletionStatus'
                },
                startReason: {
                    type: 'string',
                    enum: ['GIT_REF_CHANGE', 'MANUAL', 'MANUAL_REBUILD', 'PULL_REQUEST_OPEN', 'PULL_REQUEST_UPDATE', 'SCHEDULE']
                },
                cancelReason: {
                    type: 'string',
                    enum: ['AUTOMATICALLY_BY_NEWER_BUILD', 'MANUALLY_BY_USER']
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                builds: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['builds']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                workflow: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['ciWorkflows']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                product: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['ciProducts']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                sourceBranchOrTag: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['scmGitReferences']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                destinationBranch: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['scmGitReferences']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                actions: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                pullRequest: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['scmPullRequests']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const CiBuildRunsResponseSchema = {
    type: 'object',
    title: 'CiBuildRunsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CiBuildRun'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Build'
                    },
                    {
                        '$ref': '#/components/schemas/CiWorkflow'
                    },
                    {
                        '$ref': '#/components/schemas/CiProduct'
                    },
                    {
                        '$ref': '#/components/schemas/ScmGitReference'
                    },
                    {
                        '$ref': '#/components/schemas/ScmPullRequest'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const CiBuildRunResponseSchema = {
    type: 'object',
    title: 'CiBuildRunResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/CiBuildRun'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Build'
                    },
                    {
                        '$ref': '#/components/schemas/CiWorkflow'
                    },
                    {
                        '$ref': '#/components/schemas/CiProduct'
                    },
                    {
                        '$ref': '#/components/schemas/ScmGitReference'
                    },
                    {
                        '$ref': '#/components/schemas/ScmPullRequest'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const CiBuildRunCreateRequestSchema = {
    type: 'object',
    title: 'CiBuildRunCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['ciBuildRuns']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        clean: {
                            type: 'boolean'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        buildRun: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['ciBuildRuns']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        workflow: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['ciWorkflows']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        sourceBranchOrTag: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['scmGitReferences']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        pullRequest: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['scmPullRequests']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    }
                }
            },
            required: ['type']
        }
    },
    required: ['data']
} as const;

export const CiIssueSchema = {
    type: 'object',
    title: 'CiIssue',
    properties: {
        type: {
            type: 'string',
            enum: ['ciIssues']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                issueType: {
                    type: 'string',
                    enum: ['ANALYZER_WARNING', 'ERROR', 'TEST_FAILURE', 'WARNING']
                },
                message: {
                    type: 'string'
                },
                fileSource: {
                    '$ref': '#/components/schemas/FileLocation'
                },
                category: {
                    type: 'string'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const CiIssuesResponseSchema = {
    type: 'object',
    title: 'CiIssuesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CiIssue'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const CiIssueResponseSchema = {
    type: 'object',
    title: 'CiIssueResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/CiIssue'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const CiMacOsVersionSchema = {
    type: 'object',
    title: 'CiMacOsVersion',
    properties: {
        type: {
            type: 'string',
            enum: ['ciMacOsVersions']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                version: {
                    type: 'string'
                },
                name: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                xcodeVersions: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['ciXcodeVersions']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const CiMacOsVersionsResponseSchema = {
    type: 'object',
    title: 'CiMacOsVersionsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CiMacOsVersion'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CiXcodeVersion'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const CiMacOsVersionResponseSchema = {
    type: 'object',
    title: 'CiMacOsVersionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/CiMacOsVersion'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CiXcodeVersion'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const CiProductSchema = {
    type: 'object',
    title: 'CiProduct',
    properties: {
        type: {
            type: 'string',
            enum: ['ciProducts']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                createdDate: {
                    type: 'string',
                    format: 'date-time'
                },
                productType: {
                    type: 'string',
                    enum: ['APP', 'FRAMEWORK']
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                app: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                bundleId: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['bundleIds']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                workflows: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                primaryRepositories: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['scmRepositories']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                additionalRepositories: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                buildRuns: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const CiProductsResponseSchema = {
    type: 'object',
    title: 'CiProductsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CiProduct'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/BundleId'
                    },
                    {
                        '$ref': '#/components/schemas/ScmRepository'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const CiProductResponseSchema = {
    type: 'object',
    title: 'CiProductResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/CiProduct'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/BundleId'
                    },
                    {
                        '$ref': '#/components/schemas/ScmRepository'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const CiTestResultSchema = {
    type: 'object',
    title: 'CiTestResult',
    properties: {
        type: {
            type: 'string',
            enum: ['ciTestResults']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                className: {
                    type: 'string'
                },
                name: {
                    type: 'string'
                },
                status: {
                    '$ref': '#/components/schemas/CiTestStatus'
                },
                fileSource: {
                    '$ref': '#/components/schemas/FileLocation'
                },
                message: {
                    type: 'string'
                },
                destinationTestResults: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            uuid: {
                                type: 'string'
                            },
                            deviceName: {
                                type: 'string'
                            },
                            osVersion: {
                                type: 'string'
                            },
                            status: {
                                '$ref': '#/components/schemas/CiTestStatus'
                            },
                            duration: {
                                type: 'number'
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const CiTestResultsResponseSchema = {
    type: 'object',
    title: 'CiTestResultsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CiTestResult'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const CiTestResultResponseSchema = {
    type: 'object',
    title: 'CiTestResultResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/CiTestResult'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const CiWorkflowSchema = {
    type: 'object',
    title: 'CiWorkflow',
    properties: {
        type: {
            type: 'string',
            enum: ['ciWorkflows']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                description: {
                    type: 'string'
                },
                branchStartCondition: {
                    '$ref': '#/components/schemas/CiBranchStartCondition'
                },
                tagStartCondition: {
                    '$ref': '#/components/schemas/CiTagStartCondition'
                },
                pullRequestStartCondition: {
                    '$ref': '#/components/schemas/CiPullRequestStartCondition'
                },
                scheduledStartCondition: {
                    '$ref': '#/components/schemas/CiScheduledStartCondition'
                },
                manualBranchStartCondition: {
                    '$ref': '#/components/schemas/CiManualBranchStartCondition'
                },
                manualTagStartCondition: {
                    '$ref': '#/components/schemas/CiManualTagStartCondition'
                },
                manualPullRequestStartCondition: {
                    '$ref': '#/components/schemas/CiManualPullRequestStartCondition'
                },
                actions: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/CiAction'
                    }
                },
                isEnabled: {
                    type: 'boolean'
                },
                isLockedForEditing: {
                    type: 'boolean'
                },
                clean: {
                    type: 'boolean'
                },
                containerFilePath: {
                    type: 'string'
                },
                lastModifiedDate: {
                    type: 'string',
                    format: 'date-time'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                product: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['ciProducts']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                repository: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['scmRepositories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                xcodeVersion: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['ciXcodeVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                macOsVersion: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['ciMacOsVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                buildRuns: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const CiWorkflowsResponseSchema = {
    type: 'object',
    title: 'CiWorkflowsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CiWorkflow'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CiProduct'
                    },
                    {
                        '$ref': '#/components/schemas/ScmRepository'
                    },
                    {
                        '$ref': '#/components/schemas/CiXcodeVersion'
                    },
                    {
                        '$ref': '#/components/schemas/CiMacOsVersion'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const CiWorkflowResponseSchema = {
    type: 'object',
    title: 'CiWorkflowResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/CiWorkflow'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/CiProduct'
                    },
                    {
                        '$ref': '#/components/schemas/ScmRepository'
                    },
                    {
                        '$ref': '#/components/schemas/CiXcodeVersion'
                    },
                    {
                        '$ref': '#/components/schemas/CiMacOsVersion'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const CiWorkflowCreateRequestSchema = {
    type: 'object',
    title: 'CiWorkflowCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['ciWorkflows']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        description: {
                            type: 'string'
                        },
                        branchStartCondition: {
                            '$ref': '#/components/schemas/CiBranchStartCondition'
                        },
                        tagStartCondition: {
                            '$ref': '#/components/schemas/CiTagStartCondition'
                        },
                        pullRequestStartCondition: {
                            '$ref': '#/components/schemas/CiPullRequestStartCondition'
                        },
                        scheduledStartCondition: {
                            '$ref': '#/components/schemas/CiScheduledStartCondition'
                        },
                        manualBranchStartCondition: {
                            '$ref': '#/components/schemas/CiManualBranchStartCondition'
                        },
                        manualTagStartCondition: {
                            '$ref': '#/components/schemas/CiManualTagStartCondition'
                        },
                        manualPullRequestStartCondition: {
                            '$ref': '#/components/schemas/CiManualPullRequestStartCondition'
                        },
                        actions: {
                            type: 'array',
                            items: {
                                '$ref': '#/components/schemas/CiAction'
                            }
                        },
                        isEnabled: {
                            type: 'boolean'
                        },
                        isLockedForEditing: {
                            type: 'boolean'
                        },
                        clean: {
                            type: 'boolean'
                        },
                        containerFilePath: {
                            type: 'string'
                        }
                    },
                    required: ['containerFilePath', 'isEnabled', 'name', 'description', 'clean', 'actions']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        product: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['ciProducts']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        repository: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['scmRepositories']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        xcodeVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['ciXcodeVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        macOsVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['ciMacOsVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['macOsVersion', 'product', 'repository', 'xcodeVersion']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const CiWorkflowUpdateRequestSchema = {
    type: 'object',
    title: 'CiWorkflowUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['ciWorkflows']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        description: {
                            type: 'string'
                        },
                        branchStartCondition: {
                            '$ref': '#/components/schemas/CiBranchStartCondition'
                        },
                        tagStartCondition: {
                            '$ref': '#/components/schemas/CiTagStartCondition'
                        },
                        pullRequestStartCondition: {
                            '$ref': '#/components/schemas/CiPullRequestStartCondition'
                        },
                        scheduledStartCondition: {
                            '$ref': '#/components/schemas/CiScheduledStartCondition'
                        },
                        manualBranchStartCondition: {
                            '$ref': '#/components/schemas/CiManualBranchStartCondition'
                        },
                        manualTagStartCondition: {
                            '$ref': '#/components/schemas/CiManualTagStartCondition'
                        },
                        manualPullRequestStartCondition: {
                            '$ref': '#/components/schemas/CiManualPullRequestStartCondition'
                        },
                        actions: {
                            type: 'array',
                            items: {
                                '$ref': '#/components/schemas/CiAction'
                            }
                        },
                        isEnabled: {
                            type: 'boolean'
                        },
                        isLockedForEditing: {
                            type: 'boolean'
                        },
                        clean: {
                            type: 'boolean'
                        },
                        containerFilePath: {
                            type: 'string'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        xcodeVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['ciXcodeVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        macOsVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['ciMacOsVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const CiXcodeVersionSchema = {
    type: 'object',
    title: 'CiXcodeVersion',
    properties: {
        type: {
            type: 'string',
            enum: ['ciXcodeVersions']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                version: {
                    type: 'string'
                },
                name: {
                    type: 'string'
                },
                testDestinations: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            deviceTypeName: {
                                type: 'string'
                            },
                            deviceTypeIdentifier: {
                                type: 'string'
                            },
                            availableRuntimes: {
                                type: 'array',
                                items: {
                                    type: 'object',
                                    properties: {
                                        runtimeName: {
                                            type: 'string'
                                        },
                                        runtimeIdentifier: {
                                            type: 'string'
                                        }
                                    }
                                }
                            },
                            kind: {
                                '$ref': '#/components/schemas/CiTestDestinationKind'
                            }
                        }
                    }
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                macOsVersions: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['ciMacOsVersions']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const CiXcodeVersionsResponseSchema = {
    type: 'object',
    title: 'CiXcodeVersionsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CiXcodeVersion'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CiMacOsVersion'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const CiXcodeVersionResponseSchema = {
    type: 'object',
    title: 'CiXcodeVersionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/CiXcodeVersion'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CiMacOsVersion'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const CustomerReviewResponseV1Schema = {
    type: 'object',
    title: 'CustomerReviewResponseV1',
    properties: {
        type: {
            type: 'string',
            enum: ['customerReviewResponses']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                responseBody: {
                    type: 'string'
                },
                lastModifiedDate: {
                    type: 'string',
                    format: 'date-time'
                },
                state: {
                    type: 'string',
                    enum: ['PUBLISHED', 'PENDING_PUBLISH']
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                review: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['customerReviews']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const CustomerReviewResponseV1ResponseSchema = {
    type: 'object',
    title: 'CustomerReviewResponseV1Response',
    properties: {
        data: {
            '$ref': '#/components/schemas/CustomerReviewResponseV1'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomerReview'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const CustomerReviewResponseV1CreateRequestSchema = {
    type: 'object',
    title: 'CustomerReviewResponseV1CreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['customerReviewResponses']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        responseBody: {
                            type: 'string'
                        }
                    },
                    required: ['responseBody']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        review: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['customerReviews']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['review']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const CustomerReviewSchema = {
    type: 'object',
    title: 'CustomerReview',
    properties: {
        type: {
            type: 'string',
            enum: ['customerReviews']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                rating: {
                    type: 'integer',
                    maximum: 5,
                    minimum: 1
                },
                title: {
                    type: 'string'
                },
                body: {
                    type: 'string'
                },
                reviewerNickname: {
                    type: 'string'
                },
                createdDate: {
                    type: 'string',
                    format: 'date-time'
                },
                territory: {
                    '$ref': '#/components/schemas/TerritoryCode'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                response: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['customerReviewResponses']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const CustomerReviewsResponseSchema = {
    type: 'object',
    title: 'CustomerReviewsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomerReview'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomerReviewResponseV1'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const CustomerReviewResponseSchema = {
    type: 'object',
    title: 'CustomerReviewResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/CustomerReview'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CustomerReviewResponseV1'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const DeviceSchema = {
    type: 'object',
    title: 'Device',
    properties: {
        type: {
            type: 'string',
            enum: ['devices']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                platform: {
                    '$ref': '#/components/schemas/BundleIdPlatform'
                },
                udid: {
                    type: 'string'
                },
                deviceClass: {
                    type: 'string',
                    enum: ['APPLE_WATCH', 'IPAD', 'IPHONE', 'IPOD', 'APPLE_TV', 'MAC']
                },
                status: {
                    type: 'string',
                    enum: ['ENABLED', 'DISABLED']
                },
                model: {
                    type: 'string'
                },
                addedDate: {
                    type: 'string',
                    format: 'date-time'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const DevicesResponseSchema = {
    type: 'object',
    title: 'DevicesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Device'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const DeviceResponseSchema = {
    type: 'object',
    title: 'DeviceResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/Device'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const DeviceCreateRequestSchema = {
    type: 'object',
    title: 'DeviceCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['devices']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        platform: {
                            '$ref': '#/components/schemas/BundleIdPlatform'
                        },
                        udid: {
                            type: 'string'
                        }
                    },
                    required: ['name', 'udid', 'platform']
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const DeviceUpdateRequestSchema = {
    type: 'object',
    title: 'DeviceUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['devices']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        status: {
                            type: 'string',
                            enum: ['ENABLED', 'DISABLED']
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const DiagnosticLogSchema = {
    type: 'object',
    title: 'DiagnosticLog',
    properties: {
        type: {
            type: 'string',
            enum: ['diagnosticLogs']
        },
        id: {
            type: 'string'
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const DiagnosticSignatureSchema = {
    type: 'object',
    title: 'DiagnosticSignature',
    properties: {
        type: {
            type: 'string',
            enum: ['diagnosticSignatures']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                diagnosticType: {
                    type: 'string',
                    enum: ['DISK_WRITES', 'HANGS', 'LAUNCHES']
                },
                signature: {
                    type: 'string'
                },
                weight: {
                    type: 'number'
                },
                insight: {
                    '$ref': '#/components/schemas/DiagnosticInsight'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                logs: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const DiagnosticSignaturesResponseSchema = {
    type: 'object',
    title: 'DiagnosticSignaturesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DiagnosticSignature'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const EndAppAvailabilityPreOrderSchema = {
    type: 'object',
    title: 'EndAppAvailabilityPreOrder',
    properties: {
        type: {
            type: 'string',
            enum: ['endAppAvailabilityPreOrders']
        },
        id: {
            type: 'string'
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const EndAppAvailabilityPreOrderResponseSchema = {
    type: 'object',
    title: 'EndAppAvailabilityPreOrderResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/EndAppAvailabilityPreOrder'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const EndAppAvailabilityPreOrderCreateRequestSchema = {
    type: 'object',
    title: 'EndAppAvailabilityPreOrderCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['endAppAvailabilityPreOrders']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        territoryAvailabilities: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['territoryAvailabilities']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['territoryAvailabilities']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const EndUserLicenseAgreementSchema = {
    type: 'object',
    title: 'EndUserLicenseAgreement',
    properties: {
        type: {
            type: 'string',
            enum: ['endUserLicenseAgreements']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                agreementText: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                app: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                territories: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['territories']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const EndUserLicenseAgreementResponseSchema = {
    type: 'object',
    title: 'EndUserLicenseAgreementResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/EndUserLicenseAgreement'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/Territory'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const EndUserLicenseAgreementCreateRequestSchema = {
    type: 'object',
    title: 'EndUserLicenseAgreementCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['endUserLicenseAgreements']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        agreementText: {
                            type: 'string'
                        }
                    },
                    required: ['agreementText']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        territories: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['territories']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['app', 'territories']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const EndUserLicenseAgreementUpdateRequestSchema = {
    type: 'object',
    title: 'EndUserLicenseAgreementUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['endUserLicenseAgreements']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        agreementText: {
                            type: 'string'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        territories: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['territories']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterAchievementImageSchema = {
    type: 'object',
    title: 'GameCenterAchievementImage',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterAchievementImages']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                imageAsset: {
                    '$ref': '#/components/schemas/ImageAsset'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                assetDeliveryState: {
                    '$ref': '#/components/schemas/AppMediaAssetState'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                gameCenterAchievementLocalization: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterAchievementLocalizations']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterAchievementImageResponseSchema = {
    type: 'object',
    title: 'GameCenterAchievementImageResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterAchievementImage'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterAchievementLocalization'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterAchievementImageCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterAchievementImageCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterAchievementImages']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        }
                    },
                    required: ['fileName', 'fileSize']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        gameCenterAchievementLocalization: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterAchievementLocalizations']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['gameCenterAchievementLocalization']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterAchievementImageUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterAchievementImageUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterAchievementImages']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterAchievementLocalizationSchema = {
    type: 'object',
    title: 'GameCenterAchievementLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterAchievementLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                locale: {
                    type: 'string'
                },
                name: {
                    type: 'string'
                },
                beforeEarnedDescription: {
                    type: 'string'
                },
                afterEarnedDescription: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                gameCenterAchievement: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterAchievements']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                gameCenterAchievementImage: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterAchievementImages']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterAchievementLocalizationsResponseSchema = {
    type: 'object',
    title: 'GameCenterAchievementLocalizationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterAchievementLocalization'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterAchievement'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAchievementImage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterAchievementLocalizationResponseSchema = {
    type: 'object',
    title: 'GameCenterAchievementLocalizationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterAchievementLocalization'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterAchievement'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAchievementImage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterAchievementLocalizationCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterAchievementLocalizationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterAchievementLocalizations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        locale: {
                            type: 'string'
                        },
                        name: {
                            type: 'string'
                        },
                        beforeEarnedDescription: {
                            type: 'string'
                        },
                        afterEarnedDescription: {
                            type: 'string'
                        }
                    },
                    required: ['name', 'beforeEarnedDescription', 'locale', 'afterEarnedDescription']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        gameCenterAchievement: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterAchievements']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['gameCenterAchievement']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterAchievementLocalizationUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterAchievementLocalizationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterAchievementLocalizations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        beforeEarnedDescription: {
                            type: 'string'
                        },
                        afterEarnedDescription: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterAchievementReleaseSchema = {
    type: 'object',
    title: 'GameCenterAchievementRelease',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterAchievementReleases']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                live: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                gameCenterDetail: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterDetails']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                gameCenterAchievement: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterAchievements']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterAchievementReleasesResponseSchema = {
    type: 'object',
    title: 'GameCenterAchievementReleasesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterAchievementRelease'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterDetail'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAchievement'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterAchievementReleaseResponseSchema = {
    type: 'object',
    title: 'GameCenterAchievementReleaseResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterAchievementRelease'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterDetail'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAchievement'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterAchievementReleaseCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterAchievementReleaseCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterAchievementReleases']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        gameCenterDetail: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterDetails']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        gameCenterAchievement: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterAchievements']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['gameCenterDetail', 'gameCenterAchievement']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterAchievementSchema = {
    type: 'object',
    title: 'GameCenterAchievement',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterAchievements']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                referenceName: {
                    type: 'string'
                },
                vendorIdentifier: {
                    type: 'string'
                },
                points: {
                    type: 'integer'
                },
                showBeforeEarned: {
                    type: 'boolean'
                },
                repeatable: {
                    type: 'boolean'
                },
                archived: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                gameCenterDetail: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterDetails']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                gameCenterGroup: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterGroups']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                groupAchievement: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterAchievements']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    },
                    deprecated: true
                },
                localizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterAchievementLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                releases: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterAchievementReleases']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterAchievementsResponseSchema = {
    type: 'object',
    title: 'GameCenterAchievementsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterAchievement'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterDetail'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterGroup'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAchievement'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAchievementLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAchievementRelease'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterAchievementResponseSchema = {
    type: 'object',
    title: 'GameCenterAchievementResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterAchievement'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterDetail'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterGroup'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAchievement'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAchievementLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAchievementRelease'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterAchievementCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterAchievementCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterAchievements']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        referenceName: {
                            type: 'string'
                        },
                        vendorIdentifier: {
                            type: 'string'
                        },
                        points: {
                            type: 'integer'
                        },
                        showBeforeEarned: {
                            type: 'boolean'
                        },
                        repeatable: {
                            type: 'boolean'
                        }
                    },
                    required: ['vendorIdentifier', 'repeatable', 'showBeforeEarned', 'referenceName', 'points']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        gameCenterDetail: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterDetails']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        gameCenterGroup: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterGroups']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    }
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterAchievementUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterAchievementUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterAchievements']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        referenceName: {
                            type: 'string'
                        },
                        points: {
                            type: 'integer'
                        },
                        showBeforeEarned: {
                            type: 'boolean'
                        },
                        repeatable: {
                            type: 'boolean'
                        },
                        archived: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterAppVersionSchema = {
    type: 'object',
    title: 'GameCenterAppVersion',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterAppVersions']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                enabled: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                compatibilityVersions: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterAppVersions']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                appStoreVersion: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterAppVersionsResponseSchema = {
    type: 'object',
    title: 'GameCenterAppVersionsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterAppVersion'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterAppVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterAppVersionResponseSchema = {
    type: 'object',
    title: 'GameCenterAppVersionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterAppVersion'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterAppVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterAppVersionCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterAppVersionCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterAppVersions']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appStoreVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appStoreVersion']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterAppVersionUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterAppVersionUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterAppVersions']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        enabled: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterDetailSchema = {
    type: 'object',
    title: 'GameCenterDetail',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterDetails']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                arcadeEnabled: {
                    type: 'boolean'
                },
                challengeEnabled: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                app: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                gameCenterAppVersions: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterAppVersions']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                gameCenterGroup: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterGroups']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                gameCenterLeaderboards: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterLeaderboards']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                gameCenterLeaderboardSets: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterLeaderboardSets']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                gameCenterAchievements: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterAchievements']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                defaultLeaderboard: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterLeaderboards']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                defaultGroupLeaderboard: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterLeaderboards']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                achievementReleases: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterAchievementReleases']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                leaderboardReleases: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterLeaderboardReleases']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                leaderboardSetReleases: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterLeaderboardSetReleases']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterDetailsResponseSchema = {
    type: 'object',
    title: 'GameCenterDetailsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterDetail'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAppVersion'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterGroup'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboard'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSet'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAchievement'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAchievementRelease'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardRelease'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSetRelease'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterDetailResponseSchema = {
    type: 'object',
    title: 'GameCenterDetailResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterDetail'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAppVersion'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterGroup'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboard'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSet'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAchievement'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAchievementRelease'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardRelease'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSetRelease'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterDetailCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterDetailCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterDetails']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        challengeEnabled: {
                            type: 'boolean'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['app']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterDetailUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterDetailUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterDetails']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        challengeEnabled: {
                            type: 'boolean'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        gameCenterGroup: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterGroups']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        defaultLeaderboard: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterLeaderboards']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        defaultGroupLeaderboard: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterLeaderboards']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterEnabledVersionSchema = {
    type: 'object',
    title: 'GameCenterEnabledVersion',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterEnabledVersions']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                platform: {
                    '$ref': '#/components/schemas/Platform'
                },
                versionString: {
                    type: 'string'
                },
                iconAsset: {
                    '$ref': '#/components/schemas/ImageAsset'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                compatibleVersions: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterEnabledVersions']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                app: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type'],
    deprecated: true
} as const;

export const GameCenterEnabledVersionsResponseSchema = {
    type: 'object',
    title: 'GameCenterEnabledVersionsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterEnabledVersion'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterEnabledVersion'
                    },
                    {
                        '$ref': '#/components/schemas/App'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links'],
    deprecated: true
} as const;

export const GameCenterGroupSchema = {
    type: 'object',
    title: 'GameCenterGroup',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterGroups']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                referenceName: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                gameCenterDetails: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterDetails']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                gameCenterLeaderboards: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterLeaderboards']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                gameCenterLeaderboardSets: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterLeaderboardSets']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                gameCenterAchievements: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterAchievements']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterGroupsResponseSchema = {
    type: 'object',
    title: 'GameCenterGroupsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterGroup'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterDetail'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboard'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSet'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAchievement'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterGroupResponseSchema = {
    type: 'object',
    title: 'GameCenterGroupResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterGroup'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterDetail'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboard'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSet'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterAchievement'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterGroupCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterGroupCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterGroups']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        referenceName: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['type']
        }
    },
    required: ['data']
} as const;

export const GameCenterGroupUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterGroupUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterGroups']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        referenceName: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardEntrySubmissionSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardEntrySubmission',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterLeaderboardEntrySubmissions']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                bundleId: {
                    type: 'string'
                },
                challengeIds: {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                context: {
                    type: 'string',
                    format: 'number'
                },
                scopedPlayerId: {
                    type: 'string'
                },
                score: {
                    type: 'string',
                    format: 'number'
                },
                submittedDate: {
                    type: 'string',
                    format: 'date-time'
                },
                vendorIdentifier: {
                    type: 'string'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterLeaderboardEntrySubmissionResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardEntrySubmissionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterLeaderboardEntrySubmission'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardEntrySubmissionCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardEntrySubmissionCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardEntrySubmissions']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        bundleId: {
                            type: 'string'
                        },
                        challengeIds: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        context: {
                            type: 'string',
                            format: 'number'
                        },
                        scopedPlayerId: {
                            type: 'string'
                        },
                        score: {
                            type: 'string',
                            format: 'number'
                        },
                        submittedDate: {
                            type: 'string',
                            format: 'date-time'
                        },
                        vendorIdentifier: {
                            type: 'string'
                        }
                    },
                    required: ['vendorIdentifier', 'score', 'bundleId', 'scopedPlayerId']
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardImageSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardImage',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterLeaderboardImages']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                imageAsset: {
                    '$ref': '#/components/schemas/ImageAsset'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                assetDeliveryState: {
                    '$ref': '#/components/schemas/AppMediaAssetState'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                gameCenterLeaderboardLocalization: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterLeaderboardLocalizations']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterLeaderboardImageResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardImageResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterLeaderboardImage'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterLeaderboardLocalization'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardImageCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardImageCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardImages']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        }
                    },
                    required: ['fileName', 'fileSize']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        gameCenterLeaderboardLocalization: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterLeaderboardLocalizations']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['gameCenterLeaderboardLocalization']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardImageUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardImageUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardImages']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardLocalizationSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterLeaderboardLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                locale: {
                    type: 'string'
                },
                name: {
                    type: 'string'
                },
                formatterOverride: {
                    '$ref': '#/components/schemas/GameCenterLeaderboardFormatter'
                },
                formatterSuffix: {
                    type: 'string'
                },
                formatterSuffixSingular: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                gameCenterLeaderboard: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterLeaderboards']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                gameCenterLeaderboardImage: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterLeaderboardImages']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterLeaderboardLocalizationsResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardLocalizationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterLeaderboardLocalization'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboard'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardImage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardLocalizationResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardLocalizationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterLeaderboardLocalization'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboard'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardImage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardLocalizationCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardLocalizationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardLocalizations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        locale: {
                            type: 'string'
                        },
                        name: {
                            type: 'string'
                        },
                        formatterOverride: {
                            '$ref': '#/components/schemas/GameCenterLeaderboardFormatter'
                        },
                        formatterSuffix: {
                            type: 'string'
                        },
                        formatterSuffixSingular: {
                            type: 'string'
                        }
                    },
                    required: ['name', 'locale']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        gameCenterLeaderboard: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterLeaderboards']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['gameCenterLeaderboard']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardLocalizationUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardLocalizationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardLocalizations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        formatterOverride: {
                            '$ref': '#/components/schemas/GameCenterLeaderboardFormatter'
                        },
                        formatterSuffix: {
                            type: 'string'
                        },
                        formatterSuffixSingular: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardReleaseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardRelease',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterLeaderboardReleases']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                live: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                gameCenterDetail: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterDetails']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                gameCenterLeaderboard: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterLeaderboards']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterLeaderboardReleasesResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardReleasesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterLeaderboardRelease'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterDetail'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboard'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardReleaseResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardReleaseResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterLeaderboardRelease'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterDetail'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboard'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardReleaseCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardReleaseCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardReleases']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        gameCenterDetail: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterDetails']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        gameCenterLeaderboard: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterLeaderboards']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['gameCenterDetail', 'gameCenterLeaderboard']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardSetImageSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetImage',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterLeaderboardSetImages']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                imageAsset: {
                    '$ref': '#/components/schemas/ImageAsset'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                assetDeliveryState: {
                    '$ref': '#/components/schemas/AppMediaAssetState'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                gameCenterLeaderboardSetLocalization: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterLeaderboardSetLocalizations']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterLeaderboardSetImageResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetImageResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterLeaderboardSetImage'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterLeaderboardSetLocalization'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardSetImageCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetImageCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardSetImages']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        }
                    },
                    required: ['fileName', 'fileSize']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        gameCenterLeaderboardSetLocalization: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterLeaderboardSetLocalizations']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['gameCenterLeaderboardSetLocalization']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardSetImageUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetImageUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardSetImages']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardSetLocalizationSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterLeaderboardSetLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                locale: {
                    type: 'string'
                },
                name: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                gameCenterLeaderboardSet: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterLeaderboardSets']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                gameCenterLeaderboardSetImage: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterLeaderboardSetImages']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterLeaderboardSetLocalizationsResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetLocalizationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterLeaderboardSetLocalization'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSet'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSetImage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardSetLocalizationResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetLocalizationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterLeaderboardSetLocalization'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSet'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSetImage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardSetLocalizationCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetLocalizationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardSetLocalizations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        locale: {
                            type: 'string'
                        },
                        name: {
                            type: 'string'
                        }
                    },
                    required: ['name', 'locale']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        gameCenterLeaderboardSet: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterLeaderboardSets']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['gameCenterLeaderboardSet']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardSetLocalizationUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetLocalizationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardSetLocalizations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardSetMemberLocalizationSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetMemberLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterLeaderboardSetMemberLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                locale: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                gameCenterLeaderboardSet: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterLeaderboardSets']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                gameCenterLeaderboard: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterLeaderboards']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterLeaderboardSetMemberLocalizationsResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetMemberLocalizationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterLeaderboardSetMemberLocalization'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSet'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboard'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardSetMemberLocalizationResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetMemberLocalizationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterLeaderboardSetMemberLocalization'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSet'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboard'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardSetMemberLocalizationCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetMemberLocalizationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardSetMemberLocalizations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        locale: {
                            type: 'string'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        gameCenterLeaderboardSet: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterLeaderboardSets']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        gameCenterLeaderboard: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterLeaderboards']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['gameCenterLeaderboard', 'gameCenterLeaderboardSet']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardSetMemberLocalizationUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetMemberLocalizationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardSetMemberLocalizations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardSetReleaseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetRelease',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterLeaderboardSetReleases']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                live: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                gameCenterDetail: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterDetails']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                gameCenterLeaderboardSet: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterLeaderboardSets']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterLeaderboardSetReleasesResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetReleasesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterLeaderboardSetRelease'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterDetail'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSet'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardSetReleaseResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetReleaseResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterLeaderboardSetRelease'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterDetail'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSet'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardSetReleaseCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetReleaseCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardSetReleases']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        gameCenterDetail: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterDetails']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        gameCenterLeaderboardSet: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterLeaderboardSets']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['gameCenterDetail', 'gameCenterLeaderboardSet']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardSetSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSet',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterLeaderboardSets']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                referenceName: {
                    type: 'string'
                },
                vendorIdentifier: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                gameCenterDetail: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterDetails']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                gameCenterGroup: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterGroups']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                groupLeaderboardSet: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterLeaderboardSets']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    },
                    deprecated: true
                },
                localizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterLeaderboardSetLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                gameCenterLeaderboards: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterLeaderboards']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                releases: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterLeaderboardSetReleases']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterLeaderboardSetsResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterLeaderboardSet'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterDetail'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterGroup'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSet'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSetLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboard'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSetRelease'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardSetResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterLeaderboardSet'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterDetail'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterGroup'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSet'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSetLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboard'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSetRelease'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardSetCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardSets']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        referenceName: {
                            type: 'string'
                        },
                        vendorIdentifier: {
                            type: 'string'
                        }
                    },
                    required: ['vendorIdentifier', 'referenceName']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        gameCenterDetail: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterDetails']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        gameCenterGroup: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterGroups']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        gameCenterLeaderboards: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['gameCenterLeaderboards']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        }
                    }
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardSetUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardSetUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardSets']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        referenceName: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardSchema = {
    type: 'object',
    title: 'GameCenterLeaderboard',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterLeaderboards']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                defaultFormatter: {
                    '$ref': '#/components/schemas/GameCenterLeaderboardFormatter'
                },
                referenceName: {
                    type: 'string'
                },
                vendorIdentifier: {
                    type: 'string'
                },
                submissionType: {
                    type: 'string',
                    enum: ['BEST_SCORE', 'MOST_RECENT_SCORE']
                },
                scoreSortType: {
                    type: 'string',
                    enum: ['ASC', 'DESC']
                },
                scoreRangeStart: {
                    type: 'string',
                    format: 'number'
                },
                scoreRangeEnd: {
                    type: 'string',
                    format: 'number'
                },
                recurrenceStartDate: {
                    type: 'string',
                    format: 'date-time'
                },
                recurrenceDuration: {
                    type: 'string',
                    format: 'duration'
                },
                recurrenceRule: {
                    type: 'string'
                },
                archived: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                gameCenterDetail: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterDetails']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                gameCenterGroup: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterGroups']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                groupLeaderboard: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterLeaderboards']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    },
                    deprecated: true
                },
                gameCenterLeaderboardSets: {
                    type: 'object',
                    properties: {
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterLeaderboardSets']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                localizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterLeaderboardLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                releases: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterLeaderboardReleases']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterLeaderboardsResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterLeaderboard'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterDetail'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterGroup'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboard'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSet'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardRelease'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardResponseSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterLeaderboard'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterDetail'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterGroup'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboard'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardSet'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterLeaderboardRelease'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboards']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        defaultFormatter: {
                            '$ref': '#/components/schemas/GameCenterLeaderboardFormatter'
                        },
                        referenceName: {
                            type: 'string'
                        },
                        vendorIdentifier: {
                            type: 'string'
                        },
                        submissionType: {
                            type: 'string',
                            enum: ['BEST_SCORE', 'MOST_RECENT_SCORE']
                        },
                        scoreSortType: {
                            type: 'string',
                            enum: ['ASC', 'DESC']
                        },
                        scoreRangeStart: {
                            type: 'string',
                            format: 'number'
                        },
                        scoreRangeEnd: {
                            type: 'string',
                            format: 'number'
                        },
                        recurrenceStartDate: {
                            type: 'string',
                            format: 'date-time'
                        },
                        recurrenceDuration: {
                            type: 'string',
                            format: 'duration'
                        },
                        recurrenceRule: {
                            type: 'string'
                        }
                    },
                    required: ['vendorIdentifier', 'submissionType', 'defaultFormatter', 'scoreSortType', 'referenceName']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        gameCenterDetail: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterDetails']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        gameCenterGroup: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterGroups']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        gameCenterLeaderboardSets: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['gameCenterLeaderboardSets']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        }
                    }
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterLeaderboardUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboards']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        defaultFormatter: {
                            '$ref': '#/components/schemas/GameCenterLeaderboardFormatter'
                        },
                        referenceName: {
                            type: 'string'
                        },
                        submissionType: {
                            type: 'string',
                            enum: ['BEST_SCORE', 'MOST_RECENT_SCORE']
                        },
                        scoreSortType: {
                            type: 'string',
                            enum: ['ASC', 'DESC']
                        },
                        scoreRangeStart: {
                            type: 'string',
                            format: 'number'
                        },
                        scoreRangeEnd: {
                            type: 'string',
                            format: 'number'
                        },
                        recurrenceStartDate: {
                            type: 'string',
                            format: 'date-time'
                        },
                        recurrenceDuration: {
                            type: 'string',
                            format: 'duration'
                        },
                        recurrenceRule: {
                            type: 'string'
                        },
                        archived: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterMatchmakingQueueSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingQueue',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterMatchmakingQueues']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                referenceName: {
                    type: 'string'
                },
                classicMatchmakingBundleIds: {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                ruleSet: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterMatchmakingRuleSets']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                experimentRuleSet: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['gameCenterMatchmakingRuleSets']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterMatchmakingQueuesResponseSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingQueuesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterMatchmakingQueue'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterMatchmakingRuleSet'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterMatchmakingQueueResponseSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingQueueResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterMatchmakingQueue'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterMatchmakingRuleSet'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterMatchmakingQueueCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingQueueCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterMatchmakingQueues']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        referenceName: {
                            type: 'string'
                        },
                        classicMatchmakingBundleIds: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        }
                    },
                    required: ['referenceName']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        ruleSet: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterMatchmakingRuleSets']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        experimentRuleSet: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterMatchmakingRuleSets']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    },
                    required: ['ruleSet']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterMatchmakingQueueUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingQueueUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterMatchmakingQueues']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        classicMatchmakingBundleIds: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        ruleSet: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterMatchmakingRuleSets']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        experimentRuleSet: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterMatchmakingRuleSets']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterMatchmakingRuleSetTestSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingRuleSetTest',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterMatchmakingRuleSetTests']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                matchmakingResults: {
                    type: 'array',
                    items: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                requestName: {
                                    type: 'string'
                                },
                                teamAssignments: {
                                    type: 'array',
                                    items: {
                                        '$ref': '#/components/schemas/GameCenterMatchmakingTeamAssignment'
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterMatchmakingRuleSetTestResponseSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingRuleSetTestResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterMatchmakingRuleSetTest'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterMatchmakingRuleSetTestCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingRuleSetTestCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterMatchmakingRuleSetTests']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        matchmakingRuleSet: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterMatchmakingRuleSets']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        matchmakingRequests: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['gameCenterMatchmakingTestRequests']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['matchmakingRuleSet', 'matchmakingRequests']
                }
            },
            required: ['relationships', 'type']
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterMatchmakingTestPlayerPropertyInlineCreate'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterMatchmakingTestRequestInlineCreate'
                    }
                ]
            }
        }
    },
    required: ['data']
} as const;

export const GameCenterMatchmakingRuleSetSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingRuleSet',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterMatchmakingRuleSets']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                referenceName: {
                    type: 'string'
                },
                ruleLanguageVersion: {
                    type: 'integer'
                },
                minPlayers: {
                    type: 'integer'
                },
                maxPlayers: {
                    type: 'integer'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                teams: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterMatchmakingTeams']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                rules: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterMatchmakingRules']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                matchmakingQueues: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterMatchmakingQueues']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterMatchmakingRuleSetsResponseSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingRuleSetsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterMatchmakingRuleSet'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterMatchmakingTeam'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterMatchmakingRule'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterMatchmakingQueue'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterMatchmakingRuleSetResponseSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingRuleSetResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterMatchmakingRuleSet'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/GameCenterMatchmakingTeam'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterMatchmakingRule'
                    },
                    {
                        '$ref': '#/components/schemas/GameCenterMatchmakingQueue'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterMatchmakingRuleSetCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingRuleSetCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterMatchmakingRuleSets']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        referenceName: {
                            type: 'string'
                        },
                        ruleLanguageVersion: {
                            type: 'integer'
                        },
                        minPlayers: {
                            type: 'integer'
                        },
                        maxPlayers: {
                            type: 'integer'
                        }
                    },
                    required: ['maxPlayers', 'minPlayers', 'referenceName', 'ruleLanguageVersion']
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterMatchmakingRuleSetUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingRuleSetUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterMatchmakingRuleSets']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        minPlayers: {
                            type: 'integer'
                        },
                        maxPlayers: {
                            type: 'integer'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterMatchmakingRuleSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingRule',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterMatchmakingRules']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                referenceName: {
                    type: 'string'
                },
                description: {
                    type: 'string'
                },
                type: {
                    type: 'string',
                    enum: ['COMPATIBLE', 'DISTANCE', 'MATCH', 'TEAM']
                },
                expression: {
                    type: 'string'
                },
                weight: {
                    type: 'number'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterMatchmakingRulesResponseSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingRulesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterMatchmakingRule'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterMatchmakingRuleResponseSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingRuleResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterMatchmakingRule'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterMatchmakingRuleCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingRuleCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterMatchmakingRules']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        referenceName: {
                            type: 'string'
                        },
                        description: {
                            type: 'string'
                        },
                        type: {
                            type: 'string',
                            enum: ['COMPATIBLE', 'DISTANCE', 'MATCH', 'TEAM']
                        },
                        expression: {
                            type: 'string'
                        },
                        weight: {
                            type: 'number'
                        }
                    },
                    required: ['expression', 'description', 'type', 'referenceName']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        ruleSet: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterMatchmakingRuleSets']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['ruleSet']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterMatchmakingRuleUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingRuleUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterMatchmakingRules']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        description: {
                            type: 'string'
                        },
                        expression: {
                            type: 'string'
                        },
                        weight: {
                            type: 'number'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterMatchmakingTeamSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingTeam',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterMatchmakingTeams']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                referenceName: {
                    type: 'string'
                },
                minPlayers: {
                    type: 'integer'
                },
                maxPlayers: {
                    type: 'integer'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterMatchmakingTeamsResponseSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingTeamsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GameCenterMatchmakingTeam'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterMatchmakingTeamResponseSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingTeamResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterMatchmakingTeam'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterMatchmakingTeamCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingTeamCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterMatchmakingTeams']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        referenceName: {
                            type: 'string'
                        },
                        minPlayers: {
                            type: 'integer'
                        },
                        maxPlayers: {
                            type: 'integer'
                        }
                    },
                    required: ['maxPlayers', 'minPlayers', 'referenceName']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        ruleSet: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['gameCenterMatchmakingRuleSets']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['ruleSet']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterMatchmakingTeamUpdateRequestSchema = {
    type: 'object',
    title: 'GameCenterMatchmakingTeamUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterMatchmakingTeams']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        minPlayers: {
                            type: 'integer'
                        },
                        maxPlayers: {
                            type: 'integer'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const GameCenterMatchmakingTestPlayerPropertyInlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterMatchmakingTestPlayerProperties']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                playerId: {
                    type: 'string'
                },
                properties: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Property'
                    }
                }
            },
            required: ['playerId']
        }
    },
    required: ['attributes', 'type']
} as const;

export const GameCenterMatchmakingTestRequestInlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterMatchmakingTestRequests']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                requestName: {
                    type: 'string'
                },
                secondsInQueue: {
                    type: 'integer'
                },
                locale: {
                    type: 'string',
                    enum: ['AR-SA', 'CA-ES', 'CS-CZ', 'DA-DK', 'DE-DE', 'EL-GR', 'EN-AU', 'EN-GB', 'EN-US', 'EN-KY', 'ES-ES', 'ES-MX', 'FI-FI', 'FR-CA', 'FR-FR', 'HI-IN', 'HR-HR', 'HU-HU', 'ID-ID', 'IT-IT', 'IW-IL', 'JA-JP', 'KO-KR', 'MS-MY', 'NL-NL', 'NO-NO', 'PL-PL', 'PT-BR', 'PT-PT', 'RO-RO', 'RU-RU', 'SK-SK', 'SV-SE', 'TH-TH', 'TR-TR', 'UK-UA', 'ZH-CN', 'ZH-TW', 'ZH-HK']
                },
                location: {
                    '$ref': '#/components/schemas/Location'
                },
                minPlayers: {
                    type: 'integer'
                },
                maxPlayers: {
                    type: 'integer'
                },
                playerCount: {
                    type: 'integer'
                },
                bundleId: {
                    type: 'string'
                },
                platform: {
                    '$ref': '#/components/schemas/Platform'
                },
                appVersion: {
                    type: 'string'
                }
            },
            required: ['requestName', 'appVersion', 'secondsInQueue', 'bundleId', 'platform']
        },
        relationships: {
            type: 'object',
            properties: {
                matchmakingPlayerProperties: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['gameCenterMatchmakingTestPlayerProperties']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        }
    },
    required: ['attributes', 'type']
} as const;

export const GameCenterPlayerAchievementSubmissionSchema = {
    type: 'object',
    title: 'GameCenterPlayerAchievementSubmission',
    properties: {
        type: {
            type: 'string',
            enum: ['gameCenterPlayerAchievementSubmissions']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                bundleId: {
                    type: 'string'
                },
                challengeIds: {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                percentageAchieved: {
                    type: 'integer'
                },
                scopedPlayerId: {
                    type: 'string'
                },
                submittedDate: {
                    type: 'string',
                    format: 'date-time'
                },
                vendorIdentifier: {
                    type: 'string'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const GameCenterPlayerAchievementSubmissionResponseSchema = {
    type: 'object',
    title: 'GameCenterPlayerAchievementSubmissionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/GameCenterPlayerAchievementSubmission'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterPlayerAchievementSubmissionCreateRequestSchema = {
    type: 'object',
    title: 'GameCenterPlayerAchievementSubmissionCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterPlayerAchievementSubmissions']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        bundleId: {
                            type: 'string'
                        },
                        challengeIds: {
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        percentageAchieved: {
                            type: 'integer'
                        },
                        scopedPlayerId: {
                            type: 'string'
                        },
                        submittedDate: {
                            type: 'string',
                            format: 'date-time'
                        },
                        vendorIdentifier: {
                            type: 'string'
                        }
                    },
                    required: ['vendorIdentifier', 'percentageAchieved', 'bundleId', 'scopedPlayerId']
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const InAppPurchaseAppStoreReviewScreenshotSchema = {
    type: 'object',
    title: 'InAppPurchaseAppStoreReviewScreenshot',
    properties: {
        type: {
            type: 'string',
            enum: ['inAppPurchaseAppStoreReviewScreenshots']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                sourceFileChecksum: {
                    type: 'string'
                },
                imageAsset: {
                    '$ref': '#/components/schemas/ImageAsset'
                },
                assetToken: {
                    type: 'string'
                },
                assetType: {
                    type: 'string'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                assetDeliveryState: {
                    '$ref': '#/components/schemas/AppMediaAssetState'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                inAppPurchaseV2: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['inAppPurchases']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const InAppPurchaseAppStoreReviewScreenshotResponseSchema = {
    type: 'object',
    title: 'InAppPurchaseAppStoreReviewScreenshotResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/InAppPurchaseAppStoreReviewScreenshot'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InAppPurchaseV2'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const InAppPurchaseAppStoreReviewScreenshotCreateRequestSchema = {
    type: 'object',
    title: 'InAppPurchaseAppStoreReviewScreenshotCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['inAppPurchaseAppStoreReviewScreenshots']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        }
                    },
                    required: ['fileName', 'fileSize']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        inAppPurchaseV2: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['inAppPurchases']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['inAppPurchaseV2']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const InAppPurchaseAppStoreReviewScreenshotUpdateRequestSchema = {
    type: 'object',
    title: 'InAppPurchaseAppStoreReviewScreenshotUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['inAppPurchaseAppStoreReviewScreenshots']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        sourceFileChecksum: {
                            type: 'string'
                        },
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const InAppPurchaseAvailabilitySchema = {
    type: 'object',
    title: 'InAppPurchaseAvailability',
    properties: {
        type: {
            type: 'string',
            enum: ['inAppPurchaseAvailabilities']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                availableInNewTerritories: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                availableTerritories: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['territories']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const InAppPurchaseAvailabilityResponseSchema = {
    type: 'object',
    title: 'InAppPurchaseAvailabilityResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/InAppPurchaseAvailability'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Territory'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const InAppPurchaseAvailabilityCreateRequestSchema = {
    type: 'object',
    title: 'InAppPurchaseAvailabilityCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['inAppPurchaseAvailabilities']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        availableInNewTerritories: {
                            type: 'boolean'
                        }
                    },
                    required: ['availableInNewTerritories']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        inAppPurchase: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['inAppPurchases']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        availableTerritories: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['territories']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['inAppPurchase', 'availableTerritories']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const InAppPurchaseContentSchema = {
    type: 'object',
    title: 'InAppPurchaseContent',
    properties: {
        type: {
            type: 'string',
            enum: ['inAppPurchaseContents']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileName: {
                    type: 'string'
                },
                fileSize: {
                    type: 'integer'
                },
                url: {
                    type: 'string',
                    format: 'uri'
                },
                lastModifiedDate: {
                    type: 'string',
                    format: 'date-time'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                inAppPurchaseV2: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['inAppPurchases']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const InAppPurchaseContentResponseSchema = {
    type: 'object',
    title: 'InAppPurchaseContentResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/InAppPurchaseContent'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InAppPurchaseV2'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const InAppPurchaseImageSchema = {
    type: 'object',
    title: 'InAppPurchaseImage',
    properties: {
        type: {
            type: 'string',
            enum: ['inAppPurchaseImages']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                sourceFileChecksum: {
                    type: 'string'
                },
                assetToken: {
                    type: 'string'
                },
                imageAsset: {
                    '$ref': '#/components/schemas/ImageAsset'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                state: {
                    type: 'string',
                    enum: ['AWAITING_UPLOAD', 'UPLOAD_COMPLETE', 'FAILED', 'PREPARE_FOR_SUBMISSION', 'WAITING_FOR_REVIEW', 'APPROVED', 'REJECTED']
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                inAppPurchase: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['inAppPurchases']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const InAppPurchaseImagesResponseSchema = {
    type: 'object',
    title: 'InAppPurchaseImagesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InAppPurchaseImage'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InAppPurchaseV2'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const InAppPurchaseImageResponseSchema = {
    type: 'object',
    title: 'InAppPurchaseImageResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/InAppPurchaseImage'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InAppPurchaseV2'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const InAppPurchaseImageCreateRequestSchema = {
    type: 'object',
    title: 'InAppPurchaseImageCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['inAppPurchaseImages']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        }
                    },
                    required: ['fileName', 'fileSize']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        inAppPurchase: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['inAppPurchases']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['inAppPurchase']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const InAppPurchaseImageUpdateRequestSchema = {
    type: 'object',
    title: 'InAppPurchaseImageUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['inAppPurchaseImages']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        sourceFileChecksum: {
                            type: 'string'
                        },
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const InAppPurchaseLocalizationSchema = {
    type: 'object',
    title: 'InAppPurchaseLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['inAppPurchaseLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                locale: {
                    type: 'string'
                },
                description: {
                    type: 'string'
                },
                state: {
                    type: 'string',
                    enum: ['PREPARE_FOR_SUBMISSION', 'WAITING_FOR_REVIEW', 'APPROVED', 'REJECTED']
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                inAppPurchaseV2: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['inAppPurchases']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const InAppPurchaseLocalizationsResponseSchema = {
    type: 'object',
    title: 'InAppPurchaseLocalizationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InAppPurchaseLocalization'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InAppPurchaseV2'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const InAppPurchaseLocalizationResponseSchema = {
    type: 'object',
    title: 'InAppPurchaseLocalizationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/InAppPurchaseLocalization'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InAppPurchaseV2'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const InAppPurchaseLocalizationCreateRequestSchema = {
    type: 'object',
    title: 'InAppPurchaseLocalizationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['inAppPurchaseLocalizations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        locale: {
                            type: 'string'
                        },
                        description: {
                            type: 'string'
                        }
                    },
                    required: ['name', 'locale']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        inAppPurchaseV2: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['inAppPurchases']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['inAppPurchaseV2']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const InAppPurchaseLocalizationUpdateRequestSchema = {
    type: 'object',
    title: 'InAppPurchaseLocalizationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['inAppPurchaseLocalizations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        description: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const InAppPurchasePricePointSchema = {
    type: 'object',
    title: 'InAppPurchasePricePoint',
    properties: {
        type: {
            type: 'string',
            enum: ['inAppPurchasePricePoints']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                customerPrice: {
                    type: 'string'
                },
                proceeds: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                territory: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                equalizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const InAppPurchasePricePointsResponseSchema = {
    type: 'object',
    title: 'InAppPurchasePricePointsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InAppPurchasePricePoint'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Territory'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const InAppPurchasePriceScheduleSchema = {
    type: 'object',
    title: 'InAppPurchasePriceSchedule',
    properties: {
        type: {
            type: 'string',
            enum: ['inAppPurchasePriceSchedules']
        },
        id: {
            type: 'string'
        },
        relationships: {
            type: 'object',
            properties: {
                baseTerritory: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                manualPrices: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['inAppPurchasePrices']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                automaticPrices: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['inAppPurchasePrices']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const InAppPurchasePriceScheduleResponseSchema = {
    type: 'object',
    title: 'InAppPurchasePriceScheduleResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/InAppPurchasePriceSchedule'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Territory'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchasePrice'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const InAppPurchasePriceScheduleCreateRequestSchema = {
    type: 'object',
    title: 'InAppPurchasePriceScheduleCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['inAppPurchasePriceSchedules']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        inAppPurchase: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['inAppPurchases']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        baseTerritory: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['territories']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        manualPrices: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['inAppPurchasePrices']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['inAppPurchase', 'manualPrices', 'baseTerritory']
                }
            },
            required: ['relationships', 'type']
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/InAppPurchasePriceInlineCreate'
                    },
                    {
                        '$ref': '#/components/schemas/TerritoryInlineCreate'
                    }
                ]
            }
        }
    },
    required: ['data']
} as const;

export const InAppPurchasePriceSchema = {
    type: 'object',
    title: 'InAppPurchasePrice',
    properties: {
        type: {
            type: 'string',
            enum: ['inAppPurchasePrices']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                startDate: {
                    type: 'string',
                    format: 'date'
                },
                endDate: {
                    type: 'string',
                    format: 'date'
                },
                manual: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                inAppPurchasePricePoint: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['inAppPurchasePricePoints']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                territory: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const InAppPurchasePriceInlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['inAppPurchasePrices']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                startDate: {
                    type: 'string',
                    format: 'date'
                },
                endDate: {
                    type: 'string',
                    format: 'date'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                inAppPurchaseV2: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['inAppPurchases']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                inAppPurchasePricePoint: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['inAppPurchasePricePoints']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        }
    },
    required: ['type']
} as const;

export const InAppPurchasePricesResponseSchema = {
    type: 'object',
    title: 'InAppPurchasePricesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InAppPurchasePrice'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/InAppPurchasePricePoint'
                    },
                    {
                        '$ref': '#/components/schemas/Territory'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const InAppPurchaseSubmissionSchema = {
    type: 'object',
    title: 'InAppPurchaseSubmission',
    properties: {
        type: {
            type: 'string',
            enum: ['inAppPurchaseSubmissions']
        },
        id: {
            type: 'string'
        },
        relationships: {
            type: 'object',
            properties: {
                inAppPurchaseV2: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['inAppPurchases']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const InAppPurchaseSubmissionResponseSchema = {
    type: 'object',
    title: 'InAppPurchaseSubmissionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/InAppPurchaseSubmission'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InAppPurchaseV2'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const InAppPurchaseSubmissionCreateRequestSchema = {
    type: 'object',
    title: 'InAppPurchaseSubmissionCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['inAppPurchaseSubmissions']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        inAppPurchaseV2: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['inAppPurchases']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['inAppPurchaseV2']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const InAppPurchaseSchema = {
    type: 'object',
    title: 'InAppPurchase',
    properties: {
        type: {
            type: 'string',
            enum: ['inAppPurchases']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                referenceName: {
                    type: 'string'
                },
                productId: {
                    type: 'string'
                },
                inAppPurchaseType: {
                    type: 'string',
                    enum: ['AUTOMATICALLY_RENEWABLE_SUBSCRIPTION', 'NON_CONSUMABLE', 'CONSUMABLE', 'NON_RENEWING_SUBSCRIPTION', 'FREE_SUBSCRIPTION']
                },
                state: {
                    type: 'string',
                    enum: ['CREATED', 'DEVELOPER_SIGNED_OFF', 'DEVELOPER_ACTION_NEEDED', 'DELETION_IN_PROGRESS', 'APPROVED', 'DELETED', 'REMOVED_FROM_SALE', 'DEVELOPER_REMOVED_FROM_SALE', 'WAITING_FOR_UPLOAD', 'PROCESSING_CONTENT', 'REPLACED', 'REJECTED', 'WAITING_FOR_SCREENSHOT', 'PREPARE_FOR_SUBMISSION', 'MISSING_METADATA', 'READY_TO_SUBMIT', 'WAITING_FOR_REVIEW', 'IN_REVIEW', 'PENDING_DEVELOPER_RELEASE']
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                apps: {
                    type: 'object',
                    properties: {
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['apps']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type'],
    deprecated: true
} as const;

export const InAppPurchasesResponseSchema = {
    type: 'object',
    title: 'InAppPurchasesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InAppPurchase'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/App'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links'],
    deprecated: true
} as const;

export const InAppPurchaseResponseSchema = {
    type: 'object',
    title: 'InAppPurchaseResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/InAppPurchase'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/App'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links'],
    deprecated: true
} as const;

export const InAppPurchaseV2Schema = {
    type: 'object',
    title: 'InAppPurchaseV2',
    properties: {
        type: {
            type: 'string',
            enum: ['inAppPurchases']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                productId: {
                    type: 'string'
                },
                inAppPurchaseType: {
                    '$ref': '#/components/schemas/InAppPurchaseType'
                },
                state: {
                    '$ref': '#/components/schemas/InAppPurchaseState'
                },
                reviewNote: {
                    type: 'string'
                },
                familySharable: {
                    type: 'boolean'
                },
                contentHosting: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                inAppPurchaseLocalizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['inAppPurchaseLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                pricePoints: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['inAppPurchasePricePoints']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                content: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['inAppPurchaseContents']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appStoreReviewScreenshot: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['inAppPurchaseAppStoreReviewScreenshots']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                promotedPurchase: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['promotedPurchases']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                iapPriceSchedule: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['inAppPurchasePriceSchedules']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                inAppPurchaseAvailability: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['inAppPurchaseAvailabilities']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                images: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['inAppPurchaseImages']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const InAppPurchasesV2ResponseSchema = {
    type: 'object',
    title: 'InAppPurchasesV2Response',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InAppPurchaseV2'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/InAppPurchaseLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchasePricePoint'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchaseContent'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchaseAppStoreReviewScreenshot'
                    },
                    {
                        '$ref': '#/components/schemas/PromotedPurchase'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchasePriceSchedule'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchaseAvailability'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchaseImage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const InAppPurchaseV2ResponseSchema = {
    type: 'object',
    title: 'InAppPurchaseV2Response',
    properties: {
        data: {
            '$ref': '#/components/schemas/InAppPurchaseV2'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/InAppPurchaseLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchasePricePoint'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchaseContent'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchaseAppStoreReviewScreenshot'
                    },
                    {
                        '$ref': '#/components/schemas/PromotedPurchase'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchasePriceSchedule'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchaseAvailability'
                    },
                    {
                        '$ref': '#/components/schemas/InAppPurchaseImage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const InAppPurchaseV2CreateRequestSchema = {
    type: 'object',
    title: 'InAppPurchaseV2CreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['inAppPurchases']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        productId: {
                            type: 'string'
                        },
                        inAppPurchaseType: {
                            '$ref': '#/components/schemas/InAppPurchaseType'
                        },
                        reviewNote: {
                            type: 'string'
                        },
                        familySharable: {
                            type: 'boolean'
                        }
                    },
                    required: ['productId', 'name', 'inAppPurchaseType']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['app']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const InAppPurchaseV2UpdateRequestSchema = {
    type: 'object',
    title: 'InAppPurchaseV2UpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['inAppPurchases']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        reviewNote: {
                            type: 'string'
                        },
                        familySharable: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const MarketplaceDomainSchema = {
    type: 'object',
    title: 'MarketplaceDomain',
    properties: {
        type: {
            type: 'string',
            enum: ['marketplaceDomains']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                domain: {
                    type: 'string'
                },
                referenceName: {
                    type: 'string'
                },
                createdDate: {
                    type: 'string',
                    format: 'date-time'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type'],
    deprecated: true
} as const;

export const MarketplaceDomainsResponseSchema = {
    type: 'object',
    title: 'MarketplaceDomainsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MarketplaceDomain'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links'],
    deprecated: true
} as const;

export const MarketplaceDomainResponseSchema = {
    type: 'object',
    title: 'MarketplaceDomainResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/MarketplaceDomain'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links'],
    deprecated: true
} as const;

export const MarketplaceDomainCreateRequestSchema = {
    type: 'object',
    title: 'MarketplaceDomainCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['marketplaceDomains']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        domain: {
                            type: 'string'
                        },
                        referenceName: {
                            type: 'string'
                        }
                    },
                    required: ['domain', 'referenceName']
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data'],
    deprecated: true
} as const;

export const MarketplaceSearchDetailSchema = {
    type: 'object',
    title: 'MarketplaceSearchDetail',
    properties: {
        type: {
            type: 'string',
            enum: ['marketplaceSearchDetails']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                catalogUrl: {
                    type: 'string',
                    format: 'uri'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const MarketplaceSearchDetailResponseSchema = {
    type: 'object',
    title: 'MarketplaceSearchDetailResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/MarketplaceSearchDetail'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const MarketplaceSearchDetailCreateRequestSchema = {
    type: 'object',
    title: 'MarketplaceSearchDetailCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['marketplaceSearchDetails']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        catalogUrl: {
                            type: 'string',
                            format: 'uri'
                        }
                    },
                    required: ['catalogUrl']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['app']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const MarketplaceSearchDetailUpdateRequestSchema = {
    type: 'object',
    title: 'MarketplaceSearchDetailUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['marketplaceSearchDetails']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        catalogUrl: {
                            type: 'string',
                            format: 'uri'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const MarketplaceWebhookSchema = {
    type: 'object',
    title: 'MarketplaceWebhook',
    properties: {
        type: {
            type: 'string',
            enum: ['marketplaceWebhooks']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                endpointUrl: {
                    type: 'string',
                    format: 'uri'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const MarketplaceWebhooksResponseSchema = {
    type: 'object',
    title: 'MarketplaceWebhooksResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MarketplaceWebhook'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const MarketplaceWebhookResponseSchema = {
    type: 'object',
    title: 'MarketplaceWebhookResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/MarketplaceWebhook'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const MarketplaceWebhookCreateRequestSchema = {
    type: 'object',
    title: 'MarketplaceWebhookCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['marketplaceWebhooks']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        endpointUrl: {
                            type: 'string',
                            format: 'uri'
                        },
                        secret: {
                            type: 'string'
                        }
                    },
                    required: ['endpointUrl', 'secret']
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const MarketplaceWebhookUpdateRequestSchema = {
    type: 'object',
    title: 'MarketplaceWebhookUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['marketplaceWebhooks']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        endpointUrl: {
                            type: 'string',
                            format: 'uri'
                        },
                        secret: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const PerfPowerMetricSchema = {
    type: 'object',
    title: 'PerfPowerMetric',
    properties: {
        type: {
            type: 'string',
            enum: ['perfPowerMetrics']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                platform: {
                    type: 'string',
                    enum: ['IOS']
                },
                metricType: {
                    type: 'string',
                    enum: ['DISK', 'HANG', 'BATTERY', 'LAUNCH', 'MEMORY', 'ANIMATION', 'TERMINATION']
                },
                deviceType: {
                    type: 'string'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const PrereleaseVersionSchema = {
    type: 'object',
    title: 'PrereleaseVersion',
    properties: {
        type: {
            type: 'string',
            enum: ['preReleaseVersions']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                version: {
                    type: 'string'
                },
                platform: {
                    '$ref': '#/components/schemas/Platform'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                builds: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['builds']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                app: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const PreReleaseVersionsResponseSchema = {
    type: 'object',
    title: 'PreReleaseVersionsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PrereleaseVersion'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Build'
                    },
                    {
                        '$ref': '#/components/schemas/App'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const PrereleaseVersionResponseSchema = {
    type: 'object',
    title: 'PrereleaseVersionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/PrereleaseVersion'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Build'
                    },
                    {
                        '$ref': '#/components/schemas/App'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const ProfileSchema = {
    type: 'object',
    title: 'Profile',
    properties: {
        type: {
            type: 'string',
            enum: ['profiles']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                platform: {
                    '$ref': '#/components/schemas/BundleIdPlatform'
                },
                profileType: {
                    type: 'string',
                    enum: ['IOS_APP_DEVELOPMENT', 'IOS_APP_STORE', 'IOS_APP_ADHOC', 'IOS_APP_INHOUSE', 'MAC_APP_DEVELOPMENT', 'MAC_APP_STORE', 'MAC_APP_DIRECT', 'TVOS_APP_DEVELOPMENT', 'TVOS_APP_STORE', 'TVOS_APP_ADHOC', 'TVOS_APP_INHOUSE', 'MAC_CATALYST_APP_DEVELOPMENT', 'MAC_CATALYST_APP_STORE', 'MAC_CATALYST_APP_DIRECT']
                },
                profileState: {
                    type: 'string',
                    enum: ['ACTIVE', 'INVALID']
                },
                profileContent: {
                    type: 'string'
                },
                uuid: {
                    type: 'string'
                },
                createdDate: {
                    type: 'string',
                    format: 'date-time'
                },
                expirationDate: {
                    type: 'string',
                    format: 'date-time'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                bundleId: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['bundleIds']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                devices: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['devices']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                certificates: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['certificates']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const ProfilesResponseSchema = {
    type: 'object',
    title: 'ProfilesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Profile'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/BundleId'
                    },
                    {
                        '$ref': '#/components/schemas/Device'
                    },
                    {
                        '$ref': '#/components/schemas/Certificate'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const ProfileResponseSchema = {
    type: 'object',
    title: 'ProfileResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/Profile'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/BundleId'
                    },
                    {
                        '$ref': '#/components/schemas/Device'
                    },
                    {
                        '$ref': '#/components/schemas/Certificate'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const ProfileCreateRequestSchema = {
    type: 'object',
    title: 'ProfileCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['profiles']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        profileType: {
                            type: 'string',
                            enum: ['IOS_APP_DEVELOPMENT', 'IOS_APP_STORE', 'IOS_APP_ADHOC', 'IOS_APP_INHOUSE', 'MAC_APP_DEVELOPMENT', 'MAC_APP_STORE', 'MAC_APP_DIRECT', 'TVOS_APP_DEVELOPMENT', 'TVOS_APP_STORE', 'TVOS_APP_ADHOC', 'TVOS_APP_INHOUSE', 'MAC_CATALYST_APP_DEVELOPMENT', 'MAC_CATALYST_APP_STORE', 'MAC_CATALYST_APP_DIRECT']
                        }
                    },
                    required: ['profileType', 'name']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        bundleId: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['bundleIds']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        devices: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['devices']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        },
                        certificates: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['certificates']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['certificates', 'bundleId']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const PromotedPurchaseImageSchema = {
    type: 'object',
    title: 'PromotedPurchaseImage',
    properties: {
        type: {
            type: 'string',
            enum: ['promotedPurchaseImages']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                sourceFileChecksum: {
                    type: 'string'
                },
                assetToken: {
                    type: 'string'
                },
                imageAsset: {
                    '$ref': '#/components/schemas/ImageAsset'
                },
                assetType: {
                    type: 'string'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                state: {
                    type: 'string',
                    enum: ['AWAITING_UPLOAD', 'UPLOAD_COMPLETE', 'FAILED', 'PREPARE_FOR_SUBMISSION', 'WAITING_FOR_REVIEW', 'APPROVED', 'REJECTED']
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                promotedPurchase: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['promotedPurchases']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type'],
    deprecated: true
} as const;

export const PromotedPurchaseImagesResponseSchema = {
    type: 'object',
    title: 'PromotedPurchaseImagesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PromotedPurchaseImage'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PromotedPurchase'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links'],
    deprecated: true
} as const;

export const PromotedPurchaseImageResponseSchema = {
    type: 'object',
    title: 'PromotedPurchaseImageResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/PromotedPurchaseImage'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PromotedPurchase'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links'],
    deprecated: true
} as const;

export const PromotedPurchaseImageCreateRequestSchema = {
    type: 'object',
    title: 'PromotedPurchaseImageCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['promotedPurchaseImages']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        }
                    },
                    required: ['fileName', 'fileSize']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        promotedPurchase: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['promotedPurchases']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['promotedPurchase']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data'],
    deprecated: true
} as const;

export const PromotedPurchaseImageUpdateRequestSchema = {
    type: 'object',
    title: 'PromotedPurchaseImageUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['promotedPurchaseImages']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        sourceFileChecksum: {
                            type: 'string'
                        },
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data'],
    deprecated: true
} as const;

export const PromotedPurchaseSchema = {
    type: 'object',
    title: 'PromotedPurchase',
    properties: {
        type: {
            type: 'string',
            enum: ['promotedPurchases']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                visibleForAllUsers: {
                    type: 'boolean'
                },
                enabled: {
                    type: 'boolean'
                },
                state: {
                    type: 'string',
                    enum: ['APPROVED', 'IN_REVIEW', 'PREPARE_FOR_SUBMISSION', 'REJECTED']
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                inAppPurchaseV2: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['inAppPurchases']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                subscription: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                promotionImages: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['promotedPurchaseImages']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    },
                    deprecated: true
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const PromotedPurchasesResponseSchema = {
    type: 'object',
    title: 'PromotedPurchasesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PromotedPurchase'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/InAppPurchaseV2'
                    },
                    {
                        '$ref': '#/components/schemas/Subscription'
                    },
                    {
                        '$ref': '#/components/schemas/PromotedPurchaseImage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const PromotedPurchaseResponseSchema = {
    type: 'object',
    title: 'PromotedPurchaseResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/PromotedPurchase'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/InAppPurchaseV2'
                    },
                    {
                        '$ref': '#/components/schemas/Subscription'
                    },
                    {
                        '$ref': '#/components/schemas/PromotedPurchaseImage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const PromotedPurchaseCreateRequestSchema = {
    type: 'object',
    title: 'PromotedPurchaseCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['promotedPurchases']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        visibleForAllUsers: {
                            type: 'boolean'
                        },
                        enabled: {
                            type: 'boolean'
                        }
                    },
                    required: ['visibleForAllUsers']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        inAppPurchaseV2: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['inAppPurchases']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        subscription: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    },
                    required: ['app']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const PromotedPurchaseUpdateRequestSchema = {
    type: 'object',
    title: 'PromotedPurchaseUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['promotedPurchases']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        visibleForAllUsers: {
                            type: 'boolean'
                        },
                        enabled: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const ReviewSubmissionItemSchema = {
    type: 'object',
    title: 'ReviewSubmissionItem',
    properties: {
        type: {
            type: 'string',
            enum: ['reviewSubmissionItems']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                state: {
                    type: 'string',
                    enum: ['READY_FOR_REVIEW', 'ACCEPTED', 'APPROVED', 'REJECTED', 'REMOVED']
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appStoreVersion: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appCustomProductPageVersion: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appCustomProductPageVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appStoreVersionExperiment: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersionExperiments']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appStoreVersionExperimentV2: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersionExperiments']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                appEvent: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appEvents']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const ReviewSubmissionItemsResponseSchema = {
    type: 'object',
    title: 'ReviewSubmissionItemsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReviewSubmissionItem'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppCustomProductPageVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperiment'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentV2'
                    },
                    {
                        '$ref': '#/components/schemas/AppEvent'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const ReviewSubmissionItemResponseSchema = {
    type: 'object',
    title: 'ReviewSubmissionItemResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/ReviewSubmissionItem'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppCustomProductPageVersion'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperiment'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersionExperimentV2'
                    },
                    {
                        '$ref': '#/components/schemas/AppEvent'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const ReviewSubmissionItemCreateRequestSchema = {
    type: 'object',
    title: 'ReviewSubmissionItemCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['reviewSubmissionItems']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        reviewSubmission: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['reviewSubmissions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        appStoreVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        appCustomProductPageVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appCustomProductPageVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        appStoreVersionExperiment: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersionExperiments']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        appStoreVersionExperimentV2: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersionExperiments']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        appEvent: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appEvents']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    },
                    required: ['reviewSubmission']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const ReviewSubmissionItemUpdateRequestSchema = {
    type: 'object',
    title: 'ReviewSubmissionItemUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['reviewSubmissionItems']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        resolved: {
                            type: 'boolean'
                        },
                        removed: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const ReviewSubmissionSchema = {
    type: 'object',
    title: 'ReviewSubmission',
    properties: {
        type: {
            type: 'string',
            enum: ['reviewSubmissions']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                platform: {
                    '$ref': '#/components/schemas/Platform'
                },
                submittedDate: {
                    type: 'string',
                    format: 'date-time'
                },
                state: {
                    type: 'string',
                    enum: ['READY_FOR_REVIEW', 'WAITING_FOR_REVIEW', 'IN_REVIEW', 'UNRESOLVED_ISSUES', 'CANCELING', 'COMPLETING', 'COMPLETE']
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                app: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['apps']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                items: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['reviewSubmissionItems']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                appStoreVersionForReview: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                submittedByActor: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['actors']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                lastUpdatedByActor: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['actors']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const ReviewSubmissionsResponseSchema = {
    type: 'object',
    title: 'ReviewSubmissionsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReviewSubmission'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/ReviewSubmissionItem'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/Actor'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const ReviewSubmissionResponseSchema = {
    type: 'object',
    title: 'ReviewSubmissionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/ReviewSubmission'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/App'
                    },
                    {
                        '$ref': '#/components/schemas/ReviewSubmissionItem'
                    },
                    {
                        '$ref': '#/components/schemas/AppStoreVersion'
                    },
                    {
                        '$ref': '#/components/schemas/Actor'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const ReviewSubmissionCreateRequestSchema = {
    type: 'object',
    title: 'ReviewSubmissionCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['reviewSubmissions']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        platform: {
                            '$ref': '#/components/schemas/Platform'
                        }
                    },
                    required: ['platform']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['app']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const ReviewSubmissionUpdateRequestSchema = {
    type: 'object',
    title: 'ReviewSubmissionUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['reviewSubmissions']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        submitted: {
                            type: 'boolean'
                        },
                        canceled: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const RoutingAppCoverageSchema = {
    type: 'object',
    title: 'RoutingAppCoverage',
    properties: {
        type: {
            type: 'string',
            enum: ['routingAppCoverages']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                sourceFileChecksum: {
                    type: 'string'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                assetDeliveryState: {
                    '$ref': '#/components/schemas/AppMediaAssetState'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                appStoreVersion: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['appStoreVersions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const RoutingAppCoverageResponseSchema = {
    type: 'object',
    title: 'RoutingAppCoverageResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/RoutingAppCoverage'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppStoreVersion'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const RoutingAppCoverageCreateRequestSchema = {
    type: 'object',
    title: 'RoutingAppCoverageCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['routingAppCoverages']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        }
                    },
                    required: ['fileName', 'fileSize']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        appStoreVersion: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['appStoreVersions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['appStoreVersion']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const RoutingAppCoverageUpdateRequestSchema = {
    type: 'object',
    title: 'RoutingAppCoverageUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['routingAppCoverages']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        sourceFileChecksum: {
                            type: 'string'
                        },
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const SandboxTesterV2Schema = {
    type: 'object',
    title: 'SandboxTesterV2',
    properties: {
        type: {
            type: 'string',
            enum: ['sandboxTesters']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                firstName: {
                    type: 'string'
                },
                lastName: {
                    type: 'string'
                },
                acAccountName: {
                    type: 'string'
                },
                territory: {
                    '$ref': '#/components/schemas/TerritoryCode'
                },
                applePayCompatible: {
                    type: 'boolean'
                },
                interruptPurchases: {
                    type: 'boolean'
                },
                subscriptionRenewalRate: {
                    type: 'string',
                    enum: ['MONTHLY_RENEWAL_EVERY_ONE_HOUR', 'MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES', 'MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES', 'MONTHLY_RENEWAL_EVERY_FIVE_MINUTES', 'MONTHLY_RENEWAL_EVERY_THREE_MINUTES']
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SandboxTestersV2ResponseSchema = {
    type: 'object',
    title: 'SandboxTestersV2Response',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SandboxTesterV2'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SandboxTesterV2ResponseSchema = {
    type: 'object',
    title: 'SandboxTesterV2Response',
    properties: {
        data: {
            '$ref': '#/components/schemas/SandboxTesterV2'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SandboxTesterV2UpdateRequestSchema = {
    type: 'object',
    title: 'SandboxTesterV2UpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['sandboxTesters']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        territory: {
                            '$ref': '#/components/schemas/TerritoryCode'
                        },
                        interruptPurchases: {
                            type: 'boolean'
                        },
                        subscriptionRenewalRate: {
                            type: 'string',
                            enum: ['MONTHLY_RENEWAL_EVERY_ONE_HOUR', 'MONTHLY_RENEWAL_EVERY_THIRTY_MINUTES', 'MONTHLY_RENEWAL_EVERY_FIFTEEN_MINUTES', 'MONTHLY_RENEWAL_EVERY_FIVE_MINUTES', 'MONTHLY_RENEWAL_EVERY_THREE_MINUTES']
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const SandboxTestersClearPurchaseHistoryRequestV2Schema = {
    type: 'object',
    title: 'SandboxTestersClearPurchaseHistoryRequestV2',
    properties: {
        type: {
            type: 'string',
            enum: ['sandboxTestersClearPurchaseHistoryRequest']
        },
        id: {
            type: 'string'
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SandboxTestersClearPurchaseHistoryRequestV2ResponseSchema = {
    type: 'object',
    title: 'SandboxTestersClearPurchaseHistoryRequestV2Response',
    properties: {
        data: {
            '$ref': '#/components/schemas/SandboxTestersClearPurchaseHistoryRequestV2'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SandboxTestersClearPurchaseHistoryRequestV2CreateRequestSchema = {
    type: 'object',
    title: 'SandboxTestersClearPurchaseHistoryRequestV2CreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['sandboxTestersClearPurchaseHistoryRequest']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        sandboxTesters: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['sandboxTesters']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['sandboxTesters']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const ScmGitReferenceSchema = {
    type: 'object',
    title: 'ScmGitReference',
    properties: {
        type: {
            type: 'string',
            enum: ['scmGitReferences']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                canonicalName: {
                    type: 'string'
                },
                isDeleted: {
                    type: 'boolean'
                },
                kind: {
                    '$ref': '#/components/schemas/CiGitRefKind'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                repository: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['scmRepositories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const ScmGitReferencesResponseSchema = {
    type: 'object',
    title: 'ScmGitReferencesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ScmGitReference'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ScmRepository'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const ScmGitReferenceResponseSchema = {
    type: 'object',
    title: 'ScmGitReferenceResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/ScmGitReference'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ScmRepository'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const ScmProviderSchema = {
    type: 'object',
    title: 'ScmProvider',
    properties: {
        type: {
            type: 'string',
            enum: ['scmProviders']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                scmProviderType: {
                    '$ref': '#/components/schemas/ScmProviderType'
                },
                url: {
                    type: 'string',
                    format: 'uri'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                repositories: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const ScmProvidersResponseSchema = {
    type: 'object',
    title: 'ScmProvidersResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ScmProvider'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const ScmProviderResponseSchema = {
    type: 'object',
    title: 'ScmProviderResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/ScmProvider'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const ScmPullRequestSchema = {
    type: 'object',
    title: 'ScmPullRequest',
    properties: {
        type: {
            type: 'string',
            enum: ['scmPullRequests']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                title: {
                    type: 'string'
                },
                number: {
                    type: 'integer'
                },
                webUrl: {
                    type: 'string',
                    format: 'uri'
                },
                sourceRepositoryOwner: {
                    type: 'string'
                },
                sourceRepositoryName: {
                    type: 'string'
                },
                sourceBranchName: {
                    type: 'string'
                },
                destinationRepositoryOwner: {
                    type: 'string'
                },
                destinationRepositoryName: {
                    type: 'string'
                },
                destinationBranchName: {
                    type: 'string'
                },
                isClosed: {
                    type: 'boolean'
                },
                isCrossRepository: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                repository: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['scmRepositories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const ScmPullRequestsResponseSchema = {
    type: 'object',
    title: 'ScmPullRequestsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ScmPullRequest'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ScmRepository'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const ScmPullRequestResponseSchema = {
    type: 'object',
    title: 'ScmPullRequestResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/ScmPullRequest'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ScmRepository'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const ScmRepositorySchema = {
    type: 'object',
    title: 'ScmRepository',
    properties: {
        type: {
            type: 'string',
            enum: ['scmRepositories']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                lastAccessedDate: {
                    type: 'string',
                    format: 'date-time'
                },
                httpCloneUrl: {
                    type: 'string',
                    format: 'uri'
                },
                sshCloneUrl: {
                    type: 'string',
                    format: 'uri'
                },
                ownerName: {
                    type: 'string'
                },
                repositoryName: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                scmProvider: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['scmProviders']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                defaultBranch: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['scmGitReferences']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                gitReferences: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                pullRequests: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const ScmRepositoriesResponseSchema = {
    type: 'object',
    title: 'ScmRepositoriesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ScmRepository'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ScmProvider'
                    },
                    {
                        '$ref': '#/components/schemas/ScmGitReference'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const ScmRepositoryResponseSchema = {
    type: 'object',
    title: 'ScmRepositoryResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/ScmRepository'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/ScmProvider'
                    },
                    {
                        '$ref': '#/components/schemas/ScmGitReference'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionAppStoreReviewScreenshotSchema = {
    type: 'object',
    title: 'SubscriptionAppStoreReviewScreenshot',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionAppStoreReviewScreenshots']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                sourceFileChecksum: {
                    type: 'string'
                },
                imageAsset: {
                    '$ref': '#/components/schemas/ImageAsset'
                },
                assetToken: {
                    type: 'string'
                },
                assetType: {
                    type: 'string'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                assetDeliveryState: {
                    '$ref': '#/components/schemas/AppMediaAssetState'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                subscription: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionAppStoreReviewScreenshotResponseSchema = {
    type: 'object',
    title: 'SubscriptionAppStoreReviewScreenshotResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/SubscriptionAppStoreReviewScreenshot'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Subscription'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionAppStoreReviewScreenshotCreateRequestSchema = {
    type: 'object',
    title: 'SubscriptionAppStoreReviewScreenshotCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionAppStoreReviewScreenshots']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        }
                    },
                    required: ['fileName', 'fileSize']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        subscription: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['subscription']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionAppStoreReviewScreenshotUpdateRequestSchema = {
    type: 'object',
    title: 'SubscriptionAppStoreReviewScreenshotUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionAppStoreReviewScreenshots']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        sourceFileChecksum: {
                            type: 'string'
                        },
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionAvailabilitySchema = {
    type: 'object',
    title: 'SubscriptionAvailability',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionAvailabilities']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                availableInNewTerritories: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                availableTerritories: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['territories']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionAvailabilityResponseSchema = {
    type: 'object',
    title: 'SubscriptionAvailabilityResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/SubscriptionAvailability'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Territory'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionAvailabilityCreateRequestSchema = {
    type: 'object',
    title: 'SubscriptionAvailabilityCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionAvailabilities']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        availableInNewTerritories: {
                            type: 'boolean'
                        }
                    },
                    required: ['availableInNewTerritories']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        subscription: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        availableTerritories: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['territories']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['subscription', 'availableTerritories']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionGracePeriodSchema = {
    type: 'object',
    title: 'SubscriptionGracePeriod',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionGracePeriods']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                optIn: {
                    type: 'boolean'
                },
                sandboxOptIn: {
                    type: 'boolean'
                },
                duration: {
                    '$ref': '#/components/schemas/SubscriptionGracePeriodDuration'
                },
                renewalType: {
                    type: 'string',
                    enum: ['ALL_RENEWALS', 'PAID_TO_PAID_ONLY']
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionGracePeriodResponseSchema = {
    type: 'object',
    title: 'SubscriptionGracePeriodResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/SubscriptionGracePeriod'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionGracePeriodUpdateRequestSchema = {
    type: 'object',
    title: 'SubscriptionGracePeriodUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionGracePeriods']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        optIn: {
                            type: 'boolean'
                        },
                        sandboxOptIn: {
                            type: 'boolean'
                        },
                        duration: {
                            '$ref': '#/components/schemas/SubscriptionGracePeriodDuration'
                        },
                        renewalType: {
                            type: 'string',
                            enum: ['ALL_RENEWALS', 'PAID_TO_PAID_ONLY']
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionGroupLocalizationSchema = {
    type: 'object',
    title: 'SubscriptionGroupLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionGroupLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                customAppName: {
                    type: 'string'
                },
                locale: {
                    type: 'string'
                },
                state: {
                    type: 'string',
                    enum: ['PREPARE_FOR_SUBMISSION', 'WAITING_FOR_REVIEW', 'APPROVED', 'REJECTED']
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                subscriptionGroup: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptionGroups']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionGroupLocalizationsResponseSchema = {
    type: 'object',
    title: 'SubscriptionGroupLocalizationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionGroupLocalization'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionGroup'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionGroupLocalizationResponseSchema = {
    type: 'object',
    title: 'SubscriptionGroupLocalizationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/SubscriptionGroupLocalization'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionGroup'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionGroupLocalizationCreateRequestSchema = {
    type: 'object',
    title: 'SubscriptionGroupLocalizationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionGroupLocalizations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        customAppName: {
                            type: 'string'
                        },
                        locale: {
                            type: 'string'
                        }
                    },
                    required: ['name', 'locale']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        subscriptionGroup: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptionGroups']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['subscriptionGroup']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionGroupLocalizationUpdateRequestSchema = {
    type: 'object',
    title: 'SubscriptionGroupLocalizationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionGroupLocalizations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        customAppName: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionGroupSubmissionSchema = {
    type: 'object',
    title: 'SubscriptionGroupSubmission',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionGroupSubmissions']
        },
        id: {
            type: 'string'
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionGroupSubmissionResponseSchema = {
    type: 'object',
    title: 'SubscriptionGroupSubmissionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/SubscriptionGroupSubmission'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionGroupSubmissionCreateRequestSchema = {
    type: 'object',
    title: 'SubscriptionGroupSubmissionCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionGroupSubmissions']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        subscriptionGroup: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptionGroups']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['subscriptionGroup']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionGroupSchema = {
    type: 'object',
    title: 'SubscriptionGroup',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionGroups']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                referenceName: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                subscriptions: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['subscriptions']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                subscriptionGroupLocalizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['subscriptionGroupLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionGroupsResponseSchema = {
    type: 'object',
    title: 'SubscriptionGroupsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionGroup'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Subscription'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionGroupLocalization'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionGroupResponseSchema = {
    type: 'object',
    title: 'SubscriptionGroupResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/SubscriptionGroup'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Subscription'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionGroupLocalization'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionGroupCreateRequestSchema = {
    type: 'object',
    title: 'SubscriptionGroupCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionGroups']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        referenceName: {
                            type: 'string'
                        }
                    },
                    required: ['referenceName']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        app: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['apps']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['app']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionGroupUpdateRequestSchema = {
    type: 'object',
    title: 'SubscriptionGroupUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionGroups']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        referenceName: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionImageSchema = {
    type: 'object',
    title: 'SubscriptionImage',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionImages']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                fileSize: {
                    type: 'integer'
                },
                fileName: {
                    type: 'string'
                },
                sourceFileChecksum: {
                    type: 'string'
                },
                assetToken: {
                    type: 'string'
                },
                imageAsset: {
                    '$ref': '#/components/schemas/ImageAsset'
                },
                uploadOperations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UploadOperation'
                    }
                },
                state: {
                    type: 'string',
                    enum: ['AWAITING_UPLOAD', 'UPLOAD_COMPLETE', 'FAILED', 'PREPARE_FOR_SUBMISSION', 'WAITING_FOR_REVIEW', 'APPROVED', 'REJECTED']
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                subscription: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionImagesResponseSchema = {
    type: 'object',
    title: 'SubscriptionImagesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionImage'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Subscription'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionImageResponseSchema = {
    type: 'object',
    title: 'SubscriptionImageResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/SubscriptionImage'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Subscription'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionImageCreateRequestSchema = {
    type: 'object',
    title: 'SubscriptionImageCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionImages']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        fileSize: {
                            type: 'integer'
                        },
                        fileName: {
                            type: 'string'
                        }
                    },
                    required: ['fileName', 'fileSize']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        subscription: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['subscription']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionImageUpdateRequestSchema = {
    type: 'object',
    title: 'SubscriptionImageUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionImages']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        sourceFileChecksum: {
                            type: 'string'
                        },
                        uploaded: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionIntroductoryOfferSchema = {
    type: 'object',
    title: 'SubscriptionIntroductoryOffer',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionIntroductoryOffers']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                startDate: {
                    type: 'string',
                    format: 'date'
                },
                endDate: {
                    type: 'string',
                    format: 'date'
                },
                duration: {
                    '$ref': '#/components/schemas/SubscriptionOfferDuration'
                },
                offerMode: {
                    '$ref': '#/components/schemas/SubscriptionOfferMode'
                },
                numberOfPeriods: {
                    type: 'integer'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                subscription: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                territory: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                subscriptionPricePoint: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptionPricePoints']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionIntroductoryOfferInlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionIntroductoryOffers']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                startDate: {
                    type: 'string',
                    format: 'date'
                },
                endDate: {
                    type: 'string',
                    format: 'date'
                },
                duration: {
                    '$ref': '#/components/schemas/SubscriptionOfferDuration'
                },
                offerMode: {
                    '$ref': '#/components/schemas/SubscriptionOfferMode'
                },
                numberOfPeriods: {
                    type: 'integer'
                }
            },
            required: ['duration', 'numberOfPeriods', 'offerMode']
        },
        relationships: {
            type: 'object',
            properties: {
                subscription: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                territory: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                subscriptionPricePoint: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptionPricePoints']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        }
    },
    required: ['attributes', 'type']
} as const;

export const SubscriptionIntroductoryOffersResponseSchema = {
    type: 'object',
    title: 'SubscriptionIntroductoryOffersResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionIntroductoryOffer'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Subscription'
                    },
                    {
                        '$ref': '#/components/schemas/Territory'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionPricePoint'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionIntroductoryOfferResponseSchema = {
    type: 'object',
    title: 'SubscriptionIntroductoryOfferResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/SubscriptionIntroductoryOffer'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Subscription'
                    },
                    {
                        '$ref': '#/components/schemas/Territory'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionPricePoint'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionIntroductoryOfferCreateRequestSchema = {
    type: 'object',
    title: 'SubscriptionIntroductoryOfferCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionIntroductoryOffers']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        startDate: {
                            type: 'string',
                            format: 'date'
                        },
                        endDate: {
                            type: 'string',
                            format: 'date'
                        },
                        duration: {
                            '$ref': '#/components/schemas/SubscriptionOfferDuration'
                        },
                        offerMode: {
                            '$ref': '#/components/schemas/SubscriptionOfferMode'
                        },
                        numberOfPeriods: {
                            type: 'integer'
                        }
                    },
                    required: ['duration', 'numberOfPeriods', 'offerMode']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        subscription: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        territory: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['territories']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        subscriptionPricePoint: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptionPricePoints']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        }
                    },
                    required: ['subscription']
                }
            },
            required: ['relationships', 'attributes', 'type']
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionPricePointInlineCreate'
            }
        }
    },
    required: ['data']
} as const;

export const SubscriptionIntroductoryOfferUpdateRequestSchema = {
    type: 'object',
    title: 'SubscriptionIntroductoryOfferUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionIntroductoryOffers']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        endDate: {
                            type: 'string',
                            format: 'date'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionLocalizationSchema = {
    type: 'object',
    title: 'SubscriptionLocalization',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionLocalizations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                locale: {
                    type: 'string'
                },
                description: {
                    type: 'string'
                },
                state: {
                    type: 'string',
                    enum: ['PREPARE_FOR_SUBMISSION', 'WAITING_FOR_REVIEW', 'APPROVED', 'REJECTED']
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                subscription: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionLocalizationsResponseSchema = {
    type: 'object',
    title: 'SubscriptionLocalizationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionLocalization'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Subscription'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionLocalizationResponseSchema = {
    type: 'object',
    title: 'SubscriptionLocalizationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/SubscriptionLocalization'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Subscription'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionLocalizationCreateRequestSchema = {
    type: 'object',
    title: 'SubscriptionLocalizationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionLocalizations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        locale: {
                            type: 'string'
                        },
                        description: {
                            type: 'string'
                        }
                    },
                    required: ['name', 'locale']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        subscription: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['subscription']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionLocalizationUpdateRequestSchema = {
    type: 'object',
    title: 'SubscriptionLocalizationUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionLocalizations']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        description: {
                            type: 'string'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionOfferCodeCustomCodeSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodeCustomCode',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionOfferCodeCustomCodes']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                customCode: {
                    type: 'string'
                },
                numberOfCodes: {
                    type: 'integer'
                },
                createdDate: {
                    type: 'string',
                    format: 'date-time'
                },
                expirationDate: {
                    type: 'string',
                    format: 'date'
                },
                active: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                offerCode: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptionOfferCodes']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionOfferCodeCustomCodesResponseSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodeCustomCodesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionOfferCodeCustomCode'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionOfferCode'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionOfferCodeCustomCodeResponseSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodeCustomCodeResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/SubscriptionOfferCodeCustomCode'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionOfferCode'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionOfferCodeCustomCodeCreateRequestSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodeCustomCodeCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionOfferCodeCustomCodes']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        customCode: {
                            type: 'string'
                        },
                        numberOfCodes: {
                            type: 'integer'
                        },
                        expirationDate: {
                            type: 'string',
                            format: 'date'
                        }
                    },
                    required: ['numberOfCodes', 'customCode']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        offerCode: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptionOfferCodes']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['offerCode']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionOfferCodeCustomCodeUpdateRequestSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodeCustomCodeUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionOfferCodeCustomCodes']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        active: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionOfferCodeOneTimeUseCodeValueSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodeOneTimeUseCodeValue',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionOfferCodeOneTimeUseCodeValues']
        },
        id: {
            type: 'string'
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionOfferCodeOneTimeUseCodeSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodeOneTimeUseCode',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionOfferCodeOneTimeUseCodes']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                numberOfCodes: {
                    type: 'integer'
                },
                createdDate: {
                    type: 'string',
                    format: 'date-time'
                },
                expirationDate: {
                    type: 'string',
                    format: 'date'
                },
                active: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                offerCode: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptionOfferCodes']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                values: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionOfferCodeOneTimeUseCodesResponseSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodeOneTimeUseCodesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionOfferCodeOneTimeUseCode'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionOfferCode'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionOfferCodeOneTimeUseCodeResponseSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodeOneTimeUseCodeResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/SubscriptionOfferCodeOneTimeUseCode'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionOfferCode'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionOfferCodeOneTimeUseCodeCreateRequestSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodeOneTimeUseCodeCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionOfferCodeOneTimeUseCodes']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        numberOfCodes: {
                            type: 'integer'
                        },
                        expirationDate: {
                            type: 'string',
                            format: 'date'
                        }
                    },
                    required: ['numberOfCodes', 'expirationDate']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        offerCode: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptionOfferCodes']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['offerCode']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionOfferCodeOneTimeUseCodeUpdateRequestSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodeOneTimeUseCodeUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionOfferCodeOneTimeUseCodes']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        active: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionOfferCodePriceSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodePrice',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionOfferCodePrices']
        },
        id: {
            type: 'string'
        },
        relationships: {
            type: 'object',
            properties: {
                territory: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                subscriptionPricePoint: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptionPricePoints']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionOfferCodePriceInlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionOfferCodePrices']
        },
        id: {
            type: 'string'
        },
        relationships: {
            type: 'object',
            properties: {
                territory: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                subscriptionPricePoint: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptionPricePoints']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        }
    },
    required: ['type']
} as const;

export const SubscriptionOfferCodePricesResponseSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodePricesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionOfferCodePrice'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Territory'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionPricePoint'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionOfferCodeSchema = {
    type: 'object',
    title: 'SubscriptionOfferCode',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionOfferCodes']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                customerEligibilities: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/SubscriptionCustomerEligibility'
                    }
                },
                offerEligibility: {
                    '$ref': '#/components/schemas/SubscriptionOfferEligibility'
                },
                duration: {
                    '$ref': '#/components/schemas/SubscriptionOfferDuration'
                },
                offerMode: {
                    '$ref': '#/components/schemas/SubscriptionOfferMode'
                },
                numberOfPeriods: {
                    type: 'integer'
                },
                totalNumberOfCodes: {
                    type: 'integer'
                },
                active: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                subscription: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                oneTimeUseCodes: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['subscriptionOfferCodeOneTimeUseCodes']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                customCodes: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['subscriptionOfferCodeCustomCodes']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                prices: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['subscriptionOfferCodePrices']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionOfferCodesResponseSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionOfferCode'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Subscription'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionOfferCodeOneTimeUseCode'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionOfferCodeCustomCode'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionOfferCodePrice'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionOfferCodeResponseSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodeResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/SubscriptionOfferCode'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Subscription'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionOfferCodeOneTimeUseCode'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionOfferCodeCustomCode'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionOfferCodePrice'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionOfferCodeCreateRequestSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodeCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionOfferCodes']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        customerEligibilities: {
                            type: 'array',
                            items: {
                                '$ref': '#/components/schemas/SubscriptionCustomerEligibility'
                            }
                        },
                        offerEligibility: {
                            '$ref': '#/components/schemas/SubscriptionOfferEligibility'
                        },
                        duration: {
                            '$ref': '#/components/schemas/SubscriptionOfferDuration'
                        },
                        offerMode: {
                            '$ref': '#/components/schemas/SubscriptionOfferMode'
                        },
                        numberOfPeriods: {
                            type: 'integer'
                        }
                    },
                    required: ['duration', 'offerEligibility', 'name', 'numberOfPeriods', 'offerMode', 'customerEligibilities']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        subscription: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        prices: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['subscriptionOfferCodePrices']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['subscription', 'prices']
                }
            },
            required: ['relationships', 'attributes', 'type']
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionOfferCodePriceInlineCreate'
            }
        }
    },
    required: ['data']
} as const;

export const SubscriptionOfferCodeUpdateRequestSchema = {
    type: 'object',
    title: 'SubscriptionOfferCodeUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionOfferCodes']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        active: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionPricePointSchema = {
    type: 'object',
    title: 'SubscriptionPricePoint',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionPricePoints']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                customerPrice: {
                    type: 'string'
                },
                proceeds: {
                    type: 'string'
                },
                proceedsYear2: {
                    type: 'string'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                territory: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                equalizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionPricePointInlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionPricePoints']
        },
        id: {
            type: 'string'
        }
    },
    required: ['type']
} as const;

export const SubscriptionPricePointsResponseSchema = {
    type: 'object',
    title: 'SubscriptionPricePointsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionPricePoint'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Territory'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionPricePointResponseSchema = {
    type: 'object',
    title: 'SubscriptionPricePointResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/SubscriptionPricePoint'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Territory'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionPriceSchema = {
    type: 'object',
    title: 'SubscriptionPrice',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionPrices']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                startDate: {
                    type: 'string',
                    format: 'date'
                },
                preserved: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                territory: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                subscriptionPricePoint: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptionPricePoints']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionPriceInlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionPrices']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                startDate: {
                    type: 'string',
                    format: 'date'
                },
                preserveCurrentPrice: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                subscription: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                territory: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                subscriptionPricePoint: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptionPricePoints']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        }
    },
    required: ['type']
} as const;

export const SubscriptionPricesResponseSchema = {
    type: 'object',
    title: 'SubscriptionPricesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionPrice'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Territory'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionPricePoint'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionPriceResponseSchema = {
    type: 'object',
    title: 'SubscriptionPriceResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/SubscriptionPrice'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Territory'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionPricePoint'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionPriceCreateRequestSchema = {
    type: 'object',
    title: 'SubscriptionPriceCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionPrices']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        startDate: {
                            type: 'string',
                            format: 'date'
                        },
                        preserveCurrentPrice: {
                            type: 'boolean'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        subscription: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        territory: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['territories']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            }
                        },
                        subscriptionPricePoint: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptionPricePoints']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['subscription', 'subscriptionPricePoint']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionPromotionalOfferPriceSchema = {
    type: 'object',
    title: 'SubscriptionPromotionalOfferPrice',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionPromotionalOfferPrices']
        },
        id: {
            type: 'string'
        },
        relationships: {
            type: 'object',
            properties: {
                territory: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                subscriptionPricePoint: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptionPricePoints']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionPromotionalOfferPriceInlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionPromotionalOfferPrices']
        },
        id: {
            type: 'string'
        },
        relationships: {
            type: 'object',
            properties: {
                territory: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                subscriptionPricePoint: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptionPricePoints']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        }
    },
    required: ['type']
} as const;

export const SubscriptionPromotionalOfferPricesResponseSchema = {
    type: 'object',
    title: 'SubscriptionPromotionalOfferPricesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionPromotionalOfferPrice'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Territory'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionPricePoint'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionPromotionalOfferSchema = {
    type: 'object',
    title: 'SubscriptionPromotionalOffer',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionPromotionalOffers']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                offerCode: {
                    type: 'string'
                },
                duration: {
                    '$ref': '#/components/schemas/SubscriptionOfferDuration'
                },
                offerMode: {
                    '$ref': '#/components/schemas/SubscriptionOfferMode'
                },
                numberOfPeriods: {
                    type: 'integer'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                subscription: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                prices: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['subscriptionPromotionalOfferPrices']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionPromotionalOfferInlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionPromotionalOffers']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                offerCode: {
                    type: 'string'
                },
                duration: {
                    '$ref': '#/components/schemas/SubscriptionOfferDuration'
                },
                offerMode: {
                    '$ref': '#/components/schemas/SubscriptionOfferMode'
                },
                numberOfPeriods: {
                    type: 'integer'
                }
            },
            required: ['duration', 'offerCode', 'name', 'numberOfPeriods', 'offerMode']
        },
        relationships: {
            type: 'object',
            properties: {
                subscription: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                prices: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['subscriptionPromotionalOfferPrices']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        }
    },
    required: ['attributes', 'type']
} as const;

export const SubscriptionPromotionalOffersResponseSchema = {
    type: 'object',
    title: 'SubscriptionPromotionalOffersResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionPromotionalOffer'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Subscription'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionPromotionalOfferPrice'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionPromotionalOfferResponseSchema = {
    type: 'object',
    title: 'SubscriptionPromotionalOfferResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/SubscriptionPromotionalOffer'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Subscription'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionPromotionalOfferPrice'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionPromotionalOfferCreateRequestSchema = {
    type: 'object',
    title: 'SubscriptionPromotionalOfferCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionPromotionalOffers']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        offerCode: {
                            type: 'string'
                        },
                        duration: {
                            '$ref': '#/components/schemas/SubscriptionOfferDuration'
                        },
                        offerMode: {
                            '$ref': '#/components/schemas/SubscriptionOfferMode'
                        },
                        numberOfPeriods: {
                            type: 'integer'
                        }
                    },
                    required: ['duration', 'offerCode', 'name', 'numberOfPeriods', 'offerMode']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        subscription: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        prices: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['subscriptionPromotionalOfferPrices']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['subscription', 'prices']
                }
            },
            required: ['relationships', 'attributes', 'type']
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionPromotionalOfferPriceInlineCreate'
            }
        }
    },
    required: ['data']
} as const;

export const SubscriptionPromotionalOfferUpdateRequestSchema = {
    type: 'object',
    title: 'SubscriptionPromotionalOfferUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionPromotionalOffers']
                },
                id: {
                    type: 'string'
                },
                relationships: {
                    type: 'object',
                    properties: {
                        prices: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['subscriptionPromotionalOfferPrices']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        }
                    }
                }
            },
            required: ['id', 'type']
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SubscriptionPromotionalOfferPriceInlineCreate'
            }
        }
    },
    required: ['data']
} as const;

export const SubscriptionSubmissionSchema = {
    type: 'object',
    title: 'SubscriptionSubmission',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptionSubmissions']
        },
        id: {
            type: 'string'
        },
        relationships: {
            type: 'object',
            properties: {
                subscription: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptions']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionSubmissionResponseSchema = {
    type: 'object',
    title: 'SubscriptionSubmissionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/SubscriptionSubmission'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Subscription'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionSubmissionCreateRequestSchema = {
    type: 'object',
    title: 'SubscriptionSubmissionCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptionSubmissions']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        subscription: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['subscription']
                }
            },
            required: ['relationships', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionSchema = {
    type: 'object',
    title: 'Subscription',
    properties: {
        type: {
            type: 'string',
            enum: ['subscriptions']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                productId: {
                    type: 'string'
                },
                familySharable: {
                    type: 'boolean'
                },
                state: {
                    type: 'string',
                    enum: ['MISSING_METADATA', 'READY_TO_SUBMIT', 'WAITING_FOR_REVIEW', 'IN_REVIEW', 'DEVELOPER_ACTION_NEEDED', 'PENDING_BINARY_APPROVAL', 'APPROVED', 'DEVELOPER_REMOVED_FROM_SALE', 'REMOVED_FROM_SALE', 'REJECTED']
                },
                subscriptionPeriod: {
                    type: 'string',
                    enum: ['ONE_WEEK', 'ONE_MONTH', 'TWO_MONTHS', 'THREE_MONTHS', 'SIX_MONTHS', 'ONE_YEAR']
                },
                reviewNote: {
                    type: 'string'
                },
                groupLevel: {
                    type: 'integer'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                subscriptionLocalizations: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['subscriptionLocalizations']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                appStoreReviewScreenshot: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptionAppStoreReviewScreenshots']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                group: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptionGroups']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                introductoryOffers: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['subscriptionIntroductoryOffers']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                promotionalOffers: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['subscriptionPromotionalOffers']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                offerCodes: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['subscriptionOfferCodes']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                prices: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['subscriptionPrices']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                pricePoints: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        }
                    }
                },
                promotedPurchase: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['promotedPurchases']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                subscriptionAvailability: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptionAvailabilities']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                winBackOffers: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['winBackOffers']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                },
                images: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['subscriptionImages']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const SubscriptionsResponseSchema = {
    type: 'object',
    title: 'SubscriptionsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Subscription'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/SubscriptionLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionAppStoreReviewScreenshot'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionGroup'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionIntroductoryOffer'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionPromotionalOffer'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionOfferCode'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionPrice'
                    },
                    {
                        '$ref': '#/components/schemas/PromotedPurchase'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionAvailability'
                    },
                    {
                        '$ref': '#/components/schemas/WinBackOffer'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionImage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionResponseSchema = {
    type: 'object',
    title: 'SubscriptionResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/Subscription'
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/SubscriptionLocalization'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionAppStoreReviewScreenshot'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionGroup'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionIntroductoryOffer'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionPromotionalOffer'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionOfferCode'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionPrice'
                    },
                    {
                        '$ref': '#/components/schemas/PromotedPurchase'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionAvailability'
                    },
                    {
                        '$ref': '#/components/schemas/WinBackOffer'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionImage'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionCreateRequestSchema = {
    type: 'object',
    title: 'SubscriptionCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptions']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        productId: {
                            type: 'string'
                        },
                        familySharable: {
                            type: 'boolean'
                        },
                        subscriptionPeriod: {
                            type: 'string',
                            enum: ['ONE_WEEK', 'ONE_MONTH', 'TWO_MONTHS', 'THREE_MONTHS', 'SIX_MONTHS', 'ONE_YEAR']
                        },
                        reviewNote: {
                            type: 'string'
                        },
                        groupLevel: {
                            type: 'integer'
                        }
                    },
                    required: ['productId', 'name']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        group: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptionGroups']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['group']
                }
            },
            required: ['relationships', 'attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const SubscriptionUpdateRequestSchema = {
    type: 'object',
    title: 'SubscriptionUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['subscriptions']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        familySharable: {
                            type: 'boolean'
                        },
                        subscriptionPeriod: {
                            type: 'string',
                            enum: ['ONE_WEEK', 'ONE_MONTH', 'TWO_MONTHS', 'THREE_MONTHS', 'SIX_MONTHS', 'ONE_YEAR']
                        },
                        reviewNote: {
                            type: 'string'
                        },
                        groupLevel: {
                            type: 'integer'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        introductoryOffers: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['subscriptionIntroductoryOffers']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        },
                        promotionalOffers: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['subscriptionPromotionalOffers']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        },
                        prices: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['subscriptionPrices']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        }
                    }
                }
            },
            required: ['id', 'type']
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/SubscriptionPromotionalOfferInlineCreate'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionPriceInlineCreate'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionIntroductoryOfferInlineCreate'
                    }
                ]
            }
        }
    },
    required: ['data']
} as const;

export const TerritorySchema = {
    type: 'object',
    title: 'Territory',
    properties: {
        type: {
            type: 'string',
            enum: ['territories']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                currency: {
                    type: 'string'
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const TerritoryInlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['territories']
        },
        id: {
            type: 'string'
        }
    },
    required: ['type']
} as const;

export const TerritoriesResponseSchema = {
    type: 'object',
    title: 'TerritoriesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Territory'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const TerritoryResponseSchema = {
    type: 'object',
    title: 'TerritoryResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/Territory'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const TerritoryAvailabilitySchema = {
    type: 'object',
    title: 'TerritoryAvailability',
    properties: {
        type: {
            type: 'string',
            enum: ['territoryAvailabilities']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                available: {
                    type: 'boolean'
                },
                releaseDate: {
                    type: 'string',
                    format: 'date'
                },
                preOrderEnabled: {
                    type: 'boolean'
                },
                preOrderPublishDate: {
                    type: 'string',
                    format: 'date'
                },
                contentStatuses: {
                    type: 'array',
                    items: {
                        type: 'string',
                        enum: ['AVAILABLE', 'AVAILABLE_FOR_PREORDER_ON_DATE', 'PROCESSING_TO_NOT_AVAILABLE', 'PROCESSING_TO_AVAILABLE', 'PROCESSING_TO_PRE_ORDER', 'AVAILABLE_FOR_SALE_UNRELEASED_APP', 'PREORDER_ON_UNRELEASED_APP', 'AVAILABLE_FOR_PREORDER', 'MISSING_RATING', 'CANNOT_SELL_RESTRICTED_RATING', 'BRAZIL_REQUIRED_TAX_ID', 'MISSING_GRN', 'UNVERIFIED_GRN', 'ICP_NUMBER_INVALID', 'ICP_NUMBER_MISSING', 'CANNOT_SELL_SEVENTEEN_PLUS_APPS', 'CANNOT_SELL_SEXUALLY_EXPLICIT', 'CANNOT_SELL_NON_IOS_GAMES', 'CANNOT_SELL_SEVENTEEN_PLUS_GAMES', 'CANNOT_SELL_FREQUENT_INTENSE_GAMBLING', 'CANNOT_SELL_CASINO', 'CANNOT_SELL_CASINO_WITHOUT_GRAC', 'CANNOT_SELL_CASINO_WITHOUT_AGE_VERIFICATION', 'CANNOT_SELL_FREQUENT_INTENSE_ALCOHOL_TOBACCO_DRUGS', 'CANNOT_SELL_FREQUENT_INTENSE_VIOLENCE', 'CANNOT_SELL_FREQUENT_INTENSE_SEXUAL_CONTENT_NUDITY', 'CANNOT_SELL_INFREQUENT_MILD_ALCOHOL_TOBACCO_DRUGS', 'CANNOT_SELL_INFREQUENT_MILD_SEXUAL_CONTENT_NUDITY', 'CANNOT_SELL_ADULT_ONLY', 'CANNOT_SELL_FREQUENT_INTENSE', 'CANNOT_SELL_FREQUENT_INTENSE_WITHOUT_GRAC', 'CANNOT_SELL_GAMBLING_CONTESTS', 'CANNOT_SELL_GAMBLING', 'CANNOT_SELL_CONTESTS', 'CANNOT_SELL']
                    }
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                territory: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const TerritoryAvailabilityInlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['territoryAvailabilities']
        },
        id: {
            type: 'string'
        }
    },
    required: ['type']
} as const;

export const TerritoryAvailabilitiesResponseSchema = {
    type: 'object',
    title: 'TerritoryAvailabilitiesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TerritoryAvailability'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Territory'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const TerritoryAvailabilityResponseSchema = {
    type: 'object',
    title: 'TerritoryAvailabilityResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/TerritoryAvailability'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Territory'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const TerritoryAvailabilityUpdateRequestSchema = {
    type: 'object',
    title: 'TerritoryAvailabilityUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['territoryAvailabilities']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        available: {
                            type: 'boolean'
                        },
                        releaseDate: {
                            type: 'string',
                            format: 'date'
                        },
                        preOrderEnabled: {
                            type: 'boolean'
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const UserInvitationSchema = {
    type: 'object',
    title: 'UserInvitation',
    properties: {
        type: {
            type: 'string',
            enum: ['userInvitations']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                email: {
                    type: 'string',
                    format: 'email'
                },
                firstName: {
                    type: 'string'
                },
                lastName: {
                    type: 'string'
                },
                expirationDate: {
                    type: 'string',
                    format: 'date-time'
                },
                roles: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UserRole'
                    }
                },
                allAppsVisible: {
                    type: 'boolean'
                },
                provisioningAllowed: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                visibleApps: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['apps']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const UserInvitationsResponseSchema = {
    type: 'object',
    title: 'UserInvitationsResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UserInvitation'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/App'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const UserInvitationResponseSchema = {
    type: 'object',
    title: 'UserInvitationResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/UserInvitation'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/App'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const UserInvitationCreateRequestSchema = {
    type: 'object',
    title: 'UserInvitationCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['userInvitations']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        email: {
                            type: 'string',
                            format: 'email'
                        },
                        firstName: {
                            type: 'string'
                        },
                        lastName: {
                            type: 'string'
                        },
                        roles: {
                            type: 'array',
                            items: {
                                '$ref': '#/components/schemas/UserRole'
                            }
                        },
                        allAppsVisible: {
                            type: 'boolean'
                        },
                        provisioningAllowed: {
                            type: 'boolean'
                        }
                    },
                    required: ['firstName', 'lastName', 'roles', 'email']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        visibleApps: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['apps']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        }
                    }
                }
            },
            required: ['attributes', 'type']
        }
    },
    required: ['data']
} as const;

export const UserSchema = {
    type: 'object',
    title: 'User',
    properties: {
        type: {
            type: 'string',
            enum: ['users']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                username: {
                    type: 'string'
                },
                firstName: {
                    type: 'string'
                },
                lastName: {
                    type: 'string'
                },
                roles: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/UserRole'
                    }
                },
                allAppsVisible: {
                    type: 'boolean'
                },
                provisioningAllowed: {
                    type: 'boolean'
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                visibleApps: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['apps']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const UsersResponseSchema = {
    type: 'object',
    title: 'UsersResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/User'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/App'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const UserResponseSchema = {
    type: 'object',
    title: 'UserResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/User'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/App'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const UserUpdateRequestSchema = {
    type: 'object',
    title: 'UserUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['users']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        roles: {
                            type: 'array',
                            items: {
                                '$ref': '#/components/schemas/UserRole'
                            }
                        },
                        allAppsVisible: {
                            type: 'boolean'
                        },
                        provisioningAllowed: {
                            type: 'boolean'
                        }
                    }
                },
                relationships: {
                    type: 'object',
                    properties: {
                        visibleApps: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['apps']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            }
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const WinBackOfferPriceSchema = {
    type: 'object',
    title: 'WinBackOfferPrice',
    properties: {
        type: {
            type: 'string',
            enum: ['winBackOfferPrices']
        },
        id: {
            type: 'string'
        },
        relationships: {
            type: 'object',
            properties: {
                territory: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['territories']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                },
                subscriptionPricePoint: {
                    type: 'object',
                    properties: {
                        data: {
                            type: 'object',
                            properties: {
                                type: {
                                    type: 'string',
                                    enum: ['subscriptionPricePoints']
                                },
                                id: {
                                    type: 'string'
                                }
                            },
                            required: ['id', 'type']
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const WinBackOfferPriceInlineCreateSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            enum: ['winBackOfferPrices']
        },
        id: {
            type: 'string'
        }
    },
    required: ['type']
} as const;

export const WinBackOfferPricesResponseSchema = {
    type: 'object',
    title: 'WinBackOfferPricesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WinBackOfferPrice'
            }
        },
        included: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Territory'
                    },
                    {
                        '$ref': '#/components/schemas/SubscriptionPricePoint'
                    }
                ]
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const WinBackOfferSchema = {
    type: 'object',
    title: 'WinBackOffer',
    properties: {
        type: {
            type: 'string',
            enum: ['winBackOffers']
        },
        id: {
            type: 'string'
        },
        attributes: {
            type: 'object',
            properties: {
                referenceName: {
                    type: 'string'
                },
                offerId: {
                    type: 'string'
                },
                duration: {
                    '$ref': '#/components/schemas/SubscriptionOfferDuration'
                },
                offerMode: {
                    '$ref': '#/components/schemas/SubscriptionOfferMode'
                },
                periodCount: {
                    type: 'integer'
                },
                customerEligibilityPaidSubscriptionDurationInMonths: {
                    type: 'integer'
                },
                customerEligibilityTimeSinceLastSubscribedInMonths: {
                    '$ref': '#/components/schemas/IntegerRange'
                },
                customerEligibilityWaitBetweenOffersInMonths: {
                    type: 'integer'
                },
                startDate: {
                    type: 'string',
                    format: 'date'
                },
                endDate: {
                    type: 'string',
                    format: 'date'
                },
                priority: {
                    type: 'string',
                    enum: ['HIGH', 'NORMAL']
                },
                promotionIntent: {
                    type: 'string',
                    enum: ['NOT_PROMOTED', 'USE_AUTO_GENERATED_ASSETS']
                }
            }
        },
        relationships: {
            type: 'object',
            properties: {
                prices: {
                    type: 'object',
                    properties: {
                        links: {
                            '$ref': '#/components/schemas/RelationshipLinks'
                        },
                        meta: {
                            '$ref': '#/components/schemas/PagingInformation'
                        },
                        data: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['winBackOfferPrices']
                                    },
                                    id: {
                                        type: 'string'
                                    }
                                },
                                required: ['id', 'type']
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/ResourceLinks'
        }
    },
    required: ['id', 'type']
} as const;

export const WinBackOffersResponseSchema = {
    type: 'object',
    title: 'WinBackOffersResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WinBackOffer'
            }
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WinBackOfferPrice'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const WinBackOfferResponseSchema = {
    type: 'object',
    title: 'WinBackOfferResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/WinBackOffer'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WinBackOfferPrice'
            }
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const WinBackOfferCreateRequestSchema = {
    type: 'object',
    title: 'WinBackOfferCreateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['winBackOffers']
                },
                attributes: {
                    type: 'object',
                    properties: {
                        referenceName: {
                            type: 'string'
                        },
                        offerId: {
                            type: 'string'
                        },
                        duration: {
                            '$ref': '#/components/schemas/SubscriptionOfferDuration'
                        },
                        offerMode: {
                            '$ref': '#/components/schemas/SubscriptionOfferMode'
                        },
                        periodCount: {
                            type: 'integer'
                        },
                        customerEligibilityPaidSubscriptionDurationInMonths: {
                            type: 'integer'
                        },
                        customerEligibilityTimeSinceLastSubscribedInMonths: {
                            '$ref': '#/components/schemas/IntegerRange'
                        },
                        customerEligibilityWaitBetweenOffersInMonths: {
                            type: 'integer'
                        },
                        startDate: {
                            type: 'string',
                            format: 'date'
                        },
                        endDate: {
                            type: 'string',
                            format: 'date'
                        },
                        priority: {
                            type: 'string',
                            enum: ['HIGH', 'NORMAL']
                        },
                        promotionIntent: {
                            type: 'string',
                            enum: ['NOT_PROMOTED', 'USE_AUTO_GENERATED_ASSETS']
                        }
                    },
                    required: ['duration', 'customerEligibilityTimeSinceLastSubscribedInMonths', 'periodCount', 'offerId', 'offerMode', 'priority', 'customerEligibilityPaidSubscriptionDurationInMonths', 'startDate', 'referenceName']
                },
                relationships: {
                    type: 'object',
                    properties: {
                        subscription: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'object',
                                    properties: {
                                        type: {
                                            type: 'string',
                                            enum: ['subscriptions']
                                        },
                                        id: {
                                            type: 'string'
                                        }
                                    },
                                    required: ['id', 'type']
                                }
                            },
                            required: ['data']
                        },
                        prices: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            type: {
                                                type: 'string',
                                                enum: ['winBackOfferPrices']
                                            },
                                            id: {
                                                type: 'string'
                                            }
                                        },
                                        required: ['id', 'type']
                                    }
                                }
                            },
                            required: ['data']
                        }
                    },
                    required: ['subscription', 'prices']
                }
            },
            required: ['relationships', 'attributes', 'type']
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/WinBackOfferPriceInlineCreate'
            }
        }
    },
    required: ['data']
} as const;

export const WinBackOfferUpdateRequestSchema = {
    type: 'object',
    title: 'WinBackOfferUpdateRequest',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['winBackOffers']
                },
                id: {
                    type: 'string'
                },
                attributes: {
                    type: 'object',
                    properties: {
                        customerEligibilityPaidSubscriptionDurationInMonths: {
                            type: 'integer'
                        },
                        customerEligibilityTimeSinceLastSubscribedInMonths: {
                            '$ref': '#/components/schemas/IntegerRange'
                        },
                        customerEligibilityWaitBetweenOffersInMonths: {
                            type: 'integer'
                        },
                        startDate: {
                            type: 'string',
                            format: 'date'
                        },
                        endDate: {
                            type: 'string',
                            format: 'date'
                        },
                        priority: {
                            type: 'string',
                            enum: ['HIGH', 'NORMAL']
                        },
                        promotionIntent: {
                            type: 'string',
                            enum: ['NOT_PROMOTED', 'USE_AUTO_GENERATED_ASSETS']
                        }
                    }
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppCategoryWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'AppCategoryWithoutIncludesResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppCategory'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppCategoriesWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'AppCategoriesWithoutIncludesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppCategory'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersions']
                },
                id: {
                    type: 'string'
                }
            },
            required: ['id', 'type']
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appStoreVersions']
                },
                id: {
                    type: 'string'
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'AppWithoutIncludesResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/App'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppEncryptionDeclarationBuildsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['builds']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data'],
    deprecated: true
} as const;

export const AppPreviewSetAppPreviewsLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['appPreviews']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppPreviewSetAppPreviewsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['appPreviews']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const AppScreenshotSetAppScreenshotsLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['appScreenshots']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppScreenshotSetAppScreenshotsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['appScreenshots']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const AgeRatingDeclarationWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'AgeRatingDeclarationWithoutIncludesResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AgeRatingDeclaration'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionAppClipDefaultExperienceLinkageResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appClipDefaultExperiences']
                },
                id: {
                    type: 'string'
                }
            },
            required: ['id', 'type']
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionAppClipDefaultExperienceLinkageRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appClipDefaultExperiences']
                },
                id: {
                    type: 'string'
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const AppStoreVersionPhasedReleaseWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'AppStoreVersionPhasedReleaseWithoutIncludesResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppStoreVersionPhasedRelease'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BuildWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'BuildWithoutIncludesResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/Build'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionBuildLinkageResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['builds']
                },
                id: {
                    type: 'string'
                }
            },
            required: ['id', 'type']
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppStoreVersionBuildLinkageRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['builds']
                },
                id: {
                    type: 'string'
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const RoutingAppCoverageWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'RoutingAppCoverageWithoutIncludesResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/RoutingAppCoverage'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaAppLocalizationsWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'BetaAppLocalizationsWithoutIncludesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BetaAppLocalization'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaAppReviewDetailWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'BetaAppReviewDetailWithoutIncludesResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BetaAppReviewDetail'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaGroupsWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'BetaGroupsWithoutIncludesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BetaGroup'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaLicenseAgreementWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'BetaLicenseAgreementWithoutIncludesResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BetaLicenseAgreement'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const AppBetaTestersLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['betaTesters']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const BuildsWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'BuildsWithoutIncludesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Build'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const EndUserLicenseAgreementWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'EndUserLicenseAgreementWithoutIncludesResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/EndUserLicenseAgreement'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const PreReleaseVersionsWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'PreReleaseVersionsWithoutIncludesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PrereleaseVersion'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppPromotedPurchasesLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['promotedPurchases']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const AppPromotedPurchasesLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['promotedPurchases']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const BetaTestersWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'BetaTestersWithoutIncludesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BetaTester'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaGroupBetaTestersLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['betaTesters']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaGroupBetaTestersLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['betaTesters']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const BetaGroupBuildsLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['builds']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaGroupBuildsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['builds']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const AppsWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'AppsWithoutIncludesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/App'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaTesterAppsLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['apps']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaTesterAppsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['apps']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const BetaTesterBetaGroupsLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['betaGroups']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaTesterBetaGroupsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['betaGroups']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const BetaTesterBuildsLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['builds']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaTesterBuildsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['builds']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const AppEncryptionDeclarationWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'AppEncryptionDeclarationWithoutIncludesResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/AppEncryptionDeclaration'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BuildAppEncryptionDeclarationLinkageResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appEncryptionDeclarations']
                },
                id: {
                    type: 'string'
                }
            },
            required: ['id', 'type']
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BuildAppEncryptionDeclarationLinkageRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['appEncryptionDeclarations']
                },
                id: {
                    type: 'string'
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data']
} as const;

export const BetaAppReviewSubmissionWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'BetaAppReviewSubmissionWithoutIncludesResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BetaAppReviewSubmission'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaBuildLocalizationsWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'BetaBuildLocalizationsWithoutIncludesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BetaBuildLocalization'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BuildBetaGroupsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['betaGroups']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const BuildIconsWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'BuildIconsWithoutIncludesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BuildIcon'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BuildIndividualTestersLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['betaTesters']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BuildIndividualTestersLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['betaTesters']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const PrereleaseVersionWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'PrereleaseVersionWithoutIncludesResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/PrereleaseVersion'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const BundleIdCapabilitiesWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'BundleIdCapabilitiesWithoutIncludesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BundleIdCapability'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const ProfilesWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'ProfilesWithoutIncludesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Profile'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const TerritoriesWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'TerritoriesWithoutIncludesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Territory'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterAchievementGroupAchievementLinkageResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterAchievements']
                },
                id: {
                    type: 'string'
                }
            },
            required: ['id', 'type']
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links'],
    deprecated: true
} as const;

export const GameCenterAchievementGroupAchievementLinkageRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterAchievements']
                },
                id: {
                    type: 'string'
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data'],
    deprecated: true
} as const;

export const GameCenterAppVersionCompatibilityVersionsLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterAppVersions']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterAppVersionCompatibilityVersionsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterAppVersions']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const GameCenterDetailGameCenterAchievementsLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterAchievements']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterDetailGameCenterAchievementsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterAchievements']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const GameCenterDetailGameCenterLeaderboardSetsLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterLeaderboardSets']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterDetailGameCenterLeaderboardSetsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterLeaderboardSets']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const GameCenterDetailGameCenterLeaderboardsLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterLeaderboards']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterDetailGameCenterLeaderboardsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterLeaderboards']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const GameCenterEnabledVersionCompatibleVersionsLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterEnabledVersions']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links'],
    deprecated: true
} as const;

export const GameCenterEnabledVersionCompatibleVersionsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterEnabledVersions']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data'],
    deprecated: true
} as const;

export const GameCenterGroupGameCenterAchievementsLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterAchievements']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterGroupGameCenterAchievementsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterAchievements']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const GameCenterGroupGameCenterLeaderboardSetsLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterLeaderboardSets']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterGroupGameCenterLeaderboardSetsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterLeaderboardSets']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const GameCenterGroupGameCenterLeaderboardsLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterLeaderboards']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterGroupGameCenterLeaderboardsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterLeaderboards']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterLeaderboards']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['gameCenterLeaderboards']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardSets']
                },
                id: {
                    type: 'string'
                }
            },
            required: ['id', 'type']
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links'],
    deprecated: true
} as const;

export const GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboardSets']
                },
                id: {
                    type: 'string'
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data'],
    deprecated: true
} as const;

export const GameCenterLeaderboardGroupLeaderboardLinkageResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboards']
                },
                id: {
                    type: 'string'
                }
            },
            required: ['id', 'type']
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links'],
    deprecated: true
} as const;

export const GameCenterLeaderboardGroupLeaderboardLinkageRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                    enum: ['gameCenterLeaderboards']
                },
                id: {
                    type: 'string'
                }
            },
            required: ['id', 'type']
        }
    },
    required: ['data'],
    deprecated: true
} as const;

export const BundleIdWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'BundleIdWithoutIncludesResponse',
    properties: {
        data: {
            '$ref': '#/components/schemas/BundleId'
        },
        links: {
            '$ref': '#/components/schemas/DocumentLinks'
        }
    },
    required: ['data', 'links']
} as const;

export const CertificatesWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'CertificatesWithoutIncludesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Certificate'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const DevicesWithoutIncludesResponseSchema = {
    type: 'object',
    title: 'DevicesWithoutIncludesResponse',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Device'
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionIntroductoryOffersLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['subscriptionIntroductoryOffers']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionIntroductoryOffersLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['subscriptionIntroductoryOffers']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const SubscriptionPricesLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['subscriptionPrices']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const SubscriptionPricesLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['subscriptionPrices']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const UserVisibleAppsLinkagesResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['apps']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const UserVisibleAppsLinkagesRequestSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    type: {
                        type: 'string',
                        enum: ['apps']
                    },
                    id: {
                        type: 'string'
                    }
                },
                required: ['id', 'type']
            }
        }
    },
    required: ['data']
} as const;

export const AppsBetaTesterUsagesV1MetricResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    dataPoints: {
                        type: 'object',
                        properties: {
                            start: {
                                type: 'string',
                                format: 'date-time'
                            },
                            end: {
                                type: 'string',
                                format: 'date-time'
                            },
                            values: {
                                type: 'object',
                                properties: {
                                    crashCount: {
                                        type: 'integer'
                                    },
                                    sessionCount: {
                                        type: 'integer'
                                    },
                                    feedbackCount: {
                                        type: 'integer'
                                    }
                                }
                            }
                        }
                    },
                    dimensions: {
                        type: 'object',
                        properties: {
                            betaTesters: {
                                type: 'object',
                                properties: {
                                    links: {
                                        type: 'object',
                                        properties: {
                                            groupBy: {
                                                type: 'string',
                                                format: 'uri-reference'
                                            },
                                            related: {
                                                type: 'string',
                                                format: 'uri-reference'
                                            }
                                        }
                                    },
                                    data: {
                                        type: 'string'
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        },
        included: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BetaTester'
            }
        }
    },
    required: ['data', 'links']
} as const;

export const BetaTesterUsagesV1MetricResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    dataPoints: {
                        type: 'object',
                        properties: {
                            start: {
                                type: 'string',
                                format: 'date-time'
                            },
                            end: {
                                type: 'string',
                                format: 'date-time'
                            },
                            values: {
                                type: 'object',
                                properties: {
                                    crashCount: {
                                        type: 'integer'
                                    },
                                    sessionCount: {
                                        type: 'integer'
                                    },
                                    feedbackCount: {
                                        type: 'integer'
                                    }
                                }
                            }
                        }
                    },
                    dimensions: {
                        type: 'object',
                        properties: {
                            apps: {
                                type: 'object',
                                properties: {
                                    links: {
                                        type: 'object',
                                        properties: {
                                            groupBy: {
                                                type: 'string',
                                                format: 'uri-reference'
                                            },
                                            related: {
                                                type: 'string',
                                                format: 'uri-reference'
                                            }
                                        }
                                    },
                                    data: {
                                        type: 'string'
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const BetaBuildUsagesV1MetricResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    dataPoints: {
                        type: 'object',
                        properties: {
                            start: {
                                type: 'string',
                                format: 'date-time'
                            },
                            end: {
                                type: 'string',
                                format: 'date-time'
                            },
                            values: {
                                type: 'object',
                                properties: {
                                    crashCount: {
                                        type: 'integer'
                                    },
                                    installCount: {
                                        type: 'integer'
                                    },
                                    sessionCount: {
                                        type: 'integer'
                                    },
                                    feedbackCount: {
                                        type: 'integer'
                                    },
                                    inviteCount: {
                                        type: 'integer'
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterMatchmakingAppRequestsV1MetricResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    dataPoints: {
                        type: 'object',
                        properties: {
                            start: {
                                type: 'string',
                                format: 'date-time'
                            },
                            end: {
                                type: 'string',
                                format: 'date-time'
                            },
                            values: {
                                type: 'object',
                                properties: {
                                    count: {
                                        type: 'integer'
                                    },
                                    averageSecondsInQueue: {
                                        type: 'number'
                                    },
                                    p50SecondsInQueue: {
                                        type: 'number'
                                    },
                                    p95SecondsInQueue: {
                                        type: 'number'
                                    }
                                }
                            }
                        }
                    },
                    dimensions: {
                        type: 'object',
                        properties: {
                            result: {
                                type: 'object',
                                properties: {
                                    links: {
                                        type: 'object',
                                        properties: {
                                            groupBy: {
                                                type: 'string',
                                                format: 'uri-reference'
                                            }
                                        }
                                    },
                                    data: {
                                        type: 'string',
                                        enum: ['MATCHED', 'CANCELED', 'EXPIRED']
                                    }
                                }
                            }
                        }
                    },
                    granularity: {
                        type: 'string',
                        enum: ['P1D', 'PT1H', 'PT15M']
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterMatchmakingQueueSizesV1MetricResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    dataPoints: {
                        type: 'object',
                        properties: {
                            start: {
                                type: 'string',
                                format: 'date-time'
                            },
                            end: {
                                type: 'string',
                                format: 'date-time'
                            },
                            values: {
                                type: 'object',
                                properties: {
                                    count: {
                                        type: 'integer'
                                    },
                                    averageNumberOfRequests: {
                                        type: 'number'
                                    },
                                    p50NumberOfRequests: {
                                        type: 'number'
                                    },
                                    p95NumberOfRequests: {
                                        type: 'number'
                                    }
                                }
                            }
                        }
                    },
                    granularity: {
                        type: 'string',
                        enum: ['P1D', 'PT1H', 'PT15M']
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterMatchmakingQueueRequestsV1MetricResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    dataPoints: {
                        type: 'object',
                        properties: {
                            start: {
                                type: 'string',
                                format: 'date-time'
                            },
                            end: {
                                type: 'string',
                                format: 'date-time'
                            },
                            values: {
                                type: 'object',
                                properties: {
                                    count: {
                                        type: 'integer'
                                    },
                                    averageSecondsInQueue: {
                                        type: 'number'
                                    },
                                    p50SecondsInQueue: {
                                        type: 'number'
                                    },
                                    p95SecondsInQueue: {
                                        type: 'number'
                                    }
                                }
                            }
                        }
                    },
                    dimensions: {
                        type: 'object',
                        properties: {
                            result: {
                                type: 'object',
                                properties: {
                                    links: {
                                        type: 'object',
                                        properties: {
                                            groupBy: {
                                                type: 'string',
                                                format: 'uri-reference'
                                            }
                                        }
                                    },
                                    data: {
                                        type: 'string',
                                        enum: ['MATCHED', 'CANCELED', 'EXPIRED']
                                    }
                                }
                            },
                            gameCenterDetail: {
                                type: 'object',
                                properties: {
                                    links: {
                                        type: 'object',
                                        properties: {
                                            groupBy: {
                                                type: 'string',
                                                format: 'uri-reference'
                                            },
                                            related: {
                                                type: 'string',
                                                format: 'uri-reference'
                                            }
                                        }
                                    },
                                    data: {
                                        type: 'string'
                                    }
                                }
                            }
                        }
                    },
                    granularity: {
                        type: 'string',
                        enum: ['P1D', 'PT1H', 'PT15M']
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterMatchmakingSessionsV1MetricResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    dataPoints: {
                        type: 'object',
                        properties: {
                            start: {
                                type: 'string',
                                format: 'date-time'
                            },
                            end: {
                                type: 'string',
                                format: 'date-time'
                            },
                            values: {
                                type: 'object',
                                properties: {
                                    count: {
                                        type: 'integer'
                                    },
                                    averagePlayerCount: {
                                        type: 'number'
                                    },
                                    p50PlayerCount: {
                                        type: 'number'
                                    },
                                    p95PlayerCount: {
                                        type: 'number'
                                    }
                                }
                            }
                        }
                    },
                    granularity: {
                        type: 'string',
                        enum: ['P1D', 'PT1H', 'PT15M']
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterMatchmakingBooleanRuleResultsV1MetricResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    dataPoints: {
                        type: 'object',
                        properties: {
                            start: {
                                type: 'string',
                                format: 'date-time'
                            },
                            end: {
                                type: 'string',
                                format: 'date-time'
                            },
                            values: {
                                type: 'object',
                                properties: {
                                    count: {
                                        type: 'integer'
                                    }
                                }
                            }
                        }
                    },
                    dimensions: {
                        type: 'object',
                        properties: {
                            result: {
                                type: 'object',
                                properties: {
                                    links: {
                                        type: 'object',
                                        properties: {
                                            groupBy: {
                                                type: 'string',
                                                format: 'uri-reference'
                                            }
                                        }
                                    },
                                    data: {
                                        type: 'string'
                                    }
                                }
                            },
                            gameCenterMatchmakingQueue: {
                                type: 'object',
                                properties: {
                                    links: {
                                        type: 'object',
                                        properties: {
                                            groupBy: {
                                                type: 'string',
                                                format: 'uri-reference'
                                            },
                                            related: {
                                                type: 'string',
                                                format: 'uri-reference'
                                            }
                                        }
                                    },
                                    data: {
                                        type: 'string'
                                    }
                                }
                            }
                        }
                    },
                    granularity: {
                        type: 'string',
                        enum: ['P1D', 'PT1H', 'PT15M']
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterMatchmakingNumberRuleResultsV1MetricResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    dataPoints: {
                        type: 'object',
                        properties: {
                            start: {
                                type: 'string',
                                format: 'date-time'
                            },
                            end: {
                                type: 'string',
                                format: 'date-time'
                            },
                            values: {
                                type: 'object',
                                properties: {
                                    count: {
                                        type: 'integer'
                                    },
                                    averageResult: {
                                        type: 'number'
                                    },
                                    p50Result: {
                                        type: 'number'
                                    },
                                    p95Result: {
                                        type: 'number'
                                    }
                                }
                            }
                        }
                    },
                    dimensions: {
                        type: 'object',
                        properties: {
                            gameCenterMatchmakingQueue: {
                                type: 'object',
                                properties: {
                                    links: {
                                        type: 'object',
                                        properties: {
                                            groupBy: {
                                                type: 'string',
                                                format: 'uri-reference'
                                            },
                                            related: {
                                                type: 'string',
                                                format: 'uri-reference'
                                            }
                                        }
                                    },
                                    data: {
                                        type: 'string'
                                    }
                                }
                            }
                        }
                    },
                    granularity: {
                        type: 'string',
                        enum: ['P1D', 'PT1H', 'PT15M']
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const GameCenterMatchmakingRuleErrorsV1MetricResponseSchema = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    dataPoints: {
                        type: 'object',
                        properties: {
                            start: {
                                type: 'string',
                                format: 'date-time'
                            },
                            end: {
                                type: 'string',
                                format: 'date-time'
                            },
                            values: {
                                type: 'object',
                                properties: {
                                    count: {
                                        type: 'integer'
                                    }
                                }
                            }
                        }
                    },
                    dimensions: {
                        type: 'object',
                        properties: {
                            gameCenterMatchmakingQueue: {
                                type: 'object',
                                properties: {
                                    links: {
                                        type: 'object',
                                        properties: {
                                            groupBy: {
                                                type: 'string',
                                                format: 'uri-reference'
                                            },
                                            related: {
                                                type: 'string',
                                                format: 'uri-reference'
                                            }
                                        }
                                    },
                                    data: {
                                        type: 'string'
                                    }
                                }
                            }
                        }
                    },
                    granularity: {
                        type: 'string',
                        enum: ['P1D', 'PT1H', 'PT15M']
                    }
                }
            }
        },
        links: {
            '$ref': '#/components/schemas/PagedDocumentLinks'
        },
        meta: {
            '$ref': '#/components/schemas/PagingInformation'
        }
    },
    required: ['data', 'links']
} as const;

export const ErrorResponseSchema = {
    type: 'object',
    properties: {
        errors: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string'
                    },
                    status: {
                        type: 'string'
                    },
                    code: {
                        type: 'string'
                    },
                    title: {
                        type: 'string'
                    },
                    detail: {
                        type: 'string'
                    },
                    source: {
                        oneOf: [
                            {
                                '$ref': '#/components/schemas/ErrorSourcePointer'
                            },
                            {
                                '$ref': '#/components/schemas/ErrorSourceParameter'
                            }
                        ]
                    },
                    links: {
                        '$ref': '#/components/schemas/ErrorLinks'
                    },
                    meta: {
                        type: 'object',
                        additionalProperties: {}
                    }
                },
                required: ['code', 'detail', 'status', 'title']
            }
        }
    }
} as const;

export const ErrorSourceParameterSchema = {
    type: 'object',
    title: 'Parameter',
    properties: {
        parameter: {
            type: 'string'
        }
    },
    required: ['parameter']
} as const;

export const ErrorSourcePointerSchema = {
    type: 'object',
    title: 'JsonPointer',
    properties: {
        pointer: {
            type: 'string'
        }
    },
    required: ['pointer']
} as const;

export const ErrorLinksSchema = {
    type: 'object',
    properties: {
        about: {
            type: 'string',
            format: 'uri-reference'
        },
        associated: {
            oneOf: [
                {
                    type: 'string',
                    format: 'uri-reference'
                },
                {
                    type: 'object',
                    properties: {
                        href: {
                            type: 'string',
                            format: 'uri-reference'
                        },
                        meta: {
                            type: 'object',
                            properties: {
                                source: {
                                    type: 'string'
                                }
                            }
                        }
                    }
                }
            ]
        }
    }
} as const;

export const PagedDocumentLinksSchema = {
    type: 'object',
    properties: {
        self: {
            type: 'string',
            format: 'uri-reference'
        },
        first: {
            type: 'string',
            format: 'uri-reference'
        },
        next: {
            type: 'string',
            format: 'uri-reference'
        }
    },
    required: ['self']
} as const;

export const PagingInformationSchema = {
    type: 'object',
    properties: {
        paging: {
            type: 'object',
            properties: {
                total: {
                    type: 'integer'
                },
                limit: {
                    type: 'integer'
                }
            },
            required: ['limit']
        }
    },
    required: ['paging']
} as const;

export const DocumentLinksSchema = {
    type: 'object',
    properties: {
        self: {
            type: 'string',
            format: 'uri-reference'
        }
    },
    required: ['self']
} as const;

export const ResourceLinksSchema = {
    type: 'object',
    properties: {
        self: {
            type: 'string',
            format: 'uri-reference'
        }
    }
} as const;

export const RelationshipLinksSchema = {
    type: 'object',
    properties: {
        self: {
            type: 'string',
            format: 'uri-reference'
        },
        related: {
            type: 'string',
            format: 'uri-reference'
        }
    }
} as const;

export const AppClipActionSchema = {
    type: 'string',
    enum: ['OPEN', 'VIEW', 'PLAY']
} as const;

export const AppClipAdvancedExperienceLanguageSchema = {
    type: 'string',
    enum: ['AR', 'CA', 'CS', 'DA', 'DE', 'EL', 'EN', 'ES', 'FI', 'FR', 'HE', 'HI', 'HR', 'HU', 'ID', 'IT', 'JA', 'KO', 'MS', 'NL', 'NO', 'PL', 'PT', 'RO', 'RU', 'SK', 'SV', 'TH', 'TR', 'UK', 'VI', 'ZH']
} as const;

export const AppEncryptionDeclarationStateSchema = {
    type: 'string',
    enum: ['CREATED', 'IN_REVIEW', 'APPROVED', 'REJECTED', 'INVALID', 'EXPIRED']
} as const;

export const AppEventAssetTypeSchema = {
    type: 'string',
    enum: ['EVENT_CARD', 'EVENT_DETAILS_PAGE']
} as const;

export const AppMediaAssetStateSchema = {
    type: 'object',
    properties: {
        errors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppMediaStateError'
            }
        },
        warnings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppMediaStateError'
            }
        },
        state: {
            type: 'string',
            enum: ['AWAITING_UPLOAD', 'UPLOAD_COMPLETE', 'COMPLETE', 'FAILED']
        }
    }
} as const;

export const AppMediaPreviewFrameImageStateSchema = {
    type: 'object',
    properties: {
        errors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppMediaStateError'
            }
        },
        warnings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppMediaStateError'
            }
        },
        state: {
            type: 'string',
            enum: ['PROCESSING', 'COMPLETE', 'FAILED']
        }
    }
} as const;

export const AppMediaStateErrorSchema = {
    type: 'object',
    properties: {
        code: {
            type: 'string'
        },
        description: {
            type: 'string'
        }
    }
} as const;

export const AppMediaVideoStateSchema = {
    type: 'object',
    properties: {
        errors: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppMediaStateError'
            }
        },
        warnings: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AppMediaStateError'
            }
        },
        state: {
            type: 'string',
            enum: ['AWAITING_UPLOAD', 'UPLOAD_COMPLETE', 'PROCESSING', 'COMPLETE', 'FAILED']
        }
    }
} as const;

export const AppStoreAgeRatingSchema = {
    type: 'string',
    enum: ['FOUR_PLUS', 'NINE_PLUS', 'TWELVE_PLUS', 'SEVENTEEN_PLUS', 'UNRATED']
} as const;

export const AppStoreVersionStateSchema = {
    type: 'string',
    enum: ['ACCEPTED', 'DEVELOPER_REMOVED_FROM_SALE', 'DEVELOPER_REJECTED', 'IN_REVIEW', 'INVALID_BINARY', 'METADATA_REJECTED', 'PENDING_APPLE_RELEASE', 'PENDING_CONTRACT', 'PENDING_DEVELOPER_RELEASE', 'PREPARE_FOR_SUBMISSION', 'PREORDER_READY_FOR_SALE', 'PROCESSING_FOR_APP_STORE', 'READY_FOR_REVIEW', 'READY_FOR_SALE', 'REJECTED', 'REMOVED_FROM_SALE', 'WAITING_FOR_EXPORT_COMPLIANCE', 'WAITING_FOR_REVIEW', 'REPLACED_WITH_NEW_VERSION', 'NOT_APPLICABLE']
} as const;

export const AppVersionStateSchema = {
    type: 'string',
    enum: ['ACCEPTED', 'DEVELOPER_REJECTED', 'IN_REVIEW', 'INVALID_BINARY', 'METADATA_REJECTED', 'PENDING_APPLE_RELEASE', 'PENDING_DEVELOPER_RELEASE', 'PREPARE_FOR_SUBMISSION', 'PROCESSING_FOR_DISTRIBUTION', 'READY_FOR_DISTRIBUTION', 'READY_FOR_REVIEW', 'REJECTED', 'REPLACED_WITH_NEW_VERSION', 'WAITING_FOR_EXPORT_COMPLIANCE', 'WAITING_FOR_REVIEW']
} as const;

export const BetaInviteTypeSchema = {
    type: 'string',
    enum: ['EMAIL', 'PUBLIC_LINK']
} as const;

export const BetaReviewStateSchema = {
    type: 'string',
    enum: ['WAITING_FOR_REVIEW', 'IN_REVIEW', 'REJECTED', 'APPROVED']
} as const;

export const BetaTesterStateSchema = {
    type: 'string',
    enum: ['NOT_INVITED', 'INVITED', 'ACCEPTED', 'INSTALLED', 'REVOKED']
} as const;

export const BrazilAgeRatingSchema = {
    type: 'string',
    enum: ['L', 'TEN', 'TWELVE', 'FOURTEEN', 'SIXTEEN', 'EIGHTEEN']
} as const;

export const BuildAudienceTypeSchema = {
    type: 'string',
    enum: ['INTERNAL_ONLY', 'APP_STORE_ELIGIBLE']
} as const;

export const BundleIdPlatformSchema = {
    type: 'string',
    enum: ['IOS', 'MAC_OS', 'UNIVERSAL']
} as const;

export const CapabilityOptionSchema = {
    type: 'object',
    properties: {
        key: {
            type: 'string',
            enum: ['XCODE_5', 'XCODE_6', 'COMPLETE_PROTECTION', 'PROTECTED_UNLESS_OPEN', 'PROTECTED_UNTIL_FIRST_USER_AUTH', 'PRIMARY_APP_CONSENT']
        },
        name: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        enabledByDefault: {
            type: 'boolean'
        },
        enabled: {
            type: 'boolean'
        },
        supportsWildcard: {
            type: 'boolean'
        }
    }
} as const;

export const CapabilitySettingSchema = {
    type: 'object',
    properties: {
        key: {
            type: 'string',
            enum: ['ICLOUD_VERSION', 'DATA_PROTECTION_PERMISSION_LEVEL', 'APPLE_ID_AUTH_APP_CONSENT']
        },
        name: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        enabledByDefault: {
            type: 'boolean'
        },
        visible: {
            type: 'boolean'
        },
        allowedInstances: {
            type: 'string',
            enum: ['ENTRY', 'SINGLE', 'MULTIPLE']
        },
        minInstances: {
            type: 'integer'
        },
        options: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CapabilityOption'
            }
        }
    }
} as const;

export const CapabilityTypeSchema = {
    type: 'string',
    enum: ['ICLOUD', 'IN_APP_PURCHASE', 'GAME_CENTER', 'PUSH_NOTIFICATIONS', 'WALLET', 'INTER_APP_AUDIO', 'MAPS', 'ASSOCIATED_DOMAINS', 'PERSONAL_VPN', 'APP_GROUPS', 'HEALTHKIT', 'HOMEKIT', 'WIRELESS_ACCESSORY_CONFIGURATION', 'APPLE_PAY', 'DATA_PROTECTION', 'SIRIKIT', 'NETWORK_EXTENSIONS', 'MULTIPATH', 'HOT_SPOT', 'NFC_TAG_READING', 'CLASSKIT', 'AUTOFILL_CREDENTIAL_PROVIDER', 'ACCESS_WIFI_INFORMATION', 'NETWORK_CUSTOM_PROTOCOL', 'COREMEDIA_HLS_LOW_LATENCY', 'SYSTEM_EXTENSION_INSTALL', 'USER_MANAGEMENT', 'APPLE_ID_AUTH']
} as const;

export const CertificateTypeSchema = {
    type: 'string',
    enum: ['IOS_DEVELOPMENT', 'IOS_DISTRIBUTION', 'MAC_APP_DISTRIBUTION', 'MAC_INSTALLER_DISTRIBUTION', 'MAC_APP_DEVELOPMENT', 'DEVELOPER_ID_KEXT', 'DEVELOPER_ID_KEXT_G2', 'DEVELOPER_ID_APPLICATION', 'DEVELOPER_ID_APPLICATION_G2', 'DEVELOPMENT', 'DISTRIBUTION', 'PASS_TYPE_ID', 'PASS_TYPE_ID_WITH_NFC']
} as const;

export const CiActionSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        actionType: {
            '$ref': '#/components/schemas/CiActionType'
        },
        destination: {
            type: 'string',
            enum: ['ANY_IOS_DEVICE', 'ANY_IOS_SIMULATOR', 'ANY_TVOS_DEVICE', 'ANY_TVOS_SIMULATOR', 'ANY_WATCHOS_DEVICE', 'ANY_WATCHOS_SIMULATOR', 'ANY_MAC', 'ANY_MAC_CATALYST', 'ANY_VISIONOS_DEVICE', 'ANY_VISIONOS_SIMULATOR']
        },
        buildDistributionAudience: {
            '$ref': '#/components/schemas/BuildAudienceType'
        },
        testConfiguration: {
            type: 'object',
            properties: {
                kind: {
                    type: 'string',
                    enum: ['USE_SCHEME_SETTINGS', 'SPECIFIC_TEST_PLANS']
                },
                testPlanName: {
                    type: 'string'
                },
                testDestinations: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/CiTestDestination'
                    }
                }
            }
        },
        scheme: {
            type: 'string'
        },
        platform: {
            type: 'string',
            enum: ['MACOS', 'IOS', 'TVOS', 'WATCHOS', 'VISIONOS']
        },
        isRequiredToPass: {
            type: 'boolean'
        }
    }
} as const;

export const CiActionTypeSchema = {
    type: 'string',
    enum: ['BUILD', 'ANALYZE', 'TEST', 'ARCHIVE']
} as const;

export const CiBranchPatternsSchema = {
    type: 'object',
    properties: {
        isAllMatch: {
            type: 'boolean'
        },
        patterns: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    pattern: {
                        type: 'string'
                    },
                    isPrefix: {
                        type: 'boolean'
                    }
                }
            }
        }
    }
} as const;

export const CiBranchStartConditionSchema = {
    type: 'object',
    properties: {
        source: {
            '$ref': '#/components/schemas/CiBranchPatterns'
        },
        filesAndFoldersRule: {
            '$ref': '#/components/schemas/CiFilesAndFoldersRule'
        },
        autoCancel: {
            type: 'boolean'
        }
    }
} as const;

export const CiCompletionStatusSchema = {
    type: 'string',
    enum: ['SUCCEEDED', 'FAILED', 'ERRORED', 'CANCELED', 'SKIPPED']
} as const;

export const CiExecutionProgressSchema = {
    type: 'string',
    enum: ['PENDING', 'RUNNING', 'COMPLETE']
} as const;

export const CiFilesAndFoldersRuleSchema = {
    type: 'object',
    properties: {
        mode: {
            type: 'string',
            enum: ['START_IF_ANY_FILE_MATCHES', 'DO_NOT_START_IF_ALL_FILES_MATCH']
        },
        matchers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CiStartConditionFileMatcher'
            }
        }
    }
} as const;

export const CiGitRefKindSchema = {
    type: 'string',
    enum: ['BRANCH', 'TAG']
} as const;

export const CiGitUserSchema = {
    type: 'object',
    properties: {
        displayName: {
            type: 'string'
        },
        avatarUrl: {
            type: 'string',
            format: 'uri'
        }
    }
} as const;

export const CiIssueCountsSchema = {
    type: 'object',
    properties: {
        analyzerWarnings: {
            type: 'integer'
        },
        errors: {
            type: 'integer'
        },
        testFailures: {
            type: 'integer'
        },
        warnings: {
            type: 'integer'
        }
    }
} as const;

export const CiManualBranchStartConditionSchema = {
    type: 'object',
    properties: {
        source: {
            '$ref': '#/components/schemas/CiBranchPatterns'
        }
    }
} as const;

export const CiManualPullRequestStartConditionSchema = {
    type: 'object',
    properties: {
        source: {
            '$ref': '#/components/schemas/CiBranchPatterns'
        },
        destination: {
            '$ref': '#/components/schemas/CiBranchPatterns'
        }
    }
} as const;

export const CiManualTagStartConditionSchema = {
    type: 'object',
    properties: {
        source: {
            '$ref': '#/components/schemas/CiTagPatterns'
        }
    }
} as const;

export const CiPullRequestStartConditionSchema = {
    type: 'object',
    properties: {
        source: {
            '$ref': '#/components/schemas/CiBranchPatterns'
        },
        destination: {
            '$ref': '#/components/schemas/CiBranchPatterns'
        },
        filesAndFoldersRule: {
            '$ref': '#/components/schemas/CiFilesAndFoldersRule'
        },
        autoCancel: {
            type: 'boolean'
        }
    }
} as const;

export const CiScheduledStartConditionSchema = {
    type: 'object',
    properties: {
        source: {
            '$ref': '#/components/schemas/CiBranchPatterns'
        },
        schedule: {
            type: 'object',
            properties: {
                frequency: {
                    type: 'string',
                    enum: ['WEEKLY', 'DAILY', 'HOURLY']
                },
                days: {
                    type: 'array',
                    items: {
                        type: 'string',
                        enum: ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY']
                    }
                },
                hour: {
                    type: 'integer'
                },
                minute: {
                    type: 'integer'
                },
                timezone: {
                    type: 'string'
                }
            }
        }
    }
} as const;

export const CiStartConditionFileMatcherSchema = {
    type: 'object',
    properties: {
        directory: {
            type: 'string'
        },
        fileExtension: {
            type: 'string'
        },
        fileName: {
            type: 'string'
        }
    }
} as const;

export const CiTagPatternsSchema = {
    type: 'object',
    properties: {
        isAllMatch: {
            type: 'boolean'
        },
        patterns: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    pattern: {
                        type: 'string'
                    },
                    isPrefix: {
                        type: 'boolean'
                    }
                }
            }
        }
    }
} as const;

export const CiTagStartConditionSchema = {
    type: 'object',
    properties: {
        source: {
            '$ref': '#/components/schemas/CiTagPatterns'
        },
        filesAndFoldersRule: {
            '$ref': '#/components/schemas/CiFilesAndFoldersRule'
        },
        autoCancel: {
            type: 'boolean'
        }
    }
} as const;

export const CiTestDestinationSchema = {
    type: 'object',
    properties: {
        deviceTypeName: {
            type: 'string'
        },
        deviceTypeIdentifier: {
            type: 'string'
        },
        runtimeName: {
            type: 'string'
        },
        runtimeIdentifier: {
            type: 'string'
        },
        kind: {
            '$ref': '#/components/schemas/CiTestDestinationKind'
        }
    }
} as const;

export const CiTestDestinationKindSchema = {
    type: 'string',
    enum: ['SIMULATOR', 'MAC']
} as const;

export const CiTestStatusSchema = {
    type: 'string',
    enum: ['SUCCESS', 'FAILURE', 'MIXED', 'SKIPPED', 'EXPECTED_FAILURE']
} as const;

export const DiagnosticInsightSchema = {
    type: 'object',
    properties: {
        insightType: {
            '$ref': '#/components/schemas/DiagnosticInsightType'
        },
        direction: {
            '$ref': '#/components/schemas/DiagnosticInsightDirection'
        },
        referenceVersions: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    version: {
                        type: 'string'
                    },
                    value: {
                        type: 'number'
                    }
                }
            }
        }
    }
} as const;

export const DiagnosticInsightDirectionSchema = {
    type: 'string',
    enum: ['UP', 'DOWN', 'UNDEFINED']
} as const;

export const DiagnosticInsightTypeSchema = {
    type: 'string',
    enum: ['TREND']
} as const;

export const DiagnosticLogCallStackNodeSchema = {
    type: 'object',
    properties: {
        sampleCount: {
            type: 'integer'
        },
        isBlameFrame: {
            type: 'boolean'
        },
        symbolName: {
            type: 'string'
        },
        insightsCategory: {
            type: 'string'
        },
        offsetIntoSymbol: {
            type: 'string'
        },
        binaryName: {
            type: 'string'
        },
        fileName: {
            type: 'string'
        },
        binaryUUID: {
            type: 'string'
        },
        lineNumber: {
            type: 'string'
        },
        address: {
            type: 'string'
        },
        offsetIntoBinaryTextSegment: {
            type: 'string'
        },
        rawFrame: {
            type: 'string'
        },
        subFrames: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DiagnosticLogCallStackNode'
            }
        }
    }
} as const;

export const ExternalBetaStateSchema = {
    type: 'string',
    enum: ['PROCESSING', 'PROCESSING_EXCEPTION', 'MISSING_EXPORT_COMPLIANCE', 'READY_FOR_BETA_TESTING', 'IN_BETA_TESTING', 'EXPIRED', 'READY_FOR_BETA_SUBMISSION', 'IN_EXPORT_COMPLIANCE_REVIEW', 'WAITING_FOR_BETA_REVIEW', 'IN_BETA_REVIEW', 'BETA_REJECTED', 'BETA_APPROVED']
} as const;

export const FileLocationSchema = {
    type: 'object',
    properties: {
        path: {
            type: 'string'
        },
        lineNumber: {
            type: 'integer'
        }
    }
} as const;

export const GameCenterLeaderboardFormatterSchema = {
    type: 'string',
    enum: ['INTEGER', 'DECIMAL_POINT_1_PLACE', 'DECIMAL_POINT_2_PLACE', 'DECIMAL_POINT_3_PLACE', 'ELAPSED_TIME_MILLISECOND', 'ELAPSED_TIME_CENTISECOND', 'ELAPSED_TIME_MINUTE', 'ELAPSED_TIME_SECOND', 'MONEY_POUND_DECIMAL', 'MONEY_POUND', 'MONEY_DOLLAR_DECIMAL', 'MONEY_DOLLAR', 'MONEY_EURO_DECIMAL', 'MONEY_EURO', 'MONEY_FRANC_DECIMAL', 'MONEY_FRANC', 'MONEY_KRONER_DECIMAL', 'MONEY_KRONER', 'MONEY_YEN']
} as const;

export const GameCenterMatchmakingTeamAssignmentSchema = {
    type: 'object',
    properties: {
        playerId: {
            type: 'string'
        },
        team: {
            type: 'string'
        }
    }
} as const;

export const HttpHeaderSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const IconAssetTypeSchema = {
    type: 'string',
    enum: ['APP_STORE', 'MESSAGES_APP_STORE', 'WATCH_APP_STORE', 'TV_OS_HOME_SCREEN', 'TV_OS_TOP_SHELF', 'ALTERNATE_EXPERIMENT']
} as const;

export const ImageAssetSchema = {
    type: 'object',
    properties: {
        templateUrl: {
            type: 'string'
        },
        width: {
            type: 'integer'
        },
        height: {
            type: 'integer'
        }
    }
} as const;

export const InAppPurchaseStateSchema = {
    type: 'string',
    enum: ['MISSING_METADATA', 'WAITING_FOR_UPLOAD', 'PROCESSING_CONTENT', 'READY_TO_SUBMIT', 'WAITING_FOR_REVIEW', 'IN_REVIEW', 'DEVELOPER_ACTION_NEEDED', 'PENDING_BINARY_APPROVAL', 'APPROVED', 'DEVELOPER_REMOVED_FROM_SALE', 'REMOVED_FROM_SALE', 'REJECTED']
} as const;

export const InAppPurchaseTypeSchema = {
    type: 'string',
    enum: ['CONSUMABLE', 'NON_CONSUMABLE', 'NON_RENEWING_SUBSCRIPTION']
} as const;

export const IntegerRangeSchema = {
    type: 'object',
    properties: {
        minimum: {
            type: 'integer'
        },
        maximum: {
            type: 'integer'
        }
    }
} as const;

export const InternalBetaStateSchema = {
    type: 'string',
    enum: ['PROCESSING', 'PROCESSING_EXCEPTION', 'MISSING_EXPORT_COMPLIANCE', 'READY_FOR_BETA_TESTING', 'IN_BETA_TESTING', 'EXPIRED', 'IN_EXPORT_COMPLIANCE_REVIEW']
} as const;

export const KidsAgeBandSchema = {
    type: 'string',
    enum: ['FIVE_AND_UNDER', 'SIX_TO_EIGHT', 'NINE_TO_ELEVEN']
} as const;

export const LocationSchema = {
    type: 'object',
    properties: {
        latitude: {
            type: 'number'
        },
        longitude: {
            type: 'number'
        }
    }
} as const;

export const MetricCategorySchema = {
    type: 'string',
    enum: ['HANG', 'LAUNCH', 'MEMORY', 'DISK', 'BATTERY', 'TERMINATION', 'ANIMATION']
} as const;

export const MetricsInsightSchema = {
    type: 'object',
    properties: {
        metricCategory: {
            '$ref': '#/components/schemas/MetricCategory'
        },
        latestVersion: {
            type: 'string'
        },
        metric: {
            type: 'string'
        },
        summaryString: {
            type: 'string'
        },
        referenceVersions: {
            type: 'string'
        },
        maxLatestVersionValue: {
            type: 'number'
        },
        subSystemLabel: {
            type: 'string'
        },
        highImpact: {
            type: 'boolean'
        },
        populations: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    deltaPercentage: {
                        type: 'number'
                    },
                    percentile: {
                        type: 'string'
                    },
                    summaryString: {
                        type: 'string'
                    },
                    referenceAverageValue: {
                        type: 'number'
                    },
                    latestVersionValue: {
                        type: 'number'
                    },
                    device: {
                        type: 'string'
                    }
                }
            }
        }
    }
} as const;

export const PhasedReleaseStateSchema = {
    type: 'string',
    enum: ['INACTIVE', 'ACTIVE', 'PAUSED', 'COMPLETE']
} as const;

export const PlatformSchema = {
    type: 'string',
    enum: ['IOS', 'MAC_OS', 'TV_OS', 'VISION_OS']
} as const;

export const PreviewFrameImageSchema = {
    type: 'object',
    properties: {
        image: {
            '$ref': '#/components/schemas/ImageAsset'
        },
        state: {
            '$ref': '#/components/schemas/AppMediaPreviewFrameImageState'
        }
    }
} as const;

export const PreviewTypeSchema = {
    type: 'string',
    enum: ['IPHONE_67', 'IPHONE_61', 'IPHONE_65', 'IPHONE_58', 'IPHONE_55', 'IPHONE_47', 'IPHONE_40', 'IPHONE_35', 'IPAD_PRO_3GEN_129', 'IPAD_PRO_3GEN_11', 'IPAD_PRO_129', 'IPAD_105', 'IPAD_97', 'DESKTOP', 'APPLE_TV', 'APPLE_VISION_PRO']
} as const;

export const PropertySchema = {
    type: 'object',
    properties: {
        key: {
            type: 'string'
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const ScmProviderTypeSchema = {
    type: 'object',
    properties: {
        kind: {
            type: 'string',
            enum: ['BITBUCKET_CLOUD', 'BITBUCKET_SERVER', 'GITHUB_CLOUD', 'GITHUB_ENTERPRISE', 'GITLAB_CLOUD', 'GITLAB_SELF_MANAGED']
        },
        displayName: {
            type: 'string'
        },
        isOnPremise: {
            type: 'boolean'
        }
    }
} as const;

export const ScreenshotDisplayTypeSchema = {
    type: 'string',
    enum: ['APP_IPHONE_67', 'APP_IPHONE_61', 'APP_IPHONE_65', 'APP_IPHONE_58', 'APP_IPHONE_55', 'APP_IPHONE_47', 'APP_IPHONE_40', 'APP_IPHONE_35', 'APP_IPAD_PRO_3GEN_129', 'APP_IPAD_PRO_3GEN_11', 'APP_IPAD_PRO_129', 'APP_IPAD_105', 'APP_IPAD_97', 'APP_DESKTOP', 'APP_WATCH_ULTRA', 'APP_WATCH_SERIES_10', 'APP_WATCH_SERIES_7', 'APP_WATCH_SERIES_4', 'APP_WATCH_SERIES_3', 'APP_APPLE_TV', 'APP_APPLE_VISION_PRO', 'IMESSAGE_APP_IPHONE_67', 'IMESSAGE_APP_IPHONE_61', 'IMESSAGE_APP_IPHONE_65', 'IMESSAGE_APP_IPHONE_58', 'IMESSAGE_APP_IPHONE_55', 'IMESSAGE_APP_IPHONE_47', 'IMESSAGE_APP_IPHONE_40', 'IMESSAGE_APP_IPAD_PRO_3GEN_129', 'IMESSAGE_APP_IPAD_PRO_3GEN_11', 'IMESSAGE_APP_IPAD_PRO_129', 'IMESSAGE_APP_IPAD_105', 'IMESSAGE_APP_IPAD_97']
} as const;

export const SubscriptionCustomerEligibilitySchema = {
    type: 'string',
    enum: ['NEW', 'EXISTING', 'EXPIRED']
} as const;

export const SubscriptionGracePeriodDurationSchema = {
    type: 'string',
    enum: ['THREE_DAYS', 'SIXTEEN_DAYS', 'TWENTY_EIGHT_DAYS']
} as const;

export const SubscriptionOfferDurationSchema = {
    type: 'string',
    enum: ['THREE_DAYS', 'ONE_WEEK', 'TWO_WEEKS', 'ONE_MONTH', 'TWO_MONTHS', 'THREE_MONTHS', 'SIX_MONTHS', 'ONE_YEAR']
} as const;

export const SubscriptionOfferEligibilitySchema = {
    type: 'string',
    enum: ['STACK_WITH_INTRO_OFFERS', 'REPLACE_INTRO_OFFERS']
} as const;

export const SubscriptionOfferModeSchema = {
    type: 'string',
    enum: ['PAY_AS_YOU_GO', 'PAY_UP_FRONT', 'FREE_TRIAL']
} as const;

export const SubscriptionStatusUrlVersionSchema = {
    type: 'string',
    enum: ['V1', 'V2']
} as const;

export const TerritoryCodeSchema = {
    type: 'string',
    enum: ['ABW', 'AFG', 'AGO', 'AIA', 'ALB', 'AND', 'ANT', 'ARE', 'ARG', 'ARM', 'ASM', 'ATG', 'AUS', 'AUT', 'AZE', 'BDI', 'BEL', 'BEN', 'BES', 'BFA', 'BGD', 'BGR', 'BHR', 'BHS', 'BIH', 'BLR', 'BLZ', 'BMU', 'BOL', 'BRA', 'BRB', 'BRN', 'BTN', 'BWA', 'CAF', 'CAN', 'CHE', 'CHL', 'CHN', 'CIV', 'CMR', 'COD', 'COG', 'COK', 'COL', 'COM', 'CPV', 'CRI', 'CUB', 'CUW', 'CXR', 'CYM', 'CYP', 'CZE', 'DEU', 'DJI', 'DMA', 'DNK', 'DOM', 'DZA', 'ECU', 'EGY', 'ERI', 'ESP', 'EST', 'ETH', 'FIN', 'FJI', 'FLK', 'FRA', 'FRO', 'FSM', 'GAB', 'GBR', 'GEO', 'GGY', 'GHA', 'GIB', 'GIN', 'GLP', 'GMB', 'GNB', 'GNQ', 'GRC', 'GRD', 'GRL', 'GTM', 'GUF', 'GUM', 'GUY', 'HKG', 'HND', 'HRV', 'HTI', 'HUN', 'IDN', 'IMN', 'IND', 'IRL', 'IRQ', 'ISL', 'ISR', 'ITA', 'JAM', 'JEY', 'JOR', 'JPN', 'KAZ', 'KEN', 'KGZ', 'KHM', 'KIR', 'KNA', 'KOR', 'KWT', 'LAO', 'LBN', 'LBR', 'LBY', 'LCA', 'LIE', 'LKA', 'LSO', 'LTU', 'LUX', 'LVA', 'MAC', 'MAR', 'MCO', 'MDA', 'MDG', 'MDV', 'MEX', 'MHL', 'MKD', 'MLI', 'MLT', 'MMR', 'MNE', 'MNG', 'MNP', 'MOZ', 'MRT', 'MSR', 'MTQ', 'MUS', 'MWI', 'MYS', 'MYT', 'NAM', 'NCL', 'NER', 'NFK', 'NGA', 'NIC', 'NIU', 'NLD', 'NOR', 'NPL', 'NRU', 'NZL', 'OMN', 'PAK', 'PAN', 'PER', 'PHL', 'PLW', 'PNG', 'POL', 'PRI', 'PRT', 'PRY', 'PSE', 'PYF', 'QAT', 'REU', 'ROU', 'RUS', 'RWA', 'SAU', 'SEN', 'SGP', 'SHN', 'SLB', 'SLE', 'SLV', 'SMR', 'SOM', 'SPM', 'SRB', 'SSD', 'STP', 'SUR', 'SVK', 'SVN', 'SWE', 'SWZ', 'SXM', 'SYC', 'TCA', 'TCD', 'TGO', 'THA', 'TJK', 'TKM', 'TLS', 'TON', 'TTO', 'TUN', 'TUR', 'TUV', 'TWN', 'TZA', 'UGA', 'UKR', 'UMI', 'URY', 'USA', 'UZB', 'VAT', 'VCT', 'VEN', 'VGB', 'VIR', 'VNM', 'VUT', 'WLF', 'WSM', 'YEM', 'ZAF', 'ZMB', 'ZWE']
} as const;

export const UploadOperationSchema = {
    type: 'object',
    properties: {
        method: {
            type: 'string'
        },
        url: {
            type: 'string'
        },
        length: {
            type: 'integer'
        },
        offset: {
            type: 'integer'
        },
        requestHeaders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/HttpHeader'
            }
        }
    }
} as const;

export const UserRoleSchema = {
    type: 'string',
    enum: ['ADMIN', 'FINANCE', 'ACCOUNT_HOLDER', 'SALES', 'MARKETING', 'APP_MANAGER', 'DEVELOPER', 'ACCESS_TO_REPORTS', 'CUSTOMER_SUPPORT', 'CREATE_APPS', 'CLOUD_MANAGED_DEVELOPER_ID', 'CLOUD_MANAGED_APP_DISTRIBUTION', 'GENERATE_INDIVIDUAL_KEYS']
} as const;

export const csvSchema = {
    type: 'string'
} as const;

export const diagnosticLogsSchema = {
    type: 'object',
    properties: {
        productData: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    signatureId: {
                        type: 'string'
                    },
                    diagnosticInsights: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                insightsURL: {
                                    type: 'string'
                                },
                                insightsCategory: {
                                    type: 'string'
                                },
                                insightsString: {
                                    type: 'string'
                                }
                            }
                        }
                    },
                    diagnosticLogs: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                callStackTree: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            callStackPerThread: {
                                                type: 'boolean'
                                            },
                                            callStacks: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        callStackRootFrames: {
                                                            type: 'array',
                                                            items: {
                                                                '$ref': '#/components/schemas/DiagnosticLogCallStackNode'
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                diagnosticMetaData: {
                                    type: 'object',
                                    properties: {
                                        bundleId: {
                                            type: 'string'
                                        },
                                        event: {
                                            type: 'string'
                                        },
                                        osVersion: {
                                            type: 'string'
                                        },
                                        appVersion: {
                                            type: 'string'
                                        },
                                        writesCaused: {
                                            type: 'string'
                                        },
                                        deviceType: {
                                            type: 'string'
                                        },
                                        platformArchitecture: {
                                            type: 'string'
                                        },
                                        eventDetail: {
                                            type: 'string'
                                        },
                                        buildVersion: {
                                            type: 'string'
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        version: {
            type: 'string'
        }
    }
} as const;

export const gzipSchema = {
    type: 'string',
    format: 'binary'
} as const;

export const xcodeMetricsSchema = {
    type: 'object',
    properties: {
        version: {
            type: 'string'
        },
        insights: {
            type: 'object',
            properties: {
                trendingUp: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/MetricsInsight'
                    }
                },
                regressions: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/MetricsInsight'
                    }
                }
            }
        },
        productData: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    platform: {
                        type: 'string'
                    },
                    metricCategories: {
                        type: 'array',
                        items: {
                            type: 'object',
                            properties: {
                                identifier: {
                                    '$ref': '#/components/schemas/MetricCategory'
                                },
                                metrics: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            identifier: {
                                                type: 'string'
                                            },
                                            goalKeys: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        goalKey: {
                                                            type: 'string'
                                                        },
                                                        lowerBound: {
                                                            type: 'integer'
                                                        },
                                                        upperBound: {
                                                            type: 'integer'
                                                        }
                                                    }
                                                }
                                            },
                                            unit: {
                                                type: 'object',
                                                properties: {
                                                    identifier: {
                                                        type: 'string'
                                                    },
                                                    displayName: {
                                                        type: 'string'
                                                    }
                                                }
                                            },
                                            datasets: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    properties: {
                                                        filterCriteria: {
                                                            type: 'object',
                                                            properties: {
                                                                percentile: {
                                                                    type: 'string'
                                                                },
                                                                device: {
                                                                    type: 'string'
                                                                },
                                                                deviceMarketingName: {
                                                                    type: 'string'
                                                                }
                                                            }
                                                        },
                                                        points: {
                                                            type: 'array',
                                                            items: {
                                                                type: 'object',
                                                                properties: {
                                                                    version: {
                                                                        type: 'string'
                                                                    },
                                                                    value: {
                                                                        type: 'number'
                                                                    },
                                                                    errorMargin: {
                                                                        type: 'number'
                                                                    },
                                                                    percentageBreakdown: {
                                                                        type: 'object',
                                                                        properties: {
                                                                            value: {
                                                                                type: 'number'
                                                                            },
                                                                            subSystemLabel: {
                                                                                type: 'string'
                                                                            }
                                                                        }
                                                                    },
                                                                    goal: {
                                                                        type: 'string'
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
} as const;